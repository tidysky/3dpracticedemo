import {
  ArcballControls,
  AsciiEffect,
  DRACOLoader,
  DecalGeometry,
  DeviceOrientationControls,
  EXRLoader,
  EffectComposer,
  FBXLoader,
  FirstPersonControls,
  Flow,
  FlyControls,
  FontLoader,
  FullScreenQuad,
  GLTFLoader,
  GammaCorrectionShader,
  GroundProjectedEnv,
  HorizontalBlurShader,
  KTX2Loader,
  Line2,
  LineGeometry,
  LineMaterial,
  LineSegments2,
  LineSegmentsGeometry,
  MapControls,
  MarchingCubes,
  MeshSurfaceSampler,
  MeshoptDecoder,
  OrbitControls,
  PointerLockControls,
  RGBELoader,
  RenderPass,
  SVGLoader,
  SelectionBox,
  ShaderPass,
  SimplexNoise,
  SkeletonUtils,
  Sky,
  TextGeometry,
  TrackballControls,
  TransformControls,
  VerticalBlurShader,
  mergeVertices,
  toCreasedNormals
} from "./chunk-OD2WYOIH.js";
import {
  require_prop_types,
  shallow,
  subscribeWithSelector,
  useGesture
} from "./chunk-BN5RQWWK.js";
import {
  require_client
} from "./chunk-CMJTB2EU.js";
import {
  animated,
  useSpring
} from "./chunk-OVIARIHN.js";
import {
  addAfterEffect,
  addEffect,
  applyProps,
  context,
  createPortal,
  extend,
  useFrame,
  useLoader,
  useThree
} from "./chunk-XU5R6TQV.js";
import {
  _extends,
  create
} from "./chunk-UYWRPOP3.js";
import {
  AdditiveBlending,
  AlwaysStencilFunc,
  AnimationMixer,
  AudioListener,
  AudioLoader,
  BackSide,
  Box3,
  BufferAttribute,
  BufferGeometry,
  ByteType,
  Camera,
  CameraHelper,
  CanvasTexture,
  CatmullRomCurve3,
  Color,
  CubeCamera,
  CubeReflectionMapping,
  CubeTextureLoader,
  CubicBezierCurve3,
  CustomBlending,
  CylinderGeometry,
  DataTexture,
  DefaultLoadingManager,
  DepthFormat,
  DepthTexture,
  DoubleSide,
  DynamicDrawUsage,
  EdgesGeometry,
  EqualStencilFunc,
  EquirectangularReflectionMapping,
  Euler,
  EventDispatcher,
  Float32BufferAttribute,
  FloatType,
  FrontSide,
  Frustum,
  Group,
  HalfFloatType,
  InstancedBufferAttribute,
  InstancedBufferGeometry,
  IntType,
  KeepStencilOp,
  Line3,
  LinearEncoding,
  LinearFilter,
  LinearMipmapLinearFilter,
  Material,
  MathUtils,
  Matrix3,
  Matrix4,
  Mesh,
  MeshBasicMaterial,
  MeshDepthMaterial,
  MeshDistanceMaterial,
  MeshLambertMaterial,
  MeshNormalMaterial,
  MeshPhysicalMaterial,
  MeshStandardMaterial,
  NearestFilter,
  NoBlending,
  NoToneMapping,
  NotEqualStencilFunc,
  Object3D,
  OneFactor,
  OrthographicCamera,
  PerspectiveCamera,
  Plane,
  PlaneGeometry,
  PointsMaterial,
  QuadraticBezierCurve3,
  Quaternion,
  REVISION,
  RGBADepthPacking,
  RGBAFormat,
  RGBAIntegerFormat,
  RGFormat,
  RGIntegerFormat,
  Ray,
  Raycaster,
  RedFormat,
  RedIntegerFormat,
  RepeatWrapping,
  ReplaceStencilOp,
  Scene,
  ShaderChunk,
  ShaderMaterial,
  Shape,
  ShortType,
  Sphere,
  Spherical,
  SrcAlphaFactor,
  Texture,
  TextureLoader,
  Triangle,
  Uniform,
  UniformsLib,
  UniformsUtils,
  UnsignedByteType,
  UnsignedIntType,
  UnsignedShortType,
  Vector2,
  Vector3,
  Vector4,
  VideoTexture,
  WebGLCubeRenderTarget,
  WebGLRenderTarget,
  three_module_exports
} from "./chunk-RI5FDDU7.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __commonJS,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/lodash.pick/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.pick/index.js"(exports, module) {
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayMap(array, iteratee) {
      var index2 = -1, length3 = array ? array.length : 0, result = Array(length3);
      while (++index2 < length3) {
        result[index2] = iteratee(array[index2], index2, array);
      }
      return result;
    }
    function arrayPush(array, values) {
      var index2 = -1, length3 = values.length, offset = array.length;
      while (++index2 < length3) {
        array[offset + index2] = values[index2];
      }
      return array;
    }
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var Symbol2 = root.Symbol;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    var nativeMax = Math.max;
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index2 = -1, length3 = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index2 < length3) {
        var value = array[index2];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    function basePick(object, props) {
      object = Object(object);
      return basePickBy(object, props, function(value, key) {
        return key in object;
      });
    }
    function basePickBy(object, props, predicate) {
      var index2 = -1, length3 = props.length, result = {};
      while (++index2 < length3) {
        var key = props[index2], value = object[key];
        if (predicate(value, key)) {
          result[key] = value;
        }
      }
      return result;
    }
    function baseRest(func, start) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index2 = -1, length3 = nativeMax(args.length - start, 0), array = Array(length3);
        while (++index2 < length3) {
          array[index2] = args[start + index2];
        }
        index2 = -1;
        var otherArgs = Array(start + 1);
        while (++index2 < start) {
          otherArgs[index2] = args[index2];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }
    function isFlattenable(value) {
      return isArray3(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray3 = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction3(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction3(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    var pick3 = baseRest(function(object, props) {
      return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
    });
    module.exports = pick3;
  }
});

// node_modules/lodash.omit/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.omit/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayIncludes(array, value) {
      var length3 = array ? array.length : 0;
      return !!length3 && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
      var index2 = -1, length3 = array ? array.length : 0;
      while (++index2 < length3) {
        if (comparator(value, array[index2])) {
          return true;
        }
      }
      return false;
    }
    function arrayMap(array, iteratee) {
      var index2 = -1, length3 = array ? array.length : 0, result = Array(length3);
      while (++index2 < length3) {
        result[index2] = iteratee(array[index2], index2, array);
      }
      return result;
    }
    function arrayPush(array, values) {
      var index2 = -1, length3 = values.length, offset = array.length;
      while (++index2 < length3) {
        array[offset + index2] = values[index2];
      }
      return array;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length3 = array.length, index2 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index2-- : ++index2 < length3) {
        if (predicate(array[index2], index2, array)) {
          return index2;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index2 = fromIndex - 1, length3 = array.length;
      while (++index2 < length3) {
        if (array[index2] === value) {
          return index2;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseTimes(n3, iteratee) {
      var index2 = -1, result = Array(n3);
      while (++index2 < n3) {
        result[index2] = iteratee(index2);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e3) {
        }
      }
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root.Symbol;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeMax = Math.max;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    function Hash(entries) {
      var index2 = -1, length3 = entries ? entries.length : 0;
      this.clear();
      while (++index2 < length3) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index2 = -1, length3 = entries ? entries.length : 0;
      this.clear();
      while (++index2 < length3) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      if (index2 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index2 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index2, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      return index2 < 0 ? void 0 : data[index2][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      if (index2 < 0) {
        data.push([key, value]);
      } else {
        data[index2][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index2 = -1, length3 = entries ? entries.length : 0;
      this.clear();
      while (++index2 < length3) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index2 = -1, length3 = values ? values.length : 0;
      this.__data__ = new MapCache();
      while (++index2 < length3) {
        this.add(values[index2]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function arrayLikeKeys(value, inherited) {
      var result = isArray3(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length3 = result.length, skipIndexes = !!length3;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length3)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length3 = array.length;
      while (length3--) {
        if (eq(array[length3][0], key)) {
          return length3;
        }
      }
      return -1;
    }
    function baseDifference(array, values, iteratee, comparator) {
      var index2 = -1, includes = arrayIncludes, isCommon = true, length3 = array.length, result = [], valuesLength = values.length;
      if (!length3) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
        while (++index2 < length3) {
          var value = array[index2], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
      return result;
    }
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index2 = -1, length3 = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index2 < length3) {
        var value = array[index2];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray3(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction3(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function basePick(object, props) {
      object = Object(object);
      return basePickBy(object, props, function(value, key) {
        return key in object;
      });
    }
    function basePickBy(object, props, predicate) {
      var index2 = -1, length3 = props.length, result = {};
      while (++index2 < length3) {
        var key = props[index2], value = object[key];
        if (predicate(value, key)) {
          result[key] = value;
        }
      }
      return result;
    }
    function baseRest(func, start) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index2 = -1, length3 = nativeMax(args.length - start, 0), array = Array(length3);
        while (++index2 < length3) {
          array[index2] = args[start + index2];
        }
        index2 = -1;
        var otherArgs = Array(start + 1);
        while (++index2 < start) {
          otherArgs[index2] = args[index2];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    function getMapData(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    function isFlattenable(value) {
      return isArray3(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    function isIndex(value, length3) {
      length3 = length3 == null ? MAX_SAFE_INTEGER : length3;
      return !!length3 && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length3);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e3) {
        }
        try {
          return func + "";
        } catch (e3) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray3 = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction3(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction3(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var omit2 = baseRest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props, 1), toKey);
      return basePick(object, baseDifference(getAllKeysIn(object), props));
    });
    function stubArray() {
      return [];
    }
    module.exports = omit2;
  }
});

// node_modules/stats.js/build/stats.min.js
var require_stats_min = __commonJS({
  "node_modules/stats.js/build/stats.min.js"(exports, module) {
    (function(f3, e3) {
      "object" === typeof exports && "undefined" !== typeof module ? module.exports = e3() : "function" === typeof define && define.amd ? define(e3) : f3.Stats = e3();
    })(exports, function() {
      var f3 = function() {
        function e3(a7) {
          c5.appendChild(a7.dom);
          return a7;
        }
        function u2(a7) {
          for (var d3 = 0; d3 < c5.children.length; d3++) c5.children[d3].style.display = d3 === a7 ? "block" : "none";
          l3 = a7;
        }
        var l3 = 0, c5 = document.createElement("div");
        c5.style.cssText = "position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";
        c5.addEventListener("click", function(a7) {
          a7.preventDefault();
          u2(++l3 % c5.children.length);
        }, false);
        var k2 = (performance || Date).now(), g2 = k2, a6 = 0, r3 = e3(new f3.Panel("FPS", "#0ff", "#002")), h2 = e3(new f3.Panel("MS", "#0f0", "#020"));
        if (self.performance && self.performance.memory) var t3 = e3(new f3.Panel("MB", "#f08", "#201"));
        u2(0);
        return { REVISION: 16, dom: c5, addPanel: e3, showPanel: u2, begin: function() {
          k2 = (performance || Date).now();
        }, end: function() {
          a6++;
          var c6 = (performance || Date).now();
          h2.update(c6 - k2, 200);
          if (c6 > g2 + 1e3 && (r3.update(1e3 * a6 / (c6 - g2), 100), g2 = c6, a6 = 0, t3)) {
            var d3 = performance.memory;
            t3.update(d3.usedJSHeapSize / 1048576, d3.jsHeapSizeLimit / 1048576);
          }
          return c6;
        }, update: function() {
          k2 = this.end();
        }, domElement: c5, setMode: u2 };
      };
      f3.Panel = function(e3, f4, l3) {
        var c5 = Infinity, k2 = 0, g2 = Math.round, a6 = g2(window.devicePixelRatio || 1), r3 = 80 * a6, h2 = 48 * a6, t3 = 3 * a6, v5 = 2 * a6, d3 = 3 * a6, m2 = 15 * a6, n3 = 74 * a6, p3 = 30 * a6, q3 = document.createElement("canvas");
        q3.width = r3;
        q3.height = h2;
        q3.style.cssText = "width:80px;height:48px";
        var b5 = q3.getContext("2d");
        b5.font = "bold " + 9 * a6 + "px Helvetica,Arial,sans-serif";
        b5.textBaseline = "top";
        b5.fillStyle = l3;
        b5.fillRect(0, 0, r3, h2);
        b5.fillStyle = f4;
        b5.fillText(e3, t3, v5);
        b5.fillRect(d3, m2, n3, p3);
        b5.fillStyle = l3;
        b5.globalAlpha = 0.9;
        b5.fillRect(d3, m2, n3, p3);
        return { dom: q3, update: function(h3, w2) {
          c5 = Math.min(c5, h3);
          k2 = Math.max(k2, h3);
          b5.fillStyle = l3;
          b5.globalAlpha = 1;
          b5.fillRect(0, 0, r3, m2);
          b5.fillStyle = f4;
          b5.fillText(g2(h3) + " " + e3 + " (" + g2(c5) + "-" + g2(k2) + ")", t3, v5);
          b5.drawImage(q3, d3 + a6, m2, n3 - a6, p3, d3, m2, n3 - a6, p3);
          b5.fillRect(d3 + n3 - a6, m2, a6, p3);
          b5.fillStyle = l3;
          b5.globalAlpha = 0.9;
          b5.fillRect(d3 + n3 - a6, m2, a6, g2((1 - h3 / w2) * p3));
        } };
      };
      return f3;
    });
  }
});

// node_modules/lodash.clamp/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.clamp/index.js"(exports, module) {
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== void 0) {
          number = number <= upper ? number : upper;
        }
        if (lower !== void 0) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    function clamp4(number, lower, upper) {
      if (upper === void 0) {
        upper = lower;
        lower = void 0;
      }
      if (upper !== void 0) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== void 0) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }
    module.exports = clamp4;
  }
});

// node_modules/@react-three/drei/web/Html.js
var React = __toESM(require_react());
var ReactDOM = __toESM(require_client());
var v1 = new Vector3();
var v2 = new Vector3();
var v3 = new Vector3();
function defaultCalculatePosition(el, camera, size) {
  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  objectPos.project(camera);
  const widthHalf = size.width / 2;
  const heightHalf = size.height / 2;
  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];
}
function isObjectBehindCamera(el, camera) {
  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
  const deltaCamObj = objectPos.sub(cameraPos);
  const camDir = camera.getWorldDirection(v3);
  return deltaCamObj.angleTo(camDir) > Math.PI / 2;
}
function isObjectVisible(el, camera, raycaster, occlude) {
  const elPos = v1.setFromMatrixPosition(el.matrixWorld);
  const screenPos = elPos.clone();
  screenPos.project(camera);
  raycaster.setFromCamera(screenPos, camera);
  const intersects = raycaster.intersectObjects(occlude, true);
  if (intersects.length) {
    const intersectionDistance = intersects[0].distance;
    const pointDistance = elPos.distanceTo(raycaster.ray.origin);
    return pointDistance < intersectionDistance;
  }
  return true;
}
function objectScale(el, camera) {
  if (camera instanceof OrthographicCamera) {
    return camera.zoom;
  } else if (camera instanceof PerspectiveCamera) {
    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    const vFOV = camera.fov * Math.PI / 180;
    const dist = objectPos.distanceTo(cameraPos);
    const scaleFOV = 2 * Math.tan(vFOV / 2) * dist;
    return 1 / scaleFOV;
  } else {
    return 1;
  }
}
function objectZIndex(el, camera, zIndexRange) {
  if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {
    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    const dist = objectPos.distanceTo(cameraPos);
    const A2 = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);
    const B2 = zIndexRange[1] - A2 * camera.far;
    return Math.round(A2 * dist + B2);
  }
  return void 0;
}
var epsilon = (value) => Math.abs(value) < 1e-10 ? 0 : value;
function getCSSMatrix(matrix3, multipliers, prepend = "") {
  let matrix3d = "matrix3d(";
  for (let i4 = 0; i4 !== 16; i4++) {
    matrix3d += epsilon(multipliers[i4] * matrix3.elements[i4]) + (i4 !== 15 ? "," : ")");
  }
  return prepend + matrix3d;
}
var getCameraCSSMatrix = /* @__PURE__ */ ((multipliers) => {
  return (matrix3) => getCSSMatrix(matrix3, multipliers);
})([1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1]);
var getObjectCSSMatrix = /* @__PURE__ */ ((scaleMultipliers) => {
  return (matrix3, factor) => getCSSMatrix(matrix3, scaleMultipliers(factor), "translate(-50%,-50%)");
})((f3) => [1 / f3, 1 / f3, 1 / f3, 1, -1 / f3, -1 / f3, -1 / f3, -1, 1 / f3, 1 / f3, 1 / f3, 1, 1, 1, 1, 1]);
function isRefObject(ref) {
  return ref && typeof ref === "object" && "current" in ref;
}
var Html = React.forwardRef(({
  children,
  eps: eps2 = 1e-3,
  style,
  className,
  prepend,
  center: center2,
  fullscreen,
  portal,
  distanceFactor,
  sprite = false,
  transform = false,
  occlude,
  onOcclude,
  castShadow,
  receiveShadow,
  material,
  geometry: geometry2,
  zIndexRange = [16777271, 0],
  calculatePosition = defaultCalculatePosition,
  as: as2 = "div",
  wrapperClass,
  pointerEvents = "auto",
  ...props
}, ref) => {
  const {
    gl,
    camera,
    scene,
    size,
    raycaster,
    events,
    viewport
  } = useThree();
  const [el] = React.useState(() => document.createElement(as2));
  const root = React.useRef();
  const group = React.useRef(null);
  const oldZoom = React.useRef(0);
  const oldPosition = React.useRef([0, 0]);
  const transformOuterRef = React.useRef(null);
  const transformInnerRef = React.useRef(null);
  const target2 = (portal == null ? void 0 : portal.current) || events.connected || gl.domElement.parentNode;
  const occlusionMeshRef = React.useRef(null);
  const isMeshSizeSet = React.useRef(false);
  const isRayCastOcclusion = React.useMemo(() => {
    return occlude && occlude !== "blending" || Array.isArray(occlude) && occlude.length && isRefObject(occlude[0]);
  }, [occlude]);
  React.useLayoutEffect(() => {
    const el2 = gl.domElement;
    if (occlude && occlude === "blending") {
      el2.style.zIndex = `${Math.floor(zIndexRange[0] / 2)}`;
      el2.style.position = "absolute";
      el2.style.pointerEvents = "none";
    } else {
      el2.style.zIndex = null;
      el2.style.position = null;
      el2.style.pointerEvents = null;
    }
  }, [occlude]);
  React.useLayoutEffect(() => {
    if (group.current) {
      const currentRoot = root.current = ReactDOM.createRoot(el);
      scene.updateMatrixWorld();
      if (transform) {
        el.style.cssText = `position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;`;
      } else {
        const vec = calculatePosition(group.current, camera, size);
        el.style.cssText = `position:absolute;top:0;left:0;transform:translate3d(${vec[0]}px,${vec[1]}px,0);transform-origin:0 0;`;
      }
      if (target2) {
        if (prepend) target2.prepend(el);
        else target2.appendChild(el);
      }
      return () => {
        if (target2) target2.removeChild(el);
        currentRoot.unmount();
      };
    }
  }, [target2, transform]);
  React.useLayoutEffect(() => {
    if (wrapperClass) el.className = wrapperClass;
  }, [wrapperClass]);
  const styles2 = React.useMemo(() => {
    if (transform) {
      return {
        position: "absolute",
        top: 0,
        left: 0,
        width: size.width,
        height: size.height,
        transformStyle: "preserve-3d",
        pointerEvents: "none"
      };
    } else {
      return {
        position: "absolute",
        transform: center2 ? "translate3d(-50%,-50%,0)" : "none",
        ...fullscreen && {
          top: -size.height / 2,
          left: -size.width / 2,
          width: size.width,
          height: size.height
        },
        ...style
      };
    }
  }, [style, center2, fullscreen, size, transform]);
  const transformInnerStyles = React.useMemo(() => ({
    position: "absolute",
    pointerEvents
  }), [pointerEvents]);
  React.useLayoutEffect(() => {
    isMeshSizeSet.current = false;
    if (transform) {
      var _root$current;
      (_root$current = root.current) == null ? void 0 : _root$current.render(React.createElement("div", {
        ref: transformOuterRef,
        style: styles2
      }, React.createElement("div", {
        ref: transformInnerRef,
        style: transformInnerStyles
      }, React.createElement("div", {
        ref,
        className,
        style,
        children
      }))));
    } else {
      var _root$current2;
      (_root$current2 = root.current) == null ? void 0 : _root$current2.render(React.createElement("div", {
        ref,
        style: styles2,
        className,
        children
      }));
    }
  });
  const visible = React.useRef(true);
  useFrame((gl2) => {
    if (group.current) {
      camera.updateMatrixWorld();
      group.current.updateWorldMatrix(true, false);
      const vec = transform ? oldPosition.current : calculatePosition(group.current, camera, size);
      if (transform || Math.abs(oldZoom.current - camera.zoom) > eps2 || Math.abs(oldPosition.current[0] - vec[0]) > eps2 || Math.abs(oldPosition.current[1] - vec[1]) > eps2) {
        const isBehindCamera = isObjectBehindCamera(group.current, camera);
        let raytraceTarget = false;
        if (isRayCastOcclusion) {
          if (occlude !== "blending") {
            raytraceTarget = [scene];
          } else if (Array.isArray(occlude)) {
            raytraceTarget = occlude.map((item) => item.current);
          }
        }
        const previouslyVisible = visible.current;
        if (raytraceTarget) {
          const isvisible = isObjectVisible(group.current, camera, raycaster, raytraceTarget);
          visible.current = isvisible && !isBehindCamera;
        } else {
          visible.current = !isBehindCamera;
        }
        if (previouslyVisible !== visible.current) {
          if (onOcclude) onOcclude(!visible.current);
          else el.style.display = visible.current ? "block" : "none";
        }
        const halfRange = Math.floor(zIndexRange[0] / 2);
        const zRange = occlude ? isRayCastOcclusion ? [zIndexRange[0], halfRange] : [halfRange - 1, 0] : zIndexRange;
        el.style.zIndex = `${objectZIndex(group.current, camera, zRange)}`;
        if (transform) {
          const [widthHalf, heightHalf] = [size.width / 2, size.height / 2];
          const fov = camera.projectionMatrix.elements[5] * heightHalf;
          const {
            isOrthographicCamera: isOrthographicCamera3,
            top,
            left,
            bottom,
            right
          } = camera;
          const cameraMatrix = getCameraCSSMatrix(camera.matrixWorldInverse);
          const cameraTransform = isOrthographicCamera3 ? `scale(${fov})translate(${epsilon(-(right + left) / 2)}px,${epsilon((top + bottom) / 2)}px)` : `translateZ(${fov}px)`;
          let matrix3 = group.current.matrixWorld;
          if (sprite) {
            matrix3 = camera.matrixWorldInverse.clone().transpose().copyPosition(matrix3).scale(group.current.scale);
            matrix3.elements[3] = matrix3.elements[7] = matrix3.elements[11] = 0;
            matrix3.elements[15] = 1;
          }
          el.style.width = size.width + "px";
          el.style.height = size.height + "px";
          el.style.perspective = isOrthographicCamera3 ? "" : `${fov}px`;
          if (transformOuterRef.current && transformInnerRef.current) {
            transformOuterRef.current.style.transform = `${cameraTransform}${cameraMatrix}translate(${widthHalf}px,${heightHalf}px)`;
            transformInnerRef.current.style.transform = getObjectCSSMatrix(matrix3, 1 / ((distanceFactor || 10) / 400));
          }
        } else {
          const scale4 = distanceFactor === void 0 ? 1 : objectScale(group.current, camera) * distanceFactor;
          el.style.transform = `translate3d(${vec[0]}px,${vec[1]}px,0) scale(${scale4})`;
        }
        oldPosition.current = vec;
        oldZoom.current = camera.zoom;
      }
    }
    if (!isRayCastOcclusion && occlusionMeshRef.current && !isMeshSizeSet.current) {
      if (transform) {
        if (transformOuterRef.current) {
          const el2 = transformOuterRef.current.children[0];
          if (el2 != null && el2.clientWidth && el2 != null && el2.clientHeight) {
            const {
              isOrthographicCamera: isOrthographicCamera3
            } = camera;
            if (isOrthographicCamera3 || geometry2) {
              if (props.scale) {
                if (!Array.isArray(props.scale)) {
                  occlusionMeshRef.current.scale.setScalar(1 / props.scale);
                } else if (props.scale instanceof Vector3) {
                  occlusionMeshRef.current.scale.copy(props.scale.clone().divideScalar(1));
                } else {
                  occlusionMeshRef.current.scale.set(1 / props.scale[0], 1 / props.scale[1], 1 / props.scale[2]);
                }
              }
            } else {
              const ratio = (distanceFactor || 10) / 400;
              const w2 = el2.clientWidth * ratio;
              const h2 = el2.clientHeight * ratio;
              occlusionMeshRef.current.scale.set(w2, h2, 1);
            }
            isMeshSizeSet.current = true;
          }
        }
      } else {
        const ele = el.children[0];
        if (ele != null && ele.clientWidth && ele != null && ele.clientHeight) {
          const ratio = 1 / viewport.factor;
          const w2 = ele.clientWidth * ratio;
          const h2 = ele.clientHeight * ratio;
          occlusionMeshRef.current.scale.set(w2, h2, 1);
          isMeshSizeSet.current = true;
        }
        occlusionMeshRef.current.lookAt(gl2.camera.position);
      }
    }
  });
  const shaders = React.useMemo(() => ({
    vertexShader: !transform ? (
      /* glsl */
      `
          /*
            This shader is from the THREE's SpriteMaterial.
            We need to turn the backing plane into a Sprite
            (make it always face the camera) if "transfrom" 
            is false. 
          */
          #include <common>

          void main() {
            vec2 center = vec2(0., 1.);
            float rotation = 0.0;
            
            // This is somewhat arbitrary, but it seems to work well
            // Need to figure out how to derive this dynamically if it even matters
            float size = 0.03;

            vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
            vec2 scale;
            scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
            scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );

            bool isPerspective = isPerspectiveMatrix( projectionMatrix );
            if ( isPerspective ) scale *= - mvPosition.z;

            vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale * size;
            vec2 rotatedPosition;
            rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
            rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
            mvPosition.xy += rotatedPosition;

            gl_Position = projectionMatrix * mvPosition;
          }
      `
    ) : void 0,
    fragmentShader: (
      /* glsl */
      `
        void main() {
          gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
        }
      `
    )
  }), [transform]);
  return React.createElement("group", _extends({}, props, {
    ref: group
  }), occlude && !isRayCastOcclusion && React.createElement("mesh", {
    castShadow,
    receiveShadow,
    ref: occlusionMeshRef
  }, geometry2 || React.createElement("planeGeometry", null), material || React.createElement("shaderMaterial", {
    side: DoubleSide,
    vertexShader: shaders.vertexShader,
    fragmentShader: shaders.fragmentShader
  })));
});

// node_modules/@react-three/drei/web/CycleRaycast.js
var React2 = __toESM(require_react());
function CycleRaycast({
  onChanged,
  portal,
  preventDefault = true,
  scroll = true,
  keyCode = 9
}) {
  const cycle = React2.useRef(0);
  const setEvents = useThree((state) => state.setEvents);
  const get = useThree((state) => state.get);
  const gl = useThree((state) => state.gl);
  React2.useEffect(() => {
    var _portal$current;
    let hits = [];
    let lastEvent = void 0;
    const prev = get().events.filter;
    const target2 = (_portal$current = portal == null ? void 0 : portal.current) !== null && _portal$current !== void 0 ? _portal$current : gl.domElement.parentNode;
    const renderStatus = () => target2 && onChanged && onChanged(hits, Math.round(cycle.current) % hits.length);
    setEvents({
      filter: (intersections, state) => {
        let clone = [...intersections];
        if (clone.length !== hits.length || !hits.every((hit) => clone.map((e3) => e3.object.uuid).includes(hit.object.uuid))) {
          cycle.current = 0;
          hits = clone;
          renderStatus();
        }
        if (prev) clone = prev(clone, state);
        for (let i4 = 0; i4 < Math.round(cycle.current) % clone.length; i4++) {
          const first2 = clone.shift();
          clone = [...clone, first2];
        }
        return clone;
      }
    });
    const refresh = (fn2) => {
      var _get$events$handlers, _get$events$handlers2;
      cycle.current = fn2(cycle.current);
      (_get$events$handlers = get().events.handlers) == null ? void 0 : _get$events$handlers.onPointerCancel(void 0);
      (_get$events$handlers2 = get().events.handlers) == null ? void 0 : _get$events$handlers2.onPointerMove(lastEvent);
      renderStatus();
    };
    const tabEvent = (event) => {
      if (event.keyCode || event.which === keyCode) {
        if (preventDefault) event.preventDefault();
        if (hits.length > 1) refresh((current) => current + 1);
      }
    };
    const wheelEvent = (event) => {
      if (preventDefault) event.preventDefault();
      let delta = 0;
      if (!event) event = window.event;
      if (event.wheelDelta) delta = event.wheelDelta / 120;
      else if (event.detail) delta = -event.detail / 3;
      if (hits.length > 1) refresh((current) => Math.abs(current - delta));
    };
    const moveEvent = (event) => lastEvent = event;
    document.addEventListener("pointermove", moveEvent, {
      passive: true
    });
    if (scroll) document.addEventListener("wheel", wheelEvent);
    if (keyCode !== void 0) document.addEventListener("keydown", tabEvent);
    return () => {
      setEvents({
        filter: prev
      });
      if (keyCode !== void 0) document.removeEventListener("keydown", tabEvent);
      if (scroll) document.removeEventListener("wheel", wheelEvent);
      document.removeEventListener("pointermove", moveEvent);
    };
  }, [gl, get, setEvents, preventDefault, scroll, keyCode]);
  return null;
}

// node_modules/@react-three/drei/web/useCursor.js
var React3 = __toESM(require_react());
function useCursor(hovered, onPointerOver = "pointer", onPointerOut = "auto") {
  React3.useEffect(() => {
    if (hovered) {
      document.body.style.cursor = onPointerOver;
      return () => void (document.body.style.cursor = onPointerOut);
    }
  }, [hovered]);
}

// node_modules/@react-three/drei/web/Loader.js
var React4 = __toESM(require_react());

// node_modules/@react-three/drei/core/useProgress.js
var saveLastTotalLoaded = 0;
var useProgress = create((set) => {
  DefaultLoadingManager.onStart = (item, loaded, total) => {
    set({
      active: true,
      item,
      loaded,
      total,
      progress: (loaded - saveLastTotalLoaded) / (total - saveLastTotalLoaded) * 100
    });
  };
  DefaultLoadingManager.onLoad = () => {
    set({
      active: false
    });
  };
  DefaultLoadingManager.onError = (item) => set((state) => ({
    errors: [...state.errors, item]
  }));
  DefaultLoadingManager.onProgress = (item, loaded, total) => {
    if (loaded === total) {
      saveLastTotalLoaded = total;
    }
    set({
      active: true,
      item,
      loaded,
      total,
      progress: (loaded - saveLastTotalLoaded) / (total - saveLastTotalLoaded) * 100 || 100
    });
  };
  return {
    errors: [],
    active: false,
    progress: 0,
    item: "",
    loaded: 0,
    total: 0
  };
});

// node_modules/@react-three/drei/web/Loader.js
var defaultDataInterpolation = (p3) => `Loading ${p3.toFixed(2)}%`;
function Loader({
  containerStyles,
  innerStyles,
  barStyles,
  dataStyles,
  dataInterpolation = defaultDataInterpolation,
  initialState = (active) => active
}) {
  const {
    active,
    progress
  } = useProgress();
  const progressRef = React4.useRef(0);
  const rafRef = React4.useRef(0);
  const progressSpanRef = React4.useRef(null);
  const [shown, setShown] = React4.useState(initialState(active));
  React4.useEffect(() => {
    let t3;
    if (active !== shown) t3 = setTimeout(() => setShown(active), 300);
    return () => clearTimeout(t3);
  }, [shown, active]);
  const updateProgress = React4.useCallback(() => {
    if (!progressSpanRef.current) return;
    progressRef.current += (progress - progressRef.current) / 2;
    if (progressRef.current > 0.95 * progress || progress === 100) progressRef.current = progress;
    progressSpanRef.current.innerText = dataInterpolation(progressRef.current);
    if (progressRef.current < progress) rafRef.current = requestAnimationFrame(updateProgress);
  }, [dataInterpolation, progress]);
  React4.useEffect(() => {
    updateProgress();
    return () => cancelAnimationFrame(rafRef.current);
  }, [updateProgress]);
  return shown ? React4.createElement("div", {
    style: {
      ...styles.container,
      opacity: active ? 1 : 0,
      ...containerStyles
    }
  }, React4.createElement("div", null, React4.createElement("div", {
    style: {
      ...styles.inner,
      ...innerStyles
    }
  }, React4.createElement("div", {
    style: {
      ...styles.bar,
      transform: `scaleX(${progress / 100})`,
      ...barStyles
    }
  }), React4.createElement("span", {
    ref: progressSpanRef,
    style: {
      ...styles.data,
      ...dataStyles
    }
  })))) : null;
}
var styles = {
  container: {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    background: "#171717",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    transition: "opacity 300ms ease",
    zIndex: 1e3
  },
  inner: {
    width: 100,
    height: 3,
    background: "#272727",
    textAlign: "center"
  },
  bar: {
    height: 3,
    width: "100%",
    background: "white",
    transition: "transform 200ms",
    transformOrigin: "left center"
  },
  data: {
    display: "inline-block",
    position: "relative",
    fontVariantNumeric: "tabular-nums",
    marginTop: "0.8em",
    color: "#f0f0f0",
    fontSize: "0.6em",
    fontFamily: `-apple-system, BlinkMacSystemFont, "Inter", "Segoe UI", "Helvetica Neue", Helvetica, Arial, Roboto, Ubuntu, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    whiteSpace: "nowrap"
  }
};

// node_modules/@react-three/drei/web/ScrollControls.js
var React5 = __toESM(require_react());
var ReactDOM2 = __toESM(require_client());

// node_modules/react-merge-refs/dist/react-merge-refs.esm.js
function mergeRefs(refs) {
  return function(value) {
    refs.forEach(function(ref) {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref != null) {
        ref.current = value;
      }
    });
  };
}
var react_merge_refs_esm_default = mergeRefs;

// node_modules/maath/dist/objectSpread2-284232a6.esm.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target2) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target2, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target2;
}

// node_modules/maath/dist/isNativeReflectConstruct-5594d075.esm.js
function _setPrototypeOf(o3, p3) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p4) {
    o4.__proto__ = p4;
    return o4;
  };
  return _setPrototypeOf(o3, p3);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e3) {
    return false;
  }
}

// node_modules/maath/dist/matrix-baa530bf.esm.js
function determinant2() {
  for (var _len = arguments.length, terms = new Array(_len), _key = 0; _key < _len; _key++) {
    terms[_key] = arguments[_key];
  }
  var a6 = terms[0], b5 = terms[1], c5 = terms[2], d3 = terms[3];
  return a6 * d3 - b5 * c5;
}
function determinant3() {
  for (var _len2 = arguments.length, terms = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    terms[_key2] = arguments[_key2];
  }
  var a6 = terms[0], b5 = terms[1], c5 = terms[2], d3 = terms[3], e3 = terms[4], f3 = terms[5], g2 = terms[6], h2 = terms[7], i4 = terms[8];
  return a6 * e3 * i4 + b5 * f3 * g2 + c5 * d3 * h2 - c5 * e3 * g2 - b5 * d3 * i4 - a6 * f3 * h2;
}
function determinant4() {
  for (var _len3 = arguments.length, terms = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    terms[_key3] = arguments[_key3];
  }
  terms[0];
  terms[1];
  terms[2];
  terms[3];
  terms[4];
  terms[5];
  terms[6];
  terms[7];
  terms[8];
  terms[9];
  terms[10];
  terms[11];
  terms[12];
  terms[13];
  terms[14];
}
function getMinor(matrix3, r3, c5) {
  var _matrixTranspose = matrix3.clone().transpose();
  var x2 = [];
  var l3 = _matrixTranspose.elements.length;
  var n3 = Math.sqrt(l3);
  for (var i4 = 0; i4 < l3; i4++) {
    var element = _matrixTranspose.elements[i4];
    var row = Math.floor(i4 / n3);
    var col3 = i4 % n3;
    if (row !== r3 - 1 && col3 !== c5 - 1) {
      x2.push(element);
    }
  }
  return determinant3.apply(void 0, x2);
}
function matrixSum3(m1, m2) {
  var sum = [];
  var m1Array = m1.toArray();
  var m2Array = m2.toArray();
  for (var i4 = 0; i4 < m1Array.length; i4++) {
    sum[i4] = m1Array[i4] + m2Array[i4];
  }
  return new Matrix3().fromArray(sum);
}
var matrix = Object.freeze({
  __proto__: null,
  determinant2,
  determinant3,
  determinant4,
  getMinor,
  matrixSum3
});

// node_modules/maath/dist/triangle-b62b9067.esm.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterableToArrayLimit(arr, i4) {
  var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i2 == null) return;
  var _arr = [];
  var _n2 = true;
  var _d = false;
  var _s2, _e2;
  try {
    for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
      _arr.push(_s2.value);
      if (i4 && _arr.length === i4) break;
    }
  } catch (err) {
    _d = true;
    _e2 = err;
  } finally {
    try {
      if (!_n2 && _i2["return"] != null) _i2["return"]();
    } finally {
      if (_d) throw _e2;
    }
  }
  return _arr;
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) arr2[i4] = arr[i4];
  return arr2;
}
function _unsupportedIterableToArray(o3, minLen) {
  if (!o3) return;
  if (typeof o3 === "string") return _arrayLikeToArray(o3, minLen);
  var n3 = Object.prototype.toString.call(o3).slice(8, -1);
  if (n3 === "Object" && o3.constructor) n3 = o3.constructor.name;
  if (n3 === "Map" || n3 === "Set") return Array.from(o3);
  if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3)) return _arrayLikeToArray(o3, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i4) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i4) || _unsupportedIterableToArray(arr, i4) || _nonIterableRest();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a6 = [null];
      a6.push.apply(a6, args2);
      var Constructor = Function.bind.apply(Parent2, a6);
      var instance = new Constructor();
      if (Class2) _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function isPointInTriangle(point, triangle2) {
  var _triangle$ = _slicedToArray(triangle2[0], 2), ax = _triangle$[0], ay = _triangle$[1];
  var _triangle$2 = _slicedToArray(triangle2[1], 2), bx = _triangle$2[0], by = _triangle$2[1];
  var _triangle$3 = _slicedToArray(triangle2[2], 2), cx = _triangle$3[0], cy = _triangle$3[1];
  var _point = _slicedToArray(point, 2), px = _point[0], py = _point[1];
  var matrix3 = new Matrix4();
  matrix3.set(ax, ay, ax * ax + ay * ay, 1, bx, by, bx * bx + by * by, 1, cx, cy, cx * cx + cy * cy, 1, px, py, px * px + py * py, 1);
  return matrix3.determinant() <= 0;
}
function triangleDeterminant(triangle2) {
  var _triangle$4 = _slicedToArray(triangle2[0], 2), x1 = _triangle$4[0], y1 = _triangle$4[1];
  var _triangle$5 = _slicedToArray(triangle2[1], 2), x2 = _triangle$5[0], y2 = _triangle$5[1];
  var _triangle$6 = _slicedToArray(triangle2[2], 2), x3 = _triangle$6[0], y3 = _triangle$6[1];
  return determinant3(x1, y1, 1, x2, y2, 1, x3, y3, 1);
}
function arePointsCollinear(points) {
  return triangleDeterminant(points) === 0;
}
function isTriangleClockwise(triangle2) {
  return triangleDeterminant(triangle2) < 0;
}
function getCircumcircle(triangle2) {
  var _triangle$7 = _slicedToArray(triangle2[0], 2), ax = _triangle$7[0], ay = _triangle$7[1];
  var _triangle$8 = _slicedToArray(triangle2[1], 2), bx = _triangle$8[0], by = _triangle$8[1];
  var _triangle$9 = _slicedToArray(triangle2[2], 2), cx = _triangle$9[0], cy = _triangle$9[1];
  if (arePointsCollinear(triangle2)) return null;
  var m2 = new Matrix4();
  m2.set(1, 1, 1, 1, ax * ax + ay * ay, ax, ay, 1, bx * bx + by * by, bx, by, 1, cx * cx + cy * cy, cx, cy, 1);
  var m11 = getMinor(m2, 1, 1);
  var m13 = getMinor(m2, 1, 3);
  var m12 = getMinor(m2, 1, 2);
  var m14 = getMinor(m2, 1, 4);
  var x0 = 0.5 * (m12 / m11);
  var y0 = 0.5 * (m13 / m11);
  var r22 = x0 * x0 + y0 * y0 + m14 / m11;
  return {
    x: Math.abs(x0) === 0 ? 0 : x0,
    y: Math.abs(y0) === 0 ? 0 : -y0,
    r: Math.sqrt(r22)
  };
}
function isPointInCircumcircle(point, triangle2) {
  var _ref = Array.isArray(triangle2[0]) ? triangle2[0] : triangle2[0].toArray(), _ref2 = _slicedToArray(_ref, 2), ax = _ref2[0], ay = _ref2[1];
  var _ref3 = Array.isArray(triangle2[1]) ? triangle2[1] : triangle2[1].toArray(), _ref4 = _slicedToArray(_ref3, 2), bx = _ref4[0], by = _ref4[1];
  var _ref5 = Array.isArray(triangle2[2]) ? triangle2[2] : triangle2[2].toArray(), _ref6 = _slicedToArray(_ref5, 2), cx = _ref6[0], cy = _ref6[1];
  var _point2 = _slicedToArray(point, 2), px = _point2[0], py = _point2[1];
  if (arePointsCollinear(triangle2)) throw new Error("Collinear points don't form a triangle");
  var x1mpx = ax - px;
  var aympy = ay - py;
  var bxmpx = bx - px;
  var bympy = by - py;
  var cxmpx = cx - px;
  var cympy = cy - py;
  var d3 = determinant3(x1mpx, aympy, x1mpx * x1mpx + aympy * aympy, bxmpx, bympy, bxmpx * bxmpx + bympy * bympy, cxmpx, cympy, cxmpx * cxmpx + cympy * cympy);
  if (d3 === 0) {
    return true;
  }
  return !isTriangleClockwise(triangle2) ? d3 > 0 : d3 < 0;
}
var mv1 = new Vector2();
var mv2 = new Vector2();
function doThreePointsMakeARight(points) {
  var _points$map = points.map(function(p4) {
    if (Array.isArray(p4)) {
      return _construct(Vector2, _toConsumableArray(p4));
    }
    return p4;
  }), _points$map2 = _slicedToArray(_points$map, 3), p1 = _points$map2[0], p22 = _points$map2[1], p3 = _points$map2[2];
  if (arePointsCollinear(points)) return false;
  var p2p1 = mv1.subVectors(p22, p1);
  var p3p1 = mv2.subVectors(p3, p1);
  var cross2 = p3p1.cross(p2p1);
  return cross2 > 0;
}
var triangle = Object.freeze({
  __proto__: null,
  isPointInTriangle,
  triangleDeterminant,
  arePointsCollinear,
  isTriangleClockwise,
  getCircumcircle,
  isPointInCircumcircle,
  doThreePointsMakeARight
});

// node_modules/maath/dist/misc-7d870b3c.esm.js
function clamp(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function repeat(t3, length3) {
  return clamp(t3 - Math.floor(t3 / length3) * length3, 0, length3);
}
function deltaAngle(current, target2) {
  var delta = repeat(target2 - current, Math.PI * 2);
  if (delta > Math.PI) delta -= Math.PI * 2;
  return delta;
}
function degToRad(degrees) {
  return degrees / 180 * Math.PI;
}
function radToDeg(radians) {
  return radians * 180 / Math.PI;
}
function fibonacciOnSphere(buffer2, _ref) {
  var _ref$radius = _ref.radius, radius = _ref$radius === void 0 ? 1 : _ref$radius;
  var samples = buffer2.length / 3;
  var offset = 2 / samples;
  var increment = Math.PI * (3 - 2.2360679775);
  for (var i4 = 0; i4 < buffer2.length; i4 += 3) {
    var y2 = i4 * offset - 1 + offset / 2;
    var distance3 = Math.sqrt(1 - Math.pow(y2, 2));
    var phi = i4 % samples * increment;
    var x2 = Math.cos(phi) * distance3;
    var z2 = Math.sin(phi) * distance3;
    buffer2[i4] = x2 * radius;
    buffer2[i4 + 1] = y2 * radius;
    buffer2[i4 + 2] = z2 * radius;
  }
}
function vectorEquals(a6, b5) {
  var eps2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Number.EPSILON;
  return Math.abs(a6.x - b5.x) < eps2 && Math.abs(a6.y - b5.y) < eps2 && Math.abs(a6.z - b5.z) < eps2;
}
function lexicographic(a6, b5) {
  if (a6.x === b5.x) {
    if (typeof a6.z !== "undefined") {
      if (a6.y === b5.y) {
        return a6.z - b5.z;
      }
    }
    return a6.y - b5.y;
  }
  return a6.x - b5.x;
}
function convexHull(_points) {
  var points = _points.sort(lexicographic);
  var lUpper = [points[0], points[1]];
  for (var i4 = 2; i4 < points.length; i4++) {
    lUpper.push(points[i4]);
    while (lUpper.length > 2 && doThreePointsMakeARight(_toConsumableArray(lUpper.slice(-3)))) {
      lUpper.splice(lUpper.length - 2, 1);
    }
  }
  var lLower = [points[points.length - 1], points[points.length - 2]];
  for (var _i2 = points.length - 3; _i2 >= 0; _i2--) {
    lLower.push(points[_i2]);
    while (lLower.length > 2 && doThreePointsMakeARight(_toConsumableArray(lLower.slice(-3)))) {
      lLower.splice(lLower.length - 2, 1);
    }
  }
  lLower.splice(0, 1);
  lLower.splice(lLower.length - 1, 1);
  var c5 = [].concat(lUpper, lLower);
  return c5;
}
function remap(x2, _ref2, _ref3) {
  var _ref4 = _slicedToArray(_ref2, 2), low1 = _ref4[0], high1 = _ref4[1];
  var _ref5 = _slicedToArray(_ref3, 2), low2 = _ref5[0], high2 = _ref5[1];
  return low2 + (x2 - low1) * (high2 - low2) / (high1 - low1);
}
function fade(t3) {
  return t3 * t3 * t3 * (t3 * (t3 * 6 - 15) + 10);
}
function lerp(v0, v12, t3) {
  return v0 * (1 - t3) + v12 * t3;
}
function inverseLerp(v0, v12, t3) {
  return (t3 - v0) / (v12 - v0);
}
function normalize(x2, y2, z2) {
  var m2 = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);
  return [x2 / m2, y2 / m2, z2 / m2];
}
function pointOnCubeToPointOnSphere(x2, y2, z2) {
  var x22 = x2 * x2;
  var y22 = y2 * y2;
  var z22 = z2 * z2;
  var nx = x2 * Math.sqrt(1 - (y22 + z22) / 2 + y22 * z22 / 3);
  var ny = y2 * Math.sqrt(1 - (z22 + x22) / 2 + z22 * x22 / 3);
  var nz = z2 * Math.sqrt(1 - (x22 + y22) / 2 + x22 * y22 / 3);
  return [nx, ny, nz];
}
function rotateVectorOnVector(a6, b5) {
  var v5 = new Vector3().crossVectors(a6, b5);
  var c5 = a6.dot(b5);
  var i4 = new Matrix3().identity();
  var vx = new Matrix3().set(0, -v5.z, v5.y, v5.z, 0, -v5.x, -v5.y, v5.x, 0);
  var vxsquared = new Matrix3().multiplyMatrices(vx, vx).multiplyScalar(1 / (1 + c5));
  var _final = matrixSum3(matrixSum3(i4, vx), vxsquared);
  return _final;
}
function pointToCoordinate(x2, y2, z2) {
  var lat = Math.asin(y2);
  var lon = Math.atan2(x2, -z2);
  return [lat, lon];
}
function coordinateToPoint(lat, lon) {
  var y2 = Math.sin(lat);
  var r3 = Math.cos(lat);
  var x2 = Math.sin(lon) * r3;
  var z2 = -Math.cos(lon) * r3;
  return [x2, y2, z2];
}
function planeSegmentIntersection(plane, segment) {
  var _segment = _slicedToArray(segment, 2), a6 = _segment[0], b5 = _segment[1];
  var matrix3 = rotateVectorOnVector(plane.normal, new Vector3(0, 1, 0));
  var t3 = inverseLerp(a6.clone().applyMatrix3(matrix3).y, b5.clone().applyMatrix3(matrix3).y, 0);
  return new Vector3().lerpVectors(a6, b5, t3);
}
function pointToPlaneDistance(p3, plane) {
  var d3 = plane.normal.dot(p3);
  return d3;
}
function getIndexFrom3D(coords, sides) {
  var _coords = _slicedToArray(coords, 3), ix = _coords[0], iy = _coords[1], iz = _coords[2];
  var _sides = _slicedToArray(sides, 2), rx = _sides[0], ry = _sides[1];
  return iz * rx * ry + iy * rx + ix;
}
function get3DFromIndex(index2, size) {
  var _size = _slicedToArray(size, 2), rx = _size[0], ry = _size[1];
  var a6 = rx * ry;
  var z2 = index2 / a6;
  var b5 = index2 - a6 * z2;
  var y2 = b5 / rx;
  var x2 = b5 % rx;
  return [x2, y2, z2];
}
function getIndexFrom2D(coords, size) {
  return coords[0] + size[0] * coords[1];
}
function get2DFromIndex(index2, columns) {
  var x2 = index2 % columns;
  var y2 = Math.floor(index2 / columns);
  return [x2, y2];
}
var misc = Object.freeze({
  __proto__: null,
  clamp,
  deltaAngle,
  degToRad,
  radToDeg,
  fibonacciOnSphere,
  vectorEquals,
  lexicographic,
  convexHull,
  remap,
  fade,
  lerp,
  inverseLerp,
  normalize,
  pointOnCubeToPointOnSphere,
  rotateVectorOnVector,
  pointToCoordinate,
  coordinateToPoint,
  planeSegmentIntersection,
  pointToPlaneDistance,
  getIndexFrom3D,
  get3DFromIndex,
  getIndexFrom2D,
  get2DFromIndex
});

// node_modules/maath/dist/vector2-d2bf51f1.esm.js
function zero() {
  return [0, 0];
}
function one() {
  return [1, 1];
}
function add(a6, b5) {
  return [a6[0] + b5[0], a6[1] + b5[1]];
}
function addValue(a6, n3) {
  return [a6[0] + n3, a6[1] + n3];
}
function sub(a6, b5) {
  return [a6[0] - b5[0], a6[1] - b5[1]];
}
function subValue(a6, n3) {
  return [a6[0] - n3, a6[1] - n3];
}
function scale(a6, n3) {
  return [a6[0] * n3, a6[1] * n3];
}
function dot(a6, b5) {
  return a6[0] * b5[0] + a6[1] * b5[1];
}
function lengthSqr(a6) {
  return a6[0] * a6[0] + a6[1] * a6[1];
}
function length(a6) {
  return Math.sqrt(a6[0] * a6[0] + a6[1] * a6[1]);
}
function distance(a6, b5) {
  return Math.sqrt((a6[0] - b5[0]) * (a6[0] - b5[0]) + (a6[1] - b5[1]) * (a6[1] - b5[1]));
}
var vector2 = Object.freeze({
  __proto__: null,
  zero,
  one,
  add,
  addValue,
  sub,
  subValue,
  scale,
  dot,
  lengthSqr,
  length,
  distance
});

// node_modules/maath/dist/vector3-0a088b7f.esm.js
function zero2() {
  return [0, 0, 0];
}
function one2() {
  return [1, 1, 1];
}
function add2(a6, b5) {
  return [a6[0] + b5[0], a6[1] + b5[1], a6[2] + b5[2]];
}
function addValue2(a6, n3) {
  return [a6[0] + n3, a6[1] + n3, a6[2] + n3];
}
function sub2(a6, b5) {
  return [a6[0] - b5[0], a6[1] - b5[1], a6[2] - b5[2]];
}
function subValue2(a6, n3) {
  return [a6[0] - n3, a6[1] - n3, a6[2] - n3];
}
function scale2(a6, n3) {
  return [a6[0] * n3, a6[1] * n3, a6[2] * n3];
}
function dot2(a6, b5) {
  return a6[0] * b5[0] + a6[1] * b5[1] + a6[2] * b5[2];
}
function cross(a6, b5) {
  var x2 = a6[1] * b5[2] - a6[2] * b5[1];
  var y2 = a6[2] * b5[0] - a6[0] * b5[2];
  var z2 = a6[0] * b5[1] - a6[1] * b5[0];
  return [x2, y2, z2];
}
function lengthSqr2(a6) {
  return a6[0] * a6[0] + a6[1] * a6[1] + a6[2] * a6[2];
}
function length2(a6) {
  return Math.sqrt(a6[0] * a6[0] + a6[1] * a6[1] + a6[2] * a6[2]);
}
function distance2(a6, b5) {
  return Math.sqrt((a6[0] - b5[0]) * (a6[0] - b5[0]) + (a6[1] - b5[1]) * (a6[1] - b5[1]) + (a6[2] - b5[2]) * (a6[2] - b5[2]));
}
var vector3 = Object.freeze({
  __proto__: null,
  zero: zero2,
  one: one2,
  add: add2,
  addValue: addValue2,
  sub: sub2,
  subValue: subValue2,
  scale: scale2,
  dot: dot2,
  cross,
  lengthSqr: lengthSqr2,
  length: length2,
  distance: distance2
});

// node_modules/maath/dist/buffer-d2a4726c.esm.js
function swizzle(buffer2) {
  var stride = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;
  var swizzle2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "xyz";
  var o3 = {
    x: 0,
    y: 0,
    z: 0
  };
  for (var _i2 = 0; _i2 < buffer2.length; _i2 += stride) {
    o3.x = buffer2[_i2];
    o3.y = buffer2[_i2 + 1];
    o3.z = buffer2[_i2 + 2];
    var _swizzle$split = swizzle2.split(""), _swizzle$split2 = _slicedToArray(_swizzle$split, 3), x2 = _swizzle$split2[0], y2 = _swizzle$split2[1], z2 = _swizzle$split2[2];
    buffer2[_i2] = o3[x2];
    buffer2[_i2 + 1] = o3[y2];
    if (stride === 3) {
      buffer2[_i2 + 2] = o3[z2];
    }
  }
  return buffer2;
}
function addAxis(buffer2, size) {
  var valueGenerator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return Math.random();
  };
  var newSize = size + 1;
  var newBuffer = new Float32Array(buffer2.length / size * newSize);
  for (var _i2 = 0; _i2 < buffer2.length; _i2 += size) {
    var _j = _i2 / size * newSize;
    newBuffer[_j] = buffer2[_i2];
    newBuffer[_j + 1] = buffer2[_i2 + 1];
    if (size === 2) {
      newBuffer[_j + 2] = valueGenerator(_j);
    }
    if (size === 3) {
      newBuffer[_j + 2] = buffer2[_i2 + 2];
      newBuffer[_j + 3] = valueGenerator(_j);
    }
  }
  return newBuffer;
}
function lerp2(bufferA, bufferB, _final, t3) {
  for (var _i3 = 0; _i3 < bufferA.length; _i3++) {
    _final[_i3] = lerp(bufferA[_i3], bufferB[_i3], t3);
  }
}
function translate(buffer2, translationVector) {
  var stride = translationVector.length;
  for (var _i4 = 0; _i4 < buffer2.length; _i4 += stride) {
    buffer2[_i4] += translationVector[0];
    buffer2[_i4 + 1] += translationVector[1];
    buffer2[_i4 + 2] += translationVector[2];
  }
  return buffer2;
}
function rotate(buffer2, rotation2) {
  var defaultRotation = {
    center: [0, 0, 0],
    q: new Quaternion().identity()
  };
  var v5 = new Vector3();
  var _defaultRotation$rota = _objectSpread2(_objectSpread2({}, defaultRotation), rotation2), q3 = _defaultRotation$rota.q, center2 = _defaultRotation$rota.center;
  for (var _i5 = 0; _i5 < buffer2.length; _i5 += 3) {
    v5.set(buffer2[_i5] - center2[0], buffer2[_i5 + 1] - center2[1], buffer2[_i5 + 2] - center2[2]);
    v5.applyQuaternion(q3);
    buffer2[_i5] = v5.x + center2[0];
    buffer2[_i5 + 1] = v5.y + center2[1];
    buffer2[_i5 + 2] = v5.z + center2[1];
  }
  return buffer2;
}
function map(buffer2, stride, callback) {
  for (var _i6 = 0, _j2 = 0; _i6 < buffer2.length; _i6 += stride, _j2++) {
    if (stride === 3) {
      var res = callback([buffer2[_i6], buffer2[_i6 + 1], buffer2[_i6 + 2]], _j2);
      buffer2.set(res, _i6);
    } else {
      buffer2.set(callback([buffer2[_i6], buffer2[_i6 + 1]], _j2), _i6);
    }
  }
  return buffer2;
}
function reduce(b5, stride, callback, acc) {
  for (var _i7 = 0, _j3 = 0; _i7 < b5.length; _i7 += stride, _j3++) {
    if (stride === 2) {
      acc = callback(acc, [b5[_i7], b5[_i7 + 1]], _j3);
    } else {
      acc = callback(acc, [b5[_i7], b5[_i7 + 1], b5[_i7 + 2]], _j3);
    }
  }
  return acc;
}
function expand(b5, stride, opts) {
  var defaultExpandOptions = {
    center: [0, 0, 0]
  };
  var _defaultExpandOptions = _objectSpread2(_objectSpread2({}, defaultExpandOptions), opts), center2 = _defaultExpandOptions.center, distance3 = _defaultExpandOptions.distance;
  for (var _i8 = 0; _i8 < b5.length; _i8 += stride) {
    b5[_i8] = (b5[_i8] - center2[0]) * (1 + distance3) + center2[0];
    b5[_i8 + 1] = (b5[_i8 + 1] - center2[1]) * (1 + distance3) + center2[1];
    if (stride === 3) {
      b5[_i8 + 2] = (b5[_i8 + 2] - center2[1]) * (1 + distance3) + center2[2];
    }
  }
  return b5;
}
function center(myBuffer, stride) {
  return reduce(myBuffer, stride, function(acc, point) {
    if (stride === 3) {
      acc = add2(acc, point);
    } else {
      acc = add(acc, point);
    }
    return acc;
  }, zero());
}
function sort(myBuffer, stride, callback) {
  var indices = Int16Array.from({
    length: myBuffer.length / stride
  }, function(_2, i4) {
    return i4;
  });
  indices.sort(function(a6, b5) {
    var pa2 = myBuffer.slice(a6 * stride, a6 * stride + stride);
    var pb = myBuffer.slice(b5 * stride, b5 * stride + stride);
    return callback(pa2, pb);
  });
  var prevBuffer = myBuffer.slice(0);
  for (var _i9 = 0; _i9 < indices.length; _i9++) {
    var _j4 = indices[_i9];
    myBuffer.set(prevBuffer.slice(_j4 * stride, _j4 * stride + stride), _i9 * 3);
  }
  return myBuffer;
}
var buffer = Object.freeze({
  __proto__: null,
  swizzle,
  addAxis,
  lerp: lerp2,
  translate,
  rotate,
  map,
  reduce,
  expand,
  center,
  sort
});

// node_modules/maath/dist/classCallCheck-9098b006.esm.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// node_modules/maath/dist/index-43782085.esm.js
var Grad = function Grad2(x2, y2, z2) {
  var _this = this;
  _classCallCheck(this, Grad2);
  _defineProperty(this, "dot2", function(x3, y3) {
    return _this.x * x3 + _this.y * y3;
  });
  _defineProperty(this, "dot3", function(x3, y3, z3) {
    return _this.x * x3 + _this.y * y3 + _this.z * z3;
  });
  this.x = x2;
  this.y = y2;
  this.z = z2;
};
var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];
var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];
var perm = new Array(512);
var gradP = new Array(512);
var seed = function seed2(_seed) {
  if (_seed > 0 && _seed < 1) {
    _seed *= 65536;
  }
  _seed = Math.floor(_seed);
  if (_seed < 256) {
    _seed |= _seed << 8;
  }
  for (var i4 = 0; i4 < 256; i4++) {
    var v5;
    if (i4 & 1) {
      v5 = p[i4] ^ _seed & 255;
    } else {
      v5 = p[i4] ^ _seed >> 8 & 255;
    }
    perm[i4] = perm[i4 + 256] = v5;
    gradP[i4] = gradP[i4 + 256] = grad3[v5 % 12];
  }
};
seed(0);
var F2 = 0.5 * (Math.sqrt(3) - 1);
var G2 = (3 - Math.sqrt(3)) / 6;
var F3 = 1 / 3;
var G3 = 1 / 6;
var simplex2 = function simplex22(xin, yin) {
  var n0, n1, n22;
  var s3 = (xin + yin) * F2;
  var i4 = Math.floor(xin + s3);
  var j2 = Math.floor(yin + s3);
  var t3 = (i4 + j2) * G2;
  var x0 = xin - i4 + t3;
  var y0 = yin - j2 + t3;
  var i1, j1;
  if (x0 > y0) {
    i1 = 1;
    j1 = 0;
  } else {
    i1 = 0;
    j1 = 1;
  }
  var x1 = x0 - i1 + G2;
  var y1 = y0 - j1 + G2;
  var x2 = x0 - 1 + 2 * G2;
  var y2 = y0 - 1 + 2 * G2;
  i4 &= 255;
  j2 &= 255;
  var gi0 = gradP[i4 + perm[j2]];
  var gi1 = gradP[i4 + i1 + perm[j2 + j1]];
  var gi2 = gradP[i4 + 1 + perm[j2 + 1]];
  var t0 = 0.5 - x0 * x0 - y0 * y0;
  if (t0 < 0) {
    n0 = 0;
  } else {
    t0 *= t0;
    n0 = t0 * t0 * gi0.dot2(x0, y0);
  }
  var t1 = 0.5 - x1 * x1 - y1 * y1;
  if (t1 < 0) {
    n1 = 0;
  } else {
    t1 *= t1;
    n1 = t1 * t1 * gi1.dot2(x1, y1);
  }
  var t22 = 0.5 - x2 * x2 - y2 * y2;
  if (t22 < 0) {
    n22 = 0;
  } else {
    t22 *= t22;
    n22 = t22 * t22 * gi2.dot2(x2, y2);
  }
  return 70 * (n0 + n1 + n22);
};
var simplex3 = function simplex32(xin, yin, zin) {
  var n0, n1, n22, n3;
  var s3 = (xin + yin + zin) * F3;
  var i4 = Math.floor(xin + s3);
  var j2 = Math.floor(yin + s3);
  var k2 = Math.floor(zin + s3);
  var t3 = (i4 + j2 + k2) * G3;
  var x0 = xin - i4 + t3;
  var y0 = yin - j2 + t3;
  var z0 = zin - k2 + t3;
  var i1, j1, k1;
  var i22, j22, k22;
  if (x0 >= y0) {
    if (y0 >= z0) {
      i1 = 1;
      j1 = 0;
      k1 = 0;
      i22 = 1;
      j22 = 1;
      k22 = 0;
    } else if (x0 >= z0) {
      i1 = 1;
      j1 = 0;
      k1 = 0;
      i22 = 1;
      j22 = 0;
      k22 = 1;
    } else {
      i1 = 0;
      j1 = 0;
      k1 = 1;
      i22 = 1;
      j22 = 0;
      k22 = 1;
    }
  } else {
    if (y0 < z0) {
      i1 = 0;
      j1 = 0;
      k1 = 1;
      i22 = 0;
      j22 = 1;
      k22 = 1;
    } else if (x0 < z0) {
      i1 = 0;
      j1 = 1;
      k1 = 0;
      i22 = 0;
      j22 = 1;
      k22 = 1;
    } else {
      i1 = 0;
      j1 = 1;
      k1 = 0;
      i22 = 1;
      j22 = 1;
      k22 = 0;
    }
  }
  var x1 = x0 - i1 + G3;
  var y1 = y0 - j1 + G3;
  var z1 = z0 - k1 + G3;
  var x2 = x0 - i22 + 2 * G3;
  var y2 = y0 - j22 + 2 * G3;
  var z2 = z0 - k22 + 2 * G3;
  var x3 = x0 - 1 + 3 * G3;
  var y3 = y0 - 1 + 3 * G3;
  var z3 = z0 - 1 + 3 * G3;
  i4 &= 255;
  j2 &= 255;
  k2 &= 255;
  var gi0 = gradP[i4 + perm[j2 + perm[k2]]];
  var gi1 = gradP[i4 + i1 + perm[j2 + j1 + perm[k2 + k1]]];
  var gi2 = gradP[i4 + i22 + perm[j2 + j22 + perm[k2 + k22]]];
  var gi3 = gradP[i4 + 1 + perm[j2 + 1 + perm[k2 + 1]]];
  var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
  if (t0 < 0) {
    n0 = 0;
  } else {
    t0 *= t0;
    n0 = t0 * t0 * gi0.dot3(x0, y0, z0);
  }
  var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
  if (t1 < 0) {
    n1 = 0;
  } else {
    t1 *= t1;
    n1 = t1 * t1 * gi1.dot3(x1, y1, z1);
  }
  var t22 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
  if (t22 < 0) {
    n22 = 0;
  } else {
    t22 *= t22;
    n22 = t22 * t22 * gi2.dot3(x2, y2, z2);
  }
  var t32 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
  if (t32 < 0) {
    n3 = 0;
  } else {
    t32 *= t32;
    n3 = t32 * t32 * gi3.dot3(x3, y3, z3);
  }
  return 32 * (n0 + n1 + n22 + n3);
};
var perlin2 = function perlin22(x2, y2) {
  var X2 = Math.floor(x2), Y2 = Math.floor(y2);
  x2 = x2 - X2;
  y2 = y2 - Y2;
  X2 = X2 & 255;
  Y2 = Y2 & 255;
  var n00 = gradP[X2 + perm[Y2]].dot2(x2, y2);
  var n01 = gradP[X2 + perm[Y2 + 1]].dot2(x2, y2 - 1);
  var n10 = gradP[X2 + 1 + perm[Y2]].dot2(x2 - 1, y2);
  var n11 = gradP[X2 + 1 + perm[Y2 + 1]].dot2(x2 - 1, y2 - 1);
  var u2 = fade(x2);
  return lerp(lerp(n00, n10, u2), lerp(n01, n11, u2), fade(y2));
};
var perlin3 = function perlin32(x2, y2, z2) {
  var X2 = Math.floor(x2), Y2 = Math.floor(y2), Z2 = Math.floor(z2);
  x2 = x2 - X2;
  y2 = y2 - Y2;
  z2 = z2 - Z2;
  X2 = X2 & 255;
  Y2 = Y2 & 255;
  Z2 = Z2 & 255;
  var n000 = gradP[X2 + perm[Y2 + perm[Z2]]].dot3(x2, y2, z2);
  var n001 = gradP[X2 + perm[Y2 + perm[Z2 + 1]]].dot3(x2, y2, z2 - 1);
  var n010 = gradP[X2 + perm[Y2 + 1 + perm[Z2]]].dot3(x2, y2 - 1, z2);
  var n011 = gradP[X2 + perm[Y2 + 1 + perm[Z2 + 1]]].dot3(x2, y2 - 1, z2 - 1);
  var n100 = gradP[X2 + 1 + perm[Y2 + perm[Z2]]].dot3(x2 - 1, y2, z2);
  var n101 = gradP[X2 + 1 + perm[Y2 + perm[Z2 + 1]]].dot3(x2 - 1, y2, z2 - 1);
  var n110 = gradP[X2 + 1 + perm[Y2 + 1 + perm[Z2]]].dot3(x2 - 1, y2 - 1, z2);
  var n111 = gradP[X2 + 1 + perm[Y2 + 1 + perm[Z2 + 1]]].dot3(x2 - 1, y2 - 1, z2 - 1);
  var u2 = fade(x2);
  var v5 = fade(y2);
  var w2 = fade(z2);
  return lerp(lerp(lerp(n000, n100, u2), lerp(n001, n101, u2), w2), lerp(lerp(n010, n110, u2), lerp(n011, n111, u2), w2), v5);
};
var noise = Object.freeze({
  __proto__: null,
  seed,
  simplex2,
  simplex3,
  perlin2,
  perlin3
});
var TAU = Math.PI * 2;
function normalizeSeed(seed3) {
  if (typeof seed3 === "number") {
    seed3 = Math.abs(seed3);
  } else if (typeof seed3 === "string") {
    var string = seed3;
    seed3 = 0;
    for (var i4 = 0; i4 < string.length; i4++) {
      seed3 = (seed3 + (i4 + 1) * (string.charCodeAt(i4) % 96)) % 2147483647;
    }
  }
  if (seed3 === 0) {
    seed3 = 311;
  }
  return seed3;
}
function lcgRandom(seed3) {
  var state = normalizeSeed(seed3);
  return function() {
    var result = state * 48271 % 2147483647;
    state = result;
    return result / 2147483647;
  };
}
var Generator = function Generator2(_seed) {
  var _this = this;
  _classCallCheck(this, Generator2);
  _defineProperty(this, "seed", 0);
  _defineProperty(this, "init", function(seed3) {
    _this.seed = seed3;
    _this.value = lcgRandom(seed3);
  });
  _defineProperty(this, "value", lcgRandom(this.seed));
  this.init(_seed);
};
var defaultGen = new Generator(Math.random());
var defaultSphere = {
  radius: 1,
  center: [0, 0, 0]
};
function onSphere(buffer2, sphere) {
  var rng = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultGen;
  var _defaultSphere$sphere = _objectSpread2(_objectSpread2({}, defaultSphere), sphere), radius = _defaultSphere$sphere.radius, center2 = _defaultSphere$sphere.center;
  for (var i4 = 0; i4 < buffer2.length; i4 += 3) {
    var u2 = rng.value();
    var v5 = rng.value();
    var theta = Math.acos(2 * v5 - 1);
    var phi = TAU * u2;
    buffer2[i4] = Math.sin(theta) * Math.cos(phi) * radius + center2[0];
    buffer2[i4 + 1] = Math.sin(theta) * Math.sin(phi) * radius + center2[1];
    buffer2[i4 + 2] = Math.cos(theta) * radius + center2[2];
  }
  return buffer2;
}
function inSphere(buffer2, sphere) {
  var rng = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultGen;
  var _defaultSphere$sphere2 = _objectSpread2(_objectSpread2({}, defaultSphere), sphere), radius = _defaultSphere$sphere2.radius, center2 = _defaultSphere$sphere2.center;
  for (var i4 = 0; i4 < buffer2.length; i4 += 3) {
    var u2 = Math.pow(rng.value(), 1 / 3);
    var x2 = rng.value() * 2 - 1;
    var y2 = rng.value() * 2 - 1;
    var z2 = rng.value() * 2 - 1;
    var mag = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);
    x2 = u2 * x2 / mag;
    y2 = u2 * y2 / mag;
    z2 = u2 * z2 / mag;
    buffer2[i4] = x2 * radius + center2[0];
    buffer2[i4 + 1] = y2 * radius + center2[1];
    buffer2[i4 + 2] = z2 * radius + center2[2];
  }
  return buffer2;
}
var defaultCircle = {
  radius: 1,
  center: [0, 0]
};
function inCircle(buffer2, circle) {
  var rng = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultGen;
  var _defaultCircle$circle = _objectSpread2(_objectSpread2({}, defaultCircle), circle), radius = _defaultCircle$circle.radius, center2 = _defaultCircle$circle.center;
  for (var i4 = 0; i4 < buffer2.length; i4 += 2) {
    var r3 = radius * Math.sqrt(rng.value());
    var theta = rng.value() * TAU;
    buffer2[i4] = Math.sin(theta) * r3 + center2[0];
    buffer2[i4 + 1] = Math.cos(theta) * r3 + center2[1];
  }
  return buffer2;
}
function onCircle(buffer2, circle) {
  var rng = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultGen;
  var _defaultCircle$circle2 = _objectSpread2(_objectSpread2({}, defaultCircle), circle), radius = _defaultCircle$circle2.radius, center2 = _defaultCircle$circle2.center;
  for (var i4 = 0; i4 < buffer2.length; i4 += 2) {
    var theta = rng.value() * TAU;
    buffer2[i4] = Math.sin(theta) * radius + center2[0];
    buffer2[i4 + 1] = Math.cos(theta) * radius + center2[1];
  }
  return buffer2;
}
var defaultRect = {
  sides: 1,
  center: [0, 0]
};
function inRect(buffer2, rect) {
  var rng = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultGen;
  var _defaultRect$rect = _objectSpread2(_objectSpread2({}, defaultRect), rect), sides = _defaultRect$rect.sides, center2 = _defaultRect$rect.center;
  var sideX = typeof sides === "number" ? sides : sides[0];
  var sideY = typeof sides === "number" ? sides : sides[1];
  for (var i4 = 0; i4 < buffer2.length; i4 += 2) {
    buffer2[i4] = (rng.value() - 0.5) * sideX + center2[0];
    buffer2[i4 + 1] = (rng.value() - 0.5) * sideY + center2[1];
  }
  return buffer2;
}
function onRect(buffer2, rect) {
  return buffer2;
}
function inBox(buffer2, box) {
  var rng = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultGen;
  var _defaultBox$box = _objectSpread2(_objectSpread2({}, defaultBox), box), sides = _defaultBox$box.sides, center2 = _defaultBox$box.center;
  var sideX = typeof sides === "number" ? sides : sides[0];
  var sideY = typeof sides === "number" ? sides : sides[1];
  var sideZ = typeof sides === "number" ? sides : sides[2];
  for (var i4 = 0; i4 < buffer2.length; i4 += 3) {
    buffer2[i4] = (rng.value() - 0.5) * sideX + center2[0];
    buffer2[i4 + 1] = (rng.value() - 0.5) * sideY + center2[1];
    buffer2[i4 + 2] = (rng.value() - 0.5) * sideZ + center2[2];
  }
  return buffer2;
}
var defaultBox = {
  sides: 1,
  center: [0, 0, 0]
};
function onBox(buffer2, box) {
  var rng = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultGen;
  var _defaultBox$box2 = _objectSpread2(_objectSpread2({}, defaultBox), box), sides = _defaultBox$box2.sides, center2 = _defaultBox$box2.center;
  var sideX = typeof sides === "number" ? sides : sides[0];
  var sideY = typeof sides === "number" ? sides : sides[1];
  var sideZ = typeof sides === "number" ? sides : sides[2];
  for (var i4 = 0; i4 < buffer2.length; i4 += 3) {
    buffer2[i4] = (rng.value() - 0.5) * sideX + center2[0];
    buffer2[i4 + 1] = (rng.value() - 0.5) * sideY + center2[1];
    buffer2[i4 + 2] = (rng.value() - 0.5) * sideZ + center2[2];
  }
  return buffer2;
}
var index = Object.freeze({
  __proto__: null,
  Generator,
  onSphere,
  inSphere,
  inCircle,
  onCircle,
  inRect,
  onRect,
  inBox,
  onBox,
  noise
});

// node_modules/maath/dist/easing-3be59c6d.esm.js
var rsqw = function rsqw2(t3) {
  var delta = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.01;
  var a6 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
  var f3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1 / (2 * Math.PI);
  return a6 / Math.atan(1 / delta) * Math.atan(Math.sin(2 * Math.PI * t3 * f3) / delta);
};
var exp = function exp2(t3) {
  return 1 / (1 + t3 + 0.48 * t3 * t3 + 0.235 * t3 * t3 * t3);
};
function damp(current, prop, target2) {
  var smoothTime = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.25;
  var delta = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0.01;
  var maxSpeed = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : Infinity;
  var easing2 = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : exp;
  var eps2 = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : 1e-3;
  var vel = "velocity_" + prop;
  if (current.__damp === void 0) current.__damp = {};
  if (current.__damp[vel] === void 0) current.__damp[vel] = 0;
  if (Math.abs(current[prop] - target2) <= eps2) {
    current[prop] = target2;
    return false;
  }
  smoothTime = Math.max(1e-4, smoothTime);
  var omega = 2 / smoothTime;
  var t3 = easing2(omega * delta);
  var change = current[prop] - target2;
  var originalTo = target2;
  var maxChange = maxSpeed * smoothTime;
  change = Math.min(Math.max(change, -maxChange), maxChange);
  target2 = current[prop] - change;
  var temp5 = (current.__damp[vel] + omega * change) * delta;
  current.__damp[vel] = (current.__damp[vel] - omega * temp5) * t3;
  var output = target2 + (change + temp5) * t3;
  if (originalTo - current[prop] > 0 === output > originalTo) {
    output = originalTo;
    current.__damp[vel] = (output - originalTo) / delta;
  }
  current[prop] = output;
  return true;
}
function dampAngle(current, prop, target2, smoothTime, delta, maxSpeed, easing2, eps2) {
  return damp(current, prop, current[prop] + deltaAngle(current[prop], target2), smoothTime, delta, maxSpeed, easing2, eps2);
}
var v2d = new Vector2();
var a2;
var b2;
function damp2(current, target2, smoothTime, delta, maxSpeed, easing2, eps2) {
  if (typeof target2 === "number") v2d.setScalar(target2);
  else if (Array.isArray(target2)) v2d.set(target2[0], target2[1]);
  else v2d.copy(target2);
  a2 = damp(current, "x", v2d.x, smoothTime, delta, maxSpeed, easing2, eps2);
  b2 = damp(current, "y", v2d.y, smoothTime, delta, maxSpeed, easing2, eps2);
  return a2 || b2;
}
var v3d = new Vector3();
var a3;
var b3;
var c3;
function damp3(current, target2, smoothTime, delta, maxSpeed, easing2, eps2) {
  if (typeof target2 === "number") v3d.setScalar(target2);
  else if (Array.isArray(target2)) v3d.set(target2[0], target2[1], target2[2]);
  else v3d.copy(target2);
  a3 = damp(current, "x", v3d.x, smoothTime, delta, maxSpeed, easing2, eps2);
  b3 = damp(current, "y", v3d.y, smoothTime, delta, maxSpeed, easing2, eps2);
  c3 = damp(current, "z", v3d.z, smoothTime, delta, maxSpeed, easing2, eps2);
  return a3 || b3 || c3;
}
var v4d = new Vector4();
var a4;
var b4;
var c4;
var d4;
function damp4(current, target2, smoothTime, delta, maxSpeed, easing2, eps2) {
  if (typeof target2 === "number") v4d.setScalar(target2);
  else if (Array.isArray(target2)) v4d.set(target2[0], target2[1], target2[2], target2[3]);
  else v4d.copy(target2);
  a4 = damp(current, "x", v4d.x, smoothTime, delta, maxSpeed, easing2, eps2);
  b4 = damp(current, "y", v4d.y, smoothTime, delta, maxSpeed, easing2, eps2);
  c4 = damp(current, "z", v4d.z, smoothTime, delta, maxSpeed, easing2, eps2);
  d4 = damp(current, "w", v4d.w, smoothTime, delta, maxSpeed, easing2, eps2);
  return a4 || b4 || c4 || d4;
}
var rot = new Euler();
var aE;
var bE;
var cE;
function dampE(current, target2, smoothTime, delta, maxSpeed, easing2, eps2) {
  if (Array.isArray(target2)) rot.set(target2[0], target2[1], target2[2], target2[3]);
  else rot.copy(target2);
  aE = dampAngle(current, "x", rot.x, smoothTime, delta, maxSpeed, easing2, eps2);
  bE = dampAngle(current, "y", rot.y, smoothTime, delta, maxSpeed, easing2, eps2);
  cE = dampAngle(current, "z", rot.z, smoothTime, delta, maxSpeed, easing2, eps2);
  return aE || bE || cE;
}
var col = new Color();
var aC;
var bC;
var cC;
function dampC(current, target2, smoothTime, delta, maxSpeed, easing2, eps2) {
  if (target2 instanceof Color) col.copy(target2);
  else if (Array.isArray(target2)) col.setRGB(target2[0], target2[1], target2[2]);
  else col.set(target2);
  aC = damp(current, "r", col.r, smoothTime, delta, maxSpeed, easing2, eps2);
  bC = damp(current, "g", col.g, smoothTime, delta, maxSpeed, easing2, eps2);
  cC = damp(current, "b", col.b, smoothTime, delta, maxSpeed, easing2, eps2);
  return aC || bC || cC;
}
var qt = new Quaternion();
var v4result = new Vector4();
var v4velocity = new Vector4();
var v4error = new Vector4();
var aQ;
var bQ;
var cQ;
var dQ;
function dampQ(current, target2, smoothTime, delta, maxSpeed, easing2, eps2) {
  var cur = current;
  if (Array.isArray(target2)) qt.set(target2[0], target2[1], target2[2], target2[3]);
  else qt.copy(target2);
  var multi = current.dot(qt) > 0 ? 1 : -1;
  qt.x *= multi;
  qt.y *= multi;
  qt.z *= multi;
  qt.w *= multi;
  aQ = damp(current, "x", qt.x, smoothTime, delta, maxSpeed, easing2, eps2);
  bQ = damp(current, "y", qt.y, smoothTime, delta, maxSpeed, easing2, eps2);
  cQ = damp(current, "z", qt.z, smoothTime, delta, maxSpeed, easing2, eps2);
  dQ = damp(current, "w", qt.w, smoothTime, delta, maxSpeed, easing2, eps2);
  v4result.set(current.x, current.y, current.z, current.w).normalize();
  v4velocity.set(cur.__damp.velocity_x, cur.__damp.velocity_y, cur.__damp.velocity_z, cur.__damp.velocity_w);
  v4error.copy(v4result).multiplyScalar(v4velocity.dot(v4result) / v4result.dot(v4result));
  cur.__damp.velocity_x -= v4error.x;
  cur.__damp.velocity_y -= v4error.y;
  cur.__damp.velocity_z -= v4error.z;
  cur.__damp.velocity_w -= v4error.w;
  current.set(v4result.x, v4result.y, v4result.z, v4result.w);
  return aQ || bQ || cQ || dQ;
}
var spherical = new Spherical();
var aS;
var bS;
var cS;
function dampS(current, target2, smoothTime, delta, maxSpeed, easing2, eps2) {
  if (Array.isArray(target2)) spherical.set(target2[0], target2[1], target2[2]);
  else spherical.copy(target2);
  aS = damp(current, "radius", spherical.radius, smoothTime, delta, maxSpeed, easing2, eps2);
  bS = dampAngle(current, "phi", spherical.phi, smoothTime, delta, maxSpeed, easing2, eps2);
  cS = dampAngle(current, "theta", spherical.theta, smoothTime, delta, maxSpeed, easing2, eps2);
  return aS || bS || cS;
}
var mat = new Matrix4();
var mPos = new Vector3();
var mRot = new Quaternion();
var mSca = new Vector3();
var aM;
var bM;
var cM;
function dampM(current, target2, smoothTime, delta, maxSpeed, easing2, eps2) {
  var cur = current;
  if (cur.__damp === void 0) {
    cur.__damp = {
      position: new Vector3(),
      rotation: new Quaternion(),
      scale: new Vector3()
    };
    current.decompose(cur.__damp.position, cur.__damp.rotation, cur.__damp.scale);
  }
  if (Array.isArray(target2)) mat.set.apply(mat, _toConsumableArray(target2));
  else mat.copy(target2);
  mat.decompose(mPos, mRot, mSca);
  aM = damp3(cur.__damp.position, mPos, smoothTime, delta, maxSpeed, easing2, eps2);
  bM = dampQ(cur.__damp.rotation, mRot, smoothTime, delta, maxSpeed, easing2, eps2);
  cM = damp3(cur.__damp.scale, mSca, smoothTime, delta, maxSpeed, easing2, eps2);
  current.compose(cur.__damp.position, cur.__damp.rotation, cur.__damp.scale);
  return aM || bM || cM;
}
var easing = Object.freeze({
  __proto__: null,
  rsqw,
  exp,
  damp,
  dampAngle,
  damp2,
  damp3,
  damp4,
  dampE,
  dampC,
  dampQ,
  dampS,
  dampM
});

// node_modules/maath/dist/geometry-217d0c0b.esm.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o3) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o4) {
    return o4.__proto__ || Object.getPrototypeOf(o4);
  };
  return _getPrototypeOf(o3);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn(self2, call2) {
  if (call2 && (typeof call2 === "object" || typeof call2 === "function")) {
    return call2;
  } else if (call2 !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
var RoundedPlaneGeometry = function(_THREE$BufferGeometry) {
  _inherits(RoundedPlaneGeometry2, _THREE$BufferGeometry);
  var _super = _createSuper(RoundedPlaneGeometry2);
  function RoundedPlaneGeometry2() {
    var _this;
    var width = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 2;
    var height = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var radius = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.2;
    var segments = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 16;
    _classCallCheck(this, RoundedPlaneGeometry2);
    _this = _super.call(this);
    var wi2 = width / 2 - radius;
    var hi2 = height / 2 - radius;
    var ul = radius / width;
    var ur2 = (width - radius) / width;
    var vl = radius / height;
    var vh2 = (height - radius) / height;
    var positions = [wi2, hi2, 0, -wi2, hi2, 0, -wi2, -hi2, 0, wi2, -hi2, 0];
    var uvs = [ur2, vh2, ul, vh2, ul, vl, ur2, vl];
    var n3 = [3 * (segments + 1) + 3, 3 * (segments + 1) + 4, segments + 4, segments + 5, 2 * (segments + 1) + 4, 2, 1, 2 * (segments + 1) + 3, 3, 4 * (segments + 1) + 3, 4, 0];
    var indices = [n3[0], n3[1], n3[2], n3[0], n3[2], n3[3], n3[4], n3[5], n3[6], n3[4], n3[6], n3[7], n3[8], n3[9], n3[10], n3[8], n3[10], n3[11]];
    var phi, cos, sin, xc, yc, uc, vc, idx;
    for (var i4 = 0; i4 < 4; i4++) {
      xc = i4 < 1 || i4 > 2 ? wi2 : -wi2;
      yc = i4 < 2 ? hi2 : -hi2;
      uc = i4 < 1 || i4 > 2 ? ur2 : ul;
      vc = i4 < 2 ? vh2 : vl;
      for (var j2 = 0; j2 <= segments; j2++) {
        phi = Math.PI / 2 * (i4 + j2 / segments);
        cos = Math.cos(phi);
        sin = Math.sin(phi);
        positions.push(xc + radius * cos, yc + radius * sin, 0);
        uvs.push(uc + ul * cos, vc + vl * sin);
        if (j2 < segments) {
          idx = (segments + 1) * i4 + j2 + 4;
          indices.push(i4, idx, idx + 1);
        }
      }
    }
    _this.setIndex(new BufferAttribute(new Uint32Array(indices), 1));
    _this.setAttribute("position", new BufferAttribute(new Float32Array(positions), 3));
    _this.setAttribute("uv", new BufferAttribute(new Float32Array(uvs), 2));
    return _this;
  }
  return RoundedPlaneGeometry2;
}(BufferGeometry);
var geometry = Object.freeze({
  __proto__: null,
  RoundedPlaneGeometry
});

// node_modules/maath/dist/three-eb2ad8c0.esm.js
function bufferToVectors(buffer2) {
  var stride = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;
  var p3 = [];
  for (var i4 = 0, j2 = 0; i4 < buffer2.length; i4 += stride, j2++) {
    if (stride === 3) {
      p3[j2] = new Vector3(buffer2[i4], buffer2[i4 + 1], buffer2[i4 + 2]);
    } else {
      p3[j2] = new Vector2(buffer2[i4], buffer2[i4 + 1]);
    }
  }
  return p3;
}
function vectorsToBuffer(vectorArray) {
  var l3 = vectorArray.length;
  var stride = vectorArray[0].hasOwnProperty("z") ? 3 : 2;
  var buffer2 = new Float32Array(l3 * stride);
  for (var i4 = 0; i4 < l3; i4++) {
    var j2 = i4 * stride;
    buffer2[j2] = vectorArray[i4].x;
    buffer2[j2 + 1] = vectorArray[i4].y;
    if (stride === 3) {
      buffer2[j2 + 2] = vectorArray[i4].z;
    }
  }
  return buffer2;
}
var three = Object.freeze({
  __proto__: null,
  bufferToVectors,
  vectorsToBuffer
});

// node_modules/@react-three/drei/web/ScrollControls.js
var context2 = React5.createContext(null);
function useScroll() {
  return React5.useContext(context2);
}
function ScrollControls({
  eps: eps2 = 1e-5,
  enabled = true,
  infinite,
  horizontal,
  pages = 1,
  distance: distance3 = 1,
  damping = 0.25,
  maxSpeed = Infinity,
  style = {},
  children
}) {
  const {
    get,
    setEvents,
    gl,
    size,
    invalidate,
    events
  } = useThree();
  const [el] = React5.useState(() => document.createElement("div"));
  const [fill] = React5.useState(() => document.createElement("div"));
  const [fixed] = React5.useState(() => document.createElement("div"));
  const target2 = gl.domElement.parentNode;
  const scroll = React5.useRef(0);
  const state = React5.useMemo(() => {
    const state2 = {
      el,
      eps: eps2,
      fill,
      fixed,
      horizontal,
      damping,
      offset: 0,
      delta: 0,
      scroll,
      pages,
      // 0-1 for a range between from -> from + distance
      range(from, distance4, margin = 0) {
        const start = from - margin;
        const end = start + distance4 + margin * 2;
        return this.offset < start ? 0 : this.offset > end ? 1 : (this.offset - start) / (end - start);
      },
      // 0-1-0 for a range between from -> from + distance
      curve(from, distance4, margin = 0) {
        return Math.sin(this.range(from, distance4, margin) * Math.PI);
      },
      // true/false for a range between from -> from + distance
      visible(from, distance4, margin = 0) {
        const start = from - margin;
        const end = start + distance4 + margin * 2;
        return this.offset >= start && this.offset <= end;
      }
    };
    return state2;
  }, [eps2, damping, horizontal, pages]);
  React5.useEffect(() => {
    el.style.position = "absolute";
    el.style.width = "100%";
    el.style.height = "100%";
    el.style[horizontal ? "overflowX" : "overflowY"] = "auto";
    el.style[horizontal ? "overflowY" : "overflowX"] = "hidden";
    el.style.top = "0px";
    el.style.left = "0px";
    for (const key in style) {
      el.style[key] = style[key];
    }
    fixed.style.position = "sticky";
    fixed.style.top = "0px";
    fixed.style.left = "0px";
    fixed.style.width = "100%";
    fixed.style.height = "100%";
    fixed.style.overflow = "hidden";
    el.appendChild(fixed);
    fill.style.height = horizontal ? "100%" : `${pages * distance3 * 100}%`;
    fill.style.width = horizontal ? `${pages * distance3 * 100}%` : "100%";
    fill.style.pointerEvents = "none";
    el.appendChild(fill);
    target2.appendChild(el);
    el[horizontal ? "scrollLeft" : "scrollTop"] = 1;
    const oldTarget = events.connected || gl.domElement;
    requestAnimationFrame(() => events.connect == null ? void 0 : events.connect(el));
    const oldCompute = get().events.compute;
    setEvents({
      compute(event, state2) {
        const {
          left,
          top
        } = target2.getBoundingClientRect();
        const offsetX = event.clientX - left;
        const offsetY = event.clientY - top;
        state2.pointer.set(offsetX / state2.size.width * 2 - 1, -(offsetY / state2.size.height) * 2 + 1);
        state2.raycaster.setFromCamera(state2.pointer, state2.camera);
      }
    });
    return () => {
      target2.removeChild(el);
      setEvents({
        compute: oldCompute
      });
      events.connect == null ? void 0 : events.connect(oldTarget);
    };
  }, [pages, distance3, horizontal, el, fill, fixed, target2]);
  React5.useEffect(() => {
    if (events.connected === el) {
      const containerLength = size[horizontal ? "width" : "height"];
      const scrollLength = el[horizontal ? "scrollWidth" : "scrollHeight"];
      const scrollThreshold = scrollLength - containerLength;
      let current = 0;
      let disableScroll = true;
      let firstRun = true;
      const onScroll = () => {
        if (!enabled || firstRun) return;
        invalidate();
        current = el[horizontal ? "scrollLeft" : "scrollTop"];
        scroll.current = current / scrollThreshold;
        if (infinite) {
          if (!disableScroll) {
            if (current >= scrollThreshold) {
              const damp5 = 1 - state.offset;
              el[horizontal ? "scrollLeft" : "scrollTop"] = 1;
              scroll.current = state.offset = -damp5;
              disableScroll = true;
            } else if (current <= 0) {
              const damp5 = 1 + state.offset;
              el[horizontal ? "scrollLeft" : "scrollTop"] = scrollLength;
              scroll.current = state.offset = damp5;
              disableScroll = true;
            }
          }
          if (disableScroll) setTimeout(() => disableScroll = false, 40);
        }
      };
      el.addEventListener("scroll", onScroll, {
        passive: true
      });
      requestAnimationFrame(() => firstRun = false);
      const onWheel = (e3) => el.scrollLeft += e3.deltaY / 2;
      if (horizontal) el.addEventListener("wheel", onWheel, {
        passive: true
      });
      return () => {
        el.removeEventListener("scroll", onScroll);
        if (horizontal) el.removeEventListener("wheel", onWheel);
      };
    }
  }, [el, events, size, infinite, state, invalidate, horizontal, enabled]);
  let last = 0;
  useFrame((_2, delta) => {
    last = state.offset;
    easing.damp(state, "offset", scroll.current, damping, delta, maxSpeed, void 0, eps2);
    easing.damp(state, "delta", Math.abs(last - state.offset), damping, delta, maxSpeed, void 0, eps2);
    if (state.delta > eps2) invalidate();
  });
  return React5.createElement(context2.Provider, {
    value: state
  }, children);
}
var ScrollCanvas = React5.forwardRef(({
  children
}, ref) => {
  const group = React5.useRef(null);
  const state = useScroll();
  const {
    width,
    height
  } = useThree((state2) => state2.viewport);
  useFrame(() => {
    group.current.position.x = state.horizontal ? -width * (state.pages - 1) * state.offset : 0;
    group.current.position.y = state.horizontal ? 0 : height * (state.pages - 1) * state.offset;
  });
  return React5.createElement("group", {
    ref: react_merge_refs_esm_default([ref, group])
  }, children);
});
var ScrollHtml = React5.forwardRef(({
  children,
  style,
  ...props
}, ref) => {
  const state = useScroll();
  const group = React5.useRef(null);
  const {
    width,
    height
  } = useThree((state2) => state2.size);
  const fiberState = React5.useContext(context);
  const root = React5.useMemo(() => ReactDOM2.createRoot(state.fixed), [state.fixed]);
  useFrame(() => {
    if (state.delta > state.eps) {
      group.current.style.transform = `translate3d(${state.horizontal ? -width * (state.pages - 1) * state.offset : 0}px,${state.horizontal ? 0 : height * (state.pages - 1) * -state.offset}px,0)`;
    }
  });
  root.render(React5.createElement("div", _extends({
    ref: react_merge_refs_esm_default([ref, group]),
    style: {
      ...style,
      position: "absolute",
      top: 0,
      left: 0,
      willChange: "transform"
    }
  }, props), React5.createElement(context2.Provider, {
    value: state
  }, React5.createElement(context.Provider, {
    value: fiberState
  }, children))));
  return null;
});
var Scroll = React5.forwardRef(({
  html,
  ...props
}, ref) => {
  const El = html ? ScrollHtml : ScrollCanvas;
  return React5.createElement(El, _extends({
    ref
  }, props));
});

// node_modules/@react-three/drei/web/PresentationControls.js
var React6 = __toESM(require_react());
function PresentationControls({
  enabled = true,
  snap,
  global: global2,
  domElement,
  cursor = true,
  children,
  speed = 1,
  rotation: rotation2 = [0, 0, 0],
  zoom = 1,
  polar = [0, Math.PI / 2],
  azimuth = [-Infinity, Infinity],
  config = {
    mass: 1,
    tension: 170,
    friction: 26
  }
}) {
  const events = useThree((state) => state.events);
  const gl = useThree((state) => state.gl);
  const explDomElement = domElement || events.connected || gl.domElement;
  const {
    size
  } = useThree();
  const rPolar = React6.useMemo(() => [rotation2[0] + polar[0], rotation2[0] + polar[1]], [rotation2[0], polar[0], polar[1]]);
  const rAzimuth = React6.useMemo(() => [rotation2[1] + azimuth[0], rotation2[1] + azimuth[1]], [rotation2[1], azimuth[0], azimuth[1]]);
  const rInitial = React6.useMemo(() => [MathUtils.clamp(rotation2[0], ...rPolar), MathUtils.clamp(rotation2[1], ...rAzimuth), rotation2[2]], [rotation2[0], rotation2[1], rotation2[2], rPolar, rAzimuth]);
  const [spring, api] = useSpring(() => ({
    scale: 1,
    rotation: rInitial,
    config
  }));
  React6.useEffect(() => void api.start({
    scale: 1,
    rotation: rInitial,
    config
  }), [rInitial]);
  React6.useEffect(() => {
    if (global2 && cursor && enabled) {
      explDomElement.style.cursor = "grab";
      gl.domElement.style.cursor = "";
      return () => {
        explDomElement.style.cursor = "default";
        gl.domElement.style.cursor = "default";
      };
    }
  }, [global2, cursor, explDomElement, enabled]);
  const bind = useGesture({
    onHover: ({
      last
    }) => {
      if (cursor && !global2 && enabled) explDomElement.style.cursor = last ? "auto" : "grab";
    },
    onDrag: ({
      down,
      delta: [x2, y2],
      memo: [oldY, oldX] = spring.rotation.animation.to || rInitial
    }) => {
      if (!enabled) return [y2, x2];
      if (cursor) explDomElement.style.cursor = down ? "grabbing" : "grab";
      x2 = MathUtils.clamp(oldX + x2 / size.width * Math.PI * speed, ...rAzimuth);
      y2 = MathUtils.clamp(oldY + y2 / size.height * Math.PI * speed, ...rPolar);
      const sConfig = snap && !down && typeof snap !== "boolean" ? snap : config;
      api.start({
        scale: down && y2 > rPolar[1] / 2 ? zoom : 1,
        rotation: snap && !down ? rInitial : [y2, x2, 0],
        config: (n3) => n3 === "scale" ? {
          ...sConfig,
          friction: sConfig.friction * 3
        } : sConfig
      });
      return [y2, x2];
    }
  }, {
    target: global2 ? explDomElement : void 0
  });
  return React6.createElement(animated.group, _extends({}, bind == null ? void 0 : bind(), spring), children);
}

// node_modules/@react-three/drei/web/KeyboardControls.js
var React7 = __toESM(require_react());
var context3 = React7.createContext(null);
function KeyboardControls({
  map: map2,
  children,
  onChange,
  domElement
}) {
  const key = map2.map((item) => item.name + item.keys).join("-");
  const useControls = React7.useMemo(() => {
    return create(subscribeWithSelector(() => map2.reduce((prev, cur) => ({
      ...prev,
      [cur.name]: false
    }), {})));
  }, [key]);
  const api = React7.useMemo(() => [useControls.subscribe, useControls.getState, useControls], [key]);
  const set = useControls.setState;
  React7.useEffect(() => {
    const config = map2.map(({
      name,
      keys,
      up
    }) => ({
      keys,
      up,
      fn: (value) => {
        set({
          [name]: value
        });
        if (onChange) onChange(name, value, api[1]());
      }
    }));
    const keyMap = config.reduce((out, {
      keys,
      fn: fn2,
      up = true
    }) => {
      keys.forEach((key2) => out[key2] = {
        fn: fn2,
        pressed: false,
        up
      });
      return out;
    }, {});
    const downHandler = ({
      key: key2,
      code
    }) => {
      const obj = keyMap[key2] || keyMap[code];
      if (!obj) return;
      const {
        fn: fn2,
        pressed,
        up
      } = obj;
      obj.pressed = true;
      if (up || !pressed) fn2(true);
    };
    const upHandler = ({
      key: key2,
      code
    }) => {
      const obj = keyMap[key2] || keyMap[code];
      if (!obj) return;
      const {
        fn: fn2,
        up
      } = obj;
      obj.pressed = false;
      if (up) fn2(false);
    };
    const source = domElement || window;
    source.addEventListener("keydown", downHandler, {
      passive: true
    });
    source.addEventListener("keyup", upHandler, {
      passive: true
    });
    return () => {
      source.removeEventListener("keydown", downHandler);
      source.removeEventListener("keyup", upHandler);
    };
  }, [domElement, key]);
  return React7.createElement(context3.Provider, {
    value: api,
    children
  });
}
function useKeyboardControls(sel) {
  const [sub3, get, store] = React7.useContext(context3);
  if (sel) return store(sel);
  else return [sub3, get];
}

// node_modules/@react-three/drei/web/Select.js
var React8 = __toESM(require_react());
var context4 = React8.createContext([]);
function Select({
  box,
  multiple,
  children,
  onChange,
  onChangePointerUp,
  border = "1px solid #55aaff",
  backgroundColor = "rgba(75, 160, 255, 0.1)",
  filter: customFilter = (item) => item,
  ...props
}) {
  const [downed, down] = React8.useState(false);
  const {
    setEvents,
    camera,
    raycaster,
    gl,
    controls,
    size,
    get
  } = useThree();
  const [hovered, hover] = React8.useState(false);
  const [active, dispatch] = React8.useReducer((state, {
    object,
    shift
  }) => {
    if (object === void 0) return [];
    else if (Array.isArray(object)) return object;
    else if (!shift) return state[0] === object ? [] : [object];
    else if (state.includes(object)) return state.filter((o3) => o3 !== object);
    else return [object, ...state];
  }, []);
  React8.useEffect(() => {
    if (downed) onChange == null ? void 0 : onChange(active);
    else onChangePointerUp == null ? void 0 : onChangePointerUp(active);
  }, [active, downed]);
  const onClick = React8.useCallback((e3) => {
    e3.stopPropagation();
    dispatch({
      object: customFilter([e3.object])[0],
      shift: multiple && e3.shiftKey
    });
  }, []);
  const onPointerMissed = React8.useCallback((e3) => !hovered && dispatch({}), [hovered]);
  const ref = React8.useRef(null);
  React8.useEffect(() => {
    if (!box || !multiple) return;
    const selBox = new SelectionBox(camera, ref.current);
    const element = document.createElement("div");
    element.style.pointerEvents = "none";
    element.style.border = border;
    element.style.backgroundColor = backgroundColor;
    element.style.position = "fixed";
    const startPoint = new Vector2();
    const pointTopLeft = new Vector2();
    const pointBottomRight = new Vector2();
    const oldRaycasterEnabled = get().events.enabled;
    const oldControlsEnabled = controls == null ? void 0 : controls.enabled;
    let isDown = false;
    function prepareRay(event, vec) {
      const {
        offsetX,
        offsetY
      } = event;
      const {
        width,
        height
      } = size;
      vec.set(offsetX / width * 2 - 1, -(offsetY / height) * 2 + 1);
    }
    function onSelectStart(event) {
      var _gl$domElement$parent;
      if (controls) controls.enabled = false;
      setEvents({
        enabled: false
      });
      down(isDown = true);
      (_gl$domElement$parent = gl.domElement.parentElement) == null ? void 0 : _gl$domElement$parent.appendChild(element);
      element.style.left = `${event.clientX}px`;
      element.style.top = `${event.clientY}px`;
      element.style.width = "0px";
      element.style.height = "0px";
      startPoint.x = event.clientX;
      startPoint.y = event.clientY;
    }
    function onSelectMove(event) {
      pointBottomRight.x = Math.max(startPoint.x, event.clientX);
      pointBottomRight.y = Math.max(startPoint.y, event.clientY);
      pointTopLeft.x = Math.min(startPoint.x, event.clientX);
      pointTopLeft.y = Math.min(startPoint.y, event.clientY);
      element.style.left = `${pointTopLeft.x}px`;
      element.style.top = `${pointTopLeft.y}px`;
      element.style.width = `${pointBottomRight.x - pointTopLeft.x}px`;
      element.style.height = `${pointBottomRight.y - pointTopLeft.y}px`;
    }
    function onSelectOver() {
      if (isDown) {
        var _element$parentElemen;
        if (controls) controls.enabled = oldControlsEnabled;
        setEvents({
          enabled: oldRaycasterEnabled
        });
        down(isDown = false);
        (_element$parentElemen = element.parentElement) == null ? void 0 : _element$parentElemen.removeChild(element);
      }
    }
    function pointerDown(event) {
      if (event.shiftKey) {
        onSelectStart(event);
        prepareRay(event, selBox.startPoint);
      }
    }
    let previous = [];
    function pointerMove(event) {
      if (isDown) {
        onSelectMove(event);
        prepareRay(event, selBox.endPoint);
        const allSelected = selBox.select().sort((o3) => o3.uuid).filter((o3) => o3.isMesh);
        if (!shallow(allSelected, previous)) {
          previous = allSelected;
          dispatch({
            object: customFilter(allSelected)
          });
        }
      }
    }
    function pointerUp(event) {
      if (isDown) onSelectOver();
    }
    document.addEventListener("pointerdown", pointerDown, {
      passive: true
    });
    document.addEventListener("pointermove", pointerMove, {
      passive: true,
      capture: true
    });
    document.addEventListener("pointerup", pointerUp, {
      passive: true
    });
    return () => {
      document.removeEventListener("pointerdown", pointerDown);
      document.removeEventListener("pointermove", pointerMove);
      document.removeEventListener("pointerup", pointerUp);
    };
  }, [size.width, size.height, raycaster, camera, controls, gl]);
  return React8.createElement("group", _extends({
    ref,
    onClick,
    onPointerOver: () => hover(true),
    onPointerOut: () => hover(false),
    onPointerMissed
  }, props), React8.createElement(context4.Provider, {
    value: active
  }, children));
}
function useSelect() {
  return React8.useContext(context4);
}

// node_modules/@react-three/drei/core/Billboard.js
var React9 = __toESM(require_react());
var Billboard = React9.forwardRef(function Billboard2({
  follow = true,
  lockX = false,
  lockY = false,
  lockZ = false,
  ...props
}, ref) {
  const localRef = React9.useRef();
  useFrame(({
    camera
  }) => {
    if (!follow || !localRef.current) return;
    const prevRotation = localRef.current.rotation.clone();
    camera.getWorldQuaternion(localRef.current.quaternion);
    if (lockX) localRef.current.rotation.x = prevRotation.x;
    if (lockY) localRef.current.rotation.y = prevRotation.y;
    if (lockZ) localRef.current.rotation.z = prevRotation.z;
  });
  return React9.createElement("group", _extends({
    ref: react_merge_refs_esm_default([localRef, ref])
  }, props));
});

// node_modules/@react-three/drei/core/ScreenSpace.js
var React10 = __toESM(require_react());
var ScreenSpace = React10.forwardRef(({
  children,
  depth = -1,
  ...rest
}, ref) => {
  const localRef = React10.useRef(null);
  useFrame(({
    camera
  }) => {
    localRef.current.quaternion.copy(camera.quaternion);
    localRef.current.position.copy(camera.position);
  });
  return React10.createElement("group", _extends({
    ref: react_merge_refs_esm_default([ref, localRef])
  }, rest), React10.createElement("group", {
    "position-z": -depth
  }, children));
});

// node_modules/@react-three/drei/core/QuadraticBezierLine.js
var React12 = __toESM(require_react());

// node_modules/@react-three/drei/core/Line.js
var React11 = __toESM(require_react());
var Line = React11.forwardRef(function Line4({
  points,
  color = "black",
  vertexColors,
  linewidth,
  lineWidth,
  segments,
  dashed,
  ...rest
}, ref) {
  const size = useThree((state) => state.size);
  const line2 = React11.useMemo(() => segments ? new LineSegments2() : new Line2(), [segments]);
  const [lineMaterial] = React11.useState(() => new LineMaterial());
  const lineGeom = React11.useMemo(() => {
    const geom = segments ? new LineSegmentsGeometry() : new LineGeometry();
    const pValues = points.map((p3) => {
      const isArray3 = Array.isArray(p3);
      return p3 instanceof Vector3 ? [p3.x, p3.y, p3.z] : p3 instanceof Vector2 ? [p3.x, p3.y, 0] : isArray3 && p3.length === 3 ? [p3[0], p3[1], p3[2]] : isArray3 && p3.length === 2 ? [p3[0], p3[1], 0] : p3;
    });
    geom.setPositions(pValues.flat());
    if (vertexColors) {
      const cValues = vertexColors.map((c5) => c5 instanceof Color ? c5.toArray() : c5);
      geom.setColors(cValues.flat());
    }
    return geom;
  }, [points, segments, vertexColors]);
  React11.useLayoutEffect(() => {
    line2.computeLineDistances();
  }, [points, line2]);
  React11.useLayoutEffect(() => {
    if (dashed) {
      lineMaterial.defines.USE_DASH = "";
    } else {
      delete lineMaterial.defines.USE_DASH;
    }
    lineMaterial.needsUpdate = true;
  }, [dashed, lineMaterial]);
  React11.useEffect(() => {
    return () => lineGeom.dispose();
  }, [lineGeom]);
  return React11.createElement("primitive", _extends({
    object: line2,
    ref
  }, rest), React11.createElement("primitive", {
    object: lineGeom,
    attach: "geometry"
  }), React11.createElement("primitive", _extends({
    object: lineMaterial,
    attach: "material",
    color,
    vertexColors: Boolean(vertexColors),
    resolution: [size.width, size.height],
    linewidth: linewidth !== null && linewidth !== void 0 ? linewidth : lineWidth,
    dashed
  }, rest)));
});

// node_modules/@react-three/drei/core/QuadraticBezierLine.js
var v = new Vector3();
var QuadraticBezierLine = React12.forwardRef(function QuadraticBezierLine2({
  start = [0, 0, 0],
  end = [0, 0, 0],
  mid,
  segments = 20,
  ...rest
}, forwardref) {
  const ref = React12.useRef(null);
  const [curve] = React12.useState(() => new QuadraticBezierCurve3(void 0, void 0, void 0));
  const getPoints = React12.useCallback((start2, end2, mid2, segments2 = 20) => {
    if (start2 instanceof Vector3) curve.v0.copy(start2);
    else curve.v0.set(...start2);
    if (end2 instanceof Vector3) curve.v2.copy(end2);
    else curve.v2.set(...end2);
    if (mid2 instanceof Vector3) {
      curve.v1.copy(mid2);
    } else if (Array.isArray(mid2)) {
      curve.v1.set(...mid2);
    } else {
      curve.v1.copy(curve.v0.clone().add(curve.v2.clone().sub(curve.v0)).add(v.set(0, curve.v0.y - curve.v2.y, 0)));
    }
    return curve.getPoints(segments2);
  }, []);
  React12.useLayoutEffect(() => {
    ref.current.setPoints = (start2, end2, mid2) => {
      const points2 = getPoints(start2, end2, mid2);
      if (ref.current.geometry) ref.current.geometry.setPositions(points2.map((p3) => p3.toArray()).flat());
    };
  }, []);
  const points = React12.useMemo(() => getPoints(start, end, mid, segments), [start, end, mid, segments]);
  return React12.createElement(Line, _extends({
    ref: react_merge_refs_esm_default([ref, forwardref]),
    points
  }, rest));
});

// node_modules/@react-three/drei/core/CubicBezierLine.js
var React13 = __toESM(require_react());
var CubicBezierLine = React13.forwardRef(function CubicBezierLine2({
  start,
  end,
  midA,
  midB,
  segments = 20,
  ...rest
}, ref) {
  const points = React13.useMemo(() => {
    const startV = start instanceof Vector3 ? start : new Vector3(...start);
    const endV = end instanceof Vector3 ? end : new Vector3(...end);
    const midAV = midA instanceof Vector3 ? midA : new Vector3(...midA);
    const midBV = midB instanceof Vector3 ? midB : new Vector3(...midB);
    const interpolatedV = new CubicBezierCurve3(startV, midAV, midBV, endV).getPoints(segments);
    return interpolatedV;
  }, [start, end, midA, midB, segments]);
  return React13.createElement(Line, _extends({
    ref,
    points
  }, rest));
});

// node_modules/@react-three/drei/core/CatmullRomLine.js
var React14 = __toESM(require_react());
var CatmullRomLine = React14.forwardRef(function CatmullRomLine2({
  points,
  closed = false,
  curveType = "centripetal",
  tension = 0.5,
  segments = 20,
  vertexColors,
  ...rest
}, ref) {
  const curve = React14.useMemo(() => {
    const mappedPoints = points.map((pt2) => pt2 instanceof Vector3 ? pt2 : new Vector3(...pt2));
    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);
  }, [points, closed, curveType, tension]);
  const segmentedPoints = React14.useMemo(() => curve.getPoints(segments), [curve, segments]);
  const interpolatedVertexColors = React14.useMemo(() => {
    if (!vertexColors || vertexColors.length < 2) return void 0;
    if (vertexColors.length === segments + 1) return vertexColors;
    const mappedColors = vertexColors.map((color) => color instanceof Color ? color : new Color(...color));
    if (closed) mappedColors.push(mappedColors[0].clone());
    const iColors = [mappedColors[0]];
    const divisions = segments / (mappedColors.length - 1);
    for (let i4 = 1; i4 < segments; i4++) {
      const alpha = i4 % divisions / divisions;
      const colorIndex = Math.floor(i4 / divisions);
      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));
    }
    iColors.push(mappedColors[mappedColors.length - 1]);
    return iColors;
  }, [vertexColors, segments]);
  return React14.createElement(Line, _extends({
    ref,
    points: segmentedPoints,
    vertexColors: interpolatedVertexColors
  }, rest));
});

// node_modules/@react-three/drei/core/PositionalAudio.js
var React15 = __toESM(require_react());
var PositionalAudio = React15.forwardRef(({
  url,
  distance: distance3 = 1,
  loop = true,
  autoplay,
  ...props
}, ref) => {
  const sound = React15.useRef();
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const [listener] = React15.useState(() => new AudioListener());
  const buffer2 = useLoader(AudioLoader, url);
  React15.useEffect(() => {
    const _sound = sound.current;
    if (_sound) {
      _sound.setBuffer(buffer2);
      _sound.setRefDistance(distance3);
      _sound.setLoop(loop);
      if (autoplay && !_sound.isPlaying) _sound.play();
    }
  }, [buffer2, camera, distance3, loop]);
  React15.useEffect(() => {
    const _sound = sound.current;
    camera.add(listener);
    return () => {
      camera.remove(listener);
      if (_sound) {
        if (_sound.isPlaying) _sound.stop();
        if (_sound.source && _sound.source._connected) _sound.disconnect();
      }
    };
  }, []);
  return React15.createElement("positionalAudio", _extends({
    ref: react_merge_refs_esm_default([sound, ref]),
    args: [listener]
  }, props));
});

// node_modules/@react-three/drei/core/Text.js
var React16 = __toESM(require_react());

// node_modules/troika-worker-utils/dist/troika-worker-utils.esm.js
function workerBootstrap() {
  var modules = /* @__PURE__ */ Object.create(null);
  function registerModule(ref, callback) {
    var id = ref.id;
    var name = ref.name;
    var dependencies = ref.dependencies;
    if (dependencies === void 0) dependencies = [];
    var init = ref.init;
    if (init === void 0) init = function() {
    };
    var getTransferables = ref.getTransferables;
    if (getTransferables === void 0) getTransferables = null;
    if (modules[id]) {
      return;
    }
    try {
      dependencies = dependencies.map(function(dep) {
        if (dep && dep.isWorkerModule) {
          registerModule(dep, function(depResult) {
            if (depResult instanceof Error) {
              throw depResult;
            }
          });
          dep = modules[dep.id].value;
        }
        return dep;
      });
      init = rehydrate("<" + name + ">.init", init);
      if (getTransferables) {
        getTransferables = rehydrate("<" + name + ">.getTransferables", getTransferables);
      }
      var value = null;
      if (typeof init === "function") {
        value = init.apply(void 0, dependencies);
      } else {
        console.error("worker module init function failed to rehydrate");
      }
      modules[id] = {
        id,
        value,
        getTransferables
      };
      callback(value);
    } catch (err) {
      if (!(err && err.noLog)) {
        console.error(err);
      }
      callback(err);
    }
  }
  function callModule(ref, callback) {
    var ref$1;
    var id = ref.id;
    var args = ref.args;
    if (!modules[id] || typeof modules[id].value !== "function") {
      callback(new Error("Worker module " + id + ": not found or its 'init' did not return a function"));
    }
    try {
      var result = (ref$1 = modules[id]).value.apply(ref$1, args);
      if (result && typeof result.then === "function") {
        result.then(handleResult, function(rej) {
          return callback(rej instanceof Error ? rej : new Error("" + rej));
        });
      } else {
        handleResult(result);
      }
    } catch (err) {
      callback(err);
    }
    function handleResult(result2) {
      try {
        var tx = modules[id].getTransferables && modules[id].getTransferables(result2);
        if (!tx || !Array.isArray(tx) || !tx.length) {
          tx = void 0;
        }
        callback(result2, tx);
      } catch (err) {
        console.error(err);
        callback(err);
      }
    }
  }
  function rehydrate(name, str) {
    var result = void 0;
    self.troikaDefine = function(r3) {
      return result = r3;
    };
    var url = URL.createObjectURL(
      new Blob(
        ["/** " + name.replace(/\*/g, "") + " **/\n\ntroikaDefine(\n" + str + "\n)"],
        { type: "application/javascript" }
      )
    );
    try {
      importScripts(url);
    } catch (err) {
      console.error(err);
    }
    URL.revokeObjectURL(url);
    delete self.troikaDefine;
    return result;
  }
  self.addEventListener("message", function(e3) {
    var ref = e3.data;
    var messageId = ref.messageId;
    var action = ref.action;
    var data = ref.data;
    try {
      if (action === "registerModule") {
        registerModule(data, function(result) {
          if (result instanceof Error) {
            postMessage({
              messageId,
              success: false,
              error: result.message
            });
          } else {
            postMessage({
              messageId,
              success: true,
              result: { isCallable: typeof result === "function" }
            });
          }
        });
      }
      if (action === "callModule") {
        callModule(data, function(result, transferables) {
          if (result instanceof Error) {
            postMessage({
              messageId,
              success: false,
              error: result.message
            });
          } else {
            postMessage({
              messageId,
              success: true,
              result
            }, transferables || void 0);
          }
        });
      }
    } catch (err) {
      postMessage({
        messageId,
        success: false,
        error: err.stack
      });
    }
  });
}
function defineMainThreadModule(options) {
  var moduleFunc = function() {
    var args = [], len = arguments.length;
    while (len--) args[len] = arguments[len];
    return moduleFunc._getInitResult().then(function(initResult) {
      if (typeof initResult === "function") {
        return initResult.apply(void 0, args);
      } else {
        throw new Error("Worker module function was called but `init` did not return a callable function");
      }
    });
  };
  moduleFunc._getInitResult = function() {
    var dependencies = options.dependencies;
    var init = options.init;
    dependencies = Array.isArray(dependencies) ? dependencies.map(
      function(dep) {
        return dep && dep._getInitResult ? dep._getInitResult() : dep;
      }
    ) : [];
    var initPromise = Promise.all(dependencies).then(function(deps) {
      return init.apply(null, deps);
    });
    moduleFunc._getInitResult = function() {
      return initPromise;
    };
    return initPromise;
  };
  return moduleFunc;
}
var supportsWorkers = function() {
  var supported = false;
  if (typeof window !== "undefined" && typeof window.document !== "undefined") {
    try {
      var worker = new Worker(
        URL.createObjectURL(new Blob([""], { type: "application/javascript" }))
      );
      worker.terminate();
      supported = true;
    } catch (err) {
      if (typeof process !== "undefined" && false) ;
      else {
        console.log(
          "Troika createWorkerModule: web workers not allowed; falling back to main thread execution. Cause: [" + err.message + "]"
        );
      }
    }
  }
  supportsWorkers = function() {
    return supported;
  };
  return supported;
};
var _workerModuleId = 0;
var _messageId = 0;
var _allowInitAsString = false;
var workers = /* @__PURE__ */ Object.create(null);
var registeredModules = /* @__PURE__ */ Object.create(null);
var openRequests = /* @__PURE__ */ Object.create(null);
function defineWorkerModule(options) {
  if ((!options || typeof options.init !== "function") && !_allowInitAsString) {
    throw new Error("requires `options.init` function");
  }
  var dependencies = options.dependencies;
  var init = options.init;
  var getTransferables = options.getTransferables;
  var workerId = options.workerId;
  if (!supportsWorkers()) {
    return defineMainThreadModule(options);
  }
  if (workerId == null) {
    workerId = "#default";
  }
  var id = "workerModule" + ++_workerModuleId;
  var name = options.name || id;
  var registrationPromise = null;
  dependencies = dependencies && dependencies.map(function(dep) {
    if (typeof dep === "function" && !dep.workerModuleData) {
      _allowInitAsString = true;
      dep = defineWorkerModule({
        workerId,
        name: "<" + name + "> function dependency: " + dep.name,
        init: "function(){return (\n" + stringifyFunction(dep) + "\n)}"
      });
      _allowInitAsString = false;
    }
    if (dep && dep.workerModuleData) {
      dep = dep.workerModuleData;
    }
    return dep;
  });
  function moduleFunc() {
    var args = [], len = arguments.length;
    while (len--) args[len] = arguments[len];
    if (!registrationPromise) {
      registrationPromise = callWorker(workerId, "registerModule", moduleFunc.workerModuleData);
      var unregister = function() {
        registrationPromise = null;
        registeredModules[workerId].delete(unregister);
      };
      (registeredModules[workerId] || (registeredModules[workerId] = /* @__PURE__ */ new Set())).add(unregister);
    }
    return registrationPromise.then(function(ref) {
      var isCallable = ref.isCallable;
      if (isCallable) {
        return callWorker(workerId, "callModule", { id, args });
      } else {
        throw new Error("Worker module function was called but `init` did not return a callable function");
      }
    });
  }
  moduleFunc.workerModuleData = {
    isWorkerModule: true,
    id,
    name,
    dependencies,
    init: stringifyFunction(init),
    getTransferables: getTransferables && stringifyFunction(getTransferables)
  };
  return moduleFunc;
}
function terminateWorker(workerId) {
  if (registeredModules[workerId]) {
    registeredModules[workerId].forEach(function(unregister) {
      unregister();
    });
  }
  if (workers[workerId]) {
    workers[workerId].terminate();
    delete workers[workerId];
  }
}
function stringifyFunction(fn2) {
  var str = fn2.toString();
  if (!/^function/.test(str) && /^\w+\s*\(/.test(str)) {
    str = "function " + str;
  }
  return str;
}
function getWorker(workerId) {
  var worker = workers[workerId];
  if (!worker) {
    var bootstrap = stringifyFunction(workerBootstrap);
    worker = workers[workerId] = new Worker(
      URL.createObjectURL(
        new Blob(
          ["/** Worker Module Bootstrap: " + workerId.replace(/\*/g, "") + " **/\n\n;(" + bootstrap + ")()"],
          { type: "application/javascript" }
        )
      )
    );
    worker.onmessage = function(e3) {
      var response = e3.data;
      var msgId = response.messageId;
      var callback = openRequests[msgId];
      if (!callback) {
        throw new Error("WorkerModule response with empty or unknown messageId");
      }
      delete openRequests[msgId];
      callback(response);
    };
  }
  return worker;
}
function callWorker(workerId, action, data) {
  return new Promise(function(resolve, reject) {
    var messageId = ++_messageId;
    openRequests[messageId] = function(response) {
      if (response.success) {
        resolve(response.result);
      } else {
        reject(new Error("Error in worker " + action + " call: " + response.error));
      }
    };
    getWorker(workerId).postMessage({
      messageId,
      action,
      data
    });
  });
}

// node_modules/webgl-sdf-generator/dist/webgl-sdf-generator.mjs
function SDFGenerator() {
  var exports = function(exports2) {
    function pointOnQuadraticBezier(x0, y0, x1, y1, x2, y2, t3, pointOut) {
      var t22 = 1 - t3;
      pointOut.x = t22 * t22 * x0 + 2 * t22 * t3 * x1 + t3 * t3 * x2;
      pointOut.y = t22 * t22 * y0 + 2 * t22 * t3 * y1 + t3 * t3 * y2;
    }
    function pointOnCubicBezier(x0, y0, x1, y1, x2, y2, x3, y3, t3, pointOut) {
      var t22 = 1 - t3;
      pointOut.x = t22 * t22 * t22 * x0 + 3 * t22 * t22 * t3 * x1 + 3 * t22 * t3 * t3 * x2 + t3 * t3 * t3 * x3;
      pointOut.y = t22 * t22 * t22 * y0 + 3 * t22 * t22 * t3 * y1 + 3 * t22 * t3 * t3 * y2 + t3 * t3 * t3 * y3;
    }
    function forEachPathCommand(pathString, commandCallback) {
      var segmentRE = /([MLQCZ])([^MLQCZ]*)/g;
      var match, firstX, firstY, prevX, prevY;
      while (match = segmentRE.exec(pathString)) {
        var args = match[2].replace(/^\s*|\s*$/g, "").split(/[,\s]+/).map(function(v5) {
          return parseFloat(v5);
        });
        switch (match[1]) {
          case "M":
            prevX = firstX = args[0];
            prevY = firstY = args[1];
            break;
          case "L":
            if (args[0] !== prevX || args[1] !== prevY) {
              commandCallback("L", prevX, prevY, prevX = args[0], prevY = args[1]);
            }
            break;
          case "Q": {
            commandCallback("Q", prevX, prevY, prevX = args[2], prevY = args[3], args[0], args[1]);
            break;
          }
          case "C": {
            commandCallback("C", prevX, prevY, prevX = args[4], prevY = args[5], args[0], args[1], args[2], args[3]);
            break;
          }
          case "Z":
            if (prevX !== firstX || prevY !== firstY) {
              commandCallback("L", prevX, prevY, firstX, firstY);
            }
            break;
        }
      }
    }
    function pathToLineSegments(pathString, segmentCallback, curvePoints) {
      if (curvePoints === void 0) curvePoints = 16;
      var tempPoint = { x: 0, y: 0 };
      forEachPathCommand(pathString, function(command, startX, startY, endX, endY, ctrl1X, ctrl1Y, ctrl2X, ctrl2Y) {
        switch (command) {
          case "L":
            segmentCallback(startX, startY, endX, endY);
            break;
          case "Q": {
            var prevCurveX = startX;
            var prevCurveY = startY;
            for (var i4 = 1; i4 < curvePoints; i4++) {
              pointOnQuadraticBezier(
                startX,
                startY,
                ctrl1X,
                ctrl1Y,
                endX,
                endY,
                i4 / (curvePoints - 1),
                tempPoint
              );
              segmentCallback(prevCurveX, prevCurveY, tempPoint.x, tempPoint.y);
              prevCurveX = tempPoint.x;
              prevCurveY = tempPoint.y;
            }
            break;
          }
          case "C": {
            var prevCurveX$1 = startX;
            var prevCurveY$1 = startY;
            for (var i$1 = 1; i$1 < curvePoints; i$1++) {
              pointOnCubicBezier(
                startX,
                startY,
                ctrl1X,
                ctrl1Y,
                ctrl2X,
                ctrl2Y,
                endX,
                endY,
                i$1 / (curvePoints - 1),
                tempPoint
              );
              segmentCallback(prevCurveX$1, prevCurveY$1, tempPoint.x, tempPoint.y);
              prevCurveX$1 = tempPoint.x;
              prevCurveY$1 = tempPoint.y;
            }
            break;
          }
        }
      });
    }
    var viewportQuadVertex = "precision highp float;attribute vec2 aUV;varying vec2 vUV;void main(){vUV=aUV;gl_Position=vec4(mix(vec2(-1.0),vec2(1.0),aUV),0.0,1.0);}";
    var copyTexFragment = "precision highp float;uniform sampler2D tex;varying vec2 vUV;void main(){gl_FragColor=texture2D(tex,vUV);}";
    var cache = /* @__PURE__ */ new WeakMap();
    var glContextParams = {
      premultipliedAlpha: false,
      preserveDrawingBuffer: true,
      antialias: false,
      depth: false
    };
    function withWebGLContext(glOrCanvas, callback) {
      var gl = glOrCanvas.getContext ? glOrCanvas.getContext("webgl", glContextParams) : glOrCanvas;
      var wrapper = cache.get(gl);
      if (!wrapper) {
        let getExtension = function(name) {
          var ext = extensions2[name];
          if (!ext) {
            ext = extensions2[name] = gl.getExtension(name);
            if (!ext) {
              throw new Error(name + " not supported");
            }
          }
          return ext;
        }, compileShader = function(src, type) {
          var shader = gl.createShader(type);
          gl.shaderSource(shader, src);
          gl.compileShader(shader);
          return shader;
        }, withProgram = function(name, vert, frag, func) {
          if (!programs[name]) {
            var attributes = {};
            var uniforms = {};
            var program = gl.createProgram();
            gl.attachShader(program, compileShader(vert, gl.VERTEX_SHADER));
            gl.attachShader(program, compileShader(frag, gl.FRAGMENT_SHADER));
            gl.linkProgram(program);
            programs[name] = {
              program,
              transaction: function transaction(func2) {
                gl.useProgram(program);
                func2({
                  setUniform: function setUniform(type, name2) {
                    var values = [], len = arguments.length - 2;
                    while (len-- > 0) values[len] = arguments[len + 2];
                    var uniformLoc = uniforms[name2] || (uniforms[name2] = gl.getUniformLocation(program, name2));
                    gl["uniform" + type].apply(gl, [uniformLoc].concat(values));
                  },
                  setAttribute: function setAttribute(name2, size, usage, instancingDivisor, data) {
                    var attr = attributes[name2];
                    if (!attr) {
                      attr = attributes[name2] = {
                        buf: gl.createBuffer(),
                        // TODO should we destroy our buffers?
                        loc: gl.getAttribLocation(program, name2),
                        data: null
                      };
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, attr.buf);
                    gl.vertexAttribPointer(attr.loc, size, gl.FLOAT, false, 0, 0);
                    gl.enableVertexAttribArray(attr.loc);
                    if (isWebGL2) {
                      gl.vertexAttribDivisor(attr.loc, instancingDivisor);
                    } else {
                      getExtension("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(attr.loc, instancingDivisor);
                    }
                    if (data !== attr.data) {
                      gl.bufferData(gl.ARRAY_BUFFER, data, usage);
                      attr.data = data;
                    }
                  }
                });
              }
            };
          }
          programs[name].transaction(func);
        }, withTexture = function(name, func) {
          textureUnit++;
          try {
            gl.activeTexture(gl.TEXTURE0 + textureUnit);
            var texture = textures[name];
            if (!texture) {
              texture = textures[name] = gl.createTexture();
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            }
            gl.bindTexture(gl.TEXTURE_2D, texture);
            func(texture, textureUnit);
          } finally {
            textureUnit--;
          }
        }, withTextureFramebuffer = function(texture, textureUnit2, func) {
          var framebuffer = gl.createFramebuffer();
          framebufferStack.push(framebuffer);
          gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
          gl.activeTexture(gl.TEXTURE0 + textureUnit2);
          gl.bindTexture(gl.TEXTURE_2D, texture);
          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
          try {
            func(framebuffer);
          } finally {
            gl.deleteFramebuffer(framebuffer);
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferStack[--framebufferStack.length - 1] || null);
          }
        }, handleContextLoss = function() {
          extensions2 = {};
          programs = {};
          textures = {};
          textureUnit = -1;
          framebufferStack.length = 0;
        };
        var isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext;
        var extensions2 = {};
        var programs = {};
        var textures = {};
        var textureUnit = -1;
        var framebufferStack = [];
        gl.canvas.addEventListener("webglcontextlost", function(e3) {
          handleContextLoss();
          e3.preventDefault();
        }, false);
        cache.set(gl, wrapper = {
          gl,
          isWebGL2,
          getExtension,
          withProgram,
          withTexture,
          withTextureFramebuffer,
          handleContextLoss
        });
      }
      callback(wrapper);
    }
    function renderImageData(glOrCanvas, imageData, x2, y2, width, height, channels, framebuffer) {
      if (channels === void 0) channels = 15;
      if (framebuffer === void 0) framebuffer = null;
      withWebGLContext(glOrCanvas, function(ref) {
        var gl = ref.gl;
        var withProgram = ref.withProgram;
        var withTexture = ref.withTexture;
        withTexture("copy", function(tex, texUnit) {
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, imageData);
          withProgram("copy", viewportQuadVertex, copyTexFragment, function(ref2) {
            var setUniform = ref2.setUniform;
            var setAttribute = ref2.setAttribute;
            setAttribute("aUV", 2, gl.STATIC_DRAW, 0, new Float32Array([0, 0, 2, 0, 0, 2]));
            setUniform("1i", "image", texUnit);
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer || null);
            gl.disable(gl.BLEND);
            gl.colorMask(channels & 8, channels & 4, channels & 2, channels & 1);
            gl.viewport(x2, y2, width, height);
            gl.scissor(x2, y2, width, height);
            gl.drawArrays(gl.TRIANGLES, 0, 3);
          });
        });
      });
    }
    function resizeWebGLCanvasWithoutClearing2(canvas, newWidth, newHeight) {
      var width = canvas.width;
      var height = canvas.height;
      withWebGLContext(canvas, function(ref) {
        var gl = ref.gl;
        var data = new Uint8Array(width * height * 4);
        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);
        canvas.width = newWidth;
        canvas.height = newHeight;
        renderImageData(gl, data, 0, 0, width, height);
      });
    }
    var webglUtils = Object.freeze({
      __proto__: null,
      withWebGLContext,
      renderImageData,
      resizeWebGLCanvasWithoutClearing: resizeWebGLCanvasWithoutClearing2
    });
    function generate$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent) {
      if (sdfExponent === void 0) sdfExponent = 1;
      var textureData = new Uint8Array(sdfWidth * sdfHeight);
      var viewBoxWidth = viewBox[2] - viewBox[0];
      var viewBoxHeight = viewBox[3] - viewBox[1];
      var segments = [];
      pathToLineSegments(path, function(x1, y1, x2, y2) {
        segments.push({
          x1,
          y1,
          x2,
          y2,
          minX: Math.min(x1, x2),
          minY: Math.min(y1, y2),
          maxX: Math.max(x1, x2),
          maxY: Math.max(y1, y2)
        });
      });
      segments.sort(function(a6, b5) {
        return a6.maxX - b5.maxX;
      });
      for (var sdfX = 0; sdfX < sdfWidth; sdfX++) {
        for (var sdfY = 0; sdfY < sdfHeight; sdfY++) {
          var signedDist = findNearestSignedDistance(
            viewBox[0] + viewBoxWidth * (sdfX + 0.5) / sdfWidth,
            viewBox[1] + viewBoxHeight * (sdfY + 0.5) / sdfHeight
          );
          var alpha = Math.pow(1 - Math.abs(signedDist) / maxDistance, sdfExponent) / 2;
          if (signedDist < 0) {
            alpha = 1 - alpha;
          }
          alpha = Math.max(0, Math.min(255, Math.round(alpha * 255)));
          textureData[sdfY * sdfWidth + sdfX] = alpha;
        }
      }
      return textureData;
      function findNearestSignedDistance(x2, y2) {
        var closestDistSq = Infinity;
        var closestDist = Infinity;
        for (var i4 = segments.length; i4--; ) {
          var seg = segments[i4];
          if (seg.maxX + closestDist <= x2) {
            break;
          }
          if (x2 + closestDist > seg.minX && y2 - closestDist < seg.maxY && y2 + closestDist > seg.minY) {
            var distSq = absSquareDistanceToLineSegment(x2, y2, seg.x1, seg.y1, seg.x2, seg.y2);
            if (distSq < closestDistSq) {
              closestDistSq = distSq;
              closestDist = Math.sqrt(closestDistSq);
            }
          }
        }
        if (isPointInPoly(x2, y2)) {
          closestDist = -closestDist;
        }
        return closestDist;
      }
      function isPointInPoly(x2, y2) {
        var winding = 0;
        for (var i4 = segments.length; i4--; ) {
          var seg = segments[i4];
          if (seg.maxX <= x2) {
            break;
          }
          var intersects = seg.y1 > y2 !== seg.y2 > y2 && x2 < (seg.x2 - seg.x1) * (y2 - seg.y1) / (seg.y2 - seg.y1) + seg.x1;
          if (intersects) {
            winding += seg.y1 < seg.y2 ? 1 : -1;
          }
        }
        return winding !== 0;
      }
    }
    function generateIntoCanvas$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x2, y2, channel) {
      if (sdfExponent === void 0) sdfExponent = 1;
      if (x2 === void 0) x2 = 0;
      if (y2 === void 0) y2 = 0;
      if (channel === void 0) channel = 0;
      generateIntoFramebuffer$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, null, x2, y2, channel);
    }
    function generateIntoFramebuffer$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas, framebuffer, x2, y2, channel) {
      if (sdfExponent === void 0) sdfExponent = 1;
      if (x2 === void 0) x2 = 0;
      if (y2 === void 0) y2 = 0;
      if (channel === void 0) channel = 0;
      var data = generate$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent);
      var rgbaData = new Uint8Array(data.length * 4);
      for (var i4 = 0; i4 < data.length; i4++) {
        rgbaData[i4 * 4 + channel] = data[i4];
      }
      renderImageData(glOrCanvas, rgbaData, x2, y2, sdfWidth, sdfHeight, 1 << 3 - channel, framebuffer);
    }
    function absSquareDistanceToLineSegment(x2, y2, lineX0, lineY0, lineX1, lineY1) {
      var ldx = lineX1 - lineX0;
      var ldy = lineY1 - lineY0;
      var lengthSq = ldx * ldx + ldy * ldy;
      var t3 = lengthSq ? Math.max(0, Math.min(1, ((x2 - lineX0) * ldx + (y2 - lineY0) * ldy) / lengthSq)) : 0;
      var dx = x2 - (lineX0 + t3 * ldx);
      var dy = y2 - (lineY0 + t3 * ldy);
      return dx * dx + dy * dy;
    }
    var javascript = Object.freeze({
      __proto__: null,
      generate: generate$2,
      generateIntoCanvas: generateIntoCanvas$2,
      generateIntoFramebuffer: generateIntoFramebuffer$1
    });
    var mainVertex = "precision highp float;uniform vec4 uGlyphBounds;attribute vec2 aUV;attribute vec4 aLineSegment;varying vec4 vLineSegment;varying vec2 vGlyphXY;void main(){vLineSegment=aLineSegment;vGlyphXY=mix(uGlyphBounds.xy,uGlyphBounds.zw,aUV);gl_Position=vec4(mix(vec2(-1.0),vec2(1.0),aUV),0.0,1.0);}";
    var mainFragment = "precision highp float;uniform vec4 uGlyphBounds;uniform float uMaxDistance;uniform float uExponent;varying vec4 vLineSegment;varying vec2 vGlyphXY;float absDistToSegment(vec2 point,vec2 lineA,vec2 lineB){vec2 lineDir=lineB-lineA;float lenSq=dot(lineDir,lineDir);float t=lenSq==0.0 ? 0.0 : clamp(dot(point-lineA,lineDir)/lenSq,0.0,1.0);vec2 linePt=lineA+t*lineDir;return distance(point,linePt);}void main(){vec4 seg=vLineSegment;vec2 p=vGlyphXY;float dist=absDistToSegment(p,seg.xy,seg.zw);float val=pow(1.0-clamp(dist/uMaxDistance,0.0,1.0),uExponent)*0.5;bool crossing=(seg.y>p.y!=seg.w>p.y)&&(p.x<(seg.z-seg.x)*(p.y-seg.y)/(seg.w-seg.y)+seg.x);bool crossingUp=crossing&&vLineSegment.y<vLineSegment.w;gl_FragColor=vec4(crossingUp ? 1.0/255.0 : 0.0,crossing&&!crossingUp ? 1.0/255.0 : 0.0,0.0,val);}";
    var postFragment = "precision highp float;uniform sampler2D tex;varying vec2 vUV;void main(){vec4 color=texture2D(tex,vUV);bool inside=color.r!=color.g;float val=inside ? 1.0-color.a : color.a;gl_FragColor=vec4(val);}";
    var viewportUVs = new Float32Array([0, 0, 2, 0, 0, 2]);
    var implicitContext = null;
    var isTestingSupport = false;
    var NULL_OBJECT = {};
    var supportByCanvas = /* @__PURE__ */ new WeakMap();
    function validateSupport(glOrCanvas) {
      if (!isTestingSupport && !isSupported(glOrCanvas)) {
        throw new Error("WebGL generation not supported");
      }
    }
    function generate$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas) {
      if (sdfExponent === void 0) sdfExponent = 1;
      if (glOrCanvas === void 0) glOrCanvas = null;
      if (!glOrCanvas) {
        glOrCanvas = implicitContext;
        if (!glOrCanvas) {
          var canvas = typeof OffscreenCanvas === "function" ? new OffscreenCanvas(1, 1) : typeof document !== "undefined" ? document.createElement("canvas") : null;
          if (!canvas) {
            throw new Error("OffscreenCanvas or DOM canvas not supported");
          }
          glOrCanvas = implicitContext = canvas.getContext("webgl", { depth: false });
        }
      }
      validateSupport(glOrCanvas);
      var rgbaData = new Uint8Array(sdfWidth * sdfHeight * 4);
      withWebGLContext(glOrCanvas, function(ref) {
        var gl = ref.gl;
        var withTexture = ref.withTexture;
        var withTextureFramebuffer = ref.withTextureFramebuffer;
        withTexture("readable", function(texture, textureUnit) {
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sdfWidth, sdfHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
          withTextureFramebuffer(texture, textureUnit, function(framebuffer) {
            generateIntoFramebuffer(
              sdfWidth,
              sdfHeight,
              path,
              viewBox,
              maxDistance,
              sdfExponent,
              gl,
              framebuffer,
              0,
              0,
              0
              // red channel
            );
            gl.readPixels(0, 0, sdfWidth, sdfHeight, gl.RGBA, gl.UNSIGNED_BYTE, rgbaData);
          });
        });
      });
      var data = new Uint8Array(sdfWidth * sdfHeight);
      for (var i4 = 0, j2 = 0; i4 < rgbaData.length; i4 += 4) {
        data[j2++] = rgbaData[i4];
      }
      return data;
    }
    function generateIntoCanvas$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x2, y2, channel) {
      if (sdfExponent === void 0) sdfExponent = 1;
      if (x2 === void 0) x2 = 0;
      if (y2 === void 0) y2 = 0;
      if (channel === void 0) channel = 0;
      generateIntoFramebuffer(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, null, x2, y2, channel);
    }
    function generateIntoFramebuffer(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas, framebuffer, x2, y2, channel) {
      if (sdfExponent === void 0) sdfExponent = 1;
      if (x2 === void 0) x2 = 0;
      if (y2 === void 0) y2 = 0;
      if (channel === void 0) channel = 0;
      validateSupport(glOrCanvas);
      var lineSegmentCoords = [];
      pathToLineSegments(path, function(x1, y1, x22, y22) {
        lineSegmentCoords.push(x1, y1, x22, y22);
      });
      lineSegmentCoords = new Float32Array(lineSegmentCoords);
      withWebGLContext(glOrCanvas, function(ref) {
        var gl = ref.gl;
        var isWebGL2 = ref.isWebGL2;
        var getExtension = ref.getExtension;
        var withProgram = ref.withProgram;
        var withTexture = ref.withTexture;
        var withTextureFramebuffer = ref.withTextureFramebuffer;
        var handleContextLoss = ref.handleContextLoss;
        withTexture("rawDistances", function(intermediateTexture, intermediateTextureUnit) {
          if (sdfWidth !== intermediateTexture._lastWidth || sdfHeight !== intermediateTexture._lastHeight) {
            gl.texImage2D(
              gl.TEXTURE_2D,
              0,
              gl.RGBA,
              intermediateTexture._lastWidth = sdfWidth,
              intermediateTexture._lastHeight = sdfHeight,
              0,
              gl.RGBA,
              gl.UNSIGNED_BYTE,
              null
            );
          }
          withProgram("main", mainVertex, mainFragment, function(ref2) {
            var setAttribute = ref2.setAttribute;
            var setUniform = ref2.setUniform;
            var instancingExtension = !isWebGL2 && getExtension("ANGLE_instanced_arrays");
            var blendMinMaxExtension = !isWebGL2 && getExtension("EXT_blend_minmax");
            setAttribute("aUV", 2, gl.STATIC_DRAW, 0, viewportUVs);
            setAttribute("aLineSegment", 4, gl.DYNAMIC_DRAW, 1, lineSegmentCoords);
            setUniform.apply(void 0, ["4f", "uGlyphBounds"].concat(viewBox));
            setUniform("1f", "uMaxDistance", maxDistance);
            setUniform("1f", "uExponent", sdfExponent);
            withTextureFramebuffer(intermediateTexture, intermediateTextureUnit, function(framebuffer2) {
              gl.enable(gl.BLEND);
              gl.colorMask(true, true, true, true);
              gl.viewport(0, 0, sdfWidth, sdfHeight);
              gl.scissor(0, 0, sdfWidth, sdfHeight);
              gl.blendFunc(gl.ONE, gl.ONE);
              gl.blendEquationSeparate(gl.FUNC_ADD, isWebGL2 ? gl.MAX : blendMinMaxExtension.MAX_EXT);
              gl.clear(gl.COLOR_BUFFER_BIT);
              if (isWebGL2) {
                gl.drawArraysInstanced(gl.TRIANGLES, 0, 3, lineSegmentCoords.length / 4);
              } else {
                instancingExtension.drawArraysInstancedANGLE(gl.TRIANGLES, 0, 3, lineSegmentCoords.length / 4);
              }
            });
          });
          withProgram("post", viewportQuadVertex, postFragment, function(program) {
            program.setAttribute("aUV", 2, gl.STATIC_DRAW, 0, viewportUVs);
            program.setUniform("1i", "tex", intermediateTextureUnit);
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
            gl.disable(gl.BLEND);
            gl.colorMask(channel === 0, channel === 1, channel === 2, channel === 3);
            gl.viewport(x2, y2, sdfWidth, sdfHeight);
            gl.scissor(x2, y2, sdfWidth, sdfHeight);
            gl.drawArrays(gl.TRIANGLES, 0, 3);
          });
        });
        if (gl.isContextLost()) {
          handleContextLoss();
          throw new Error("webgl context lost");
        }
      });
    }
    function isSupported(glOrCanvas) {
      var key = !glOrCanvas || glOrCanvas === implicitContext ? NULL_OBJECT : glOrCanvas.canvas || glOrCanvas;
      var supported = supportByCanvas.get(key);
      if (supported === void 0) {
        isTestingSupport = true;
        var failReason = null;
        try {
          var expectedResult = [
            97,
            106,
            97,
            61,
            99,
            137,
            118,
            80,
            80,
            118,
            137,
            99,
            61,
            97,
            106,
            97
          ];
          var testResult = generate$1(
            4,
            4,
            "M8,8L16,8L24,24L16,24Z",
            [0, 0, 32, 32],
            24,
            1,
            glOrCanvas
          );
          supported = testResult && expectedResult.length === testResult.length && testResult.every(function(val, i4) {
            return val === expectedResult[i4];
          });
          if (!supported) {
            failReason = "bad trial run results";
            console.info(expectedResult, testResult);
          }
        } catch (err) {
          supported = false;
          failReason = err.message;
        }
        if (failReason) {
          console.warn("WebGL SDF generation not supported:", failReason);
        }
        isTestingSupport = false;
        supportByCanvas.set(key, supported);
      }
      return supported;
    }
    var webgl = Object.freeze({
      __proto__: null,
      generate: generate$1,
      generateIntoCanvas: generateIntoCanvas$1,
      generateIntoFramebuffer,
      isSupported
    });
    function generate(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent) {
      if (maxDistance === void 0) maxDistance = Math.max(viewBox[2] - viewBox[0], viewBox[3] - viewBox[1]) / 2;
      if (sdfExponent === void 0) sdfExponent = 1;
      try {
        return generate$1.apply(webgl, arguments);
      } catch (e3) {
        console.info("WebGL SDF generation failed, falling back to JS", e3);
        return generate$2.apply(javascript, arguments);
      }
    }
    function generateIntoCanvas(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x2, y2, channel) {
      if (maxDistance === void 0) maxDistance = Math.max(viewBox[2] - viewBox[0], viewBox[3] - viewBox[1]) / 2;
      if (sdfExponent === void 0) sdfExponent = 1;
      if (x2 === void 0) x2 = 0;
      if (y2 === void 0) y2 = 0;
      if (channel === void 0) channel = 0;
      try {
        return generateIntoCanvas$1.apply(webgl, arguments);
      } catch (e3) {
        console.info("WebGL SDF generation failed, falling back to JS", e3);
        return generateIntoCanvas$2.apply(javascript, arguments);
      }
    }
    exports2.forEachPathCommand = forEachPathCommand;
    exports2.generate = generate;
    exports2.generateIntoCanvas = generateIntoCanvas;
    exports2.javascript = javascript;
    exports2.pathToLineSegments = pathToLineSegments;
    exports2.webgl = webgl;
    exports2.webglUtils = webglUtils;
    Object.defineProperty(exports2, "__esModule", { value: true });
    return exports2;
  }({});
  return exports;
}

// node_modules/bidi-js/dist/bidi.mjs
function bidiFactory() {
  var bidi = function(exports) {
    var DATA = {
      "R": "13k,1a,2,3,3,2+1j,ch+16,a+1,5+2,2+n,5,a,4,6+16,4+3,h+1b,4mo,179q,2+9,2+11,2i9+7y,2+68,4,3+4,5+13,4+3,2+4k,3+29,8+cf,1t+7z,w+17,3+3m,1t+3z,16o1+5r,8+30,8+mc,29+1r,29+4v,75+73",
      "EN": "1c+9,3d+1,6,187+9,513,4+5,7+9,sf+j,175h+9,qw+q,161f+1d,4xt+a,25i+9",
      "ES": "17,2,6dp+1,f+1,av,16vr,mx+1,4o,2",
      "ET": "z+2,3h+3,b+1,ym,3e+1,2o,p4+1,8,6u,7c,g6,1wc,1n9+4,30+1b,2n,6d,qhx+1,h0m,a+1,49+2,63+1,4+1,6bb+3,12jj",
      "AN": "16o+5,2j+9,2+1,35,ed,1ff2+9,87+u",
      "CS": "18,2+1,b,2u,12k,55v,l,17v0,2,3,53,2+1,b",
      "B": "a,3,f+2,2v,690",
      "S": "9,2,k",
      "WS": "c,k,4f4,1vk+a,u,1j,335",
      "ON": "x+1,4+4,h+5,r+5,r+3,z,5+3,2+1,2+1,5,2+2,3+4,o,w,ci+1,8+d,3+d,6+8,2+g,39+1,9,6+1,2,33,b8,3+1,3c+1,7+1,5r,b,7h+3,sa+5,2,3i+6,jg+3,ur+9,2v,ij+1,9g+9,7+a,8m,4+1,49+x,14u,2+2,c+2,e+2,e+2,e+1,i+n,e+e,2+p,u+2,e+2,36+1,2+3,2+1,b,2+2,6+5,2,2,2,h+1,5+4,6+3,3+f,16+2,5+3l,3+81,1y+p,2+40,q+a,m+13,2r+ch,2+9e,75+hf,3+v,2+2w,6e+5,f+6,75+2a,1a+p,2+2g,d+5x,r+b,6+3,4+o,g,6+1,6+2,2k+1,4,2j,5h+z,1m+1,1e+f,t+2,1f+e,d+3,4o+3,2s+1,w,535+1r,h3l+1i,93+2,2s,b+1,3l+x,2v,4g+3,21+3,kz+1,g5v+1,5a,j+9,n+v,2,3,2+8,2+1,3+2,2,3,46+1,4+4,h+5,r+5,r+a,3h+2,4+6,b+4,78,1r+24,4+c,4,1hb,ey+6,103+j,16j+c,1ux+7,5+g,fsh,jdq+1t,4,57+2e,p1,1m,1m,1m,1m,4kt+1,7j+17,5+2r,d+e,3+e,2+e,2+10,m+4,w,1n+5,1q,4z+5,4b+rb,9+c,4+c,4+37,d+2g,8+b,l+b,5+1j,9+9,7+13,9+t,3+1,27+3c,2+29,2+3q,d+d,3+4,4+2,6+6,a+o,8+6,a+2,e+6,16+42,2+1i",
      "BN": "0+8,6+d,2s+5,2+p,e,4m9,1kt+2,2b+5,5+5,17q9+v,7k,6p+8,6+1,119d+3,440+7,96s+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+75,6p+2rz,1ben+1,1ekf+1,1ekf+1",
      "NSM": "lc+33,7o+6,7c+18,2,2+1,2+1,2,21+a,1d+k,h,2u+6,3+5,3+1,2+3,10,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,g+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+g,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,k1+w,2db+2,3y,2p+v,ff+3,30+1,n9x+3,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,r2,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+5,3+1,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2d+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,f0c+4,1o+6,t5,1s+3,2a,f5l+1,43t+2,i+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,gzhy+6n",
      "AL": "16w,3,2,e+1b,z+2,2+2s,g+1,8+1,b+m,2+t,s+2i,c+e,4h+f,1d+1e,1bwe+dp,3+3z,x+c,2+1,35+3y,2rm+z,5+7,b+5,dt+l,c+u,17nl+27,1t+27,4x+6n,3+d",
      "LRO": "6ct",
      "RLO": "6cu",
      "LRE": "6cq",
      "RLE": "6cr",
      "PDF": "6cs",
      "LRI": "6ee",
      "RLI": "6ef",
      "FSI": "6eg",
      "PDI": "6eh"
    };
    var TYPES = {};
    var TYPES_TO_NAMES = {};
    TYPES.L = 1;
    TYPES_TO_NAMES[1] = "L";
    Object.keys(DATA).forEach(function(type, i4) {
      TYPES[type] = 1 << i4 + 1;
      TYPES_TO_NAMES[TYPES[type]] = type;
    });
    Object.freeze(TYPES);
    var ISOLATE_INIT_TYPES = TYPES.LRI | TYPES.RLI | TYPES.FSI;
    var STRONG_TYPES = TYPES.L | TYPES.R | TYPES.AL;
    var NEUTRAL_ISOLATE_TYPES = TYPES.B | TYPES.S | TYPES.WS | TYPES.ON | TYPES.FSI | TYPES.LRI | TYPES.RLI | TYPES.PDI;
    var BN_LIKE_TYPES = TYPES.BN | TYPES.RLE | TYPES.LRE | TYPES.RLO | TYPES.LRO | TYPES.PDF;
    var TRAILING_TYPES = TYPES.S | TYPES.WS | TYPES.B | ISOLATE_INIT_TYPES | TYPES.PDI | BN_LIKE_TYPES;
    var map2 = null;
    function parseData() {
      if (!map2) {
        map2 = /* @__PURE__ */ new Map();
        var loop = function(type2) {
          if (DATA.hasOwnProperty(type2)) {
            var lastCode = 0;
            DATA[type2].split(",").forEach(function(range) {
              var ref = range.split("+");
              var skip = ref[0];
              var step = ref[1];
              skip = parseInt(skip, 36);
              step = step ? parseInt(step, 36) : 0;
              map2.set(lastCode += skip, TYPES[type2]);
              for (var i4 = 0; i4 < step; i4++) {
                map2.set(++lastCode, TYPES[type2]);
              }
            });
          }
        };
        for (var type in DATA) loop(type);
      }
    }
    function getBidiCharType(char) {
      parseData();
      return map2.get(char.codePointAt(0)) || TYPES.L;
    }
    function getBidiCharTypeName(char) {
      return TYPES_TO_NAMES[getBidiCharType(char)];
    }
    var data$1 = {
      "pairs": "14>1,1e>2,u>2,2wt>1,1>1,1ge>1,1wp>1,1j>1,f>1,hm>1,1>1,u>1,u6>1,1>1,+5,28>1,w>1,1>1,+3,b8>1,1>1,+3,1>3,-1>-1,3>1,1>1,+2,1s>1,1>1,x>1,th>1,1>1,+2,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,4q>1,1e>2,u>2,2>1,+1",
      "canonical": "6f1>-6dx,6dy>-6dx,6ec>-6ed,6ee>-6ed,6ww>2jj,-2ji>2jj,14r4>-1e7l,1e7m>-1e7l,1e7m>-1e5c,1e5d>-1e5b,1e5c>-14qx,14qy>-14qx,14vn>-1ecg,1ech>-1ecg,1edu>-1ecg,1eci>-1ecg,1eda>-1ecg,1eci>-1ecg,1eci>-168q,168r>-168q,168s>-14ye,14yf>-14ye"
    };
    function parseCharacterMap(encodedString, includeReverse) {
      var radix = 36;
      var lastCode = 0;
      var map3 = /* @__PURE__ */ new Map();
      var reverseMap = includeReverse && /* @__PURE__ */ new Map();
      var prevPair;
      encodedString.split(",").forEach(function visit(entry) {
        if (entry.indexOf("+") !== -1) {
          for (var i4 = +entry; i4--; ) {
            visit(prevPair);
          }
        } else {
          prevPair = entry;
          var ref = entry.split(">");
          var a6 = ref[0];
          var b5 = ref[1];
          a6 = String.fromCodePoint(lastCode += parseInt(a6, radix));
          b5 = String.fromCodePoint(lastCode += parseInt(b5, radix));
          map3.set(a6, b5);
          includeReverse && reverseMap.set(b5, a6);
        }
      });
      return { map: map3, reverseMap };
    }
    var openToClose, closeToOpen, canonical;
    function parse$1() {
      if (!openToClose) {
        var ref = parseCharacterMap(data$1.pairs, true);
        var map3 = ref.map;
        var reverseMap = ref.reverseMap;
        openToClose = map3;
        closeToOpen = reverseMap;
        canonical = parseCharacterMap(data$1.canonical, false).map;
      }
    }
    function openingToClosingBracket(char) {
      parse$1();
      return openToClose.get(char) || null;
    }
    function closingToOpeningBracket(char) {
      parse$1();
      return closeToOpen.get(char) || null;
    }
    function getCanonicalBracket(char) {
      parse$1();
      return canonical.get(char) || null;
    }
    var TYPE_L = TYPES.L;
    var TYPE_R = TYPES.R;
    var TYPE_EN = TYPES.EN;
    var TYPE_ES = TYPES.ES;
    var TYPE_ET = TYPES.ET;
    var TYPE_AN = TYPES.AN;
    var TYPE_CS = TYPES.CS;
    var TYPE_B = TYPES.B;
    var TYPE_S = TYPES.S;
    var TYPE_ON = TYPES.ON;
    var TYPE_BN = TYPES.BN;
    var TYPE_NSM = TYPES.NSM;
    var TYPE_AL = TYPES.AL;
    var TYPE_LRO = TYPES.LRO;
    var TYPE_RLO = TYPES.RLO;
    var TYPE_LRE = TYPES.LRE;
    var TYPE_RLE = TYPES.RLE;
    var TYPE_PDF = TYPES.PDF;
    var TYPE_LRI = TYPES.LRI;
    var TYPE_RLI = TYPES.RLI;
    var TYPE_FSI = TYPES.FSI;
    var TYPE_PDI = TYPES.PDI;
    function getEmbeddingLevels(string, baseDirection) {
      var MAX_DEPTH = 125;
      var charTypes = new Uint32Array(string.length);
      for (var i4 = 0; i4 < string.length; i4++) {
        charTypes[i4] = getBidiCharType(string[i4]);
      }
      var charTypeCounts = /* @__PURE__ */ new Map();
      function changeCharType(i5, type2) {
        var oldType = charTypes[i5];
        charTypes[i5] = type2;
        charTypeCounts.set(oldType, charTypeCounts.get(oldType) - 1);
        if (oldType & NEUTRAL_ISOLATE_TYPES) {
          charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) - 1);
        }
        charTypeCounts.set(type2, (charTypeCounts.get(type2) || 0) + 1);
        if (type2 & NEUTRAL_ISOLATE_TYPES) {
          charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);
        }
      }
      var embedLevels = new Uint8Array(string.length);
      var isolationPairs = /* @__PURE__ */ new Map();
      var paragraphs = [];
      var paragraph = null;
      for (var i$1 = 0; i$1 < string.length; i$1++) {
        if (!paragraph) {
          paragraphs.push(paragraph = {
            start: i$1,
            end: string.length - 1,
            // 3.3.1 P2-P3: Determine the paragraph level
            level: baseDirection === "rtl" ? 1 : baseDirection === "ltr" ? 0 : determineAutoEmbedLevel(i$1, false)
          });
        }
        if (charTypes[i$1] & TYPE_B) {
          paragraph.end = i$1;
          paragraph = null;
        }
      }
      var FORMATTING_TYPES = TYPE_RLE | TYPE_LRE | TYPE_RLO | TYPE_LRO | ISOLATE_INIT_TYPES | TYPE_PDI | TYPE_PDF | TYPE_B;
      var nextEven = function(n3) {
        return n3 + (n3 & 1 ? 1 : 2);
      };
      var nextOdd = function(n3) {
        return n3 + (n3 & 1 ? 2 : 1);
      };
      for (var paraIdx = 0; paraIdx < paragraphs.length; paraIdx++) {
        paragraph = paragraphs[paraIdx];
        var statusStack = [{
          _level: paragraph.level,
          _override: 0,
          //0=neutral, 1=L, 2=R
          _isolate: 0
          //bool
        }];
        var stackTop = void 0;
        var overflowIsolateCount = 0;
        var overflowEmbeddingCount = 0;
        var validIsolateCount = 0;
        charTypeCounts.clear();
        for (var i$2 = paragraph.start; i$2 <= paragraph.end; i$2++) {
          var charType = charTypes[i$2];
          stackTop = statusStack[statusStack.length - 1];
          charTypeCounts.set(charType, (charTypeCounts.get(charType) || 0) + 1);
          if (charType & NEUTRAL_ISOLATE_TYPES) {
            charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);
          }
          if (charType & FORMATTING_TYPES) {
            if (charType & (TYPE_RLE | TYPE_LRE)) {
              embedLevels[i$2] = stackTop._level;
              var level = (charType === TYPE_RLE ? nextOdd : nextEven)(stackTop._level);
              if (level <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {
                statusStack.push({
                  _level: level,
                  _override: 0,
                  _isolate: 0
                });
              } else if (!overflowIsolateCount) {
                overflowEmbeddingCount++;
              }
            } else if (charType & (TYPE_RLO | TYPE_LRO)) {
              embedLevels[i$2] = stackTop._level;
              var level$1 = (charType === TYPE_RLO ? nextOdd : nextEven)(stackTop._level);
              if (level$1 <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {
                statusStack.push({
                  _level: level$1,
                  _override: charType & TYPE_RLO ? TYPE_R : TYPE_L,
                  _isolate: 0
                });
              } else if (!overflowIsolateCount) {
                overflowEmbeddingCount++;
              }
            } else if (charType & ISOLATE_INIT_TYPES) {
              if (charType & TYPE_FSI) {
                charType = determineAutoEmbedLevel(i$2 + 1, true) === 1 ? TYPE_RLI : TYPE_LRI;
              }
              embedLevels[i$2] = stackTop._level;
              if (stackTop._override) {
                changeCharType(i$2, stackTop._override);
              }
              var level$2 = (charType === TYPE_RLI ? nextOdd : nextEven)(stackTop._level);
              if (level$2 <= MAX_DEPTH && overflowIsolateCount === 0 && overflowEmbeddingCount === 0) {
                validIsolateCount++;
                statusStack.push({
                  _level: level$2,
                  _override: 0,
                  _isolate: 1,
                  _isolInitIndex: i$2
                });
              } else {
                overflowIsolateCount++;
              }
            } else if (charType & TYPE_PDI) {
              if (overflowIsolateCount > 0) {
                overflowIsolateCount--;
              } else if (validIsolateCount > 0) {
                overflowEmbeddingCount = 0;
                while (!statusStack[statusStack.length - 1]._isolate) {
                  statusStack.pop();
                }
                var isolInitIndex = statusStack[statusStack.length - 1]._isolInitIndex;
                if (isolInitIndex != null) {
                  isolationPairs.set(isolInitIndex, i$2);
                  isolationPairs.set(i$2, isolInitIndex);
                }
                statusStack.pop();
                validIsolateCount--;
              }
              stackTop = statusStack[statusStack.length - 1];
              embedLevels[i$2] = stackTop._level;
              if (stackTop._override) {
                changeCharType(i$2, stackTop._override);
              }
            } else if (charType & TYPE_PDF) {
              if (overflowIsolateCount === 0) {
                if (overflowEmbeddingCount > 0) {
                  overflowEmbeddingCount--;
                } else if (!stackTop._isolate && statusStack.length > 1) {
                  statusStack.pop();
                  stackTop = statusStack[statusStack.length - 1];
                }
              }
              embedLevels[i$2] = stackTop._level;
            } else if (charType & TYPE_B) {
              embedLevels[i$2] = paragraph.level;
            }
          } else {
            embedLevels[i$2] = stackTop._level;
            if (stackTop._override && charType !== TYPE_BN) {
              changeCharType(i$2, stackTop._override);
            }
          }
        }
        var levelRuns = [];
        var currentRun = null;
        for (var i$3 = paragraph.start; i$3 <= paragraph.end; i$3++) {
          var charType$1 = charTypes[i$3];
          if (!(charType$1 & BN_LIKE_TYPES)) {
            var lvl = embedLevels[i$3];
            var isIsolInit = charType$1 & ISOLATE_INIT_TYPES;
            var isPDI = charType$1 === TYPE_PDI;
            if (currentRun && lvl === currentRun._level) {
              currentRun._end = i$3;
              currentRun._endsWithIsolInit = isIsolInit;
            } else {
              levelRuns.push(currentRun = {
                _start: i$3,
                _end: i$3,
                _level: lvl,
                _startsWithPDI: isPDI,
                _endsWithIsolInit: isIsolInit
              });
            }
          }
        }
        var isolatingRunSeqs = [];
        for (var runIdx = 0; runIdx < levelRuns.length; runIdx++) {
          var run = levelRuns[runIdx];
          if (!run._startsWithPDI || run._startsWithPDI && !isolationPairs.has(run._start)) {
            var seqRuns = [currentRun = run];
            for (var pdiIndex = void 0; currentRun && currentRun._endsWithIsolInit && (pdiIndex = isolationPairs.get(currentRun._end)) != null; ) {
              for (var i$4 = runIdx + 1; i$4 < levelRuns.length; i$4++) {
                if (levelRuns[i$4]._start === pdiIndex) {
                  seqRuns.push(currentRun = levelRuns[i$4]);
                  break;
                }
              }
            }
            var seqIndices = [];
            for (var i$5 = 0; i$5 < seqRuns.length; i$5++) {
              var run$1 = seqRuns[i$5];
              for (var j2 = run$1._start; j2 <= run$1._end; j2++) {
                seqIndices.push(j2);
              }
            }
            var firstLevel = embedLevels[seqIndices[0]];
            var prevLevel = paragraph.level;
            for (var i$6 = seqIndices[0] - 1; i$6 >= 0; i$6--) {
              if (!(charTypes[i$6] & BN_LIKE_TYPES)) {
                prevLevel = embedLevels[i$6];
                break;
              }
            }
            var lastIndex = seqIndices[seqIndices.length - 1];
            var lastLevel = embedLevels[lastIndex];
            var nextLevel = paragraph.level;
            if (!(charTypes[lastIndex] & ISOLATE_INIT_TYPES)) {
              for (var i$7 = lastIndex + 1; i$7 <= paragraph.end; i$7++) {
                if (!(charTypes[i$7] & BN_LIKE_TYPES)) {
                  nextLevel = embedLevels[i$7];
                  break;
                }
              }
            }
            isolatingRunSeqs.push({
              _seqIndices: seqIndices,
              _sosType: Math.max(prevLevel, firstLevel) % 2 ? TYPE_R : TYPE_L,
              _eosType: Math.max(nextLevel, lastLevel) % 2 ? TYPE_R : TYPE_L
            });
          }
        }
        for (var seqIdx = 0; seqIdx < isolatingRunSeqs.length; seqIdx++) {
          var ref = isolatingRunSeqs[seqIdx];
          var seqIndices$1 = ref._seqIndices;
          var sosType = ref._sosType;
          var eosType = ref._eosType;
          var embedDirection = embedLevels[seqIndices$1[0]] & 1 ? TYPE_R : TYPE_L;
          if (charTypeCounts.get(TYPE_NSM)) {
            for (var si2 = 0; si2 < seqIndices$1.length; si2++) {
              var i$8 = seqIndices$1[si2];
              if (charTypes[i$8] & TYPE_NSM) {
                var prevType = sosType;
                for (var sj = si2 - 1; sj >= 0; sj--) {
                  if (!(charTypes[seqIndices$1[sj]] & BN_LIKE_TYPES)) {
                    prevType = charTypes[seqIndices$1[sj]];
                    break;
                  }
                }
                changeCharType(i$8, prevType & (ISOLATE_INIT_TYPES | TYPE_PDI) ? TYPE_ON : prevType);
              }
            }
          }
          if (charTypeCounts.get(TYPE_EN)) {
            for (var si$1 = 0; si$1 < seqIndices$1.length; si$1++) {
              var i$9 = seqIndices$1[si$1];
              if (charTypes[i$9] & TYPE_EN) {
                for (var sj$1 = si$1 - 1; sj$1 >= -1; sj$1--) {
                  var prevCharType = sj$1 === -1 ? sosType : charTypes[seqIndices$1[sj$1]];
                  if (prevCharType & STRONG_TYPES) {
                    if (prevCharType === TYPE_AL) {
                      changeCharType(i$9, TYPE_AN);
                    }
                    break;
                  }
                }
              }
            }
          }
          if (charTypeCounts.get(TYPE_AL)) {
            for (var si$2 = 0; si$2 < seqIndices$1.length; si$2++) {
              var i$10 = seqIndices$1[si$2];
              if (charTypes[i$10] & TYPE_AL) {
                changeCharType(i$10, TYPE_R);
              }
            }
          }
          if (charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {
            for (var si$3 = 1; si$3 < seqIndices$1.length - 1; si$3++) {
              var i$11 = seqIndices$1[si$3];
              if (charTypes[i$11] & (TYPE_ES | TYPE_CS)) {
                var prevType$1 = 0, nextType = 0;
                for (var sj$2 = si$3 - 1; sj$2 >= 0; sj$2--) {
                  prevType$1 = charTypes[seqIndices$1[sj$2]];
                  if (!(prevType$1 & BN_LIKE_TYPES)) {
                    break;
                  }
                }
                for (var sj$3 = si$3 + 1; sj$3 < seqIndices$1.length; sj$3++) {
                  nextType = charTypes[seqIndices$1[sj$3]];
                  if (!(nextType & BN_LIKE_TYPES)) {
                    break;
                  }
                }
                if (prevType$1 === nextType && (charTypes[i$11] === TYPE_ES ? prevType$1 === TYPE_EN : prevType$1 & (TYPE_EN | TYPE_AN))) {
                  changeCharType(i$11, prevType$1);
                }
              }
            }
          }
          if (charTypeCounts.get(TYPE_EN)) {
            for (var si$4 = 0; si$4 < seqIndices$1.length; si$4++) {
              var i$12 = seqIndices$1[si$4];
              if (charTypes[i$12] & TYPE_EN) {
                for (var sj$4 = si$4 - 1; sj$4 >= 0 && charTypes[seqIndices$1[sj$4]] & (TYPE_ET | BN_LIKE_TYPES); sj$4--) {
                  changeCharType(seqIndices$1[sj$4], TYPE_EN);
                }
                for (si$4++; si$4 < seqIndices$1.length && charTypes[seqIndices$1[si$4]] & (TYPE_ET | BN_LIKE_TYPES | TYPE_EN); si$4++) {
                  if (charTypes[seqIndices$1[si$4]] !== TYPE_EN) {
                    changeCharType(seqIndices$1[si$4], TYPE_EN);
                  }
                }
              }
            }
          }
          if (charTypeCounts.get(TYPE_ET) || charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {
            for (var si$5 = 0; si$5 < seqIndices$1.length; si$5++) {
              var i$13 = seqIndices$1[si$5];
              if (charTypes[i$13] & (TYPE_ET | TYPE_ES | TYPE_CS)) {
                changeCharType(i$13, TYPE_ON);
                for (var sj$5 = si$5 - 1; sj$5 >= 0 && charTypes[seqIndices$1[sj$5]] & BN_LIKE_TYPES; sj$5--) {
                  changeCharType(seqIndices$1[sj$5], TYPE_ON);
                }
                for (var sj$6 = si$5 + 1; sj$6 < seqIndices$1.length && charTypes[seqIndices$1[sj$6]] & BN_LIKE_TYPES; sj$6++) {
                  changeCharType(seqIndices$1[sj$6], TYPE_ON);
                }
              }
            }
          }
          if (charTypeCounts.get(TYPE_EN)) {
            for (var si$6 = 0, prevStrongType = sosType; si$6 < seqIndices$1.length; si$6++) {
              var i$14 = seqIndices$1[si$6];
              var type = charTypes[i$14];
              if (type & TYPE_EN) {
                if (prevStrongType === TYPE_L) {
                  changeCharType(i$14, TYPE_L);
                }
              } else if (type & STRONG_TYPES) {
                prevStrongType = type;
              }
            }
          }
          if (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES)) {
            var R_TYPES_FOR_N_STEPS = TYPE_R | TYPE_EN | TYPE_AN;
            var STRONG_TYPES_FOR_N_STEPS = R_TYPES_FOR_N_STEPS | TYPE_L;
            var bracketPairs = [];
            {
              var openerStack = [];
              for (var si$7 = 0; si$7 < seqIndices$1.length; si$7++) {
                if (charTypes[seqIndices$1[si$7]] & NEUTRAL_ISOLATE_TYPES) {
                  var char = string[seqIndices$1[si$7]];
                  var oppositeBracket = void 0;
                  if (openingToClosingBracket(char) !== null) {
                    if (openerStack.length < 63) {
                      openerStack.push({ char, seqIndex: si$7 });
                    } else {
                      break;
                    }
                  } else if ((oppositeBracket = closingToOpeningBracket(char)) !== null) {
                    for (var stackIdx = openerStack.length - 1; stackIdx >= 0; stackIdx--) {
                      var stackChar = openerStack[stackIdx].char;
                      if (stackChar === oppositeBracket || stackChar === closingToOpeningBracket(getCanonicalBracket(char)) || openingToClosingBracket(getCanonicalBracket(stackChar)) === char) {
                        bracketPairs.push([openerStack[stackIdx].seqIndex, si$7]);
                        openerStack.length = stackIdx;
                        break;
                      }
                    }
                  }
                }
              }
              bracketPairs.sort(function(a6, b5) {
                return a6[0] - b5[0];
              });
            }
            for (var pairIdx = 0; pairIdx < bracketPairs.length; pairIdx++) {
              var ref$1 = bracketPairs[pairIdx];
              var openSeqIdx = ref$1[0];
              var closeSeqIdx = ref$1[1];
              var foundStrongType = false;
              var useStrongType = 0;
              for (var si$8 = openSeqIdx + 1; si$8 < closeSeqIdx; si$8++) {
                var i$15 = seqIndices$1[si$8];
                if (charTypes[i$15] & STRONG_TYPES_FOR_N_STEPS) {
                  foundStrongType = true;
                  var lr2 = charTypes[i$15] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                  if (lr2 === embedDirection) {
                    useStrongType = lr2;
                    break;
                  }
                }
              }
              if (foundStrongType && !useStrongType) {
                useStrongType = sosType;
                for (var si$9 = openSeqIdx - 1; si$9 >= 0; si$9--) {
                  var i$16 = seqIndices$1[si$9];
                  if (charTypes[i$16] & STRONG_TYPES_FOR_N_STEPS) {
                    var lr$1 = charTypes[i$16] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                    if (lr$1 !== embedDirection) {
                      useStrongType = lr$1;
                    } else {
                      useStrongType = embedDirection;
                    }
                    break;
                  }
                }
              }
              if (useStrongType) {
                charTypes[seqIndices$1[openSeqIdx]] = charTypes[seqIndices$1[closeSeqIdx]] = useStrongType;
                if (useStrongType !== embedDirection) {
                  for (var si$10 = openSeqIdx + 1; si$10 < seqIndices$1.length; si$10++) {
                    if (!(charTypes[seqIndices$1[si$10]] & BN_LIKE_TYPES)) {
                      if (getBidiCharType(string[seqIndices$1[si$10]]) & TYPE_NSM) {
                        charTypes[seqIndices$1[si$10]] = useStrongType;
                      }
                      break;
                    }
                  }
                }
                if (useStrongType !== embedDirection) {
                  for (var si$11 = closeSeqIdx + 1; si$11 < seqIndices$1.length; si$11++) {
                    if (!(charTypes[seqIndices$1[si$11]] & BN_LIKE_TYPES)) {
                      if (getBidiCharType(string[seqIndices$1[si$11]]) & TYPE_NSM) {
                        charTypes[seqIndices$1[si$11]] = useStrongType;
                      }
                      break;
                    }
                  }
                }
              }
            }
            for (var si$12 = 0; si$12 < seqIndices$1.length; si$12++) {
              if (charTypes[seqIndices$1[si$12]] & NEUTRAL_ISOLATE_TYPES) {
                var niRunStart = si$12, niRunEnd = si$12;
                var prevType$2 = sosType;
                for (var si22 = si$12 - 1; si22 >= 0; si22--) {
                  if (charTypes[seqIndices$1[si22]] & BN_LIKE_TYPES) {
                    niRunStart = si22;
                  } else {
                    prevType$2 = charTypes[seqIndices$1[si22]] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                    break;
                  }
                }
                var nextType$1 = eosType;
                for (var si2$1 = si$12 + 1; si2$1 < seqIndices$1.length; si2$1++) {
                  if (charTypes[seqIndices$1[si2$1]] & (NEUTRAL_ISOLATE_TYPES | BN_LIKE_TYPES)) {
                    niRunEnd = si2$1;
                  } else {
                    nextType$1 = charTypes[seqIndices$1[si2$1]] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                    break;
                  }
                }
                for (var sj$7 = niRunStart; sj$7 <= niRunEnd; sj$7++) {
                  charTypes[seqIndices$1[sj$7]] = prevType$2 === nextType$1 ? prevType$2 : embedDirection;
                }
                si$12 = niRunEnd;
              }
            }
          }
        }
        for (var i$17 = paragraph.start; i$17 <= paragraph.end; i$17++) {
          var level$3 = embedLevels[i$17];
          var type$1 = charTypes[i$17];
          if (level$3 & 1) {
            if (type$1 & (TYPE_L | TYPE_EN | TYPE_AN)) {
              embedLevels[i$17]++;
            }
          } else {
            if (type$1 & TYPE_R) {
              embedLevels[i$17]++;
            } else if (type$1 & (TYPE_AN | TYPE_EN)) {
              embedLevels[i$17] += 2;
            }
          }
          if (type$1 & BN_LIKE_TYPES) {
            embedLevels[i$17] = i$17 === 0 ? paragraph.level : embedLevels[i$17 - 1];
          }
          if (i$17 === paragraph.end || getBidiCharType(string[i$17]) & (TYPE_S | TYPE_B)) {
            for (var j$1 = i$17; j$1 >= 0 && getBidiCharType(string[j$1]) & TRAILING_TYPES; j$1--) {
              embedLevels[j$1] = paragraph.level;
            }
          }
        }
      }
      return {
        levels: embedLevels,
        paragraphs
      };
      function determineAutoEmbedLevel(start, isFSI) {
        for (var i5 = start; i5 < string.length; i5++) {
          var charType2 = charTypes[i5];
          if (charType2 & (TYPE_R | TYPE_AL)) {
            return 1;
          }
          if (charType2 & (TYPE_B | TYPE_L) || isFSI && charType2 === TYPE_PDI) {
            return 0;
          }
          if (charType2 & ISOLATE_INIT_TYPES) {
            var pdi = indexOfMatchingPDI(i5);
            i5 = pdi === -1 ? string.length : pdi;
          }
        }
        return 0;
      }
      function indexOfMatchingPDI(isolateStart) {
        var isolationLevel = 1;
        for (var i5 = isolateStart + 1; i5 < string.length; i5++) {
          var charType2 = charTypes[i5];
          if (charType2 & TYPE_B) {
            break;
          }
          if (charType2 & TYPE_PDI) {
            if (--isolationLevel === 0) {
              return i5;
            }
          } else if (charType2 & ISOLATE_INIT_TYPES) {
            isolationLevel++;
          }
        }
        return -1;
      }
    }
    var data = "14>1,j>2,t>2,u>2,1a>g,2v3>1,1>1,1ge>1,1wd>1,b>1,1j>1,f>1,ai>3,-2>3,+1,8>1k0,-1jq>1y7,-1y6>1hf,-1he>1h6,-1h5>1ha,-1h8>1qi,-1pu>1,6>3u,-3s>7,6>1,1>1,f>1,1>1,+2,3>1,1>1,+13,4>1,1>1,6>1eo,-1ee>1,3>1mg,-1me>1mk,-1mj>1mi,-1mg>1mi,-1md>1,1>1,+2,1>10k,-103>1,1>1,4>1,5>1,1>1,+10,3>1,1>8,-7>8,+1,-6>7,+1,a>1,1>1,u>1,u6>1,1>1,+5,26>1,1>1,2>1,2>2,8>1,7>1,4>1,1>1,+5,b8>1,1>1,+3,1>3,-2>1,2>1,1>1,+2,c>1,3>1,1>1,+2,h>1,3>1,a>1,1>1,2>1,3>1,1>1,d>1,f>1,3>1,1a>1,1>1,6>1,7>1,13>1,k>1,1>1,+19,4>1,1>1,+2,2>1,1>1,+18,m>1,a>1,1>1,lk>1,1>1,4>1,2>1,f>1,3>1,1>1,+3,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,6>1,4j>1,j>2,t>2,u>2,2>1,+1";
    var mirrorMap;
    function parse() {
      if (!mirrorMap) {
        var ref = parseCharacterMap(data, true);
        var map3 = ref.map;
        var reverseMap = ref.reverseMap;
        reverseMap.forEach(function(value, key) {
          map3.set(key, value);
        });
        mirrorMap = map3;
      }
    }
    function getMirroredCharacter(char) {
      parse();
      return mirrorMap.get(char) || null;
    }
    function getMirroredCharactersMap(string, embeddingLevels, start, end) {
      var strLen = string.length;
      start = Math.max(0, start == null ? 0 : +start);
      end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);
      var map3 = /* @__PURE__ */ new Map();
      for (var i4 = start; i4 <= end; i4++) {
        if (embeddingLevels[i4] & 1) {
          var mirror = getMirroredCharacter(string[i4]);
          if (mirror !== null) {
            map3.set(i4, mirror);
          }
        }
      }
      return map3;
    }
    function getReorderSegments(string, embeddingLevelsResult, start, end) {
      var strLen = string.length;
      start = Math.max(0, start == null ? 0 : +start);
      end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);
      var segments = [];
      embeddingLevelsResult.paragraphs.forEach(function(paragraph) {
        var lineStart = Math.max(start, paragraph.start);
        var lineEnd = Math.min(end, paragraph.end);
        if (lineStart < lineEnd) {
          var lineLevels = embeddingLevelsResult.levels.slice(lineStart, lineEnd + 1);
          for (var i4 = lineEnd; i4 >= lineStart && getBidiCharType(string[i4]) & TRAILING_TYPES; i4--) {
            lineLevels[i4] = paragraph.level;
          }
          var maxLevel = paragraph.level;
          var minOddLevel = Infinity;
          for (var i$1 = 0; i$1 < lineLevels.length; i$1++) {
            var level = lineLevels[i$1];
            if (level > maxLevel) {
              maxLevel = level;
            }
            if (level < minOddLevel) {
              minOddLevel = level | 1;
            }
          }
          for (var lvl = maxLevel; lvl >= minOddLevel; lvl--) {
            for (var i$2 = 0; i$2 < lineLevels.length; i$2++) {
              if (lineLevels[i$2] >= lvl) {
                var segStart = i$2;
                while (i$2 + 1 < lineLevels.length && lineLevels[i$2 + 1] >= lvl) {
                  i$2++;
                }
                if (i$2 > segStart) {
                  segments.push([segStart + lineStart, i$2 + lineStart]);
                }
              }
            }
          }
        }
      });
      return segments;
    }
    function getReorderedString(string, embedLevelsResult, start, end) {
      var indices = getReorderedIndices(string, embedLevelsResult, start, end);
      var chars = [].concat(string);
      indices.forEach(function(charIndex, i4) {
        chars[i4] = (embedLevelsResult.levels[charIndex] & 1 ? getMirroredCharacter(string[charIndex]) : null) || string[charIndex];
      });
      return chars.join("");
    }
    function getReorderedIndices(string, embedLevelsResult, start, end) {
      var segments = getReorderSegments(string, embedLevelsResult, start, end);
      var indices = [];
      for (var i4 = 0; i4 < string.length; i4++) {
        indices[i4] = i4;
      }
      segments.forEach(function(ref) {
        var start2 = ref[0];
        var end2 = ref[1];
        var slice = indices.slice(start2, end2 + 1);
        for (var i5 = slice.length; i5--; ) {
          indices[end2 - i5] = slice[i5];
        }
      });
      return indices;
    }
    exports.closingToOpeningBracket = closingToOpeningBracket;
    exports.getBidiCharType = getBidiCharType;
    exports.getBidiCharTypeName = getBidiCharTypeName;
    exports.getCanonicalBracket = getCanonicalBracket;
    exports.getEmbeddingLevels = getEmbeddingLevels;
    exports.getMirroredCharacter = getMirroredCharacter;
    exports.getMirroredCharactersMap = getMirroredCharactersMap;
    exports.getReorderSegments = getReorderSegments;
    exports.getReorderedIndices = getReorderedIndices;
    exports.getReorderedString = getReorderedString;
    exports.openingToClosingBracket = openingToClosingBracket;
    Object.defineProperty(exports, "__esModule", { value: true });
    return exports;
  }({});
  return bidi;
}
var bidi_default = bidiFactory;

// node_modules/troika-three-utils/dist/troika-three-utils.esm.js
var voidMainRegExp = /\bvoid\s+main\s*\(\s*\)\s*{/g;
function expandShaderIncludes(source) {
  const pattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
  function replace(match, include) {
    let chunk = ShaderChunk[include];
    return chunk ? expandShaderIncludes(chunk) : match;
  }
  return source.replace(pattern, replace);
}
var _lut = [];
for (let i4 = 0; i4 < 256; i4++) {
  _lut[i4] = (i4 < 16 ? "0" : "") + i4.toString(16);
}
function generateUUID() {
  const d0 = Math.random() * 4294967295 | 0;
  const d1 = Math.random() * 4294967295 | 0;
  const d22 = Math.random() * 4294967295 | 0;
  const d3 = Math.random() * 4294967295 | 0;
  const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d22 & 63 | 128] + _lut[d22 >> 8 & 255] + "-" + _lut[d22 >> 16 & 255] + _lut[d22 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
  return uuid.toUpperCase();
}
var assign = Object.assign || function() {
  let target2 = arguments[0];
  for (let i4 = 1, len = arguments.length; i4 < len; i4++) {
    let source = arguments[i4];
    if (source) {
      for (let prop in source) {
        if (Object.prototype.hasOwnProperty.call(source, prop)) {
          target2[prop] = source[prop];
        }
      }
    }
  }
  return target2;
};
var epoch = Date.now();
var CONSTRUCTOR_CACHE = /* @__PURE__ */ new WeakMap();
var SHADER_UPGRADE_CACHE = /* @__PURE__ */ new Map();
var materialInstanceId = 1e10;
function createDerivedMaterial(baseMaterial, options) {
  const optionsKey = getKeyForOptions(options);
  let ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);
  if (!ctorsByDerivation) {
    CONSTRUCTOR_CACHE.set(baseMaterial, ctorsByDerivation = /* @__PURE__ */ Object.create(null));
  }
  if (ctorsByDerivation[optionsKey]) {
    return new ctorsByDerivation[optionsKey]();
  }
  const privateBeforeCompileProp = `_onBeforeCompile${optionsKey}`;
  const onBeforeCompile = function(shaderInfo, renderer) {
    baseMaterial.onBeforeCompile.call(this, shaderInfo, renderer);
    const cacheKey = this.customProgramCacheKey() + "|" + shaderInfo.vertexShader + "|" + shaderInfo.fragmentShader;
    let upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];
    if (!upgradedShaders) {
      const upgraded = upgradeShaders(this, shaderInfo, options, optionsKey);
      upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;
    }
    shaderInfo.vertexShader = upgradedShaders.vertexShader;
    shaderInfo.fragmentShader = upgradedShaders.fragmentShader;
    assign(shaderInfo.uniforms, this.uniforms);
    if (options.timeUniform) {
      shaderInfo.uniforms[options.timeUniform] = {
        get value() {
          return Date.now() - epoch;
        }
      };
    }
    if (this[privateBeforeCompileProp]) {
      this[privateBeforeCompileProp](shaderInfo);
    }
  };
  const DerivedMaterial = function DerivedMaterial2() {
    return derive(options.chained ? baseMaterial : baseMaterial.clone());
  };
  const derive = function(base) {
    const derived = Object.create(base, descriptor);
    Object.defineProperty(derived, "baseMaterial", { value: baseMaterial });
    Object.defineProperty(derived, "id", { value: materialInstanceId++ });
    derived.uuid = generateUUID();
    derived.uniforms = assign({}, base.uniforms, options.uniforms);
    derived.defines = assign({}, base.defines, options.defines);
    derived.defines[`TROIKA_DERIVED_MATERIAL_${optionsKey}`] = "";
    derived.extensions = assign({}, base.extensions, options.extensions);
    derived._listeners = void 0;
    return derived;
  };
  const descriptor = {
    constructor: { value: DerivedMaterial },
    isDerivedMaterial: { value: true },
    customProgramCacheKey: {
      writable: true,
      configurable: true,
      value: function() {
        return baseMaterial.customProgramCacheKey() + "|" + optionsKey;
      }
    },
    onBeforeCompile: {
      get() {
        return onBeforeCompile;
      },
      set(fn2) {
        this[privateBeforeCompileProp] = fn2;
      }
    },
    copy: {
      writable: true,
      configurable: true,
      value: function(source) {
        baseMaterial.copy.call(this, source);
        if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {
          assign(this.extensions, source.extensions);
          assign(this.defines, source.defines);
          assign(this.uniforms, UniformsUtils.clone(source.uniforms));
        }
        return this;
      }
    },
    clone: {
      writable: true,
      configurable: true,
      value: function() {
        const newBase = new baseMaterial.constructor();
        return derive(newBase).copy(this);
      }
    },
    /**
     * Utility to get a MeshDepthMaterial that will honor this derived material's vertex
     * transformations and discarded fragments.
     */
    getDepthMaterial: {
      writable: true,
      configurable: true,
      value: function() {
        let depthMaterial = this._depthMaterial;
        if (!depthMaterial) {
          depthMaterial = this._depthMaterial = createDerivedMaterial(
            baseMaterial.isDerivedMaterial ? baseMaterial.getDepthMaterial() : new MeshDepthMaterial({ depthPacking: RGBADepthPacking }),
            options
          );
          depthMaterial.defines.IS_DEPTH_MATERIAL = "";
          depthMaterial.uniforms = this.uniforms;
        }
        return depthMaterial;
      }
    },
    /**
     * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex
     * transformations and discarded fragments.
     */
    getDistanceMaterial: {
      writable: true,
      configurable: true,
      value: function() {
        let distanceMaterial = this._distanceMaterial;
        if (!distanceMaterial) {
          distanceMaterial = this._distanceMaterial = createDerivedMaterial(
            baseMaterial.isDerivedMaterial ? baseMaterial.getDistanceMaterial() : new MeshDistanceMaterial(),
            options
          );
          distanceMaterial.defines.IS_DISTANCE_MATERIAL = "";
          distanceMaterial.uniforms = this.uniforms;
        }
        return distanceMaterial;
      }
    },
    dispose: {
      writable: true,
      configurable: true,
      value() {
        const { _depthMaterial, _distanceMaterial } = this;
        if (_depthMaterial) _depthMaterial.dispose();
        if (_distanceMaterial) _distanceMaterial.dispose();
        baseMaterial.dispose.call(this);
      }
    }
  };
  ctorsByDerivation[optionsKey] = DerivedMaterial;
  return new DerivedMaterial();
}
function upgradeShaders(material, { vertexShader: vertexShader2, fragmentShader: fragmentShader2 }, options, key) {
  let {
    vertexDefs,
    vertexMainIntro,
    vertexMainOutro,
    vertexTransform,
    fragmentDefs,
    fragmentMainIntro,
    fragmentMainOutro,
    fragmentColorTransform,
    customRewriter,
    timeUniform
  } = options;
  vertexDefs = vertexDefs || "";
  vertexMainIntro = vertexMainIntro || "";
  vertexMainOutro = vertexMainOutro || "";
  fragmentDefs = fragmentDefs || "";
  fragmentMainIntro = fragmentMainIntro || "";
  fragmentMainOutro = fragmentMainOutro || "";
  if (vertexTransform || customRewriter) {
    vertexShader2 = expandShaderIncludes(vertexShader2);
  }
  if (fragmentColorTransform || customRewriter) {
    fragmentShader2 = fragmentShader2.replace(
      /^[ \t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm,
      "\n//!BEGIN_POST_CHUNK $1\n$&\n//!END_POST_CHUNK\n"
    );
    fragmentShader2 = expandShaderIncludes(fragmentShader2);
  }
  if (customRewriter) {
    let res = customRewriter({ vertexShader: vertexShader2, fragmentShader: fragmentShader2 });
    vertexShader2 = res.vertexShader;
    fragmentShader2 = res.fragmentShader;
  }
  if (fragmentColorTransform) {
    let postChunks = [];
    fragmentShader2 = fragmentShader2.replace(
      /^\/\/!BEGIN_POST_CHUNK[^]+?^\/\/!END_POST_CHUNK/gm,
      // [^]+? = non-greedy match of any chars including newlines
      (match) => {
        postChunks.push(match);
        return "";
      }
    );
    fragmentMainOutro = `${fragmentColorTransform}
${postChunks.join("\n")}
${fragmentMainOutro}`;
  }
  if (timeUniform) {
    const code = `
uniform float ${timeUniform};
`;
    vertexDefs = code + vertexDefs;
    fragmentDefs = code + fragmentDefs;
  }
  if (vertexTransform) {
    vertexShader2 = `vec3 troika_position_${key};
vec3 troika_normal_${key};
vec2 troika_uv_${key};
${vertexShader2}
`;
    vertexDefs = `${vertexDefs}
void troikaVertexTransform${key}(inout vec3 position, inout vec3 normal, inout vec2 uv) {
  ${vertexTransform}
}
`;
    vertexMainIntro = `
troika_position_${key} = vec3(position);
troika_normal_${key} = vec3(normal);
troika_uv_${key} = vec2(uv);
troikaVertexTransform${key}(troika_position_${key}, troika_normal_${key}, troika_uv_${key});
${vertexMainIntro}
`;
    vertexShader2 = vertexShader2.replace(/\b(position|normal|uv)\b/g, (match, match1, index2, fullStr) => {
      return /\battribute\s+vec[23]\s+$/.test(fullStr.substr(0, index2)) ? match1 : `troika_${match1}_${key}`;
    });
    if (!(material.map && material.map.channel > 0)) {
      vertexShader2 = vertexShader2.replace(/\bMAP_UV\b/g, `troika_uv_${key}`);
    }
  }
  vertexShader2 = injectIntoShaderCode(vertexShader2, key, vertexDefs, vertexMainIntro, vertexMainOutro);
  fragmentShader2 = injectIntoShaderCode(fragmentShader2, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);
  return {
    vertexShader: vertexShader2,
    fragmentShader: fragmentShader2
  };
}
function injectIntoShaderCode(shaderCode, id, defs, intro, outro) {
  if (intro || outro || defs) {
    shaderCode = shaderCode.replace(
      voidMainRegExp,
      `
${defs}
void troikaOrigMain${id}() {`
    );
    shaderCode += `
void main() {
  ${intro}
  troikaOrigMain${id}();
  ${outro}
}`;
  }
  return shaderCode;
}
function optionsJsonReplacer(key, value) {
  return key === "uniforms" ? void 0 : typeof value === "function" ? value.toString() : value;
}
var _idCtr = 0;
var optionsHashesToIds = /* @__PURE__ */ new Map();
function getKeyForOptions(options) {
  const optionsHash = JSON.stringify(options, optionsJsonReplacer);
  let id = optionsHashesToIds.get(optionsHash);
  if (id == null) {
    optionsHashesToIds.set(optionsHash, id = ++_idCtr);
  }
  return id;
}
var defaultBaseMaterial = new MeshStandardMaterial({ color: 16777215, side: DoubleSide });

// node_modules/troika-three-text/dist/troika-three-text.esm.js
function createTypesetter(fontParser, bidi, config) {
  const {
    defaultFontURL
  } = config;
  const fonts = /* @__PURE__ */ Object.create(null);
  const INF = Infinity;
  const DEFAULT_IGNORABLE_CHARS = /[\u00AD\u034F\u061C\u115F-\u1160\u17B4-\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8]/;
  const lineBreakingWhiteSpace = `[^\\S\\u00A0]`;
  const BREAK_AFTER_CHARS = new RegExp(`${lineBreakingWhiteSpace}|[\\-\\u007C\\u00AD\\u2010\\u2012-\\u2014\\u2027\\u2056\\u2E17\\u2E40]`);
  function doLoadFont(url, callback) {
    function tryLoad() {
      const onError = (err) => {
        console.error(`Failure loading font ${url}${url === defaultFontURL ? "" : "; trying fallback"}`, err);
        if (url !== defaultFontURL) {
          url = defaultFontURL;
          tryLoad();
        }
      };
      try {
        const request = new XMLHttpRequest();
        request.open("get", url, true);
        request.responseType = "arraybuffer";
        request.onload = function() {
          if (request.status >= 400) {
            onError(new Error(request.statusText));
          } else if (request.status > 0) {
            try {
              const fontObj = fontParser(request.response);
              callback(fontObj);
            } catch (e3) {
              onError(e3);
            }
          }
        };
        request.onerror = onError;
        request.send();
      } catch (err) {
        onError(err);
      }
    }
    tryLoad();
  }
  function loadFont(fontUrl, callback) {
    if (!fontUrl) fontUrl = defaultFontURL;
    let font = fonts[fontUrl];
    if (font) {
      if (font.pending) {
        font.pending.push(callback);
      } else {
        callback(font);
      }
    } else {
      fonts[fontUrl] = { pending: [callback] };
      doLoadFont(fontUrl, (fontObj) => {
        let callbacks = fonts[fontUrl].pending;
        fonts[fontUrl] = fontObj;
        callbacks.forEach((cb) => cb(fontObj));
      });
    }
  }
  function typeset({
    text = "",
    font = defaultFontURL,
    sdfGlyphSize = 64,
    fontSize = 1,
    letterSpacing = 0,
    lineHeight = "normal",
    maxWidth = INF,
    direction,
    textAlign = "left",
    textIndent = 0,
    whiteSpace = "normal",
    overflowWrap = "normal",
    anchorX = 0,
    anchorY = 0,
    includeCaretPositions = false,
    chunkedBoundsSize = 8192,
    colorRanges = null
  }, callback, metricsOnly = false) {
    const mainStart = now2();
    const timings = { fontLoad: 0, typesetting: 0 };
    if (text.indexOf("\r") > -1) {
      console.info("Typesetter: got text with \\r chars; normalizing to \\n");
      text = text.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
    }
    fontSize = +fontSize;
    letterSpacing = +letterSpacing;
    maxWidth = +maxWidth;
    lineHeight = lineHeight || "normal";
    textIndent = +textIndent;
    loadFont(font, (fontObj) => {
      const hasMaxWidth = isFinite(maxWidth);
      let glyphIds = null;
      let glyphPositions = null;
      let glyphData = null;
      let glyphColors = null;
      let caretPositions = null;
      let visibleBounds = null;
      let chunkedBounds = null;
      let maxLineWidth = 0;
      let renderableGlyphCount = 0;
      let canWrap = whiteSpace !== "nowrap";
      const { ascender, descender, unitsPerEm, lineGap, capHeight, xHeight } = fontObj;
      timings.fontLoad = now2() - mainStart;
      const typesetStart = now2();
      const fontSizeMult = fontSize / unitsPerEm;
      if (lineHeight === "normal") {
        lineHeight = (ascender - descender + lineGap) / unitsPerEm;
      }
      lineHeight = lineHeight * fontSize;
      const halfLeading = (lineHeight - (ascender - descender) * fontSizeMult) / 2;
      const topBaseline = -(ascender * fontSizeMult + halfLeading);
      const caretHeight = Math.min(lineHeight, (ascender - descender) * fontSizeMult);
      const caretBottomOffset = (ascender + descender) / 2 * fontSizeMult - caretHeight / 2;
      let lineXOffset = textIndent;
      let currentLine = new TextLine();
      const lines = [currentLine];
      fontObj.forEachGlyph(text, fontSize, letterSpacing, (glyphObj, glyphX, charIndex) => {
        const char = text.charAt(charIndex);
        const glyphWidth = glyphObj.advanceWidth * fontSizeMult;
        const curLineCount = currentLine.count;
        let nextLine;
        if (!("isEmpty" in glyphObj)) {
          glyphObj.isWhitespace = !!char && new RegExp(lineBreakingWhiteSpace).test(char);
          glyphObj.canBreakAfter = !!char && BREAK_AFTER_CHARS.test(char);
          glyphObj.isEmpty = glyphObj.xMin === glyphObj.xMax || glyphObj.yMin === glyphObj.yMax || DEFAULT_IGNORABLE_CHARS.test(char);
        }
        if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {
          renderableGlyphCount++;
        }
        if (canWrap && hasMaxWidth && !glyphObj.isWhitespace && glyphX + glyphWidth + lineXOffset > maxWidth && curLineCount) {
          if (currentLine.glyphAt(curLineCount - 1).glyphObj.canBreakAfter) {
            nextLine = new TextLine();
            lineXOffset = -glyphX;
          } else {
            for (let i4 = curLineCount; i4--; ) {
              if (i4 === 0 && overflowWrap === "break-word") {
                nextLine = new TextLine();
                lineXOffset = -glyphX;
                break;
              } else if (currentLine.glyphAt(i4).glyphObj.canBreakAfter) {
                nextLine = currentLine.splitAt(i4 + 1);
                const adjustX = nextLine.glyphAt(0).x;
                lineXOffset -= adjustX;
                for (let j2 = nextLine.count; j2--; ) {
                  nextLine.glyphAt(j2).x -= adjustX;
                }
                break;
              }
            }
          }
          if (nextLine) {
            currentLine.isSoftWrapped = true;
            currentLine = nextLine;
            lines.push(currentLine);
            maxLineWidth = maxWidth;
          }
        }
        let fly = currentLine.glyphAt(currentLine.count);
        fly.glyphObj = glyphObj;
        fly.x = glyphX + lineXOffset;
        fly.width = glyphWidth;
        fly.charIndex = charIndex;
        if (char === "\n") {
          currentLine = new TextLine();
          lines.push(currentLine);
          lineXOffset = -(glyphX + glyphWidth + letterSpacing * fontSize) + textIndent;
        }
      });
      lines.forEach((line) => {
        for (let i4 = line.count; i4--; ) {
          let { glyphObj, x: x2, width } = line.glyphAt(i4);
          if (!glyphObj.isWhitespace) {
            line.width = x2 + width;
            if (line.width > maxLineWidth) {
              maxLineWidth = line.width;
            }
            return;
          }
        }
      });
      let anchorXOffset = 0;
      let anchorYOffset = 0;
      if (anchorX) {
        if (typeof anchorX === "number") {
          anchorXOffset = -anchorX;
        } else if (typeof anchorX === "string") {
          anchorXOffset = -maxLineWidth * (anchorX === "left" ? 0 : anchorX === "center" ? 0.5 : anchorX === "right" ? 1 : parsePercent(anchorX));
        }
      }
      if (anchorY) {
        if (typeof anchorY === "number") {
          anchorYOffset = -anchorY;
        } else if (typeof anchorY === "string") {
          let height = lines.length * lineHeight;
          anchorYOffset = anchorY === "top" ? 0 : anchorY === "top-baseline" ? -topBaseline : anchorY === "top-cap" ? -topBaseline - capHeight * fontSizeMult : anchorY === "top-ex" ? -topBaseline - xHeight * fontSizeMult : anchorY === "middle" ? height / 2 : anchorY === "bottom" ? height : anchorY === "bottom-baseline" ? height - halfLeading + descender * fontSizeMult : parsePercent(anchorY) * height;
        }
      }
      if (!metricsOnly) {
        const bidiLevelsResult = bidi.getEmbeddingLevels(text, direction);
        glyphIds = new Uint16Array(renderableGlyphCount);
        glyphPositions = new Float32Array(renderableGlyphCount * 2);
        glyphData = {};
        visibleBounds = [INF, INF, -INF, -INF];
        chunkedBounds = [];
        let lineYOffset = topBaseline;
        if (includeCaretPositions) {
          caretPositions = new Float32Array(text.length * 3);
        }
        if (colorRanges) {
          glyphColors = new Uint8Array(renderableGlyphCount * 3);
        }
        let renderableGlyphIndex = 0;
        let prevCharIndex = -1;
        let colorCharIndex = -1;
        let chunk;
        let currentColor;
        lines.forEach((line, lineIndex) => {
          let { count: lineGlyphCount, width: lineWidth } = line;
          if (lineGlyphCount > 0) {
            let trailingWhitespaceCount = 0;
            for (let i4 = lineGlyphCount; i4-- && line.glyphAt(i4).glyphObj.isWhitespace; ) {
              trailingWhitespaceCount++;
            }
            let lineXOffset2 = 0;
            let justifyAdjust = 0;
            if (textAlign === "center") {
              lineXOffset2 = (maxLineWidth - lineWidth) / 2;
            } else if (textAlign === "right") {
              lineXOffset2 = maxLineWidth - lineWidth;
            } else if (textAlign === "justify" && line.isSoftWrapped) {
              let whitespaceCount = 0;
              for (let i4 = lineGlyphCount - trailingWhitespaceCount; i4--; ) {
                if (line.glyphAt(i4).glyphObj.isWhitespace) {
                  whitespaceCount++;
                }
              }
              justifyAdjust = (maxLineWidth - lineWidth) / whitespaceCount;
            }
            if (justifyAdjust || lineXOffset2) {
              let justifyOffset = 0;
              for (let i4 = 0; i4 < lineGlyphCount; i4++) {
                let glyphInfo = line.glyphAt(i4);
                const glyphObj2 = glyphInfo.glyphObj;
                glyphInfo.x += lineXOffset2 + justifyOffset;
                if (justifyAdjust !== 0 && glyphObj2.isWhitespace && i4 < lineGlyphCount - trailingWhitespaceCount) {
                  justifyOffset += justifyAdjust;
                  glyphInfo.width += justifyAdjust;
                }
              }
            }
            const flips = bidi.getReorderSegments(
              text,
              bidiLevelsResult,
              line.glyphAt(0).charIndex,
              line.glyphAt(line.count - 1).charIndex
            );
            for (let fi2 = 0; fi2 < flips.length; fi2++) {
              const [start, end] = flips[fi2];
              let left = Infinity, right = -Infinity;
              for (let i4 = 0; i4 < lineGlyphCount; i4++) {
                if (line.glyphAt(i4).charIndex >= start) {
                  let startInLine = i4, endInLine = i4;
                  for (; endInLine < lineGlyphCount; endInLine++) {
                    let info = line.glyphAt(endInLine);
                    if (info.charIndex > end) {
                      break;
                    }
                    if (endInLine < lineGlyphCount - trailingWhitespaceCount) {
                      left = Math.min(left, info.x);
                      right = Math.max(right, info.x + info.width);
                    }
                  }
                  for (let j2 = startInLine; j2 < endInLine; j2++) {
                    const glyphInfo = line.glyphAt(j2);
                    glyphInfo.x = right - (glyphInfo.x + glyphInfo.width - left);
                  }
                  break;
                }
              }
            }
            let glyphObj;
            const setGlyphObj = (g2) => glyphObj = g2;
            for (let i4 = 0; i4 < lineGlyphCount; i4++) {
              let glyphInfo = line.glyphAt(i4);
              glyphObj = glyphInfo.glyphObj;
              const glyphId = glyphObj.index;
              const rtl = bidiLevelsResult.levels[glyphInfo.charIndex] & 1;
              if (rtl) {
                const mirrored = bidi.getMirroredCharacter(text[glyphInfo.charIndex]);
                if (mirrored) {
                  fontObj.forEachGlyph(mirrored, 0, 0, setGlyphObj);
                }
              }
              if (includeCaretPositions) {
                const { charIndex } = glyphInfo;
                const caretLeft = glyphInfo.x + anchorXOffset;
                const caretRight = glyphInfo.x + glyphInfo.width + anchorXOffset;
                caretPositions[charIndex * 3] = rtl ? caretRight : caretLeft;
                caretPositions[charIndex * 3 + 1] = rtl ? caretLeft : caretRight;
                caretPositions[charIndex * 3 + 2] = lineYOffset + caretBottomOffset + anchorYOffset;
                const ligCount = charIndex - prevCharIndex;
                if (ligCount > 1) {
                  fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);
                }
                prevCharIndex = charIndex;
              }
              if (colorRanges) {
                const { charIndex } = glyphInfo;
                while (charIndex > colorCharIndex) {
                  colorCharIndex++;
                  if (colorRanges.hasOwnProperty(colorCharIndex)) {
                    currentColor = colorRanges[colorCharIndex];
                  }
                }
              }
              if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {
                const idx = renderableGlyphIndex++;
                if (!glyphData[glyphId]) {
                  glyphData[glyphId] = {
                    path: glyphObj.path,
                    pathBounds: [glyphObj.xMin, glyphObj.yMin, glyphObj.xMax, glyphObj.yMax]
                  };
                }
                const glyphX = glyphInfo.x + anchorXOffset;
                const glyphY = lineYOffset + anchorYOffset;
                glyphPositions[idx * 2] = glyphX;
                glyphPositions[idx * 2 + 1] = glyphY;
                const visX0 = glyphX + glyphObj.xMin * fontSizeMult;
                const visY0 = glyphY + glyphObj.yMin * fontSizeMult;
                const visX1 = glyphX + glyphObj.xMax * fontSizeMult;
                const visY1 = glyphY + glyphObj.yMax * fontSizeMult;
                if (visX0 < visibleBounds[0]) visibleBounds[0] = visX0;
                if (visY0 < visibleBounds[1]) visibleBounds[1] = visY0;
                if (visX1 > visibleBounds[2]) visibleBounds[2] = visX1;
                if (visY1 > visibleBounds[3]) visibleBounds[3] = visY1;
                if (idx % chunkedBoundsSize === 0) {
                  chunk = { start: idx, end: idx, rect: [INF, INF, -INF, -INF] };
                  chunkedBounds.push(chunk);
                }
                chunk.end++;
                const chunkRect = chunk.rect;
                if (visX0 < chunkRect[0]) chunkRect[0] = visX0;
                if (visY0 < chunkRect[1]) chunkRect[1] = visY0;
                if (visX1 > chunkRect[2]) chunkRect[2] = visX1;
                if (visY1 > chunkRect[3]) chunkRect[3] = visY1;
                glyphIds[idx] = glyphId;
                if (colorRanges) {
                  const start = idx * 3;
                  glyphColors[start] = currentColor >> 16 & 255;
                  glyphColors[start + 1] = currentColor >> 8 & 255;
                  glyphColors[start + 2] = currentColor & 255;
                }
              }
            }
          }
          lineYOffset -= lineHeight;
        });
        if (caretPositions) {
          const ligCount = text.length - prevCharIndex;
          if (ligCount > 1) {
            fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);
          }
        }
      }
      timings.typesetting = now2() - typesetStart;
      callback({
        glyphIds,
        //font indices for each glyph
        glyphPositions,
        //x,y of each glyph's origin in layout
        glyphData,
        //dict holding data about each glyph appearing in the text
        caretPositions,
        //startX,endX,bottomY caret positions for each char
        caretHeight,
        //height of cursor from bottom to top
        glyphColors,
        //color for each glyph, if color ranges supplied
        chunkedBounds,
        //total rects per (n=chunkedBoundsSize) consecutive glyphs
        fontSize,
        //calculated em height
        unitsPerEm,
        //font units per em
        ascender: ascender * fontSizeMult,
        //font ascender
        descender: descender * fontSizeMult,
        //font descender
        capHeight: capHeight * fontSizeMult,
        //font cap-height
        xHeight: xHeight * fontSizeMult,
        //font x-height
        lineHeight,
        //computed line height
        topBaseline,
        //y coordinate of the top line's baseline
        blockBounds: [
          //bounds for the whole block of text, including vertical padding for lineHeight
          anchorXOffset,
          anchorYOffset - lines.length * lineHeight,
          anchorXOffset + maxLineWidth,
          anchorYOffset
        ],
        visibleBounds,
        //total bounds of visible text paths, may be larger or smaller than blockBounds
        timings
      });
    });
  }
  function measure(args, callback) {
    typeset(args, (result) => {
      const [x0, y0, x1, y1] = result.blockBounds;
      callback({
        width: x1 - x0,
        height: y1 - y0
      });
    }, { metricsOnly: true });
  }
  function parsePercent(str) {
    let match = str.match(/^([\d.]+)%$/);
    let pct = match ? parseFloat(match[1]) : NaN;
    return isNaN(pct) ? 0 : pct / 100;
  }
  function fillLigatureCaretPositions(caretPositions, ligStartIndex, ligCount) {
    const ligStartX = caretPositions[ligStartIndex * 3];
    const ligEndX = caretPositions[ligStartIndex * 3 + 1];
    const ligY = caretPositions[ligStartIndex * 3 + 2];
    const guessedAdvanceX = (ligEndX - ligStartX) / ligCount;
    for (let i4 = 0; i4 < ligCount; i4++) {
      const startIndex = (ligStartIndex + i4) * 3;
      caretPositions[startIndex] = ligStartX + guessedAdvanceX * i4;
      caretPositions[startIndex + 1] = ligStartX + guessedAdvanceX * (i4 + 1);
      caretPositions[startIndex + 2] = ligY;
    }
  }
  function now2() {
    return (self.performance || Date).now();
  }
  function TextLine() {
    this.data = [];
  }
  const textLineProps = ["glyphObj", "x", "width", "charIndex"];
  TextLine.prototype = {
    width: 0,
    isSoftWrapped: false,
    get count() {
      return Math.ceil(this.data.length / textLineProps.length);
    },
    glyphAt(i4) {
      let fly = TextLine.flyweight;
      fly.data = this.data;
      fly.index = i4;
      return fly;
    },
    splitAt(i4) {
      let newLine = new TextLine();
      newLine.data = this.data.splice(i4 * textLineProps.length);
      return newLine;
    }
  };
  TextLine.flyweight = textLineProps.reduce((obj, prop, i4, all) => {
    Object.defineProperty(obj, prop, {
      get() {
        return this.data[this.index * textLineProps.length + i4];
      },
      set(val) {
        this.data[this.index * textLineProps.length + i4] = val;
      }
    });
    return obj;
  }, { data: null, index: 0 });
  return {
    typeset,
    measure,
    loadFont
  };
}
var now = () => (self.performance || Date).now();
var mainThreadGenerator = SDFGenerator();
var warned;
function generateSDF(width, height, path, viewBox, distance3, exponent, canvas, x2, y2, channel, useWebGL = true) {
  if (!useWebGL) {
    return generateSDF_JS_Worker(width, height, path, viewBox, distance3, exponent, canvas, x2, y2, channel);
  }
  return generateSDF_GL(width, height, path, viewBox, distance3, exponent, canvas, x2, y2, channel).then(
    null,
    (err) => {
      if (!warned) {
        console.warn(`WebGL SDF generation failed, falling back to JS`, err);
        warned = true;
      }
      return generateSDF_JS_Worker(width, height, path, viewBox, distance3, exponent, canvas, x2, y2, channel);
    }
  );
}
var queue = [];
var chunkTimeBudget = 5;
var timer = 0;
function nextChunk() {
  const start = now();
  while (queue.length && now() - start < chunkTimeBudget) {
    queue.shift()();
  }
  timer = queue.length ? setTimeout(nextChunk, 0) : 0;
}
var generateSDF_GL = (...args) => {
  return new Promise((resolve, reject) => {
    queue.push(() => {
      const start = now();
      try {
        mainThreadGenerator.webgl.generateIntoCanvas(...args);
        resolve({ timing: now() - start });
      } catch (err) {
        reject(err);
      }
    });
    if (!timer) {
      timer = setTimeout(nextChunk, 0);
    }
  });
};
var threadCount = 4;
var idleTimeout = 2e3;
var threads = {};
var callNum = 0;
function generateSDF_JS_Worker(width, height, path, viewBox, distance3, exponent, canvas, x2, y2, channel) {
  const workerId = "TroikaTextSDFGenerator_JS_" + callNum++ % threadCount;
  let thread = threads[workerId];
  if (!thread) {
    thread = threads[workerId] = {
      workerModule: defineWorkerModule({
        name: workerId,
        workerId,
        dependencies: [
          SDFGenerator,
          now
        ],
        init(_createSDFGenerator, now2) {
          const generate = _createSDFGenerator().javascript.generate;
          return function(...args) {
            const start = now2();
            const textureData = generate(...args);
            return {
              textureData,
              timing: now2() - start
            };
          };
        },
        getTransferables(result) {
          return [result.textureData.buffer];
        }
      }),
      requests: 0,
      idleTimer: null
    };
  }
  thread.requests++;
  clearTimeout(thread.idleTimer);
  return thread.workerModule(width, height, path, viewBox, distance3, exponent).then(({ textureData, timing }) => {
    const start = now();
    const imageData = new Uint8Array(textureData.length * 4);
    for (let i4 = 0; i4 < textureData.length; i4++) {
      imageData[i4 * 4 + channel] = textureData[i4];
    }
    mainThreadGenerator.webglUtils.renderImageData(canvas, imageData, x2, y2, width, height, 1 << 3 - channel);
    timing += now() - start;
    if (--thread.requests === 0) {
      thread.idleTimer = setTimeout(() => {
        terminateWorker(workerId);
      }, idleTimeout);
    }
    return { timing };
  });
}
function warmUpSDFCanvas(canvas) {
  if (!canvas._warm) {
    mainThreadGenerator.webgl.isSupported(canvas);
    canvas._warm = true;
  }
}
var resizeWebGLCanvasWithoutClearing = mainThreadGenerator.webglUtils.resizeWebGLCanvasWithoutClearing;
function typrFactory() {
  return "undefined" == typeof window && (self.window = self), function(r3) {
    var e3 = { parse: function(r4) {
      var t4 = e3._bin, a7 = new Uint8Array(r4);
      if ("ttcf" == t4.readASCII(a7, 0, 4)) {
        var n3 = 4;
        t4.readUshort(a7, n3), n3 += 2, t4.readUshort(a7, n3), n3 += 2;
        var o3 = t4.readUint(a7, n3);
        n3 += 4;
        for (var s3 = [], i4 = 0; i4 < o3; i4++) {
          var h2 = t4.readUint(a7, n3);
          n3 += 4, s3.push(e3._readFont(a7, h2));
        }
        return s3;
      }
      return [e3._readFont(a7, 0)];
    }, _readFont: function(r4, t4) {
      var a7 = e3._bin, n3 = t4;
      a7.readFixed(r4, t4), t4 += 4;
      var o3 = a7.readUshort(r4, t4);
      t4 += 2, a7.readUshort(r4, t4), t4 += 2, a7.readUshort(r4, t4), t4 += 2, a7.readUshort(r4, t4), t4 += 2;
      for (var s3 = ["cmap", "head", "hhea", "maxp", "hmtx", "name", "OS/2", "post", "loca", "glyf", "kern", "CFF ", "GPOS", "GSUB", "SVG "], i4 = { _data: r4, _offset: n3 }, h2 = {}, f3 = 0; f3 < o3; f3++) {
        var d3 = a7.readASCII(r4, t4, 4);
        t4 += 4, a7.readUint(r4, t4), t4 += 4;
        var u2 = a7.readUint(r4, t4);
        t4 += 4;
        var l3 = a7.readUint(r4, t4);
        t4 += 4, h2[d3] = { offset: u2, length: l3 };
      }
      for (f3 = 0; f3 < s3.length; f3++) {
        var v5 = s3[f3];
        h2[v5] && (i4[v5.trim()] = e3[v5.trim()].parse(r4, h2[v5].offset, h2[v5].length, i4));
      }
      return i4;
    }, _tabOffset: function(r4, t4, a7) {
      for (var n3 = e3._bin, o3 = n3.readUshort(r4, a7 + 4), s3 = a7 + 12, i4 = 0; i4 < o3; i4++) {
        var h2 = n3.readASCII(r4, s3, 4);
        s3 += 4, n3.readUint(r4, s3), s3 += 4;
        var f3 = n3.readUint(r4, s3);
        if (s3 += 4, n3.readUint(r4, s3), s3 += 4, h2 == t4) return f3;
      }
      return 0;
    } };
    e3._bin = { readFixed: function(r4, e4) {
      return (r4[e4] << 8 | r4[e4 + 1]) + (r4[e4 + 2] << 8 | r4[e4 + 3]) / 65540;
    }, readF2dot14: function(r4, t4) {
      return e3._bin.readShort(r4, t4) / 16384;
    }, readInt: function(r4, t4) {
      return e3._bin._view(r4).getInt32(t4);
    }, readInt8: function(r4, t4) {
      return e3._bin._view(r4).getInt8(t4);
    }, readShort: function(r4, t4) {
      return e3._bin._view(r4).getInt16(t4);
    }, readUshort: function(r4, t4) {
      return e3._bin._view(r4).getUint16(t4);
    }, readUshorts: function(r4, t4, a7) {
      for (var n3 = [], o3 = 0; o3 < a7; o3++) n3.push(e3._bin.readUshort(r4, t4 + 2 * o3));
      return n3;
    }, readUint: function(r4, t4) {
      return e3._bin._view(r4).getUint32(t4);
    }, readUint64: function(r4, t4) {
      return 4294967296 * e3._bin.readUint(r4, t4) + e3._bin.readUint(r4, t4 + 4);
    }, readASCII: function(r4, e4, t4) {
      for (var a7 = "", n3 = 0; n3 < t4; n3++) a7 += String.fromCharCode(r4[e4 + n3]);
      return a7;
    }, readUnicode: function(r4, e4, t4) {
      for (var a7 = "", n3 = 0; n3 < t4; n3++) {
        var o3 = r4[e4++] << 8 | r4[e4++];
        a7 += String.fromCharCode(o3);
      }
      return a7;
    }, _tdec: "undefined" != typeof window && window.TextDecoder ? new window.TextDecoder() : null, readUTF8: function(r4, t4, a7) {
      var n3 = e3._bin._tdec;
      return n3 && 0 == t4 && a7 == r4.length ? n3.decode(r4) : e3._bin.readASCII(r4, t4, a7);
    }, readBytes: function(r4, e4, t4) {
      for (var a7 = [], n3 = 0; n3 < t4; n3++) a7.push(r4[e4 + n3]);
      return a7;
    }, readASCIIArray: function(r4, e4, t4) {
      for (var a7 = [], n3 = 0; n3 < t4; n3++) a7.push(String.fromCharCode(r4[e4 + n3]));
      return a7;
    }, _view: function(r4) {
      return r4._dataView || (r4._dataView = r4.buffer ? new DataView(r4.buffer, r4.byteOffset, r4.byteLength) : new DataView(new Uint8Array(r4).buffer));
    } }, e3._lctf = {}, e3._lctf.parse = function(r4, t4, a7, n3, o3) {
      var s3 = e3._bin, i4 = {}, h2 = t4;
      s3.readFixed(r4, t4), t4 += 4;
      var f3 = s3.readUshort(r4, t4);
      t4 += 2;
      var d3 = s3.readUshort(r4, t4);
      t4 += 2;
      var u2 = s3.readUshort(r4, t4);
      return t4 += 2, i4.scriptList = e3._lctf.readScriptList(r4, h2 + f3), i4.featureList = e3._lctf.readFeatureList(r4, h2 + d3), i4.lookupList = e3._lctf.readLookupList(r4, h2 + u2, o3), i4;
    }, e3._lctf.readLookupList = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = t4, s3 = [], i4 = n3.readUshort(r4, t4);
      t4 += 2;
      for (var h2 = 0; h2 < i4; h2++) {
        var f3 = n3.readUshort(r4, t4);
        t4 += 2;
        var d3 = e3._lctf.readLookupTable(r4, o3 + f3, a7);
        s3.push(d3);
      }
      return s3;
    }, e3._lctf.readLookupTable = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = t4, s3 = { tabs: [] };
      s3.ltype = n3.readUshort(r4, t4), t4 += 2, s3.flag = n3.readUshort(r4, t4), t4 += 2;
      var i4 = n3.readUshort(r4, t4);
      t4 += 2;
      for (var h2 = s3.ltype, f3 = 0; f3 < i4; f3++) {
        var d3 = n3.readUshort(r4, t4);
        t4 += 2;
        var u2 = a7(r4, h2, o3 + d3, s3);
        s3.tabs.push(u2);
      }
      return s3;
    }, e3._lctf.numOfOnes = function(r4) {
      for (var e4 = 0, t4 = 0; t4 < 32; t4++) 0 != (r4 >>> t4 & 1) && e4++;
      return e4;
    }, e3._lctf.readClassDef = function(r4, t4) {
      var a7 = e3._bin, n3 = [], o3 = a7.readUshort(r4, t4);
      if (t4 += 2, 1 == o3) {
        var s3 = a7.readUshort(r4, t4);
        t4 += 2;
        var i4 = a7.readUshort(r4, t4);
        t4 += 2;
        for (var h2 = 0; h2 < i4; h2++) n3.push(s3 + h2), n3.push(s3 + h2), n3.push(a7.readUshort(r4, t4)), t4 += 2;
      }
      if (2 == o3) {
        var f3 = a7.readUshort(r4, t4);
        t4 += 2;
        for (h2 = 0; h2 < f3; h2++) n3.push(a7.readUshort(r4, t4)), t4 += 2, n3.push(a7.readUshort(r4, t4)), t4 += 2, n3.push(a7.readUshort(r4, t4)), t4 += 2;
      }
      return n3;
    }, e3._lctf.getInterval = function(r4, e4) {
      for (var t4 = 0; t4 < r4.length; t4 += 3) {
        var a7 = r4[t4], n3 = r4[t4 + 1];
        if (r4[t4 + 2], a7 <= e4 && e4 <= n3) return t4;
      }
      return -1;
    }, e3._lctf.readCoverage = function(r4, t4) {
      var a7 = e3._bin, n3 = {};
      n3.fmt = a7.readUshort(r4, t4), t4 += 2;
      var o3 = a7.readUshort(r4, t4);
      return t4 += 2, 1 == n3.fmt && (n3.tab = a7.readUshorts(r4, t4, o3)), 2 == n3.fmt && (n3.tab = a7.readUshorts(r4, t4, 3 * o3)), n3;
    }, e3._lctf.coverageIndex = function(r4, t4) {
      var a7 = r4.tab;
      if (1 == r4.fmt) return a7.indexOf(t4);
      if (2 == r4.fmt) {
        var n3 = e3._lctf.getInterval(a7, t4);
        if (-1 != n3) return a7[n3 + 2] + (t4 - a7[n3]);
      }
      return -1;
    }, e3._lctf.readFeatureList = function(r4, t4) {
      var a7 = e3._bin, n3 = t4, o3 = [], s3 = a7.readUshort(r4, t4);
      t4 += 2;
      for (var i4 = 0; i4 < s3; i4++) {
        var h2 = a7.readASCII(r4, t4, 4);
        t4 += 4;
        var f3 = a7.readUshort(r4, t4);
        t4 += 2;
        var d3 = e3._lctf.readFeatureTable(r4, n3 + f3);
        d3.tag = h2.trim(), o3.push(d3);
      }
      return o3;
    }, e3._lctf.readFeatureTable = function(r4, t4) {
      var a7 = e3._bin, n3 = t4, o3 = {}, s3 = a7.readUshort(r4, t4);
      t4 += 2, s3 > 0 && (o3.featureParams = n3 + s3);
      var i4 = a7.readUshort(r4, t4);
      t4 += 2, o3.tab = [];
      for (var h2 = 0; h2 < i4; h2++) o3.tab.push(a7.readUshort(r4, t4 + 2 * h2));
      return o3;
    }, e3._lctf.readScriptList = function(r4, t4) {
      var a7 = e3._bin, n3 = t4, o3 = {}, s3 = a7.readUshort(r4, t4);
      t4 += 2;
      for (var i4 = 0; i4 < s3; i4++) {
        var h2 = a7.readASCII(r4, t4, 4);
        t4 += 4;
        var f3 = a7.readUshort(r4, t4);
        t4 += 2, o3[h2.trim()] = e3._lctf.readScriptTable(r4, n3 + f3);
      }
      return o3;
    }, e3._lctf.readScriptTable = function(r4, t4) {
      var a7 = e3._bin, n3 = t4, o3 = {}, s3 = a7.readUshort(r4, t4);
      t4 += 2, o3.default = e3._lctf.readLangSysTable(r4, n3 + s3);
      var i4 = a7.readUshort(r4, t4);
      t4 += 2;
      for (var h2 = 0; h2 < i4; h2++) {
        var f3 = a7.readASCII(r4, t4, 4);
        t4 += 4;
        var d3 = a7.readUshort(r4, t4);
        t4 += 2, o3[f3.trim()] = e3._lctf.readLangSysTable(r4, n3 + d3);
      }
      return o3;
    }, e3._lctf.readLangSysTable = function(r4, t4) {
      var a7 = e3._bin, n3 = {};
      a7.readUshort(r4, t4), t4 += 2, n3.reqFeature = a7.readUshort(r4, t4), t4 += 2;
      var o3 = a7.readUshort(r4, t4);
      return t4 += 2, n3.features = a7.readUshorts(r4, t4, o3), n3;
    }, e3.CFF = {}, e3.CFF.parse = function(r4, t4, a7) {
      var n3 = e3._bin;
      (r4 = new Uint8Array(r4.buffer, t4, a7))[t4 = 0], r4[++t4], r4[++t4], r4[++t4], t4++;
      var o3 = [];
      t4 = e3.CFF.readIndex(r4, t4, o3);
      for (var s3 = [], i4 = 0; i4 < o3.length - 1; i4++) s3.push(n3.readASCII(r4, t4 + o3[i4], o3[i4 + 1] - o3[i4]));
      t4 += o3[o3.length - 1];
      var h2 = [];
      t4 = e3.CFF.readIndex(r4, t4, h2);
      var f3 = [];
      for (i4 = 0; i4 < h2.length - 1; i4++) f3.push(e3.CFF.readDict(r4, t4 + h2[i4], t4 + h2[i4 + 1]));
      t4 += h2[h2.length - 1];
      var d3 = f3[0], u2 = [];
      t4 = e3.CFF.readIndex(r4, t4, u2);
      var l3 = [];
      for (i4 = 0; i4 < u2.length - 1; i4++) l3.push(n3.readASCII(r4, t4 + u2[i4], u2[i4 + 1] - u2[i4]));
      if (t4 += u2[u2.length - 1], e3.CFF.readSubrs(r4, t4, d3), d3.CharStrings) {
        t4 = d3.CharStrings;
        u2 = [];
        t4 = e3.CFF.readIndex(r4, t4, u2);
        var v5 = [];
        for (i4 = 0; i4 < u2.length - 1; i4++) v5.push(n3.readBytes(r4, t4 + u2[i4], u2[i4 + 1] - u2[i4]));
        d3.CharStrings = v5;
      }
      if (d3.ROS) {
        t4 = d3.FDArray;
        var c5 = [];
        t4 = e3.CFF.readIndex(r4, t4, c5), d3.FDArray = [];
        for (i4 = 0; i4 < c5.length - 1; i4++) {
          var p3 = e3.CFF.readDict(r4, t4 + c5[i4], t4 + c5[i4 + 1]);
          e3.CFF._readFDict(r4, p3, l3), d3.FDArray.push(p3);
        }
        t4 += c5[c5.length - 1], t4 = d3.FDSelect, d3.FDSelect = [];
        var U2 = r4[t4];
        if (t4++, 3 != U2) throw U2;
        var g2 = n3.readUshort(r4, t4);
        t4 += 2;
        for (i4 = 0; i4 < g2 + 1; i4++) d3.FDSelect.push(n3.readUshort(r4, t4), r4[t4 + 2]), t4 += 3;
      }
      return d3.Encoding && (d3.Encoding = e3.CFF.readEncoding(r4, d3.Encoding, d3.CharStrings.length)), d3.charset && (d3.charset = e3.CFF.readCharset(r4, d3.charset, d3.CharStrings.length)), e3.CFF._readFDict(r4, d3, l3), d3;
    }, e3.CFF._readFDict = function(r4, t4, a7) {
      var n3;
      for (var o3 in t4.Private && (n3 = t4.Private[1], t4.Private = e3.CFF.readDict(r4, n3, n3 + t4.Private[0]), t4.Private.Subrs && e3.CFF.readSubrs(r4, n3 + t4.Private.Subrs, t4.Private)), t4) -1 != ["FamilyName", "FontName", "FullName", "Notice", "version", "Copyright"].indexOf(o3) && (t4[o3] = a7[t4[o3] - 426 + 35]);
    }, e3.CFF.readSubrs = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = [];
      t4 = e3.CFF.readIndex(r4, t4, o3);
      var s3, i4 = o3.length;
      s3 = i4 < 1240 ? 107 : i4 < 33900 ? 1131 : 32768, a7.Bias = s3, a7.Subrs = [];
      for (var h2 = 0; h2 < o3.length - 1; h2++) a7.Subrs.push(n3.readBytes(r4, t4 + o3[h2], o3[h2 + 1] - o3[h2]));
    }, e3.CFF.tableSE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 0, 115, 116, 117, 118, 119, 120, 121, 122, 0, 123, 0, 124, 125, 126, 127, 128, 129, 130, 131, 0, 132, 133, 0, 134, 135, 136, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 139, 0, 0, 0, 0, 140, 141, 142, 143, 0, 0, 0, 0, 0, 144, 0, 0, 0, 145, 0, 0, 146, 147, 148, 149, 0, 0, 0, 0], e3.CFF.glyphByUnicode = function(r4, e4) {
      for (var t4 = 0; t4 < r4.charset.length; t4++) if (r4.charset[t4] == e4) return t4;
      return -1;
    }, e3.CFF.glyphBySE = function(r4, t4) {
      return t4 < 0 || t4 > 255 ? -1 : e3.CFF.glyphByUnicode(r4, e3.CFF.tableSE[t4]);
    }, e3.CFF.readEncoding = function(r4, t4, a7) {
      e3._bin;
      var n3 = [".notdef"], o3 = r4[t4];
      if (t4++, 0 != o3) throw "error: unknown encoding format: " + o3;
      var s3 = r4[t4];
      t4++;
      for (var i4 = 0; i4 < s3; i4++) n3.push(r4[t4 + i4]);
      return n3;
    }, e3.CFF.readCharset = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = [".notdef"], s3 = r4[t4];
      if (t4++, 0 == s3) for (var i4 = 0; i4 < a7; i4++) {
        var h2 = n3.readUshort(r4, t4);
        t4 += 2, o3.push(h2);
      }
      else {
        if (1 != s3 && 2 != s3) throw "error: format: " + s3;
        for (; o3.length < a7; ) {
          h2 = n3.readUshort(r4, t4);
          t4 += 2;
          var f3 = 0;
          1 == s3 ? (f3 = r4[t4], t4++) : (f3 = n3.readUshort(r4, t4), t4 += 2);
          for (i4 = 0; i4 <= f3; i4++) o3.push(h2), h2++;
        }
      }
      return o3;
    }, e3.CFF.readIndex = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = n3.readUshort(r4, t4) + 1, s3 = r4[t4 += 2];
      if (t4++, 1 == s3) for (var i4 = 0; i4 < o3; i4++) a7.push(r4[t4 + i4]);
      else if (2 == s3) for (i4 = 0; i4 < o3; i4++) a7.push(n3.readUshort(r4, t4 + 2 * i4));
      else if (3 == s3) for (i4 = 0; i4 < o3; i4++) a7.push(16777215 & n3.readUint(r4, t4 + 3 * i4 - 1));
      else if (1 != o3) throw "unsupported offset size: " + s3 + ", count: " + o3;
      return (t4 += o3 * s3) - 1;
    }, e3.CFF.getCharString = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = r4[t4], s3 = r4[t4 + 1];
      r4[t4 + 2], r4[t4 + 3], r4[t4 + 4];
      var i4 = 1, h2 = null, f3 = null;
      o3 <= 20 && (h2 = o3, i4 = 1), 12 == o3 && (h2 = 100 * o3 + s3, i4 = 2), 21 <= o3 && o3 <= 27 && (h2 = o3, i4 = 1), 28 == o3 && (f3 = n3.readShort(r4, t4 + 1), i4 = 3), 29 <= o3 && o3 <= 31 && (h2 = o3, i4 = 1), 32 <= o3 && o3 <= 246 && (f3 = o3 - 139, i4 = 1), 247 <= o3 && o3 <= 250 && (f3 = 256 * (o3 - 247) + s3 + 108, i4 = 2), 251 <= o3 && o3 <= 254 && (f3 = 256 * -(o3 - 251) - s3 - 108, i4 = 2), 255 == o3 && (f3 = n3.readInt(r4, t4 + 1) / 65535, i4 = 5), a7.val = null != f3 ? f3 : "o" + h2, a7.size = i4;
    }, e3.CFF.readCharString = function(r4, t4, a7) {
      for (var n3 = t4 + a7, o3 = e3._bin, s3 = []; t4 < n3; ) {
        var i4 = r4[t4], h2 = r4[t4 + 1];
        r4[t4 + 2], r4[t4 + 3], r4[t4 + 4];
        var f3 = 1, d3 = null, u2 = null;
        i4 <= 20 && (d3 = i4, f3 = 1), 12 == i4 && (d3 = 100 * i4 + h2, f3 = 2), 19 != i4 && 20 != i4 || (d3 = i4, f3 = 2), 21 <= i4 && i4 <= 27 && (d3 = i4, f3 = 1), 28 == i4 && (u2 = o3.readShort(r4, t4 + 1), f3 = 3), 29 <= i4 && i4 <= 31 && (d3 = i4, f3 = 1), 32 <= i4 && i4 <= 246 && (u2 = i4 - 139, f3 = 1), 247 <= i4 && i4 <= 250 && (u2 = 256 * (i4 - 247) + h2 + 108, f3 = 2), 251 <= i4 && i4 <= 254 && (u2 = 256 * -(i4 - 251) - h2 - 108, f3 = 2), 255 == i4 && (u2 = o3.readInt(r4, t4 + 1) / 65535, f3 = 5), s3.push(null != u2 ? u2 : "o" + d3), t4 += f3;
      }
      return s3;
    }, e3.CFF.readDict = function(r4, t4, a7) {
      for (var n3 = e3._bin, o3 = {}, s3 = []; t4 < a7; ) {
        var i4 = r4[t4], h2 = r4[t4 + 1];
        r4[t4 + 2], r4[t4 + 3], r4[t4 + 4];
        var f3 = 1, d3 = null, u2 = null;
        if (28 == i4 && (u2 = n3.readShort(r4, t4 + 1), f3 = 3), 29 == i4 && (u2 = n3.readInt(r4, t4 + 1), f3 = 5), 32 <= i4 && i4 <= 246 && (u2 = i4 - 139, f3 = 1), 247 <= i4 && i4 <= 250 && (u2 = 256 * (i4 - 247) + h2 + 108, f3 = 2), 251 <= i4 && i4 <= 254 && (u2 = 256 * -(i4 - 251) - h2 - 108, f3 = 2), 255 == i4) throw u2 = n3.readInt(r4, t4 + 1) / 65535, f3 = 5, "unknown number";
        if (30 == i4) {
          var l3 = [];
          for (f3 = 1; ; ) {
            var v5 = r4[t4 + f3];
            f3++;
            var c5 = v5 >> 4, p3 = 15 & v5;
            if (15 != c5 && l3.push(c5), 15 != p3 && l3.push(p3), 15 == p3) break;
          }
          for (var U2 = "", g2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ".", "e", "e-", "reserved", "-", "endOfNumber"], S2 = 0; S2 < l3.length; S2++) U2 += g2[l3[S2]];
          u2 = parseFloat(U2);
        }
        if (i4 <= 21) {
          if (d3 = ["version", "Notice", "FullName", "FamilyName", "Weight", "FontBBox", "BlueValues", "OtherBlues", "FamilyBlues", "FamilyOtherBlues", "StdHW", "StdVW", "escape", "UniqueID", "XUID", "charset", "Encoding", "CharStrings", "Private", "Subrs", "defaultWidthX", "nominalWidthX"][i4], f3 = 1, 12 == i4) d3 = ["Copyright", "isFixedPitch", "ItalicAngle", "UnderlinePosition", "UnderlineThickness", "PaintType", "CharstringType", "FontMatrix", "StrokeWidth", "BlueScale", "BlueShift", "BlueFuzz", "StemSnapH", "StemSnapV", "ForceBold", 0, 0, "LanguageGroup", "ExpansionFactor", "initialRandomSeed", "SyntheticBase", "PostScript", "BaseFontName", "BaseFontBlend", 0, 0, 0, 0, 0, 0, "ROS", "CIDFontVersion", "CIDFontRevision", "CIDFontType", "CIDCount", "UIDBase", "FDArray", "FDSelect", "FontName"][h2], f3 = 2;
        }
        null != d3 ? (o3[d3] = 1 == s3.length ? s3[0] : s3, s3 = []) : s3.push(u2), t4 += f3;
      }
      return o3;
    }, e3.cmap = {}, e3.cmap.parse = function(r4, t4, a7) {
      r4 = new Uint8Array(r4.buffer, t4, a7), t4 = 0;
      var n3 = e3._bin, o3 = {};
      n3.readUshort(r4, t4), t4 += 2;
      var s3 = n3.readUshort(r4, t4);
      t4 += 2;
      var i4 = [];
      o3.tables = [];
      for (var h2 = 0; h2 < s3; h2++) {
        var f3 = n3.readUshort(r4, t4);
        t4 += 2;
        var d3 = n3.readUshort(r4, t4);
        t4 += 2;
        var u2 = n3.readUint(r4, t4);
        t4 += 4;
        var l3 = "p" + f3 + "e" + d3, v5 = i4.indexOf(u2);
        if (-1 == v5) {
          var c5;
          v5 = o3.tables.length, i4.push(u2);
          var p3 = n3.readUshort(r4, u2);
          0 == p3 ? c5 = e3.cmap.parse0(r4, u2) : 4 == p3 ? c5 = e3.cmap.parse4(r4, u2) : 6 == p3 ? c5 = e3.cmap.parse6(r4, u2) : 12 == p3 ? c5 = e3.cmap.parse12(r4, u2) : console.debug("unknown format: " + p3, f3, d3, u2), o3.tables.push(c5);
        }
        if (null != o3[l3]) throw "multiple tables for one platform+encoding";
        o3[l3] = v5;
      }
      return o3;
    }, e3.cmap.parse0 = function(r4, t4) {
      var a7 = e3._bin, n3 = {};
      n3.format = a7.readUshort(r4, t4), t4 += 2;
      var o3 = a7.readUshort(r4, t4);
      t4 += 2, a7.readUshort(r4, t4), t4 += 2, n3.map = [];
      for (var s3 = 0; s3 < o3 - 6; s3++) n3.map.push(r4[t4 + s3]);
      return n3;
    }, e3.cmap.parse4 = function(r4, t4) {
      var a7 = e3._bin, n3 = t4, o3 = {};
      o3.format = a7.readUshort(r4, t4), t4 += 2;
      var s3 = a7.readUshort(r4, t4);
      t4 += 2, a7.readUshort(r4, t4), t4 += 2;
      var i4 = a7.readUshort(r4, t4);
      t4 += 2;
      var h2 = i4 / 2;
      o3.searchRange = a7.readUshort(r4, t4), t4 += 2, o3.entrySelector = a7.readUshort(r4, t4), t4 += 2, o3.rangeShift = a7.readUshort(r4, t4), t4 += 2, o3.endCount = a7.readUshorts(r4, t4, h2), t4 += 2 * h2, t4 += 2, o3.startCount = a7.readUshorts(r4, t4, h2), t4 += 2 * h2, o3.idDelta = [];
      for (var f3 = 0; f3 < h2; f3++) o3.idDelta.push(a7.readShort(r4, t4)), t4 += 2;
      for (o3.idRangeOffset = a7.readUshorts(r4, t4, h2), t4 += 2 * h2, o3.glyphIdArray = []; t4 < n3 + s3; ) o3.glyphIdArray.push(a7.readUshort(r4, t4)), t4 += 2;
      return o3;
    }, e3.cmap.parse6 = function(r4, t4) {
      var a7 = e3._bin, n3 = {};
      n3.format = a7.readUshort(r4, t4), t4 += 2, a7.readUshort(r4, t4), t4 += 2, a7.readUshort(r4, t4), t4 += 2, n3.firstCode = a7.readUshort(r4, t4), t4 += 2;
      var o3 = a7.readUshort(r4, t4);
      t4 += 2, n3.glyphIdArray = [];
      for (var s3 = 0; s3 < o3; s3++) n3.glyphIdArray.push(a7.readUshort(r4, t4)), t4 += 2;
      return n3;
    }, e3.cmap.parse12 = function(r4, t4) {
      var a7 = e3._bin, n3 = {};
      n3.format = a7.readUshort(r4, t4), t4 += 2, t4 += 2, a7.readUint(r4, t4), t4 += 4, a7.readUint(r4, t4), t4 += 4;
      var o3 = a7.readUint(r4, t4);
      t4 += 4, n3.groups = [];
      for (var s3 = 0; s3 < o3; s3++) {
        var i4 = t4 + 12 * s3, h2 = a7.readUint(r4, i4 + 0), f3 = a7.readUint(r4, i4 + 4), d3 = a7.readUint(r4, i4 + 8);
        n3.groups.push([h2, f3, d3]);
      }
      return n3;
    }, e3.glyf = {}, e3.glyf.parse = function(r4, e4, t4, a7) {
      for (var n3 = [], o3 = 0; o3 < a7.maxp.numGlyphs; o3++) n3.push(null);
      return n3;
    }, e3.glyf._parseGlyf = function(r4, t4) {
      var a7 = e3._bin, n3 = r4._data, o3 = e3._tabOffset(n3, "glyf", r4._offset) + r4.loca[t4];
      if (r4.loca[t4] == r4.loca[t4 + 1]) return null;
      var s3 = {};
      if (s3.noc = a7.readShort(n3, o3), o3 += 2, s3.xMin = a7.readShort(n3, o3), o3 += 2, s3.yMin = a7.readShort(n3, o3), o3 += 2, s3.xMax = a7.readShort(n3, o3), o3 += 2, s3.yMax = a7.readShort(n3, o3), o3 += 2, s3.xMin >= s3.xMax || s3.yMin >= s3.yMax) return null;
      if (s3.noc > 0) {
        s3.endPts = [];
        for (var i4 = 0; i4 < s3.noc; i4++) s3.endPts.push(a7.readUshort(n3, o3)), o3 += 2;
        var h2 = a7.readUshort(n3, o3);
        if (o3 += 2, n3.length - o3 < h2) return null;
        s3.instructions = a7.readBytes(n3, o3, h2), o3 += h2;
        var f3 = s3.endPts[s3.noc - 1] + 1;
        s3.flags = [];
        for (i4 = 0; i4 < f3; i4++) {
          var d3 = n3[o3];
          if (o3++, s3.flags.push(d3), 0 != (8 & d3)) {
            var u2 = n3[o3];
            o3++;
            for (var l3 = 0; l3 < u2; l3++) s3.flags.push(d3), i4++;
          }
        }
        s3.xs = [];
        for (i4 = 0; i4 < f3; i4++) {
          var v5 = 0 != (2 & s3.flags[i4]), c5 = 0 != (16 & s3.flags[i4]);
          v5 ? (s3.xs.push(c5 ? n3[o3] : -n3[o3]), o3++) : c5 ? s3.xs.push(0) : (s3.xs.push(a7.readShort(n3, o3)), o3 += 2);
        }
        s3.ys = [];
        for (i4 = 0; i4 < f3; i4++) {
          v5 = 0 != (4 & s3.flags[i4]), c5 = 0 != (32 & s3.flags[i4]);
          v5 ? (s3.ys.push(c5 ? n3[o3] : -n3[o3]), o3++) : c5 ? s3.ys.push(0) : (s3.ys.push(a7.readShort(n3, o3)), o3 += 2);
        }
        var p3 = 0, U2 = 0;
        for (i4 = 0; i4 < f3; i4++) p3 += s3.xs[i4], U2 += s3.ys[i4], s3.xs[i4] = p3, s3.ys[i4] = U2;
      } else {
        var g2;
        s3.parts = [];
        do {
          g2 = a7.readUshort(n3, o3), o3 += 2;
          var S2 = { m: { a: 1, b: 0, c: 0, d: 1, tx: 0, ty: 0 }, p1: -1, p2: -1 };
          if (s3.parts.push(S2), S2.glyphIndex = a7.readUshort(n3, o3), o3 += 2, 1 & g2) {
            var m2 = a7.readShort(n3, o3);
            o3 += 2;
            var b5 = a7.readShort(n3, o3);
            o3 += 2;
          } else {
            m2 = a7.readInt8(n3, o3);
            o3++;
            b5 = a7.readInt8(n3, o3);
            o3++;
          }
          2 & g2 ? (S2.m.tx = m2, S2.m.ty = b5) : (S2.p1 = m2, S2.p2 = b5), 8 & g2 ? (S2.m.a = S2.m.d = a7.readF2dot14(n3, o3), o3 += 2) : 64 & g2 ? (S2.m.a = a7.readF2dot14(n3, o3), o3 += 2, S2.m.d = a7.readF2dot14(n3, o3), o3 += 2) : 128 & g2 && (S2.m.a = a7.readF2dot14(n3, o3), o3 += 2, S2.m.b = a7.readF2dot14(n3, o3), o3 += 2, S2.m.c = a7.readF2dot14(n3, o3), o3 += 2, S2.m.d = a7.readF2dot14(n3, o3), o3 += 2);
        } while (32 & g2);
        if (256 & g2) {
          var y2 = a7.readUshort(n3, o3);
          o3 += 2, s3.instr = [];
          for (i4 = 0; i4 < y2; i4++) s3.instr.push(n3[o3]), o3++;
        }
      }
      return s3;
    }, e3.GPOS = {}, e3.GPOS.parse = function(r4, t4, a7, n3) {
      return e3._lctf.parse(r4, t4, a7, n3, e3.GPOS.subt);
    }, e3.GPOS.subt = function(r4, t4, a7, n3) {
      var o3 = e3._bin, s3 = a7, i4 = {};
      if (i4.fmt = o3.readUshort(r4, a7), a7 += 2, 1 == t4 || 2 == t4 || 3 == t4 || 7 == t4 || 8 == t4 && i4.fmt <= 2) {
        var h2 = o3.readUshort(r4, a7);
        a7 += 2, i4.coverage = e3._lctf.readCoverage(r4, h2 + s3);
      }
      if (1 == t4 && 1 == i4.fmt) {
        var f3 = o3.readUshort(r4, a7);
        a7 += 2;
        var d3 = e3._lctf.numOfOnes(f3);
        0 != f3 && (i4.pos = e3.GPOS.readValueRecord(r4, a7, f3));
      } else if (2 == t4 && i4.fmt >= 1 && i4.fmt <= 2) {
        f3 = o3.readUshort(r4, a7);
        a7 += 2;
        var u2 = o3.readUshort(r4, a7);
        a7 += 2;
        d3 = e3._lctf.numOfOnes(f3);
        var l3 = e3._lctf.numOfOnes(u2);
        if (1 == i4.fmt) {
          i4.pairsets = [];
          var v5 = o3.readUshort(r4, a7);
          a7 += 2;
          for (var c5 = 0; c5 < v5; c5++) {
            var p3 = s3 + o3.readUshort(r4, a7);
            a7 += 2;
            var U2 = o3.readUshort(r4, p3);
            p3 += 2;
            for (var g2 = [], S2 = 0; S2 < U2; S2++) {
              var m2 = o3.readUshort(r4, p3);
              p3 += 2, 0 != f3 && (x2 = e3.GPOS.readValueRecord(r4, p3, f3), p3 += 2 * d3), 0 != u2 && (P2 = e3.GPOS.readValueRecord(r4, p3, u2), p3 += 2 * l3), g2.push({ gid2: m2, val1: x2, val2: P2 });
            }
            i4.pairsets.push(g2);
          }
        }
        if (2 == i4.fmt) {
          var b5 = o3.readUshort(r4, a7);
          a7 += 2;
          var y2 = o3.readUshort(r4, a7);
          a7 += 2;
          var F4 = o3.readUshort(r4, a7);
          a7 += 2;
          var _2 = o3.readUshort(r4, a7);
          a7 += 2, i4.classDef1 = e3._lctf.readClassDef(r4, s3 + b5), i4.classDef2 = e3._lctf.readClassDef(r4, s3 + y2), i4.matrix = [];
          for (c5 = 0; c5 < F4; c5++) {
            var C2 = [];
            for (S2 = 0; S2 < _2; S2++) {
              var x2 = null, P2 = null;
              0 != f3 && (x2 = e3.GPOS.readValueRecord(r4, a7, f3), a7 += 2 * d3), 0 != u2 && (P2 = e3.GPOS.readValueRecord(r4, a7, u2), a7 += 2 * l3), C2.push({ val1: x2, val2: P2 });
            }
            i4.matrix.push(C2);
          }
        }
      } else {
        if (9 == t4 && 1 == i4.fmt) {
          var I2 = o3.readUshort(r4, a7);
          a7 += 2;
          var w2 = o3.readUint(r4, a7);
          if (a7 += 4, 9 == n3.ltype) n3.ltype = I2;
          else if (n3.ltype != I2) throw "invalid extension substitution";
          return e3.GPOS.subt(r4, n3.ltype, s3 + w2);
        }
        console.debug("unsupported GPOS table LookupType", t4, "format", i4.fmt);
      }
      return i4;
    }, e3.GPOS.readValueRecord = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = [];
      return o3.push(1 & a7 ? n3.readShort(r4, t4) : 0), t4 += 1 & a7 ? 2 : 0, o3.push(2 & a7 ? n3.readShort(r4, t4) : 0), t4 += 2 & a7 ? 2 : 0, o3.push(4 & a7 ? n3.readShort(r4, t4) : 0), t4 += 4 & a7 ? 2 : 0, o3.push(8 & a7 ? n3.readShort(r4, t4) : 0), t4 += 8 & a7 ? 2 : 0, o3;
    }, e3.GSUB = {}, e3.GSUB.parse = function(r4, t4, a7, n3) {
      return e3._lctf.parse(r4, t4, a7, n3, e3.GSUB.subt);
    }, e3.GSUB.subt = function(r4, t4, a7, n3) {
      var o3 = e3._bin, s3 = a7, i4 = {};
      if (i4.fmt = o3.readUshort(r4, a7), a7 += 2, 1 != t4 && 4 != t4 && 5 != t4 && 6 != t4) return null;
      if (1 == t4 || 4 == t4 || 5 == t4 && i4.fmt <= 2 || 6 == t4 && i4.fmt <= 2) {
        var h2 = o3.readUshort(r4, a7);
        a7 += 2, i4.coverage = e3._lctf.readCoverage(r4, s3 + h2);
      }
      if (1 == t4 && i4.fmt >= 1 && i4.fmt <= 2) {
        if (1 == i4.fmt) i4.delta = o3.readShort(r4, a7), a7 += 2;
        else if (2 == i4.fmt) {
          var f3 = o3.readUshort(r4, a7);
          a7 += 2, i4.newg = o3.readUshorts(r4, a7, f3), a7 += 2 * i4.newg.length;
        }
      } else if (4 == t4) {
        i4.vals = [];
        f3 = o3.readUshort(r4, a7);
        a7 += 2;
        for (var d3 = 0; d3 < f3; d3++) {
          var u2 = o3.readUshort(r4, a7);
          a7 += 2, i4.vals.push(e3.GSUB.readLigatureSet(r4, s3 + u2));
        }
      } else if (5 == t4 && 2 == i4.fmt) {
        if (2 == i4.fmt) {
          var l3 = o3.readUshort(r4, a7);
          a7 += 2, i4.cDef = e3._lctf.readClassDef(r4, s3 + l3), i4.scset = [];
          var v5 = o3.readUshort(r4, a7);
          a7 += 2;
          for (d3 = 0; d3 < v5; d3++) {
            var c5 = o3.readUshort(r4, a7);
            a7 += 2, i4.scset.push(0 == c5 ? null : e3.GSUB.readSubClassSet(r4, s3 + c5));
          }
        }
      } else if (6 == t4 && 3 == i4.fmt) {
        if (3 == i4.fmt) {
          for (d3 = 0; d3 < 3; d3++) {
            f3 = o3.readUshort(r4, a7);
            a7 += 2;
            for (var p3 = [], U2 = 0; U2 < f3; U2++) p3.push(e3._lctf.readCoverage(r4, s3 + o3.readUshort(r4, a7 + 2 * U2)));
            a7 += 2 * f3, 0 == d3 && (i4.backCvg = p3), 1 == d3 && (i4.inptCvg = p3), 2 == d3 && (i4.ahedCvg = p3);
          }
          f3 = o3.readUshort(r4, a7);
          a7 += 2, i4.lookupRec = e3.GSUB.readSubstLookupRecords(r4, a7, f3);
        }
      } else {
        if (7 == t4 && 1 == i4.fmt) {
          var g2 = o3.readUshort(r4, a7);
          a7 += 2;
          var S2 = o3.readUint(r4, a7);
          if (a7 += 4, 9 == n3.ltype) n3.ltype = g2;
          else if (n3.ltype != g2) throw "invalid extension substitution";
          return e3.GSUB.subt(r4, n3.ltype, s3 + S2);
        }
        console.debug("unsupported GSUB table LookupType", t4, "format", i4.fmt);
      }
      return i4;
    }, e3.GSUB.readSubClassSet = function(r4, t4) {
      var a7 = e3._bin.readUshort, n3 = t4, o3 = [], s3 = a7(r4, t4);
      t4 += 2;
      for (var i4 = 0; i4 < s3; i4++) {
        var h2 = a7(r4, t4);
        t4 += 2, o3.push(e3.GSUB.readSubClassRule(r4, n3 + h2));
      }
      return o3;
    }, e3.GSUB.readSubClassRule = function(r4, t4) {
      var a7 = e3._bin.readUshort, n3 = {}, o3 = a7(r4, t4), s3 = a7(r4, t4 += 2);
      t4 += 2, n3.input = [];
      for (var i4 = 0; i4 < o3 - 1; i4++) n3.input.push(a7(r4, t4)), t4 += 2;
      return n3.substLookupRecords = e3.GSUB.readSubstLookupRecords(r4, t4, s3), n3;
    }, e3.GSUB.readSubstLookupRecords = function(r4, t4, a7) {
      for (var n3 = e3._bin.readUshort, o3 = [], s3 = 0; s3 < a7; s3++) o3.push(n3(r4, t4), n3(r4, t4 + 2)), t4 += 4;
      return o3;
    }, e3.GSUB.readChainSubClassSet = function(r4, t4) {
      var a7 = e3._bin, n3 = t4, o3 = [], s3 = a7.readUshort(r4, t4);
      t4 += 2;
      for (var i4 = 0; i4 < s3; i4++) {
        var h2 = a7.readUshort(r4, t4);
        t4 += 2, o3.push(e3.GSUB.readChainSubClassRule(r4, n3 + h2));
      }
      return o3;
    }, e3.GSUB.readChainSubClassRule = function(r4, t4) {
      for (var a7 = e3._bin, n3 = {}, o3 = ["backtrack", "input", "lookahead"], s3 = 0; s3 < o3.length; s3++) {
        var i4 = a7.readUshort(r4, t4);
        t4 += 2, 1 == s3 && i4--, n3[o3[s3]] = a7.readUshorts(r4, t4, i4), t4 += 2 * n3[o3[s3]].length;
      }
      i4 = a7.readUshort(r4, t4);
      return t4 += 2, n3.subst = a7.readUshorts(r4, t4, 2 * i4), t4 += 2 * n3.subst.length, n3;
    }, e3.GSUB.readLigatureSet = function(r4, t4) {
      var a7 = e3._bin, n3 = t4, o3 = [], s3 = a7.readUshort(r4, t4);
      t4 += 2;
      for (var i4 = 0; i4 < s3; i4++) {
        var h2 = a7.readUshort(r4, t4);
        t4 += 2, o3.push(e3.GSUB.readLigature(r4, n3 + h2));
      }
      return o3;
    }, e3.GSUB.readLigature = function(r4, t4) {
      var a7 = e3._bin, n3 = { chain: [] };
      n3.nglyph = a7.readUshort(r4, t4), t4 += 2;
      var o3 = a7.readUshort(r4, t4);
      t4 += 2;
      for (var s3 = 0; s3 < o3 - 1; s3++) n3.chain.push(a7.readUshort(r4, t4)), t4 += 2;
      return n3;
    }, e3.head = {}, e3.head.parse = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = {};
      return n3.readFixed(r4, t4), t4 += 4, o3.fontRevision = n3.readFixed(r4, t4), t4 += 4, n3.readUint(r4, t4), t4 += 4, n3.readUint(r4, t4), t4 += 4, o3.flags = n3.readUshort(r4, t4), t4 += 2, o3.unitsPerEm = n3.readUshort(r4, t4), t4 += 2, o3.created = n3.readUint64(r4, t4), t4 += 8, o3.modified = n3.readUint64(r4, t4), t4 += 8, o3.xMin = n3.readShort(r4, t4), t4 += 2, o3.yMin = n3.readShort(r4, t4), t4 += 2, o3.xMax = n3.readShort(r4, t4), t4 += 2, o3.yMax = n3.readShort(r4, t4), t4 += 2, o3.macStyle = n3.readUshort(r4, t4), t4 += 2, o3.lowestRecPPEM = n3.readUshort(r4, t4), t4 += 2, o3.fontDirectionHint = n3.readShort(r4, t4), t4 += 2, o3.indexToLocFormat = n3.readShort(r4, t4), t4 += 2, o3.glyphDataFormat = n3.readShort(r4, t4), t4 += 2, o3;
    }, e3.hhea = {}, e3.hhea.parse = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = {};
      return n3.readFixed(r4, t4), t4 += 4, o3.ascender = n3.readShort(r4, t4), t4 += 2, o3.descender = n3.readShort(r4, t4), t4 += 2, o3.lineGap = n3.readShort(r4, t4), t4 += 2, o3.advanceWidthMax = n3.readUshort(r4, t4), t4 += 2, o3.minLeftSideBearing = n3.readShort(r4, t4), t4 += 2, o3.minRightSideBearing = n3.readShort(r4, t4), t4 += 2, o3.xMaxExtent = n3.readShort(r4, t4), t4 += 2, o3.caretSlopeRise = n3.readShort(r4, t4), t4 += 2, o3.caretSlopeRun = n3.readShort(r4, t4), t4 += 2, o3.caretOffset = n3.readShort(r4, t4), t4 += 2, t4 += 8, o3.metricDataFormat = n3.readShort(r4, t4), t4 += 2, o3.numberOfHMetrics = n3.readUshort(r4, t4), t4 += 2, o3;
    }, e3.hmtx = {}, e3.hmtx.parse = function(r4, t4, a7, n3) {
      for (var o3 = e3._bin, s3 = { aWidth: [], lsBearing: [] }, i4 = 0, h2 = 0, f3 = 0; f3 < n3.maxp.numGlyphs; f3++) f3 < n3.hhea.numberOfHMetrics && (i4 = o3.readUshort(r4, t4), t4 += 2, h2 = o3.readShort(r4, t4), t4 += 2), s3.aWidth.push(i4), s3.lsBearing.push(h2);
      return s3;
    }, e3.kern = {}, e3.kern.parse = function(r4, t4, a7, n3) {
      var o3 = e3._bin, s3 = o3.readUshort(r4, t4);
      if (t4 += 2, 1 == s3) return e3.kern.parseV1(r4, t4 - 2, a7, n3);
      var i4 = o3.readUshort(r4, t4);
      t4 += 2;
      for (var h2 = { glyph1: [], rval: [] }, f3 = 0; f3 < i4; f3++) {
        t4 += 2;
        a7 = o3.readUshort(r4, t4);
        t4 += 2;
        var d3 = o3.readUshort(r4, t4);
        t4 += 2;
        var u2 = d3 >>> 8;
        if (0 != (u2 &= 15)) throw "unknown kern table format: " + u2;
        t4 = e3.kern.readFormat0(r4, t4, h2);
      }
      return h2;
    }, e3.kern.parseV1 = function(r4, t4, a7, n3) {
      var o3 = e3._bin;
      o3.readFixed(r4, t4), t4 += 4;
      var s3 = o3.readUint(r4, t4);
      t4 += 4;
      for (var i4 = { glyph1: [], rval: [] }, h2 = 0; h2 < s3; h2++) {
        o3.readUint(r4, t4), t4 += 4;
        var f3 = o3.readUshort(r4, t4);
        t4 += 2, o3.readUshort(r4, t4), t4 += 2;
        var d3 = f3 >>> 8;
        if (0 != (d3 &= 15)) throw "unknown kern table format: " + d3;
        t4 = e3.kern.readFormat0(r4, t4, i4);
      }
      return i4;
    }, e3.kern.readFormat0 = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = -1, s3 = n3.readUshort(r4, t4);
      t4 += 2, n3.readUshort(r4, t4), t4 += 2, n3.readUshort(r4, t4), t4 += 2, n3.readUshort(r4, t4), t4 += 2;
      for (var i4 = 0; i4 < s3; i4++) {
        var h2 = n3.readUshort(r4, t4);
        t4 += 2;
        var f3 = n3.readUshort(r4, t4);
        t4 += 2;
        var d3 = n3.readShort(r4, t4);
        t4 += 2, h2 != o3 && (a7.glyph1.push(h2), a7.rval.push({ glyph2: [], vals: [] }));
        var u2 = a7.rval[a7.rval.length - 1];
        u2.glyph2.push(f3), u2.vals.push(d3), o3 = h2;
      }
      return t4;
    }, e3.loca = {}, e3.loca.parse = function(r4, t4, a7, n3) {
      var o3 = e3._bin, s3 = [], i4 = n3.head.indexToLocFormat, h2 = n3.maxp.numGlyphs + 1;
      if (0 == i4) for (var f3 = 0; f3 < h2; f3++) s3.push(o3.readUshort(r4, t4 + (f3 << 1)) << 1);
      if (1 == i4) for (f3 = 0; f3 < h2; f3++) s3.push(o3.readUint(r4, t4 + (f3 << 2)));
      return s3;
    }, e3.maxp = {}, e3.maxp.parse = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = {}, s3 = n3.readUint(r4, t4);
      return t4 += 4, o3.numGlyphs = n3.readUshort(r4, t4), t4 += 2, 65536 == s3 && (o3.maxPoints = n3.readUshort(r4, t4), t4 += 2, o3.maxContours = n3.readUshort(r4, t4), t4 += 2, o3.maxCompositePoints = n3.readUshort(r4, t4), t4 += 2, o3.maxCompositeContours = n3.readUshort(r4, t4), t4 += 2, o3.maxZones = n3.readUshort(r4, t4), t4 += 2, o3.maxTwilightPoints = n3.readUshort(r4, t4), t4 += 2, o3.maxStorage = n3.readUshort(r4, t4), t4 += 2, o3.maxFunctionDefs = n3.readUshort(r4, t4), t4 += 2, o3.maxInstructionDefs = n3.readUshort(r4, t4), t4 += 2, o3.maxStackElements = n3.readUshort(r4, t4), t4 += 2, o3.maxSizeOfInstructions = n3.readUshort(r4, t4), t4 += 2, o3.maxComponentElements = n3.readUshort(r4, t4), t4 += 2, o3.maxComponentDepth = n3.readUshort(r4, t4), t4 += 2), o3;
    }, e3.name = {}, e3.name.parse = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = {};
      n3.readUshort(r4, t4), t4 += 2;
      var s3 = n3.readUshort(r4, t4);
      t4 += 2, n3.readUshort(r4, t4);
      for (var i4, h2 = ["copyright", "fontFamily", "fontSubfamily", "ID", "fullName", "version", "postScriptName", "trademark", "manufacturer", "designer", "description", "urlVendor", "urlDesigner", "licence", "licenceURL", "---", "typoFamilyName", "typoSubfamilyName", "compatibleFull", "sampleText", "postScriptCID", "wwsFamilyName", "wwsSubfamilyName", "lightPalette", "darkPalette"], f3 = t4 += 2, d3 = 0; d3 < s3; d3++) {
        var u2 = n3.readUshort(r4, t4);
        t4 += 2;
        var l3 = n3.readUshort(r4, t4);
        t4 += 2;
        var v5 = n3.readUshort(r4, t4);
        t4 += 2;
        var c5 = n3.readUshort(r4, t4);
        t4 += 2;
        var p3 = n3.readUshort(r4, t4);
        t4 += 2;
        var U2 = n3.readUshort(r4, t4);
        t4 += 2;
        var g2, S2 = h2[c5], m2 = f3 + 12 * s3 + U2;
        if (0 == u2) g2 = n3.readUnicode(r4, m2, p3 / 2);
        else if (3 == u2 && 0 == l3) g2 = n3.readUnicode(r4, m2, p3 / 2);
        else if (0 == l3) g2 = n3.readASCII(r4, m2, p3);
        else if (1 == l3) g2 = n3.readUnicode(r4, m2, p3 / 2);
        else if (3 == l3) g2 = n3.readUnicode(r4, m2, p3 / 2);
        else {
          if (1 != u2) throw "unknown encoding " + l3 + ", platformID: " + u2;
          g2 = n3.readASCII(r4, m2, p3), console.debug("reading unknown MAC encoding " + l3 + " as ASCII");
        }
        var b5 = "p" + u2 + "," + v5.toString(16);
        null == o3[b5] && (o3[b5] = {}), o3[b5][void 0 !== S2 ? S2 : c5] = g2, o3[b5]._lang = v5;
      }
      for (var y2 in o3) if (null != o3[y2].postScriptName && 1033 == o3[y2]._lang) return o3[y2];
      for (var y2 in o3) if (null != o3[y2].postScriptName && 0 == o3[y2]._lang) return o3[y2];
      for (var y2 in o3) if (null != o3[y2].postScriptName && 3084 == o3[y2]._lang) return o3[y2];
      for (var y2 in o3) if (null != o3[y2].postScriptName) return o3[y2];
      for (var y2 in o3) {
        i4 = y2;
        break;
      }
      return console.debug("returning name table with languageID " + o3[i4]._lang), o3[i4];
    }, e3["OS/2"] = {}, e3["OS/2"].parse = function(r4, t4, a7) {
      var n3 = e3._bin.readUshort(r4, t4);
      t4 += 2;
      var o3 = {};
      if (0 == n3) e3["OS/2"].version0(r4, t4, o3);
      else if (1 == n3) e3["OS/2"].version1(r4, t4, o3);
      else if (2 == n3 || 3 == n3 || 4 == n3) e3["OS/2"].version2(r4, t4, o3);
      else {
        if (5 != n3) throw "unknown OS/2 table version: " + n3;
        e3["OS/2"].version5(r4, t4, o3);
      }
      return o3;
    }, e3["OS/2"].version0 = function(r4, t4, a7) {
      var n3 = e3._bin;
      return a7.xAvgCharWidth = n3.readShort(r4, t4), t4 += 2, a7.usWeightClass = n3.readUshort(r4, t4), t4 += 2, a7.usWidthClass = n3.readUshort(r4, t4), t4 += 2, a7.fsType = n3.readUshort(r4, t4), t4 += 2, a7.ySubscriptXSize = n3.readShort(r4, t4), t4 += 2, a7.ySubscriptYSize = n3.readShort(r4, t4), t4 += 2, a7.ySubscriptXOffset = n3.readShort(r4, t4), t4 += 2, a7.ySubscriptYOffset = n3.readShort(r4, t4), t4 += 2, a7.ySuperscriptXSize = n3.readShort(r4, t4), t4 += 2, a7.ySuperscriptYSize = n3.readShort(r4, t4), t4 += 2, a7.ySuperscriptXOffset = n3.readShort(r4, t4), t4 += 2, a7.ySuperscriptYOffset = n3.readShort(r4, t4), t4 += 2, a7.yStrikeoutSize = n3.readShort(r4, t4), t4 += 2, a7.yStrikeoutPosition = n3.readShort(r4, t4), t4 += 2, a7.sFamilyClass = n3.readShort(r4, t4), t4 += 2, a7.panose = n3.readBytes(r4, t4, 10), t4 += 10, a7.ulUnicodeRange1 = n3.readUint(r4, t4), t4 += 4, a7.ulUnicodeRange2 = n3.readUint(r4, t4), t4 += 4, a7.ulUnicodeRange3 = n3.readUint(r4, t4), t4 += 4, a7.ulUnicodeRange4 = n3.readUint(r4, t4), t4 += 4, a7.achVendID = [n3.readInt8(r4, t4), n3.readInt8(r4, t4 + 1), n3.readInt8(r4, t4 + 2), n3.readInt8(r4, t4 + 3)], t4 += 4, a7.fsSelection = n3.readUshort(r4, t4), t4 += 2, a7.usFirstCharIndex = n3.readUshort(r4, t4), t4 += 2, a7.usLastCharIndex = n3.readUshort(r4, t4), t4 += 2, a7.sTypoAscender = n3.readShort(r4, t4), t4 += 2, a7.sTypoDescender = n3.readShort(r4, t4), t4 += 2, a7.sTypoLineGap = n3.readShort(r4, t4), t4 += 2, a7.usWinAscent = n3.readUshort(r4, t4), t4 += 2, a7.usWinDescent = n3.readUshort(r4, t4), t4 += 2;
    }, e3["OS/2"].version1 = function(r4, t4, a7) {
      var n3 = e3._bin;
      return t4 = e3["OS/2"].version0(r4, t4, a7), a7.ulCodePageRange1 = n3.readUint(r4, t4), t4 += 4, a7.ulCodePageRange2 = n3.readUint(r4, t4), t4 += 4;
    }, e3["OS/2"].version2 = function(r4, t4, a7) {
      var n3 = e3._bin;
      return t4 = e3["OS/2"].version1(r4, t4, a7), a7.sxHeight = n3.readShort(r4, t4), t4 += 2, a7.sCapHeight = n3.readShort(r4, t4), t4 += 2, a7.usDefault = n3.readUshort(r4, t4), t4 += 2, a7.usBreak = n3.readUshort(r4, t4), t4 += 2, a7.usMaxContext = n3.readUshort(r4, t4), t4 += 2;
    }, e3["OS/2"].version5 = function(r4, t4, a7) {
      var n3 = e3._bin;
      return t4 = e3["OS/2"].version2(r4, t4, a7), a7.usLowerOpticalPointSize = n3.readUshort(r4, t4), t4 += 2, a7.usUpperOpticalPointSize = n3.readUshort(r4, t4), t4 += 2;
    }, e3.post = {}, e3.post.parse = function(r4, t4, a7) {
      var n3 = e3._bin, o3 = {};
      return o3.version = n3.readFixed(r4, t4), t4 += 4, o3.italicAngle = n3.readFixed(r4, t4), t4 += 4, o3.underlinePosition = n3.readShort(r4, t4), t4 += 2, o3.underlineThickness = n3.readShort(r4, t4), t4 += 2, o3;
    }, null == e3 && (e3 = {}), null == e3.U && (e3.U = {}), e3.U.codeToGlyph = function(r4, e4) {
      var t4 = r4.cmap, a7 = -1;
      if (null != t4.p0e4 ? a7 = t4.p0e4 : null != t4.p3e1 ? a7 = t4.p3e1 : null != t4.p1e0 ? a7 = t4.p1e0 : null != t4.p0e3 && (a7 = t4.p0e3), -1 == a7) throw "no familiar platform and encoding!";
      var n3 = t4.tables[a7];
      if (0 == n3.format) return e4 >= n3.map.length ? 0 : n3.map[e4];
      if (4 == n3.format) {
        for (var o3 = -1, s3 = 0; s3 < n3.endCount.length; s3++) if (e4 <= n3.endCount[s3]) {
          o3 = s3;
          break;
        }
        if (-1 == o3) return 0;
        if (n3.startCount[o3] > e4) return 0;
        return 65535 & (0 != n3.idRangeOffset[o3] ? n3.glyphIdArray[e4 - n3.startCount[o3] + (n3.idRangeOffset[o3] >> 1) - (n3.idRangeOffset.length - o3)] : e4 + n3.idDelta[o3]);
      }
      if (12 == n3.format) {
        if (e4 > n3.groups[n3.groups.length - 1][1]) return 0;
        for (s3 = 0; s3 < n3.groups.length; s3++) {
          var i4 = n3.groups[s3];
          if (i4[0] <= e4 && e4 <= i4[1]) return i4[2] + (e4 - i4[0]);
        }
        return 0;
      }
      throw "unknown cmap table format " + n3.format;
    }, e3.U.glyphToPath = function(r4, t4) {
      var a7 = { cmds: [], crds: [] };
      if (r4.SVG && r4.SVG.entries[t4]) {
        var n3 = r4.SVG.entries[t4];
        return null == n3 ? a7 : ("string" == typeof n3 && (n3 = e3.SVG.toPath(n3), r4.SVG.entries[t4] = n3), n3);
      }
      if (r4.CFF) {
        var o3 = { x: 0, y: 0, stack: [], nStems: 0, haveWidth: false, width: r4.CFF.Private ? r4.CFF.Private.defaultWidthX : 0, open: false }, s3 = r4.CFF, i4 = r4.CFF.Private;
        if (s3.ROS) {
          for (var h2 = 0; s3.FDSelect[h2 + 2] <= t4; ) h2 += 2;
          i4 = s3.FDArray[s3.FDSelect[h2 + 1]].Private;
        }
        e3.U._drawCFF(r4.CFF.CharStrings[t4], o3, s3, i4, a7);
      } else r4.glyf && e3.U._drawGlyf(t4, r4, a7);
      return a7;
    }, e3.U._drawGlyf = function(r4, t4, a7) {
      var n3 = t4.glyf[r4];
      null == n3 && (n3 = t4.glyf[r4] = e3.glyf._parseGlyf(t4, r4)), null != n3 && (n3.noc > -1 ? e3.U._simpleGlyph(n3, a7) : e3.U._compoGlyph(n3, t4, a7));
    }, e3.U._simpleGlyph = function(r4, t4) {
      for (var a7 = 0; a7 < r4.noc; a7++) {
        for (var n3 = 0 == a7 ? 0 : r4.endPts[a7 - 1] + 1, o3 = r4.endPts[a7], s3 = n3; s3 <= o3; s3++) {
          var i4 = s3 == n3 ? o3 : s3 - 1, h2 = s3 == o3 ? n3 : s3 + 1, f3 = 1 & r4.flags[s3], d3 = 1 & r4.flags[i4], u2 = 1 & r4.flags[h2], l3 = r4.xs[s3], v5 = r4.ys[s3];
          if (s3 == n3) if (f3) {
            if (!d3) {
              e3.U.P.moveTo(t4, l3, v5);
              continue;
            }
            e3.U.P.moveTo(t4, r4.xs[i4], r4.ys[i4]);
          } else d3 ? e3.U.P.moveTo(t4, r4.xs[i4], r4.ys[i4]) : e3.U.P.moveTo(t4, (r4.xs[i4] + l3) / 2, (r4.ys[i4] + v5) / 2);
          f3 ? d3 && e3.U.P.lineTo(t4, l3, v5) : u2 ? e3.U.P.qcurveTo(t4, l3, v5, r4.xs[h2], r4.ys[h2]) : e3.U.P.qcurveTo(t4, l3, v5, (l3 + r4.xs[h2]) / 2, (v5 + r4.ys[h2]) / 2);
        }
        e3.U.P.closePath(t4);
      }
    }, e3.U._compoGlyph = function(r4, t4, a7) {
      for (var n3 = 0; n3 < r4.parts.length; n3++) {
        var o3 = { cmds: [], crds: [] }, s3 = r4.parts[n3];
        e3.U._drawGlyf(s3.glyphIndex, t4, o3);
        for (var i4 = s3.m, h2 = 0; h2 < o3.crds.length; h2 += 2) {
          var f3 = o3.crds[h2], d3 = o3.crds[h2 + 1];
          a7.crds.push(f3 * i4.a + d3 * i4.b + i4.tx), a7.crds.push(f3 * i4.c + d3 * i4.d + i4.ty);
        }
        for (h2 = 0; h2 < o3.cmds.length; h2++) a7.cmds.push(o3.cmds[h2]);
      }
    }, e3.U._getGlyphClass = function(r4, t4) {
      var a7 = e3._lctf.getInterval(t4, r4);
      return -1 == a7 ? 0 : t4[a7 + 2];
    }, e3.U.getPairAdjustment = function(r4, t4, a7) {
      var n3 = false;
      if (r4.GPOS) for (var o3 = r4.GPOS, s3 = o3.lookupList, i4 = o3.featureList, h2 = [], f3 = 0; f3 < i4.length; f3++) {
        var d3 = i4[f3];
        if ("kern" == d3.tag) {
          n3 = true;
          for (var u2 = 0; u2 < d3.tab.length; u2++) if (!h2[d3.tab[u2]]) {
            h2[d3.tab[u2]] = true;
            for (var l3 = s3[d3.tab[u2]], v5 = 0; v5 < l3.tabs.length; v5++) if (null != l3.tabs[v5]) {
              var c5, p3 = l3.tabs[v5];
              if (!p3.coverage || -1 != (c5 = e3._lctf.coverageIndex(p3.coverage, t4))) {
                if (1 == l3.ltype) ;
                else if (2 == l3.ltype) {
                  var U2 = null;
                  if (1 == p3.fmt) {
                    var g2 = p3.pairsets[c5];
                    for (f3 = 0; f3 < g2.length; f3++) g2[f3].gid2 == a7 && (U2 = g2[f3]);
                  } else if (2 == p3.fmt) {
                    var S2 = e3.U._getGlyphClass(t4, p3.classDef1), m2 = e3.U._getGlyphClass(a7, p3.classDef2);
                    U2 = p3.matrix[S2][m2];
                  }
                  if (U2) {
                    var b5 = 0;
                    return U2.val1 && U2.val1[2] && (b5 += U2.val1[2]), U2.val2 && U2.val2[0] && (b5 += U2.val2[0]), b5;
                  }
                }
              }
            }
          }
        }
      }
      if (r4.kern && !n3) {
        var y2 = r4.kern.glyph1.indexOf(t4);
        if (-1 != y2) {
          var F4 = r4.kern.rval[y2].glyph2.indexOf(a7);
          if (-1 != F4) return r4.kern.rval[y2].vals[F4];
        }
      }
      return 0;
    }, e3.U._applySubs = function(r4, t4, a7, n3) {
      for (var o3 = r4.length - t4 - 1, s3 = 0; s3 < a7.tabs.length; s3++) if (null != a7.tabs[s3]) {
        var i4, h2 = a7.tabs[s3];
        if (!h2.coverage || -1 != (i4 = e3._lctf.coverageIndex(h2.coverage, r4[t4]))) {
          if (1 == a7.ltype) r4[t4], 1 == h2.fmt ? r4[t4] = r4[t4] + h2.delta : r4[t4] = h2.newg[i4];
          else if (4 == a7.ltype) for (var f3 = h2.vals[i4], d3 = 0; d3 < f3.length; d3++) {
            var u2 = f3[d3], l3 = u2.chain.length;
            if (!(l3 > o3)) {
              for (var v5 = true, c5 = 0, p3 = 0; p3 < l3; p3++) {
                for (; -1 == r4[t4 + c5 + (1 + p3)]; ) c5++;
                u2.chain[p3] != r4[t4 + c5 + (1 + p3)] && (v5 = false);
              }
              if (v5) {
                r4[t4] = u2.nglyph;
                for (p3 = 0; p3 < l3 + c5; p3++) r4[t4 + p3 + 1] = -1;
                break;
              }
            }
          }
          else if (5 == a7.ltype && 2 == h2.fmt) for (var U2 = e3._lctf.getInterval(h2.cDef, r4[t4]), g2 = h2.cDef[U2 + 2], S2 = h2.scset[g2], m2 = 0; m2 < S2.length; m2++) {
            var b5 = S2[m2], y2 = b5.input;
            if (!(y2.length > o3)) {
              for (v5 = true, p3 = 0; p3 < y2.length; p3++) {
                var F4 = e3._lctf.getInterval(h2.cDef, r4[t4 + 1 + p3]);
                if (-1 == U2 && h2.cDef[F4 + 2] != y2[p3]) {
                  v5 = false;
                  break;
                }
              }
              if (v5) {
                var _2 = b5.substLookupRecords;
                for (d3 = 0; d3 < _2.length; d3 += 2) _2[d3], _2[d3 + 1];
              }
            }
          }
          else if (6 == a7.ltype && 3 == h2.fmt) {
            if (!e3.U._glsCovered(r4, h2.backCvg, t4 - h2.backCvg.length)) continue;
            if (!e3.U._glsCovered(r4, h2.inptCvg, t4)) continue;
            if (!e3.U._glsCovered(r4, h2.ahedCvg, t4 + h2.inptCvg.length)) continue;
            var C2 = h2.lookupRec;
            for (m2 = 0; m2 < C2.length; m2 += 2) {
              U2 = C2[m2];
              var x2 = n3[C2[m2 + 1]];
              e3.U._applySubs(r4, t4 + U2, x2, n3);
            }
          }
        }
      }
    }, e3.U._glsCovered = function(r4, t4, a7) {
      for (var n3 = 0; n3 < t4.length; n3++) {
        if (-1 == e3._lctf.coverageIndex(t4[n3], r4[a7 + n3])) return false;
      }
      return true;
    }, e3.U.glyphsToPath = function(r4, t4, a7) {
      for (var n3 = { cmds: [], crds: [] }, o3 = 0, s3 = 0; s3 < t4.length; s3++) {
        var i4 = t4[s3];
        if (-1 != i4) {
          for (var h2 = s3 < t4.length - 1 && -1 != t4[s3 + 1] ? t4[s3 + 1] : 0, f3 = e3.U.glyphToPath(r4, i4), d3 = 0; d3 < f3.crds.length; d3 += 2) n3.crds.push(f3.crds[d3] + o3), n3.crds.push(f3.crds[d3 + 1]);
          a7 && n3.cmds.push(a7);
          for (d3 = 0; d3 < f3.cmds.length; d3++) n3.cmds.push(f3.cmds[d3]);
          a7 && n3.cmds.push("X"), o3 += r4.hmtx.aWidth[i4], s3 < t4.length - 1 && (o3 += e3.U.getPairAdjustment(r4, i4, h2));
        }
      }
      return n3;
    }, e3.U.P = {}, e3.U.P.moveTo = function(r4, e4, t4) {
      r4.cmds.push("M"), r4.crds.push(e4, t4);
    }, e3.U.P.lineTo = function(r4, e4, t4) {
      r4.cmds.push("L"), r4.crds.push(e4, t4);
    }, e3.U.P.curveTo = function(r4, e4, t4, a7, n3, o3, s3) {
      r4.cmds.push("C"), r4.crds.push(e4, t4, a7, n3, o3, s3);
    }, e3.U.P.qcurveTo = function(r4, e4, t4, a7, n3) {
      r4.cmds.push("Q"), r4.crds.push(e4, t4, a7, n3);
    }, e3.U.P.closePath = function(r4) {
      r4.cmds.push("Z");
    }, e3.U._drawCFF = function(r4, t4, a7, n3, o3) {
      for (var s3 = t4.stack, i4 = t4.nStems, h2 = t4.haveWidth, f3 = t4.width, d3 = t4.open, u2 = 0, l3 = t4.x, v5 = t4.y, c5 = 0, p3 = 0, U2 = 0, g2 = 0, S2 = 0, m2 = 0, b5 = 0, y2 = 0, F4 = 0, _2 = 0, C2 = { val: 0, size: 0 }; u2 < r4.length; ) {
        e3.CFF.getCharString(r4, u2, C2);
        var x2 = C2.val;
        if (u2 += C2.size, "o1" == x2 || "o18" == x2) s3.length % 2 != 0 && !h2 && (f3 = s3.shift() + n3.nominalWidthX), i4 += s3.length >> 1, s3.length = 0, h2 = true;
        else if ("o3" == x2 || "o23" == x2) {
          s3.length % 2 != 0 && !h2 && (f3 = s3.shift() + n3.nominalWidthX), i4 += s3.length >> 1, s3.length = 0, h2 = true;
        } else if ("o4" == x2) s3.length > 1 && !h2 && (f3 = s3.shift() + n3.nominalWidthX, h2 = true), d3 && e3.U.P.closePath(o3), v5 += s3.pop(), e3.U.P.moveTo(o3, l3, v5), d3 = true;
        else if ("o5" == x2) for (; s3.length > 0; ) l3 += s3.shift(), v5 += s3.shift(), e3.U.P.lineTo(o3, l3, v5);
        else if ("o6" == x2 || "o7" == x2) for (var P2 = s3.length, I2 = "o6" == x2, w2 = 0; w2 < P2; w2++) {
          var O2 = s3.shift();
          I2 ? l3 += O2 : v5 += O2, I2 = !I2, e3.U.P.lineTo(o3, l3, v5);
        }
        else if ("o8" == x2 || "o24" == x2) {
          P2 = s3.length;
          for (var T2 = 0; T2 + 6 <= P2; ) c5 = l3 + s3.shift(), p3 = v5 + s3.shift(), U2 = c5 + s3.shift(), g2 = p3 + s3.shift(), l3 = U2 + s3.shift(), v5 = g2 + s3.shift(), e3.U.P.curveTo(o3, c5, p3, U2, g2, l3, v5), T2 += 6;
          "o24" == x2 && (l3 += s3.shift(), v5 += s3.shift(), e3.U.P.lineTo(o3, l3, v5));
        } else {
          if ("o11" == x2) break;
          if ("o1234" == x2 || "o1235" == x2 || "o1236" == x2 || "o1237" == x2) "o1234" == x2 && (p3 = v5, U2 = (c5 = l3 + s3.shift()) + s3.shift(), _2 = g2 = p3 + s3.shift(), m2 = g2, y2 = v5, l3 = (b5 = (S2 = (F4 = U2 + s3.shift()) + s3.shift()) + s3.shift()) + s3.shift(), e3.U.P.curveTo(o3, c5, p3, U2, g2, F4, _2), e3.U.P.curveTo(o3, S2, m2, b5, y2, l3, v5)), "o1235" == x2 && (c5 = l3 + s3.shift(), p3 = v5 + s3.shift(), U2 = c5 + s3.shift(), g2 = p3 + s3.shift(), F4 = U2 + s3.shift(), _2 = g2 + s3.shift(), S2 = F4 + s3.shift(), m2 = _2 + s3.shift(), b5 = S2 + s3.shift(), y2 = m2 + s3.shift(), l3 = b5 + s3.shift(), v5 = y2 + s3.shift(), s3.shift(), e3.U.P.curveTo(o3, c5, p3, U2, g2, F4, _2), e3.U.P.curveTo(o3, S2, m2, b5, y2, l3, v5)), "o1236" == x2 && (c5 = l3 + s3.shift(), p3 = v5 + s3.shift(), U2 = c5 + s3.shift(), _2 = g2 = p3 + s3.shift(), m2 = g2, b5 = (S2 = (F4 = U2 + s3.shift()) + s3.shift()) + s3.shift(), y2 = m2 + s3.shift(), l3 = b5 + s3.shift(), e3.U.P.curveTo(o3, c5, p3, U2, g2, F4, _2), e3.U.P.curveTo(o3, S2, m2, b5, y2, l3, v5)), "o1237" == x2 && (c5 = l3 + s3.shift(), p3 = v5 + s3.shift(), U2 = c5 + s3.shift(), g2 = p3 + s3.shift(), F4 = U2 + s3.shift(), _2 = g2 + s3.shift(), S2 = F4 + s3.shift(), m2 = _2 + s3.shift(), b5 = S2 + s3.shift(), y2 = m2 + s3.shift(), Math.abs(b5 - l3) > Math.abs(y2 - v5) ? l3 = b5 + s3.shift() : v5 = y2 + s3.shift(), e3.U.P.curveTo(o3, c5, p3, U2, g2, F4, _2), e3.U.P.curveTo(o3, S2, m2, b5, y2, l3, v5));
          else if ("o14" == x2) {
            if (s3.length > 0 && !h2 && (f3 = s3.shift() + a7.nominalWidthX, h2 = true), 4 == s3.length) {
              var k2 = s3.shift(), G4 = s3.shift(), D2 = s3.shift(), B2 = s3.shift(), L2 = e3.CFF.glyphBySE(a7, D2), R2 = e3.CFF.glyphBySE(a7, B2);
              e3.U._drawCFF(a7.CharStrings[L2], t4, a7, n3, o3), t4.x = k2, t4.y = G4, e3.U._drawCFF(a7.CharStrings[R2], t4, a7, n3, o3);
            }
            d3 && (e3.U.P.closePath(o3), d3 = false);
          } else if ("o19" == x2 || "o20" == x2) {
            s3.length % 2 != 0 && !h2 && (f3 = s3.shift() + n3.nominalWidthX), i4 += s3.length >> 1, s3.length = 0, h2 = true, u2 += i4 + 7 >> 3;
          } else if ("o21" == x2) s3.length > 2 && !h2 && (f3 = s3.shift() + n3.nominalWidthX, h2 = true), v5 += s3.pop(), l3 += s3.pop(), d3 && e3.U.P.closePath(o3), e3.U.P.moveTo(o3, l3, v5), d3 = true;
          else if ("o22" == x2) s3.length > 1 && !h2 && (f3 = s3.shift() + n3.nominalWidthX, h2 = true), l3 += s3.pop(), d3 && e3.U.P.closePath(o3), e3.U.P.moveTo(o3, l3, v5), d3 = true;
          else if ("o25" == x2) {
            for (; s3.length > 6; ) l3 += s3.shift(), v5 += s3.shift(), e3.U.P.lineTo(o3, l3, v5);
            c5 = l3 + s3.shift(), p3 = v5 + s3.shift(), U2 = c5 + s3.shift(), g2 = p3 + s3.shift(), l3 = U2 + s3.shift(), v5 = g2 + s3.shift(), e3.U.P.curveTo(o3, c5, p3, U2, g2, l3, v5);
          } else if ("o26" == x2) for (s3.length % 2 && (l3 += s3.shift()); s3.length > 0; ) c5 = l3, p3 = v5 + s3.shift(), l3 = U2 = c5 + s3.shift(), v5 = (g2 = p3 + s3.shift()) + s3.shift(), e3.U.P.curveTo(o3, c5, p3, U2, g2, l3, v5);
          else if ("o27" == x2) for (s3.length % 2 && (v5 += s3.shift()); s3.length > 0; ) p3 = v5, U2 = (c5 = l3 + s3.shift()) + s3.shift(), g2 = p3 + s3.shift(), l3 = U2 + s3.shift(), v5 = g2, e3.U.P.curveTo(o3, c5, p3, U2, g2, l3, v5);
          else if ("o10" == x2 || "o29" == x2) {
            var A2 = "o10" == x2 ? n3 : a7;
            if (0 == s3.length) console.debug("error: empty stack");
            else {
              var W2 = s3.pop(), M2 = A2.Subrs[W2 + A2.Bias];
              t4.x = l3, t4.y = v5, t4.nStems = i4, t4.haveWidth = h2, t4.width = f3, t4.open = d3, e3.U._drawCFF(M2, t4, a7, n3, o3), l3 = t4.x, v5 = t4.y, i4 = t4.nStems, h2 = t4.haveWidth, f3 = t4.width, d3 = t4.open;
            }
          } else if ("o30" == x2 || "o31" == x2) {
            var V2 = s3.length, N2 = (T2 = 0, "o31" == x2);
            for (T2 += V2 - (P2 = -3 & V2); T2 < P2; ) N2 ? (p3 = v5, U2 = (c5 = l3 + s3.shift()) + s3.shift(), v5 = (g2 = p3 + s3.shift()) + s3.shift(), P2 - T2 == 5 ? (l3 = U2 + s3.shift(), T2++) : l3 = U2, N2 = false) : (c5 = l3, p3 = v5 + s3.shift(), U2 = c5 + s3.shift(), g2 = p3 + s3.shift(), l3 = U2 + s3.shift(), P2 - T2 == 5 ? (v5 = g2 + s3.shift(), T2++) : v5 = g2, N2 = true), e3.U.P.curveTo(o3, c5, p3, U2, g2, l3, v5), T2 += 4;
          } else {
            if ("o" == (x2 + "").charAt(0)) throw console.debug("Unknown operation: " + x2, r4), x2;
            s3.push(x2);
          }
        }
      }
      t4.x = l3, t4.y = v5, t4.nStems = i4, t4.haveWidth = h2, t4.width = f3, t4.open = d3;
    };
    var t3 = e3, a6 = { Typr: t3 };
    return r3.Typr = t3, r3.default = a6, Object.defineProperty(r3, "__esModule", { value: true }), r3;
  }({}).Typr;
}
function woff2otfFactory() {
  return function(r3) {
    var e3 = Uint8Array, n3 = Uint16Array, t3 = Uint32Array, a6 = new e3([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]), i4 = new e3([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]), o3 = new e3([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), f3 = function(r4, e4) {
      for (var a7 = new n3(31), i5 = 0; i5 < 31; ++i5) a7[i5] = e4 += 1 << r4[i5 - 1];
      var o4 = new t3(a7[30]);
      for (i5 = 1; i5 < 30; ++i5) for (var f4 = a7[i5]; f4 < a7[i5 + 1]; ++f4) o4[f4] = f4 - a7[i5] << 5 | i5;
      return [a7, o4];
    }, u2 = f3(a6, 2), v5 = u2[0], s3 = u2[1];
    v5[28] = 258, s3[258] = 28;
    for (var l3 = f3(i4, 0)[0], c5 = new n3(32768), g2 = 0; g2 < 32768; ++g2) {
      var h2 = (43690 & g2) >>> 1 | (21845 & g2) << 1;
      h2 = (61680 & (h2 = (52428 & h2) >>> 2 | (13107 & h2) << 2)) >>> 4 | (3855 & h2) << 4, c5[g2] = ((65280 & h2) >>> 8 | (255 & h2) << 8) >>> 1;
    }
    var w2 = function(r4, e4, t4) {
      for (var a7 = r4.length, i5 = 0, o4 = new n3(e4); i5 < a7; ++i5) ++o4[r4[i5] - 1];
      var f4, u3 = new n3(e4);
      for (i5 = 0; i5 < e4; ++i5) u3[i5] = u3[i5 - 1] + o4[i5 - 1] << 1;
      if (t4) {
        f4 = new n3(1 << e4);
        var v6 = 15 - e4;
        for (i5 = 0; i5 < a7; ++i5) if (r4[i5]) for (var s4 = i5 << 4 | r4[i5], l4 = e4 - r4[i5], g3 = u3[r4[i5] - 1]++ << l4, h3 = g3 | (1 << l4) - 1; g3 <= h3; ++g3) f4[c5[g3] >>> v6] = s4;
      } else for (f4 = new n3(a7), i5 = 0; i5 < a7; ++i5) r4[i5] && (f4[i5] = c5[u3[r4[i5] - 1]++] >>> 15 - r4[i5]);
      return f4;
    }, d3 = new e3(288);
    for (g2 = 0; g2 < 144; ++g2) d3[g2] = 8;
    for (g2 = 144; g2 < 256; ++g2) d3[g2] = 9;
    for (g2 = 256; g2 < 280; ++g2) d3[g2] = 7;
    for (g2 = 280; g2 < 288; ++g2) d3[g2] = 8;
    var m2 = new e3(32);
    for (g2 = 0; g2 < 32; ++g2) m2[g2] = 5;
    var b5 = w2(d3, 9, 1), p3 = w2(m2, 5, 1), y2 = function(r4) {
      for (var e4 = r4[0], n4 = 1; n4 < r4.length; ++n4) r4[n4] > e4 && (e4 = r4[n4]);
      return e4;
    }, L2 = function(r4, e4, n4) {
      var t4 = e4 / 8 | 0;
      return (r4[t4] | r4[t4 + 1] << 8) >> (7 & e4) & n4;
    }, U2 = function(r4, e4) {
      var n4 = e4 / 8 | 0;
      return (r4[n4] | r4[n4 + 1] << 8 | r4[n4 + 2] << 16) >> (7 & e4);
    }, k2 = ["unexpected EOF", "invalid block type", "invalid length/literal", "invalid distance", "stream finished", "no stream handler", , "no callback", "invalid UTF-8 data", "extra field too long", "date not in range 1980-2099", "filename too long", "stream finishing", "invalid zip data"], T2 = function(r4, e4, n4) {
      var t4 = new Error(e4 || k2[r4]);
      if (t4.code = r4, Error.captureStackTrace && Error.captureStackTrace(t4, T2), !n4) throw t4;
      return t4;
    }, O2 = function(r4, f4, u3) {
      var s4 = r4.length;
      if (!s4 || u3 && !u3.l && s4 < 5) return f4 || new e3(0);
      var c6 = !f4 || u3, g3 = !u3 || u3.i;
      u3 || (u3 = {}), f4 || (f4 = new e3(3 * s4));
      var h3, d5 = function(r5) {
        var n4 = f4.length;
        if (r5 > n4) {
          var t4 = new e3(Math.max(2 * n4, r5));
          t4.set(f4), f4 = t4;
        }
      }, m3 = u3.f || 0, k3 = u3.p || 0, O3 = u3.b || 0, A3 = u3.l, x3 = u3.d, E2 = u3.m, D2 = u3.n, M2 = 8 * s4;
      do {
        if (!A3) {
          u3.f = m3 = L2(r4, k3, 1);
          var S2 = L2(r4, k3 + 1, 3);
          if (k3 += 3, !S2) {
            var V2 = r4[(I2 = ((h3 = k3) / 8 | 0) + (7 & h3 && 1) + 4) - 4] | r4[I2 - 3] << 8, _2 = I2 + V2;
            if (_2 > s4) {
              g3 && T2(0);
              break;
            }
            c6 && d5(O3 + V2), f4.set(r4.subarray(I2, _2), O3), u3.b = O3 += V2, u3.p = k3 = 8 * _2;
            continue;
          }
          if (1 == S2) A3 = b5, x3 = p3, E2 = 9, D2 = 5;
          else if (2 == S2) {
            var j2 = L2(r4, k3, 31) + 257, z2 = L2(r4, k3 + 10, 15) + 4, C2 = j2 + L2(r4, k3 + 5, 31) + 1;
            k3 += 14;
            for (var F4 = new e3(C2), P2 = new e3(19), q3 = 0; q3 < z2; ++q3) P2[o3[q3]] = L2(r4, k3 + 3 * q3, 7);
            k3 += 3 * z2;
            var B2 = y2(P2), G4 = (1 << B2) - 1, H2 = w2(P2, B2, 1);
            for (q3 = 0; q3 < C2; ) {
              var I2, J2 = H2[L2(r4, k3, G4)];
              if (k3 += 15 & J2, (I2 = J2 >>> 4) < 16) F4[q3++] = I2;
              else {
                var K2 = 0, N2 = 0;
                for (16 == I2 ? (N2 = 3 + L2(r4, k3, 3), k3 += 2, K2 = F4[q3 - 1]) : 17 == I2 ? (N2 = 3 + L2(r4, k3, 7), k3 += 3) : 18 == I2 && (N2 = 11 + L2(r4, k3, 127), k3 += 7); N2--; ) F4[q3++] = K2;
              }
            }
            var Q2 = F4.subarray(0, j2), R2 = F4.subarray(j2);
            E2 = y2(Q2), D2 = y2(R2), A3 = w2(Q2, E2, 1), x3 = w2(R2, D2, 1);
          } else T2(1);
          if (k3 > M2) {
            g3 && T2(0);
            break;
          }
        }
        c6 && d5(O3 + 131072);
        for (var W2 = (1 << E2) - 1, X2 = (1 << D2) - 1, Y2 = k3; ; Y2 = k3) {
          var Z2 = (K2 = A3[U2(r4, k3) & W2]) >>> 4;
          if ((k3 += 15 & K2) > M2) {
            g3 && T2(0);
            break;
          }
          if (K2 || T2(2), Z2 < 256) f4[O3++] = Z2;
          else {
            if (256 == Z2) {
              Y2 = k3, A3 = null;
              break;
            }
            var $2 = Z2 - 254;
            if (Z2 > 264) {
              var rr2 = a6[q3 = Z2 - 257];
              $2 = L2(r4, k3, (1 << rr2) - 1) + v5[q3], k3 += rr2;
            }
            var er2 = x3[U2(r4, k3) & X2], nr2 = er2 >>> 4;
            er2 || T2(3), k3 += 15 & er2;
            R2 = l3[nr2];
            if (nr2 > 3) {
              rr2 = i4[nr2];
              R2 += U2(r4, k3) & (1 << rr2) - 1, k3 += rr2;
            }
            if (k3 > M2) {
              g3 && T2(0);
              break;
            }
            c6 && d5(O3 + 131072);
            for (var tr2 = O3 + $2; O3 < tr2; O3 += 4) f4[O3] = f4[O3 - R2], f4[O3 + 1] = f4[O3 + 1 - R2], f4[O3 + 2] = f4[O3 + 2 - R2], f4[O3 + 3] = f4[O3 + 3 - R2];
            O3 = tr2;
          }
        }
        u3.l = A3, u3.p = Y2, u3.b = O3, A3 && (m3 = 1, u3.m = E2, u3.d = x3, u3.n = D2);
      } while (!m3);
      return O3 == f4.length ? f4 : function(r5, a7, i5) {
        (null == a7 || a7 < 0) && (a7 = 0), (null == i5 || i5 > r5.length) && (i5 = r5.length);
        var o4 = new (r5 instanceof n3 ? n3 : r5 instanceof t3 ? t3 : e3)(i5 - a7);
        return o4.set(r5.subarray(a7, i5)), o4;
      }(f4, 0, O3);
    }, A2 = new e3(0);
    var x2 = "undefined" != typeof TextDecoder && new TextDecoder();
    try {
      x2.decode(A2, { stream: true }), 1;
    } catch (r4) {
    }
    return r3.convert_streams = function(r4) {
      var e4 = new DataView(r4), n4 = 0;
      function t4() {
        var r5 = e4.getUint16(n4);
        return n4 += 2, r5;
      }
      function a7() {
        var r5 = e4.getUint32(n4);
        return n4 += 4, r5;
      }
      function i5(r5) {
        m3.setUint16(b6, r5), b6 += 2;
      }
      function o4(r5) {
        m3.setUint32(b6, r5), b6 += 4;
      }
      for (var f4 = { signature: a7(), flavor: a7(), length: a7(), numTables: t4(), reserved: t4(), totalSfntSize: a7(), majorVersion: t4(), minorVersion: t4(), metaOffset: a7(), metaLength: a7(), metaOrigLength: a7(), privOffset: a7(), privLength: a7() }, u3 = 0; Math.pow(2, u3) <= f4.numTables; ) u3++;
      u3--;
      for (var v6 = 16 * Math.pow(2, u3), s4 = 16 * f4.numTables - v6, l4 = 12, c6 = [], g3 = 0; g3 < f4.numTables; g3++) c6.push({ tag: a7(), offset: a7(), compLength: a7(), origLength: a7(), origChecksum: a7() }), l4 += 16;
      var h3, w3 = new Uint8Array(12 + 16 * c6.length + c6.reduce(function(r5, e5) {
        return r5 + e5.origLength + 4;
      }, 0)), d5 = w3.buffer, m3 = new DataView(d5), b6 = 0;
      return o4(f4.flavor), i5(f4.numTables), i5(v6), i5(u3), i5(s4), c6.forEach(function(r5) {
        o4(r5.tag), o4(r5.origChecksum), o4(l4), o4(r5.origLength), r5.outOffset = l4, (l4 += r5.origLength) % 4 != 0 && (l4 += 4 - l4 % 4);
      }), c6.forEach(function(e5) {
        var n5, t5 = r4.slice(e5.offset, e5.offset + e5.compLength);
        if (e5.compLength != e5.origLength) {
          var a8 = new Uint8Array(e5.origLength);
          n5 = new Uint8Array(t5, 2), O2(n5, a8);
        } else a8 = new Uint8Array(t5);
        w3.set(a8, e5.outOffset);
        var i6 = 0;
        (l4 = e5.outOffset + e5.origLength) % 4 != 0 && (i6 = 4 - l4 % 4), w3.set(new Uint8Array(i6).buffer, e5.outOffset + e5.origLength), h3 = l4 + i6;
      }), d5.slice(0, h3);
    }, Object.defineProperty(r3, "__esModule", { value: true }), r3;
  }({}).convert_streams;
}
function parserFactory(Typr, woff2otf) {
  const cmdArgLengths = {
    M: 2,
    L: 2,
    Q: 4,
    C: 6,
    Z: 0
  };
  const joiningTypeRawData = { "C": "18g,ca,368,1kz", "D": "17k,6,2,2+4,5+c,2+6,2+1,10+1,9+f,j+11,2+1,a,2,2+1,15+2,3,j+2,6+3,2+8,2,2,2+1,w+a,4+e,3+3,2,3+2,3+5,23+w,2f+4,3,2+9,2,b,2+3,3,1k+9,6+1,3+1,2+2,2+d,30g,p+y,1,1+1g,f+x,2,sd2+1d,jf3+4,f+3,2+4,2+2,b+3,42,2,4+2,2+1,2,3,t+1,9f+w,2,el+2,2+g,d+2,2l,2+1,5,3+1,2+1,2,3,6,16wm+1v", "R": "17m+3,2,2,6+3,m,15+2,2+2,h+h,13,3+8,2,2,3+1,2,p+1,x,5+4,5,a,2,2,3,u,c+2,g+1,5,2+1,4+1,5j,6+1,2,b,2+2,f,2+1,1s+2,2,3+1,7,1ez0,2,2+1,4+4,b,4,3,b,42,2+2,4,3,2+1,2,o+3,ae,ep,x,2o+2,3+1,3,5+1,6", "L": "x9u,jff,a,fd,jv", "T": "4t,gj+33,7o+4,1+1,7c+18,2,2+1,2+1,2,21+a,2,1b+k,h,2u+6,3+5,3+1,2+3,y,2,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,3,7,6+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+d,1,1+1,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,ek,3+1,r+4,1e+4,6+5,2p+c,1+3,1,1+2,1+b,2db+2,3y,2p+v,ff+3,30+1,n9x,1+2,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,5s,6y+2,ea,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+9,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2,2b+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,470+8,at4+4,1o+6,t5,1s+3,2a,f5l+1,2+3,43o+2,a+7,1+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,1,gzau,v+2n,3l+6n" };
  const JT_LEFT = 1, JT_RIGHT = 2, JT_DUAL = 4, JT_TRANSPARENT = 8, JT_JOIN_CAUSING = 16, JT_NON_JOINING = 32;
  let joiningTypeMap;
  function getCharJoiningType(ch2) {
    if (!joiningTypeMap) {
      const m2 = {
        R: JT_RIGHT,
        L: JT_LEFT,
        D: JT_DUAL,
        C: JT_JOIN_CAUSING,
        U: JT_NON_JOINING,
        T: JT_TRANSPARENT
      };
      joiningTypeMap = /* @__PURE__ */ new Map();
      for (let type in joiningTypeRawData) {
        let lastCode = 0;
        joiningTypeRawData[type].split(",").forEach((range) => {
          let [skip, step] = range.split("+");
          skip = parseInt(skip, 36);
          step = step ? parseInt(step, 36) : 0;
          joiningTypeMap.set(lastCode += skip, m2[type]);
          for (let i4 = step; i4--; ) {
            joiningTypeMap.set(++lastCode, m2[type]);
          }
        });
      }
    }
    return joiningTypeMap.get(ch2) || JT_NON_JOINING;
  }
  const ISOL = 1, INIT = 2, FINA = 3, MEDI = 4;
  const formsToFeatures = [null, "isol", "init", "fina", "medi"];
  function detectJoiningForms(str) {
    const joiningForms = new Uint8Array(str.length);
    let prevJoiningType = JT_NON_JOINING;
    let prevForm = ISOL;
    let prevIndex = -1;
    for (let i4 = 0; i4 < str.length; i4++) {
      const code = str.codePointAt(i4);
      let joiningType = getCharJoiningType(code) | 0;
      let form = ISOL;
      if (joiningType & JT_TRANSPARENT) {
        continue;
      }
      if (prevJoiningType & (JT_LEFT | JT_DUAL | JT_JOIN_CAUSING)) {
        if (joiningType & (JT_RIGHT | JT_DUAL | JT_JOIN_CAUSING)) {
          form = FINA;
          if (prevForm === ISOL || prevForm === FINA) {
            joiningForms[prevIndex]++;
          }
        } else if (joiningType & (JT_LEFT | JT_NON_JOINING)) {
          if (prevForm === INIT || prevForm === MEDI) {
            joiningForms[prevIndex]--;
          }
        }
      } else if (prevJoiningType & (JT_RIGHT | JT_NON_JOINING)) {
        if (prevForm === INIT || prevForm === MEDI) {
          joiningForms[prevIndex]--;
        }
      }
      prevForm = joiningForms[i4] = form;
      prevJoiningType = joiningType;
      prevIndex = i4;
      if (code > 65535) i4++;
    }
    return joiningForms;
  }
  function stringToGlyphs(font, str) {
    const glyphIds = [];
    for (let i4 = 0; i4 < str.length; i4++) {
      const cc = str.codePointAt(i4);
      if (cc > 65535) i4++;
      glyphIds.push(Typr.U.codeToGlyph(font, cc));
    }
    const gsub = font["GSUB"];
    if (gsub) {
      const { lookupList, featureList } = gsub;
      let joiningForms;
      const supportedFeatures = /^(rlig|liga|mset|isol|init|fina|medi|half|pres|blws)$/;
      const usedLookups = [];
      featureList.forEach((feature) => {
        if (supportedFeatures.test(feature.tag)) {
          for (let ti2 = 0; ti2 < feature.tab.length; ti2++) {
            if (usedLookups[feature.tab[ti2]]) continue;
            usedLookups[feature.tab[ti2]] = true;
            const tab = lookupList[feature.tab[ti2]];
            const isJoiningFeature = /^(isol|init|fina|medi)$/.test(feature.tag);
            if (isJoiningFeature && !joiningForms) {
              joiningForms = detectJoiningForms(str);
            }
            for (let ci2 = 0; ci2 < glyphIds.length; ci2++) {
              if (!joiningForms || !isJoiningFeature || formsToFeatures[joiningForms[ci2]] === feature.tag) {
                Typr.U._applySubs(glyphIds, ci2, tab, lookupList);
              }
            }
          }
        }
      });
    }
    return glyphIds;
  }
  function firstNum(...args) {
    for (let i4 = 0; i4 < args.length; i4++) {
      if (typeof args[i4] === "number") {
        return args[i4];
      }
    }
  }
  function wrapFontObj(typrFont) {
    const glyphMap = /* @__PURE__ */ Object.create(null);
    const os2 = typrFont["OS/2"];
    const hhea = typrFont.hhea;
    const unitsPerEm = typrFont.head.unitsPerEm;
    const ascender = firstNum(os2 && os2.sTypoAscender, hhea && hhea.ascender, unitsPerEm);
    const fontObj = {
      unitsPerEm,
      ascender,
      descender: firstNum(os2 && os2.sTypoDescender, hhea && hhea.descender, 0),
      capHeight: firstNum(os2 && os2.sCapHeight, ascender),
      xHeight: firstNum(os2 && os2.sxHeight, ascender),
      lineGap: firstNum(os2 && os2.sTypoLineGap, hhea && hhea.lineGap),
      forEachGlyph(text, fontSize, letterSpacing, callback) {
        let glyphX = 0;
        const fontScale = 1 / fontObj.unitsPerEm * fontSize;
        const glyphIndices = stringToGlyphs(typrFont, text);
        let charIndex = 0;
        let prevGlyphIndex = -1;
        glyphIndices.forEach((glyphIndex, i4) => {
          if (glyphIndex !== -1) {
            let glyphObj = glyphMap[glyphIndex];
            if (!glyphObj) {
              const { cmds, crds } = Typr.U.glyphToPath(typrFont, glyphIndex);
              let path = "";
              let crdsIdx = 0;
              for (let i5 = 0, len = cmds.length; i5 < len; i5++) {
                const numArgs = cmdArgLengths[cmds[i5]];
                path += cmds[i5];
                for (let j2 = 1; j2 <= numArgs; j2++) {
                  path += (j2 > 1 ? "," : "") + crds[crdsIdx++];
                }
              }
              let xMin, yMin, xMax, yMax;
              if (crds.length) {
                xMin = yMin = Infinity;
                xMax = yMax = -Infinity;
                for (let i5 = 0, len = crds.length; i5 < len; i5 += 2) {
                  let x2 = crds[i5];
                  let y2 = crds[i5 + 1];
                  if (x2 < xMin) xMin = x2;
                  if (y2 < yMin) yMin = y2;
                  if (x2 > xMax) xMax = x2;
                  if (y2 > yMax) yMax = y2;
                }
              } else {
                xMin = xMax = yMin = yMax = 0;
              }
              glyphObj = glyphMap[glyphIndex] = {
                index: glyphIndex,
                advanceWidth: typrFont.hmtx.aWidth[glyphIndex],
                xMin,
                yMin,
                xMax,
                yMax,
                path,
                pathCommandCount: cmds.length
                // forEachPathCommand(callback) {
                //   let argsIndex = 0
                //   const argsArray = []
                //   for (let i = 0, len = cmds.length; i < len; i++) {
                //     const numArgs = cmdArgLengths[cmds[i]]
                //     argsArray.length = 1 + numArgs
                //     argsArray[0] = cmds[i]
                //     for (let j = 1; j <= numArgs; j++) {
                //       argsArray[j] = crds[argsIndex++]
                //     }
                //     callback.apply(null, argsArray)
                //   }
                // }
              };
            }
            if (prevGlyphIndex !== -1) {
              glyphX += Typr.U.getPairAdjustment(typrFont, prevGlyphIndex, glyphIndex) * fontScale;
            }
            callback.call(null, glyphObj, glyphX, charIndex);
            if (glyphObj.advanceWidth) {
              glyphX += glyphObj.advanceWidth * fontScale;
            }
            if (letterSpacing) {
              glyphX += letterSpacing * fontSize;
            }
            prevGlyphIndex = glyphIndex;
          }
          charIndex += text.codePointAt(charIndex) > 65535 ? 2 : 1;
        });
        return glyphX;
      }
    };
    return fontObj;
  }
  return function parse(buffer2) {
    const peek = new Uint8Array(buffer2, 0, 4);
    const tag = Typr._bin.readASCII(peek, 0, 4);
    if (tag === "wOFF") {
      buffer2 = woff2otf(buffer2);
    } else if (tag === "wOF2") {
      throw new Error("woff2 fonts not supported");
    }
    return wrapFontObj(Typr.parse(buffer2)[0]);
  };
}
var workerModule = defineWorkerModule({
  name: "Typr Font Parser",
  dependencies: [typrFactory, woff2otfFactory, parserFactory],
  init(typrFactory2, woff2otfFactory2, parserFactory2) {
    const Typr = typrFactory2();
    const woff2otf = woff2otfFactory2();
    return parserFactory2(Typr, woff2otf);
  }
});
var CONFIG = {
  defaultFontURL: "https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxM.woff",
  //Roboto Regular
  sdfGlyphSize: 64,
  sdfMargin: 1 / 16,
  sdfExponent: 9,
  textureWidth: 2048
};
var tempColor = new Color();
var hasRequested = false;
function now$1() {
  return (self.performance || Date).now();
}
var atlases = /* @__PURE__ */ Object.create(null);
function getTextRenderInfo(args, callback) {
  hasRequested = true;
  args = assign2({}, args);
  const totalStart = now$1();
  args.font = toAbsoluteURL(args.font || CONFIG.defaultFontURL);
  args.text = "" + args.text;
  args.sdfGlyphSize = args.sdfGlyphSize || CONFIG.sdfGlyphSize;
  if (args.colorRanges != null) {
    let colors2 = {};
    for (let key in args.colorRanges) {
      if (args.colorRanges.hasOwnProperty(key)) {
        let val = args.colorRanges[key];
        if (typeof val !== "number") {
          val = tempColor.set(val).getHex();
        }
        colors2[key] = val;
      }
    }
    args.colorRanges = colors2;
  }
  Object.freeze(args);
  const { textureWidth, sdfExponent } = CONFIG;
  const { sdfGlyphSize } = args;
  const glyphsPerRow = textureWidth / sdfGlyphSize * 4;
  let atlas = atlases[sdfGlyphSize];
  if (!atlas) {
    const canvas = document.createElement("canvas");
    canvas.width = textureWidth;
    canvas.height = sdfGlyphSize * 256 / glyphsPerRow;
    atlas = atlases[sdfGlyphSize] = {
      glyphCount: 0,
      sdfGlyphSize,
      sdfCanvas: canvas,
      sdfTexture: new Texture(
        canvas,
        void 0,
        void 0,
        void 0,
        LinearFilter,
        LinearFilter
      ),
      contextLost: false,
      glyphsByFont: /* @__PURE__ */ new Map()
    };
    atlas.sdfTexture.generateMipmaps = false;
    initContextLossHandling(atlas);
  }
  const { sdfTexture, sdfCanvas } = atlas;
  let fontGlyphs = atlas.glyphsByFont.get(args.font);
  if (!fontGlyphs) {
    atlas.glyphsByFont.set(args.font, fontGlyphs = /* @__PURE__ */ new Map());
  }
  typesetInWorker(args).then((result) => {
    const { glyphIds, glyphPositions, fontSize, unitsPerEm, timings } = result;
    const neededSDFs = [];
    const glyphBounds = new Float32Array(glyphIds.length * 4);
    const fontSizeMult = fontSize / unitsPerEm;
    let boundsIdx = 0;
    let positionsIdx = 0;
    const quadsStart = now$1();
    glyphIds.forEach((glyphId, i4) => {
      let glyphInfo = fontGlyphs.get(glyphId);
      if (!glyphInfo) {
        const { path, pathBounds } = result.glyphData[glyphId];
        const fontUnitsMargin = Math.max(pathBounds[2] - pathBounds[0], pathBounds[3] - pathBounds[1]) / sdfGlyphSize * (CONFIG.sdfMargin * sdfGlyphSize + 0.5);
        const atlasIndex = atlas.glyphCount++;
        const sdfViewBox2 = [
          pathBounds[0] - fontUnitsMargin,
          pathBounds[1] - fontUnitsMargin,
          pathBounds[2] + fontUnitsMargin,
          pathBounds[3] + fontUnitsMargin
        ];
        fontGlyphs.set(glyphId, glyphInfo = { path, atlasIndex, sdfViewBox: sdfViewBox2 });
        neededSDFs.push(glyphInfo);
      }
      const { sdfViewBox } = glyphInfo;
      const posX = glyphPositions[positionsIdx++];
      const posY = glyphPositions[positionsIdx++];
      glyphBounds[boundsIdx++] = posX + sdfViewBox[0] * fontSizeMult;
      glyphBounds[boundsIdx++] = posY + sdfViewBox[1] * fontSizeMult;
      glyphBounds[boundsIdx++] = posX + sdfViewBox[2] * fontSizeMult;
      glyphBounds[boundsIdx++] = posY + sdfViewBox[3] * fontSizeMult;
      glyphIds[i4] = glyphInfo.atlasIndex;
    });
    timings.quads = (timings.quads || 0) + (now$1() - quadsStart);
    const sdfStart = now$1();
    timings.sdf = {};
    const currentHeight = sdfCanvas.height;
    const neededRows = Math.ceil(atlas.glyphCount / glyphsPerRow);
    const neededHeight = Math.pow(2, Math.ceil(Math.log2(neededRows * sdfGlyphSize)));
    if (neededHeight > currentHeight) {
      console.info(`Increasing SDF texture size ${currentHeight}->${neededHeight}`);
      resizeWebGLCanvasWithoutClearing(sdfCanvas, textureWidth, neededHeight);
      sdfTexture.dispose();
    }
    Promise.all(neededSDFs.map(
      (glyphInfo) => generateGlyphSDF(glyphInfo, atlas, args.gpuAccelerateSDF).then(({ timing }) => {
        timings.sdf[glyphInfo.atlasIndex] = timing;
      })
    )).then(() => {
      if (neededSDFs.length && !atlas.contextLost) {
        safariPre15Workaround(atlas);
        sdfTexture.needsUpdate = true;
      }
      timings.sdfTotal = now$1() - sdfStart;
      timings.total = now$1() - totalStart;
      callback(Object.freeze({
        parameters: args,
        sdfTexture,
        sdfGlyphSize,
        sdfExponent,
        glyphBounds,
        glyphAtlasIndices: glyphIds,
        glyphColors: result.glyphColors,
        caretPositions: result.caretPositions,
        caretHeight: result.caretHeight,
        chunkedBounds: result.chunkedBounds,
        ascender: result.ascender,
        descender: result.descender,
        lineHeight: result.lineHeight,
        capHeight: result.capHeight,
        xHeight: result.xHeight,
        topBaseline: result.topBaseline,
        blockBounds: result.blockBounds,
        visibleBounds: result.visibleBounds,
        timings: result.timings
      }));
    });
  });
  Promise.resolve().then(() => {
    if (!atlas.contextLost) {
      warmUpSDFCanvas(sdfCanvas);
    }
  });
}
function generateGlyphSDF({ path, atlasIndex, sdfViewBox }, { sdfGlyphSize, sdfCanvas, contextLost }, useGPU) {
  if (contextLost) {
    return Promise.resolve({ timing: -1 });
  }
  const { textureWidth, sdfExponent } = CONFIG;
  const maxDist = Math.max(sdfViewBox[2] - sdfViewBox[0], sdfViewBox[3] - sdfViewBox[1]);
  const squareIndex = Math.floor(atlasIndex / 4);
  const x2 = squareIndex % (textureWidth / sdfGlyphSize) * sdfGlyphSize;
  const y2 = Math.floor(squareIndex / (textureWidth / sdfGlyphSize)) * sdfGlyphSize;
  const channel = atlasIndex % 4;
  return generateSDF(sdfGlyphSize, sdfGlyphSize, path, sdfViewBox, maxDist, sdfExponent, sdfCanvas, x2, y2, channel, useGPU);
}
function initContextLossHandling(atlas) {
  const canvas = atlas.sdfCanvas;
  canvas.addEventListener("webglcontextlost", (event) => {
    console.log("Context Lost", event);
    event.preventDefault();
    atlas.contextLost = true;
  });
  canvas.addEventListener("webglcontextrestored", (event) => {
    console.log("Context Restored", event);
    atlas.contextLost = false;
    const promises = [];
    atlas.glyphsByFont.forEach((glyphMap) => {
      glyphMap.forEach((glyph) => {
        promises.push(generateGlyphSDF(glyph, atlas, true));
      });
    });
    Promise.all(promises).then(() => {
      safariPre15Workaround(atlas);
      atlas.sdfTexture.needsUpdate = true;
    });
  });
}
function preloadFont({ font, characters, sdfGlyphSize }, callback) {
  let text = Array.isArray(characters) ? characters.join("\n") : "" + characters;
  getTextRenderInfo({ font, sdfGlyphSize, text }, callback);
}
function assign2(toObj, fromObj) {
  for (let key in fromObj) {
    if (fromObj.hasOwnProperty(key)) {
      toObj[key] = fromObj[key];
    }
  }
  return toObj;
}
var linkEl;
function toAbsoluteURL(path) {
  if (!linkEl) {
    linkEl = typeof document === "undefined" ? {} : document.createElement("a");
  }
  linkEl.href = path;
  return linkEl.href;
}
function safariPre15Workaround(atlas) {
  if (typeof createImageBitmap !== "function") {
    console.info("Safari<15: applying SDF canvas workaround");
    const { sdfCanvas, sdfTexture } = atlas;
    const { width, height } = sdfCanvas;
    const gl = atlas.sdfCanvas.getContext("webgl");
    let pixels = sdfTexture.image.data;
    if (!pixels || pixels.length !== width * height * 4) {
      pixels = new Uint8Array(width * height * 4);
      sdfTexture.image = { width, height, data: pixels };
      sdfTexture.flipY = false;
      sdfTexture.isDataTexture = true;
    }
    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
  }
}
var typesetterWorkerModule = defineWorkerModule({
  name: "Typesetter",
  dependencies: [
    CONFIG,
    workerModule,
    createTypesetter,
    bidi_default
  ],
  init(config, fontParser, createTypesetter2, bidiFactory2) {
    const { defaultFontURL } = config;
    return createTypesetter2(fontParser, bidiFactory2(), { defaultFontURL });
  }
});
var typesetInWorker = defineWorkerModule({
  name: "Typesetter",
  dependencies: [
    typesetterWorkerModule
  ],
  init(typesetter) {
    return function(args) {
      return new Promise((resolve) => {
        typesetter.typeset(args, resolve);
      });
    };
  },
  getTransferables(result) {
    const transferables = [
      result.glyphPositions.buffer,
      result.glyphIds.buffer
    ];
    if (result.caretPositions) {
      transferables.push(result.caretPositions.buffer);
    }
    if (result.glyphColors) {
      transferables.push(result.glyphColors.buffer);
    }
    return transferables;
  }
});
var templateGeometries = {};
function getTemplateGeometry(detail) {
  let geom = templateGeometries[detail];
  if (!geom) {
    const front = new PlaneGeometry(1, 1, detail, detail);
    const back = front.clone();
    const frontAttrs = front.attributes;
    const backAttrs = back.attributes;
    const combined = new BufferGeometry();
    const vertCount = frontAttrs.uv.count;
    for (let i4 = 0; i4 < vertCount; i4++) {
      backAttrs.position.array[i4 * 3] *= -1;
      backAttrs.normal.array[i4 * 3 + 2] *= -1;
    }
    ["position", "normal", "uv"].forEach((name) => {
      combined.setAttribute(
        name,
        new Float32BufferAttribute(
          [...frontAttrs[name].array, ...backAttrs[name].array],
          frontAttrs[name].itemSize
        )
      );
    });
    combined.setIndex([...front.index.array, ...back.index.array.map((n3) => n3 + vertCount)]);
    combined.translate(0.5, 0.5, 0);
    geom = templateGeometries[detail] = combined;
  }
  return geom;
}
var glyphBoundsAttrName = "aTroikaGlyphBounds";
var glyphIndexAttrName = "aTroikaGlyphIndex";
var glyphColorAttrName = "aTroikaGlyphColor";
var GlyphsGeometry = class extends InstancedBufferGeometry {
  constructor() {
    super();
    this.detail = 1;
    this.curveRadius = 0;
    this.groups = [
      { start: 0, count: Infinity, materialIndex: 0 },
      { start: 0, count: Infinity, materialIndex: 1 }
    ];
    this.boundingSphere = new Sphere();
    this.boundingBox = new Box3();
  }
  computeBoundingSphere() {
  }
  computeBoundingBox() {
  }
  // Since our base geometry contains triangles for both front and back sides, we can emulate
  // the "side" by restricting the draw range.
  setSide(side) {
    const verts = this.getIndex().count;
    this.setDrawRange(side === BackSide ? verts / 2 : 0, side === DoubleSide ? verts : verts / 2);
  }
  set detail(detail) {
    if (detail !== this._detail) {
      this._detail = detail;
      if (typeof detail !== "number" || detail < 1) {
        detail = 1;
      }
      let tpl = getTemplateGeometry(detail);
      ["position", "normal", "uv"].forEach((attr) => {
        this.attributes[attr] = tpl.attributes[attr].clone();
      });
      this.setIndex(tpl.getIndex().clone());
    }
  }
  get detail() {
    return this._detail;
  }
  set curveRadius(r3) {
    if (r3 !== this._curveRadius) {
      this._curveRadius = r3;
      this._updateBounds();
    }
  }
  get curveRadius() {
    return this._curveRadius;
  }
  /**
   * Update the geometry for a new set of glyphs.
   * @param {Float32Array} glyphBounds - An array holding the planar bounds for all glyphs
   *        to be rendered, 4 entries for each glyph: x1,x2,y1,y1
   * @param {Float32Array} glyphAtlasIndices - An array holding the index of each glyph within
   *        the SDF atlas texture.
   * @param {Array} blockBounds - An array holding the [minX, minY, maxX, maxY] across all glyphs
   * @param {Array} [chunkedBounds] - An array of objects describing bounds for each chunk of N
   *        consecutive glyphs: `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`. This can be
   *        used with `applyClipRect` to choose an optimized `instanceCount`.
   * @param {Uint8Array} [glyphColors] - An array holding r,g,b values for each glyph.
   */
  updateGlyphs(glyphBounds, glyphAtlasIndices, blockBounds, chunkedBounds, glyphColors) {
    updateBufferAttr(this, glyphBoundsAttrName, glyphBounds, 4);
    updateBufferAttr(this, glyphIndexAttrName, glyphAtlasIndices, 1);
    updateBufferAttr(this, glyphColorAttrName, glyphColors, 3);
    this._blockBounds = blockBounds;
    this._chunkedBounds = chunkedBounds;
    this.instanceCount = glyphAtlasIndices.length;
    this._updateBounds();
  }
  _updateBounds() {
    const bounds = this._blockBounds;
    if (bounds) {
      const { curveRadius, boundingBox: bbox } = this;
      if (curveRadius) {
        const { PI, floor, min, max, sin, cos } = Math;
        const halfPi = PI / 2;
        const twoPi = PI * 2;
        const absR = Math.abs(curveRadius);
        const leftAngle = bounds[0] / absR;
        const rightAngle = bounds[2] / absR;
        const minX = floor((leftAngle + halfPi) / twoPi) !== floor((rightAngle + halfPi) / twoPi) ? -absR : min(sin(leftAngle) * absR, sin(rightAngle) * absR);
        const maxX = floor((leftAngle - halfPi) / twoPi) !== floor((rightAngle - halfPi) / twoPi) ? absR : max(sin(leftAngle) * absR, sin(rightAngle) * absR);
        const maxZ = floor((leftAngle + PI) / twoPi) !== floor((rightAngle + PI) / twoPi) ? absR * 2 : max(absR - cos(leftAngle) * absR, absR - cos(rightAngle) * absR);
        bbox.min.set(minX, bounds[1], curveRadius < 0 ? -maxZ : 0);
        bbox.max.set(maxX, bounds[3], curveRadius < 0 ? 0 : maxZ);
      } else {
        bbox.min.set(bounds[0], bounds[1], 0);
        bbox.max.set(bounds[2], bounds[3], 0);
      }
      bbox.getBoundingSphere(this.boundingSphere);
    }
  }
  /**
   * Given a clipping rect, and the chunkedBounds from the last updateGlyphs call, choose the lowest
   * `instanceCount` that will show all glyphs within the clipped view. This is an optimization
   * for long blocks of text that are clipped, to skip vertex shader evaluation for glyphs that would
   * be clipped anyway.
   *
   * Note that since `drawElementsInstanced[ANGLE]` only accepts an instance count and not a starting
   * offset, this optimization becomes less effective as the clipRect moves closer to the end of the
   * text block. We could fix that by switching from instancing to a full geometry with a drawRange,
   * but at the expense of much larger attribute buffers (see classdoc above.)
   *
   * @param {Vector4} clipRect
   */
  applyClipRect(clipRect) {
    let count = this.getAttribute(glyphIndexAttrName).count;
    let chunks = this._chunkedBounds;
    if (chunks) {
      for (let i4 = chunks.length; i4--; ) {
        count = chunks[i4].end;
        let rect = chunks[i4].rect;
        if (rect[1] < clipRect.w && rect[3] > clipRect.y && rect[0] < clipRect.z && rect[2] > clipRect.x) {
          break;
        }
      }
    }
    this.instanceCount = count;
  }
};
function updateBufferAttr(geom, attrName, newArray, itemSize) {
  const attr = geom.getAttribute(attrName);
  if (newArray) {
    if (attr && attr.array.length === newArray.length) {
      attr.array.set(newArray);
      attr.needsUpdate = true;
    } else {
      geom.setAttribute(attrName, new InstancedBufferAttribute(newArray, itemSize));
      delete geom._maxInstanceCount;
      geom.dispose();
    }
  } else if (attr) {
    geom.deleteAttribute(attrName);
  }
}
var VERTEX_DEFS = `
uniform vec2 uTroikaSDFTextureSize;
uniform float uTroikaSDFGlyphSize;
uniform vec4 uTroikaTotalBounds;
uniform vec4 uTroikaClipRect;
uniform mat3 uTroikaOrient;
uniform bool uTroikaUseGlyphColors;
uniform float uTroikaDistanceOffset;
uniform float uTroikaBlurRadius;
uniform vec2 uTroikaPositionOffset;
uniform float uTroikaCurveRadius;
attribute vec4 aTroikaGlyphBounds;
attribute float aTroikaGlyphIndex;
attribute vec3 aTroikaGlyphColor;
varying vec2 vTroikaGlyphUV;
varying vec4 vTroikaTextureUVBounds;
varying float vTroikaTextureChannel;
varying vec3 vTroikaGlyphColor;
varying vec2 vTroikaGlyphDimensions;
`;
var VERTEX_TRANSFORM = `
vec4 bounds = aTroikaGlyphBounds;
bounds.xz += uTroikaPositionOffset.x;
bounds.yw -= uTroikaPositionOffset.y;

vec4 outlineBounds = vec4(
  bounds.xy - uTroikaDistanceOffset - uTroikaBlurRadius,
  bounds.zw + uTroikaDistanceOffset + uTroikaBlurRadius
);
vec4 clippedBounds = vec4(
  clamp(outlineBounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),
  clamp(outlineBounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)
);

vec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);

position.xy = mix(bounds.xy, bounds.zw, clippedXY);

uv = (position.xy - uTroikaTotalBounds.xy) / (uTroikaTotalBounds.zw - uTroikaTotalBounds.xy);

float rad = uTroikaCurveRadius;
if (rad != 0.0) {
  float angle = position.x / rad;
  position.xz = vec2(sin(angle) * rad, rad - cos(angle) * rad);
  normal.xz = vec2(sin(angle), cos(angle));
}
  
position = uTroikaOrient * position;
normal = uTroikaOrient * normal;

vTroikaGlyphUV = clippedXY.xy;
vTroikaGlyphDimensions = vec2(bounds[2] - bounds[0], bounds[3] - bounds[1]);

${""}
float txCols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;
vec2 txUvPerSquare = uTroikaSDFGlyphSize / uTroikaSDFTextureSize;
vec2 txStartUV = txUvPerSquare * vec2(
  mod(floor(aTroikaGlyphIndex / 4.0), txCols),
  floor(floor(aTroikaGlyphIndex / 4.0) / txCols)
);
vTroikaTextureUVBounds = vec4(txStartUV, vec2(txStartUV) + txUvPerSquare);
vTroikaTextureChannel = mod(aTroikaGlyphIndex, 4.0);
`;
var FRAGMENT_DEFS = `
uniform sampler2D uTroikaSDFTexture;
uniform vec2 uTroikaSDFTextureSize;
uniform float uTroikaSDFGlyphSize;
uniform float uTroikaSDFExponent;
uniform float uTroikaDistanceOffset;
uniform float uTroikaFillOpacity;
uniform float uTroikaOutlineOpacity;
uniform float uTroikaBlurRadius;
uniform vec3 uTroikaStrokeColor;
uniform float uTroikaStrokeWidth;
uniform float uTroikaStrokeOpacity;
uniform bool uTroikaSDFDebug;
varying vec2 vTroikaGlyphUV;
varying vec4 vTroikaTextureUVBounds;
varying float vTroikaTextureChannel;
varying vec2 vTroikaGlyphDimensions;

float troikaSdfValueToSignedDistance(float alpha) {
  // Inverse of exponential encoding in webgl-sdf-generator
  ${""}
  float maxDimension = max(vTroikaGlyphDimensions.x, vTroikaGlyphDimensions.y);
  float absDist = (1.0 - pow(2.0 * (alpha > 0.5 ? 1.0 - alpha : alpha), 1.0 / uTroikaSDFExponent)) * maxDimension;
  float signedDist = absDist * (alpha > 0.5 ? -1.0 : 1.0);
  return signedDist;
}

float troikaGlyphUvToSdfValue(vec2 glyphUV) {
  vec2 textureUV = mix(vTroikaTextureUVBounds.xy, vTroikaTextureUVBounds.zw, glyphUV);
  vec4 rgba = texture2D(uTroikaSDFTexture, textureUV);
  float ch = floor(vTroikaTextureChannel + 0.5); //NOTE: can't use round() in WebGL1
  return ch == 0.0 ? rgba.r : ch == 1.0 ? rgba.g : ch == 2.0 ? rgba.b : rgba.a;
}

float troikaGlyphUvToDistance(vec2 uv) {
  return troikaSdfValueToSignedDistance(troikaGlyphUvToSdfValue(uv));
}

float troikaGetAADist() {
  ${""}
  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300
  return length(fwidth(vTroikaGlyphUV * vTroikaGlyphDimensions)) * 0.5;
  #else
  return vTroikaGlyphDimensions.x / 64.0;
  #endif
}

float troikaGetFragDistValue() {
  vec2 clampedGlyphUV = clamp(vTroikaGlyphUV, 0.5 / uTroikaSDFGlyphSize, 1.0 - 0.5 / uTroikaSDFGlyphSize);
  float distance = troikaGlyphUvToDistance(clampedGlyphUV);
 
  // Extrapolate distance when outside bounds:
  distance += clampedGlyphUV == vTroikaGlyphUV ? 0.0 : 
    length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);

  ${""}

  return distance;
}

float troikaGetEdgeAlpha(float distance, float distanceOffset, float aaDist) {
  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)
  float alpha = step(-distanceOffset, -distance);
  #else

  float alpha = smoothstep(
    distanceOffset + aaDist,
    distanceOffset - aaDist,
    distance
  );
  #endif

  return alpha;
}
`;
var FRAGMENT_TRANSFORM = `
float aaDist = troikaGetAADist();
float fragDistance = troikaGetFragDistValue();
float edgeAlpha = uTroikaSDFDebug ?
  troikaGlyphUvToSdfValue(vTroikaGlyphUV) :
  troikaGetEdgeAlpha(fragDistance, uTroikaDistanceOffset, max(aaDist, uTroikaBlurRadius));

#if !defined(IS_DEPTH_MATERIAL) && !defined(IS_DISTANCE_MATERIAL)
vec4 fillRGBA = gl_FragColor;
fillRGBA.a *= uTroikaFillOpacity;
vec4 strokeRGBA = uTroikaStrokeWidth == 0.0 ? fillRGBA : vec4(uTroikaStrokeColor, uTroikaStrokeOpacity);
if (fillRGBA.a == 0.0) fillRGBA.rgb = strokeRGBA.rgb;
gl_FragColor = mix(fillRGBA, strokeRGBA, smoothstep(
  -uTroikaStrokeWidth - aaDist,
  -uTroikaStrokeWidth + aaDist,
  fragDistance
));
gl_FragColor.a *= edgeAlpha;
#endif

if (edgeAlpha == 0.0) {
  discard;
}
`;
function createTextDerivedMaterial(baseMaterial) {
  const textMaterial = createDerivedMaterial(baseMaterial, {
    chained: true,
    extensions: {
      derivatives: true
    },
    uniforms: {
      uTroikaSDFTexture: { value: null },
      uTroikaSDFTextureSize: { value: new Vector2() },
      uTroikaSDFGlyphSize: { value: 0 },
      uTroikaSDFExponent: { value: 0 },
      uTroikaTotalBounds: { value: new Vector4(0, 0, 0, 0) },
      uTroikaClipRect: { value: new Vector4(0, 0, 0, 0) },
      uTroikaDistanceOffset: { value: 0 },
      uTroikaOutlineOpacity: { value: 0 },
      uTroikaFillOpacity: { value: 1 },
      uTroikaPositionOffset: { value: new Vector2() },
      uTroikaCurveRadius: { value: 0 },
      uTroikaBlurRadius: { value: 0 },
      uTroikaStrokeWidth: { value: 0 },
      uTroikaStrokeColor: { value: new Color() },
      uTroikaStrokeOpacity: { value: 1 },
      uTroikaOrient: { value: new Matrix3() },
      uTroikaUseGlyphColors: { value: true },
      uTroikaSDFDebug: { value: false }
    },
    vertexDefs: VERTEX_DEFS,
    vertexTransform: VERTEX_TRANSFORM,
    fragmentDefs: FRAGMENT_DEFS,
    fragmentColorTransform: FRAGMENT_TRANSFORM,
    customRewriter({ vertexShader: vertexShader2, fragmentShader: fragmentShader2 }) {
      let uDiffuseRE = /\buniform\s+vec3\s+diffuse\b/;
      if (uDiffuseRE.test(fragmentShader2)) {
        fragmentShader2 = fragmentShader2.replace(uDiffuseRE, "varying vec3 vTroikaGlyphColor").replace(/\bdiffuse\b/g, "vTroikaGlyphColor");
        if (!uDiffuseRE.test(vertexShader2)) {
          vertexShader2 = vertexShader2.replace(
            voidMainRegExp,
            "uniform vec3 diffuse;\n$&\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\n"
          );
        }
      }
      return { vertexShader: vertexShader2, fragmentShader: fragmentShader2 };
    }
  });
  textMaterial.transparent = true;
  Object.defineProperties(textMaterial, {
    isTroikaTextMaterial: { value: true },
    // WebGLShadowMap reverses the side of the shadow material by default, which fails
    // for planes, so here we force the `shadowSide` to always match the main side.
    shadowSide: {
      get() {
        return this.side;
      },
      set() {
      }
    }
  });
  return textMaterial;
}
var defaultMaterial = new MeshBasicMaterial({
  color: 16777215,
  side: DoubleSide,
  transparent: true
});
var defaultStrokeColor = 8421504;
var tempMat4 = new Matrix4();
var tempVec3a = new Vector3();
var tempVec3b = new Vector3();
var tempArray = [];
var origin = new Vector3();
var defaultOrient = "+x+y";
function first(o3) {
  return Array.isArray(o3) ? o3[0] : o3;
}
var getFlatRaycastMesh = () => {
  const mesh = new Mesh(
    new PlaneGeometry(1, 1),
    defaultMaterial
  );
  getFlatRaycastMesh = () => mesh;
  return mesh;
};
var getCurvedRaycastMesh = () => {
  const mesh = new Mesh(
    new PlaneGeometry(1, 1, 32, 1),
    defaultMaterial
  );
  getCurvedRaycastMesh = () => mesh;
  return mesh;
};
var syncStartEvent = { type: "syncstart" };
var syncCompleteEvent = { type: "synccomplete" };
var SYNCABLE_PROPS = [
  "font",
  "fontSize",
  "letterSpacing",
  "lineHeight",
  "maxWidth",
  "overflowWrap",
  "text",
  "direction",
  "textAlign",
  "textIndent",
  "whiteSpace",
  "anchorX",
  "anchorY",
  "colorRanges",
  "sdfGlyphSize"
];
var COPYABLE_PROPS = SYNCABLE_PROPS.concat(
  "material",
  "color",
  "depthOffset",
  "clipRect",
  "curveRadius",
  "orientation",
  "glyphGeometryDetail"
);
var Text = class extends Mesh {
  constructor() {
    const geometry2 = new GlyphsGeometry();
    super(geometry2, null);
    this.text = "";
    this.anchorX = 0;
    this.anchorY = 0;
    this.curveRadius = 0;
    this.direction = "auto";
    this.font = null;
    this.fontSize = 0.1;
    this.letterSpacing = 0;
    this.lineHeight = "normal";
    this.maxWidth = Infinity;
    this.overflowWrap = "normal";
    this.textAlign = "left";
    this.textIndent = 0;
    this.whiteSpace = "normal";
    this.material = null;
    this.color = null;
    this.colorRanges = null;
    this.outlineWidth = 0;
    this.outlineColor = 0;
    this.outlineOpacity = 1;
    this.outlineBlur = 0;
    this.outlineOffsetX = 0;
    this.outlineOffsetY = 0;
    this.strokeWidth = 0;
    this.strokeColor = defaultStrokeColor;
    this.strokeOpacity = 1;
    this.fillOpacity = 1;
    this.depthOffset = 0;
    this.clipRect = null;
    this.orientation = defaultOrient;
    this.glyphGeometryDetail = 1;
    this.sdfGlyphSize = null;
    this.gpuAccelerateSDF = true;
    this.debugSDF = false;
  }
  /**
   * Updates the text rendering according to the current text-related configuration properties.
   * This is an async process, so you can pass in a callback function to be executed when it
   * finishes.
   * @param {function} [callback]
   */
  sync(callback) {
    if (this._needsSync) {
      this._needsSync = false;
      if (this._isSyncing) {
        (this._queuedSyncs || (this._queuedSyncs = [])).push(callback);
      } else {
        this._isSyncing = true;
        this.dispatchEvent(syncStartEvent);
        getTextRenderInfo({
          text: this.text,
          font: this.font,
          fontSize: this.fontSize || 0.1,
          letterSpacing: this.letterSpacing || 0,
          lineHeight: this.lineHeight || "normal",
          maxWidth: this.maxWidth,
          direction: this.direction || "auto",
          textAlign: this.textAlign,
          textIndent: this.textIndent,
          whiteSpace: this.whiteSpace,
          overflowWrap: this.overflowWrap,
          anchorX: this.anchorX,
          anchorY: this.anchorY,
          colorRanges: this.colorRanges,
          includeCaretPositions: true,
          //TODO parameterize
          sdfGlyphSize: this.sdfGlyphSize,
          gpuAccelerateSDF: this.gpuAccelerateSDF
        }, (textRenderInfo) => {
          this._isSyncing = false;
          this._textRenderInfo = textRenderInfo;
          this.geometry.updateGlyphs(
            textRenderInfo.glyphBounds,
            textRenderInfo.glyphAtlasIndices,
            textRenderInfo.blockBounds,
            textRenderInfo.chunkedBounds,
            textRenderInfo.glyphColors
          );
          const queued = this._queuedSyncs;
          if (queued) {
            this._queuedSyncs = null;
            this._needsSync = true;
            this.sync(() => {
              queued.forEach((fn2) => fn2 && fn2());
            });
          }
          this.dispatchEvent(syncCompleteEvent);
          if (callback) {
            callback();
          }
        });
      }
    }
  }
  /**
   * Initiate a sync if needed - note it won't complete until next frame at the
   * earliest so if possible it's a good idea to call sync() manually as soon as
   * all the properties have been set.
   * @override
   */
  onBeforeRender(renderer, scene, camera, geometry2, material, group) {
    this.sync();
    if (material.isTroikaTextMaterial) {
      this._prepareForRender(material);
    }
    material._hadOwnSide = material.hasOwnProperty("side");
    this.geometry.setSide(material._actualSide = material.side);
    material.side = FrontSide;
  }
  onAfterRender(renderer, scene, camera, geometry2, material, group) {
    if (material._hadOwnSide) {
      material.side = material._actualSide;
    } else {
      delete material.side;
    }
  }
  /**
   * Shortcut to dispose the geometry specific to this instance.
   * Note: we don't also dispose the derived material here because if anything else is
   * sharing the same base material it will result in a pause next frame as the program
   * is recompiled. Instead users can dispose the base material manually, like normal,
   * and we'll also dispose the derived material at that time.
   */
  dispose() {
    this.geometry.dispose();
  }
  /**
   * @property {TroikaTextRenderInfo|null} textRenderInfo
   * @readonly
   * The current processed rendering data for this TextMesh, returned by the TextBuilder after
   * a `sync()` call. This will be `null` initially, and may be stale for a short period until
   * the asynchrous `sync()` process completes.
   */
  get textRenderInfo() {
    return this._textRenderInfo || null;
  }
  // Handler for automatically wrapping the base material with our upgrades. We do the wrapping
  // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.
  get material() {
    let derivedMaterial = this._derivedMaterial;
    const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultMaterial.clone());
    if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {
      derivedMaterial = this._derivedMaterial = createTextDerivedMaterial(baseMaterial);
      baseMaterial.addEventListener("dispose", function onDispose() {
        baseMaterial.removeEventListener("dispose", onDispose);
        derivedMaterial.dispose();
      });
    }
    if (this.outlineWidth || this.outlineBlur || this.outlineOffsetX || this.outlineOffsetY) {
      let outlineMaterial = derivedMaterial._outlineMtl;
      if (!outlineMaterial) {
        outlineMaterial = derivedMaterial._outlineMtl = Object.create(derivedMaterial, {
          id: { value: derivedMaterial.id + 0.1 }
        });
        outlineMaterial.isTextOutlineMaterial = true;
        outlineMaterial.depthWrite = false;
        outlineMaterial.map = null;
        derivedMaterial.addEventListener("dispose", function onDispose() {
          derivedMaterial.removeEventListener("dispose", onDispose);
          outlineMaterial.dispose();
        });
      }
      return [
        outlineMaterial,
        derivedMaterial
      ];
    } else {
      return derivedMaterial;
    }
  }
  set material(baseMaterial) {
    if (baseMaterial && baseMaterial.isTroikaTextMaterial) {
      this._derivedMaterial = baseMaterial;
      this._baseMaterial = baseMaterial.baseMaterial;
    } else {
      this._baseMaterial = baseMaterial;
    }
  }
  get glyphGeometryDetail() {
    return this.geometry.detail;
  }
  set glyphGeometryDetail(detail) {
    this.geometry.detail = detail;
  }
  get curveRadius() {
    return this.geometry.curveRadius;
  }
  set curveRadius(r3) {
    this.geometry.curveRadius = r3;
  }
  // Create and update material for shadows upon request:
  get customDepthMaterial() {
    return first(this.material).getDepthMaterial();
  }
  get customDistanceMaterial() {
    return first(this.material).getDistanceMaterial();
  }
  _prepareForRender(material) {
    const isOutline = material.isTextOutlineMaterial;
    const uniforms = material.uniforms;
    const textInfo = this.textRenderInfo;
    if (textInfo) {
      const { sdfTexture, blockBounds } = textInfo;
      uniforms.uTroikaSDFTexture.value = sdfTexture;
      uniforms.uTroikaSDFTextureSize.value.set(sdfTexture.image.width, sdfTexture.image.height);
      uniforms.uTroikaSDFGlyphSize.value = textInfo.sdfGlyphSize;
      uniforms.uTroikaSDFExponent.value = textInfo.sdfExponent;
      uniforms.uTroikaTotalBounds.value.fromArray(blockBounds);
      uniforms.uTroikaUseGlyphColors.value = !isOutline && !!textInfo.glyphColors;
      let distanceOffset = 0;
      let blurRadius = 0;
      let strokeWidth = 0;
      let fillOpacity;
      let strokeOpacity;
      let strokeColor;
      let offsetX = 0;
      let offsetY = 0;
      if (isOutline) {
        let { outlineWidth, outlineOffsetX, outlineOffsetY, outlineBlur, outlineOpacity } = this;
        distanceOffset = this._parsePercent(outlineWidth) || 0;
        blurRadius = Math.max(0, this._parsePercent(outlineBlur) || 0);
        fillOpacity = outlineOpacity;
        offsetX = this._parsePercent(outlineOffsetX) || 0;
        offsetY = this._parsePercent(outlineOffsetY) || 0;
      } else {
        strokeWidth = Math.max(0, this._parsePercent(this.strokeWidth) || 0);
        if (strokeWidth) {
          strokeColor = this.strokeColor;
          uniforms.uTroikaStrokeColor.value.set(strokeColor == null ? defaultStrokeColor : strokeColor);
          strokeOpacity = this.strokeOpacity;
          if (strokeOpacity == null) strokeOpacity = 1;
        }
        fillOpacity = this.fillOpacity;
      }
      uniforms.uTroikaDistanceOffset.value = distanceOffset;
      uniforms.uTroikaPositionOffset.value.set(offsetX, offsetY);
      uniforms.uTroikaBlurRadius.value = blurRadius;
      uniforms.uTroikaStrokeWidth.value = strokeWidth;
      uniforms.uTroikaStrokeOpacity.value = strokeOpacity;
      uniforms.uTroikaFillOpacity.value = fillOpacity == null ? 1 : fillOpacity;
      uniforms.uTroikaCurveRadius.value = this.curveRadius || 0;
      let clipRect = this.clipRect;
      if (clipRect && Array.isArray(clipRect) && clipRect.length === 4) {
        uniforms.uTroikaClipRect.value.fromArray(clipRect);
      } else {
        const pad = (this.fontSize || 0.1) * 100;
        uniforms.uTroikaClipRect.value.set(
          blockBounds[0] - pad,
          blockBounds[1] - pad,
          blockBounds[2] + pad,
          blockBounds[3] + pad
        );
      }
      this.geometry.applyClipRect(uniforms.uTroikaClipRect.value);
    }
    uniforms.uTroikaSDFDebug.value = !!this.debugSDF;
    material.polygonOffset = !!this.depthOffset;
    material.polygonOffsetFactor = material.polygonOffsetUnits = this.depthOffset || 0;
    const color = isOutline ? this.outlineColor || 0 : this.color;
    if (color == null) {
      delete material.color;
    } else {
      const colorObj = material.hasOwnProperty("color") ? material.color : material.color = new Color();
      if (color !== colorObj._input || typeof color === "object") {
        colorObj.set(colorObj._input = color);
      }
    }
    let orient = this.orientation || defaultOrient;
    if (orient !== material._orientation) {
      let rotMat = uniforms.uTroikaOrient.value;
      orient = orient.replace(/[^-+xyz]/g, "");
      let match = orient !== defaultOrient && orient.match(/^([-+])([xyz])([-+])([xyz])$/);
      if (match) {
        let [, hSign, hAxis, vSign, vAxis] = match;
        tempVec3a.set(0, 0, 0)[hAxis] = hSign === "-" ? 1 : -1;
        tempVec3b.set(0, 0, 0)[vAxis] = vSign === "-" ? -1 : 1;
        tempMat4.lookAt(origin, tempVec3a.cross(tempVec3b), tempVec3b);
        rotMat.setFromMatrix4(tempMat4);
      } else {
        rotMat.identity();
      }
      material._orientation = orient;
    }
  }
  _parsePercent(value) {
    if (typeof value === "string") {
      let match = value.match(/^(-?[\d.]+)%$/);
      let pct = match ? parseFloat(match[1]) : NaN;
      value = (isNaN(pct) ? 0 : pct / 100) * this.fontSize;
    }
    return value;
  }
  /**
   * Translate a point in local space to an x/y in the text plane.
   */
  localPositionToTextCoords(position2, target2 = new Vector2()) {
    target2.copy(position2);
    const r3 = this.curveRadius;
    if (r3) {
      target2.x = Math.atan2(position2.x, Math.abs(r3) - Math.abs(position2.z)) * Math.abs(r3);
    }
    return target2;
  }
  /**
   * Translate a point in world space to an x/y in the text plane.
   */
  worldPositionToTextCoords(position2, target2 = new Vector2()) {
    tempVec3a.copy(position2);
    return this.localPositionToTextCoords(this.worldToLocal(tempVec3a), target2);
  }
  /**
   * @override Custom raycasting to test against the whole text block's max rectangular bounds
   * TODO is there any reason to make this more granular, like within individual line or glyph rects?
   */
  raycast(raycaster, intersects) {
    const { textRenderInfo, curveRadius } = this;
    if (textRenderInfo) {
      const bounds = textRenderInfo.blockBounds;
      const raycastMesh = curveRadius ? getCurvedRaycastMesh() : getFlatRaycastMesh();
      const geom = raycastMesh.geometry;
      const { position: position2, uv } = geom.attributes;
      for (let i4 = 0; i4 < uv.count; i4++) {
        let x2 = bounds[0] + uv.getX(i4) * (bounds[2] - bounds[0]);
        const y2 = bounds[1] + uv.getY(i4) * (bounds[3] - bounds[1]);
        let z2 = 0;
        if (curveRadius) {
          z2 = curveRadius - Math.cos(x2 / curveRadius) * curveRadius;
          x2 = Math.sin(x2 / curveRadius) * curveRadius;
        }
        position2.setXYZ(i4, x2, y2, z2);
      }
      geom.boundingSphere = this.geometry.boundingSphere;
      geom.boundingBox = this.geometry.boundingBox;
      raycastMesh.matrixWorld = this.matrixWorld;
      raycastMesh.material.side = this.material.side;
      tempArray.length = 0;
      raycastMesh.raycast(raycaster, tempArray);
      for (let i4 = 0; i4 < tempArray.length; i4++) {
        tempArray[i4].object = this;
        intersects.push(tempArray[i4]);
      }
    }
  }
  copy(source) {
    const geom = this.geometry;
    super.copy(source);
    this.geometry = geom;
    COPYABLE_PROPS.forEach((prop) => {
      this[prop] = source[prop];
    });
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
SYNCABLE_PROPS.forEach((prop) => {
  const privateKey = "_private_" + prop;
  Object.defineProperty(Text.prototype, prop, {
    get() {
      return this[privateKey];
    },
    set(value) {
      if (value !== this[privateKey]) {
        this[privateKey] = value;
        this._needsSync = true;
      }
    }
  });
});

// node_modules/@react-three/drei/node_modules/suspend-react/dist/index.js
function shallowEqualArrays(arrA, arrB, equal = (a6, b5) => a6 === b5) {
  if (arrA === arrB) return true;
  if (!arrA || !arrB) return false;
  const len = arrA.length;
  if (arrB.length !== len) return false;
  for (let i4 = 0; i4 < len; i4++) if (!equal(arrA[i4], arrB[i4])) return false;
  return true;
}
var globalCache = [];
function query(fn2, keys, preload2 = false, config = {}) {
  for (const entry2 of globalCache) {
    if (shallowEqualArrays(keys, entry2.keys, entry2.equal)) {
      if (preload2) return void 0;
      if (Object.prototype.hasOwnProperty.call(entry2, "error")) throw entry2.error;
      if (Object.prototype.hasOwnProperty.call(entry2, "response")) return entry2.response;
      if (!preload2) throw entry2.promise;
    }
  }
  const entry = {
    keys,
    equal: config.equal,
    promise: (
      // Execute the promise
      fn2(...keys).then((response) => entry.response = response).then(() => {
        if (config.lifespan && config.lifespan > 0) {
          setTimeout(() => {
            const index2 = globalCache.indexOf(entry);
            if (index2 !== -1) globalCache.splice(index2, 1);
          }, config.lifespan);
        }
      }).catch((error) => entry.error = error)
    )
  };
  globalCache.push(entry);
  if (!preload2) throw entry.promise;
  return void 0;
}
var suspend = (fn2, keys, config) => query(fn2, keys, false, config);
var preload = (fn2, keys, config) => void query(fn2, keys, true, config);
var clear = (keys) => {
  if (keys === void 0 || keys.length === 0) globalCache.splice(0, globalCache.length);
  else {
    const entry = globalCache.find((entry2) => shallowEqualArrays(keys, entry2.keys, entry2.equal));
    if (entry) {
      const index2 = globalCache.indexOf(entry);
      if (index2 !== -1) globalCache.splice(index2, 1);
    }
  }
};

// node_modules/@react-three/drei/core/Text.js
var Text2 = React16.forwardRef(({
  sdfGlyphSize = 64,
  anchorX = "center",
  anchorY = "middle",
  font,
  fontSize = 1,
  children,
  characters,
  onSync,
  ...props
}, ref) => {
  const invalidate = useThree(({
    invalidate: invalidate2
  }) => invalidate2);
  const [troikaMesh] = React16.useState(() => new Text());
  const [nodes, text] = React16.useMemo(() => {
    const n3 = [];
    let t3 = "";
    React16.Children.forEach(children, (child) => {
      if (typeof child === "string" || typeof child === "number") {
        t3 += child;
      } else {
        n3.push(child);
      }
    });
    return [n3, t3];
  }, [children]);
  suspend(() => new Promise((res) => preloadFont({
    font,
    characters
  }, res)), ["troika-text", font, characters]);
  React16.useLayoutEffect(() => void troikaMesh.sync(() => {
    invalidate();
    if (onSync) onSync(troikaMesh);
  }));
  React16.useEffect(() => {
    return () => troikaMesh.dispose();
  }, [troikaMesh]);
  return React16.createElement("primitive", _extends({
    object: troikaMesh,
    ref,
    font,
    text,
    anchorX,
    anchorY,
    fontSize,
    sdfGlyphSize
  }, props), nodes);
});

// node_modules/@react-three/drei/core/Text3D.js
var React17 = __toESM(require_react());
var import_react2 = __toESM(require_react());

// node_modules/@react-three/drei/core/useFont.js
var fontLoader = null;
async function loader(font) {
  if (!fontLoader) fontLoader = new FontLoader();
  let data = typeof font === "string" ? await (await fetch(font)).json() : font;
  return fontLoader.parse(data);
}
function useFont(font) {
  return suspend(loader, [font]);
}
useFont.preload = (font) => preload(loader, [font]);
useFont.clear = (font) => clear([font]);

// node_modules/@react-three/drei/core/Text3D.js
var types = ["string", "number"];
var getTextFromChildren = (children) => {
  let label = "";
  const rest = [];
  React17.Children.forEach(children, (child) => {
    if (types.includes(typeof child)) label += child + "";
    else rest.push(child);
  });
  return [label, ...rest];
};
var Text3D = React17.forwardRef(({
  font: _font,
  letterSpacing = 0,
  lineHeight = 1,
  size = 1,
  height = 0.2,
  bevelThickness = 0.1,
  bevelSize = 0.01,
  bevelEnabled = false,
  bevelOffset = 0,
  bevelSegments = 4,
  curveSegments = 8,
  smooth,
  children,
  ...props
}, fref) => {
  React17.useMemo(() => extend({
    RenamedTextGeometry: TextGeometry
  }), []);
  const ref = React17.useRef(null);
  const font = useFont(_font);
  const opts = (0, import_react2.useMemo)(() => {
    return {
      font,
      size,
      height,
      bevelThickness,
      bevelSize,
      bevelEnabled,
      bevelSegments,
      bevelOffset,
      curveSegments,
      letterSpacing,
      lineHeight
    };
  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);
  const [label, ...rest] = (0, import_react2.useMemo)(() => getTextFromChildren(children), [children]);
  const args = React17.useMemo(() => [label, opts], [label, opts]);
  React17.useLayoutEffect(() => {
    if (smooth) {
      ref.current.geometry = mergeVertices(ref.current.geometry, smooth);
      ref.current.geometry.computeVertexNormals();
    }
  }, [args, smooth]);
  React17.useImperativeHandle(fref, () => ref.current, []);
  return React17.createElement("mesh", _extends({}, props, {
    ref
  }), React17.createElement("renamedTextGeometry", {
    args
  }), rest);
});

// node_modules/@react-three/drei/core/Effects.js
var React18 = __toESM(require_react());
var isWebGL2Available = () => {
  try {
    var canvas = document.createElement("canvas");
    return !!(window.WebGL2RenderingContext && canvas.getContext("webgl2"));
  } catch (e3) {
    return false;
  }
};
var Effects = React18.forwardRef(({
  children,
  multisamping = 8,
  renderIndex = 1,
  disableRender,
  disableGamma,
  disableRenderPass,
  depthBuffer = true,
  stencilBuffer = false,
  anisotropy = 1,
  encoding,
  type,
  ...props
}, ref) => {
  React18.useMemo(() => extend({
    EffectComposer,
    RenderPass,
    ShaderPass
  }), []);
  const composer = React18.useRef();
  const {
    scene,
    camera,
    gl,
    size,
    viewport
  } = useThree();
  const [target2] = React18.useState(() => {
    const t3 = new WebGLRenderTarget(size.width, size.height, {
      type: type || HalfFloatType,
      format: RGBAFormat,
      depthBuffer,
      stencilBuffer,
      anisotropy
    });
    if (type === UnsignedByteType && encoding != null) {
      if ("colorSpace" in t3) t3.texture.colorSpace = encoding;
      else t3.texture.encoding = encoding;
    }
    t3.samples = multisamping;
    return t3;
  });
  React18.useEffect(() => {
    var _composer$current, _composer$current2;
    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);
    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(viewport.dpr);
  }, [gl, size, viewport.dpr]);
  useFrame(() => {
    var _composer$current3;
    if (!disableRender) (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();
  }, renderIndex);
  const passes = [];
  if (!disableRenderPass) passes.push(React18.createElement("renderPass", {
    key: "renderpass",
    attach: `passes-${passes.length}`,
    args: [scene, camera]
  }));
  if (!disableGamma) passes.push(React18.createElement("shaderPass", {
    attach: `passes-${passes.length}`,
    key: "gammapass",
    args: [GammaCorrectionShader]
  }));
  React18.Children.forEach(children, (el) => {
    el && passes.push(React18.cloneElement(el, {
      key: passes.length,
      attach: `passes-${passes.length}`
    }));
  });
  return React18.createElement("effectComposer", _extends({
    ref: react_merge_refs_esm_default([ref, composer]),
    args: [gl, target2]
  }, props), passes);
});

// node_modules/@react-three/drei/core/GradientTexture.js
var React19 = __toESM(require_react());
function GradientTexture({
  stops,
  colors: colors2,
  size = 1024,
  ...props
}) {
  const canvas = React19.useMemo(() => {
    const canvas2 = document.createElement("canvas");
    const context10 = canvas2.getContext("2d");
    canvas2.width = 16;
    canvas2.height = size;
    const gradient = context10.createLinearGradient(0, 0, 0, size);
    let i4 = stops.length;
    while (i4--) {
      gradient.addColorStop(stops[i4], colors2[i4]);
    }
    context10.fillStyle = gradient;
    context10.fillRect(0, 0, 16, size);
    return canvas2;
  }, [stops]);
  return React19.createElement("canvasTexture", _extends({
    args: [canvas],
    attach: "map"
  }, props));
}

// node_modules/@react-three/drei/core/Image.js
var React20 = __toESM(require_react());

// node_modules/@react-three/drei/core/shaderMaterial.js
function shaderMaterial(uniforms, vertexShader2, fragmentShader2, onInit) {
  const material = class material extends ShaderMaterial {
    constructor(parameters = {}) {
      const entries = Object.entries(uniforms);
      super({
        uniforms: entries.reduce((acc, [name, value]) => {
          const uniform = UniformsUtils.clone({
            [name]: {
              value
            }
          });
          return {
            ...acc,
            ...uniform
          };
        }, {}),
        vertexShader: vertexShader2,
        fragmentShader: fragmentShader2
      });
      this.key = "";
      entries.forEach(([name]) => Object.defineProperty(this, name, {
        get: () => this.uniforms[name].value,
        set: (v5) => this.uniforms[name].value = v5
      }));
      Object.assign(this, parameters);
      if (onInit) onInit(this);
    }
  };
  material.key = MathUtils.generateUUID();
  return material;
}

// node_modules/@react-three/drei/core/useTexture.js
var import_react3 = __toESM(require_react());
var IsObject = (url) => url === Object(url) && !Array.isArray(url) && typeof url !== "function";
function useTexture(input, onLoad) {
  const gl = useThree((state) => state.gl);
  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);
  (0, import_react3.useLayoutEffect)(() => {
    onLoad == null ? void 0 : onLoad(textures);
  }, [onLoad]);
  (0, import_react3.useEffect)(() => {
    const array = Array.isArray(textures) ? textures : [textures];
    array.forEach(gl.initTexture);
  }, [gl, textures]);
  if (IsObject(input)) {
    const keys = Object.keys(input);
    const keyed = {};
    keys.forEach((key) => Object.assign(keyed, {
      [key]: textures[keys.indexOf(key)]
    }));
    return keyed;
  } else {
    return textures;
  }
}
useTexture.preload = (url) => useLoader.preload(TextureLoader, url);
useTexture.clear = (input) => useLoader.clear(TextureLoader, input);

// node_modules/@react-three/drei/core/Image.js
var ImageMaterialImpl = shaderMaterial(
  {
    color: new Color("white"),
    scale: [1, 1],
    imageBounds: [1, 1],
    map: null,
    zoom: 1,
    grayscale: 0,
    opacity: 1
  },
  /* glsl */
  `
  varying vec2 vUv;
  void main() {
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);
    vUv = uv;
  }
`,
  /* glsl */
  `
  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44
  varying vec2 vUv;
  uniform vec2 scale;
  uniform vec2 imageBounds;
  uniform vec3 color;
  uniform sampler2D map;
  uniform float zoom;
  uniform float grayscale;
  uniform float opacity;
  const vec3 luma = vec3(.299, 0.587, 0.114);
  vec4 toGrayscale(vec4 color, float intensity) {
    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);
  }
  vec2 aspect(vec2 size) {
    return size / min(size.x, size.y);
  }
  void main() {
    vec2 s = aspect(scale);
    vec2 i = aspect(imageBounds);
    float rs = s.x / s.y;
    float ri = i.x / i.y;
    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);
    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;
    vec2 uv = vUv * s / new + offset;
    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);
    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, opacity), grayscale);
    
    #include <tonemapping_fragment>
    #include <encodings_fragment>
  }
`
);
var ImageBase = React20.forwardRef(({
  children,
  color,
  segments = 1,
  scale: scale4 = 1,
  zoom = 1,
  grayscale = 0,
  opacity = 1,
  texture,
  toneMapped,
  transparent,
  ...props
}, ref) => {
  extend({
    ImageMaterial: ImageMaterialImpl
  });
  const planeBounds = Array.isArray(scale4) ? [scale4[0], scale4[1]] : [scale4, scale4];
  const imageBounds = [texture.image.width, texture.image.height];
  return React20.createElement("mesh", _extends({
    ref,
    scale: Array.isArray(scale4) ? [...scale4, 1] : scale4
  }, props), React20.createElement("planeGeometry", {
    args: [1, 1, segments, segments]
  }), React20.createElement("imageMaterial", {
    color,
    map: texture,
    zoom,
    grayscale,
    opacity,
    scale: planeBounds,
    imageBounds,
    toneMapped,
    transparent
  }), children);
});
var ImageWithUrl = React20.forwardRef(({
  url,
  ...props
}, ref) => {
  const texture = useTexture(url);
  return React20.createElement(ImageBase, _extends({}, props, {
    texture,
    ref
  }));
});
var ImageWithTexture = React20.forwardRef(({
  url: _url,
  ...props
}, ref) => {
  return React20.createElement(ImageBase, _extends({}, props, {
    ref
  }));
});
var Image = React20.forwardRef((props, ref) => {
  if (props.url) return React20.createElement(ImageWithUrl, _extends({}, props, {
    ref
  }));
  else if (props.texture) return React20.createElement(ImageWithTexture, _extends({}, props, {
    ref
  }));
  else throw new Error("<Image /> requires a url or texture");
});

// node_modules/@react-three/drei/core/Edges.js
var React21 = __toESM(require_react());
var Edges = React21.forwardRef(({
  userData,
  children,
  geometry: geometry2,
  threshold = 15,
  color = "black",
  ...props
}, fref) => {
  const ref = React21.useRef(null);
  React21.useLayoutEffect(() => {
    const parent = ref.current.parent;
    if (parent) {
      const geom = geometry2 || parent.geometry;
      if (geom !== ref.current.userData.currentGeom || threshold !== ref.current.userData.currentThreshold) {
        ref.current.userData.currentGeom = geom;
        ref.current.userData.currentThreshold = threshold;
        ref.current.geometry = new EdgesGeometry(geom, threshold);
      }
    }
  });
  React21.useImperativeHandle(fref, () => ref.current);
  return React21.createElement("lineSegments", _extends({
    ref,
    raycast: () => null
  }, props), children ? children : React21.createElement("lineBasicMaterial", {
    color
  }));
});

// node_modules/@react-three/drei/core/Trail.js
var React22 = __toESM(require_react());

// node_modules/meshline/dist/index.js
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
function memcpy(src, srcOffset, dst, dstOffset, length3) {
  let i4;
  src = src.subarray || src.slice ? src : src.buffer;
  dst = dst.subarray || dst.slice ? dst : dst.buffer;
  src = srcOffset ? src.subarray ? src.subarray(srcOffset, length3 && srcOffset + length3) : src.slice(srcOffset, length3 && srcOffset + length3) : src;
  if (dst.set) {
    dst.set(src, dstOffset);
  } else {
    for (i4 = 0; i4 < src.length; i4++)
      dst[i4 + dstOffset] = src[i4];
  }
  return dst;
}
function convertPoints(points) {
  if (points instanceof Float32Array)
    return points;
  if (points instanceof BufferGeometry)
    return points.getAttribute("position").array;
  return points.map((p3) => {
    const isArray3 = Array.isArray(p3);
    return p3 instanceof Vector3 ? [p3.x, p3.y, p3.z] : p3 instanceof Vector2 ? [p3.x, p3.y, 0] : isArray3 && p3.length === 3 ? [p3[0], p3[1], p3[2]] : isArray3 && p3.length === 2 ? [p3[0], p3[1], 0] : p3;
  }).flat();
}
var MeshLineGeometry = class extends BufferGeometry {
  constructor() {
    super();
    __publicField(this, "type", "MeshLine");
    __publicField(this, "isMeshLine", true);
    __publicField(this, "positions", []);
    __publicField(this, "previous", []);
    __publicField(this, "next", []);
    __publicField(this, "side", []);
    __publicField(this, "width", []);
    __publicField(this, "indices_array", []);
    __publicField(this, "uvs", []);
    __publicField(this, "counters", []);
    __publicField(this, "widthCallback", null);
    __publicField(this, "_attributes");
    __publicField(this, "_points", []);
    __publicField(this, "points");
    __publicField(this, "matrixWorld", new Matrix4());
    Object.defineProperties(this, {
      points: {
        enumerable: true,
        get() {
          return this._points;
        },
        set(value) {
          this.setPoints(value, this.widthCallback);
        }
      }
    });
  }
  setMatrixWorld(matrixWorld) {
    this.matrixWorld = matrixWorld;
  }
  setPoints(points, wcb) {
    points = convertPoints(points);
    this._points = points;
    this.widthCallback = wcb != null ? wcb : null;
    this.positions = [];
    this.counters = [];
    if (points.length && points[0] instanceof Vector3) {
      for (let j2 = 0; j2 < points.length; j2++) {
        const p3 = points[j2];
        const c5 = j2 / (points.length - 1);
        this.positions.push(p3.x, p3.y, p3.z);
        this.positions.push(p3.x, p3.y, p3.z);
        this.counters.push(c5);
        this.counters.push(c5);
      }
    } else {
      for (let j2 = 0; j2 < points.length; j2 += 3) {
        const c5 = j2 / (points.length - 1);
        this.positions.push(points[j2], points[j2 + 1], points[j2 + 2]);
        this.positions.push(points[j2], points[j2 + 1], points[j2 + 2]);
        this.counters.push(c5);
        this.counters.push(c5);
      }
    }
    this.process();
  }
  compareV3(a6, b5) {
    const aa2 = a6 * 6;
    const ab = b5 * 6;
    return this.positions[aa2] === this.positions[ab] && this.positions[aa2 + 1] === this.positions[ab + 1] && this.positions[aa2 + 2] === this.positions[ab + 2];
  }
  copyV3(a6) {
    const aa2 = a6 * 6;
    return [this.positions[aa2], this.positions[aa2 + 1], this.positions[aa2 + 2]];
  }
  process() {
    const l3 = this.positions.length / 6;
    this.previous = [];
    this.next = [];
    this.side = [];
    this.width = [];
    this.indices_array = [];
    this.uvs = [];
    let w2;
    let v5;
    if (this.compareV3(0, l3 - 1)) {
      v5 = this.copyV3(l3 - 2);
    } else {
      v5 = this.copyV3(0);
    }
    this.previous.push(v5[0], v5[1], v5[2]);
    this.previous.push(v5[0], v5[1], v5[2]);
    for (let j2 = 0; j2 < l3; j2++) {
      this.side.push(1);
      this.side.push(-1);
      if (this.widthCallback)
        w2 = this.widthCallback(j2 / (l3 - 1));
      else
        w2 = 1;
      this.width.push(w2);
      this.width.push(w2);
      this.uvs.push(j2 / (l3 - 1), 0);
      this.uvs.push(j2 / (l3 - 1), 1);
      if (j2 < l3 - 1) {
        v5 = this.copyV3(j2);
        this.previous.push(v5[0], v5[1], v5[2]);
        this.previous.push(v5[0], v5[1], v5[2]);
        const n3 = j2 * 2;
        this.indices_array.push(n3, n3 + 1, n3 + 2);
        this.indices_array.push(n3 + 2, n3 + 1, n3 + 3);
      }
      if (j2 > 0) {
        v5 = this.copyV3(j2);
        this.next.push(v5[0], v5[1], v5[2]);
        this.next.push(v5[0], v5[1], v5[2]);
      }
    }
    if (this.compareV3(l3 - 1, 0)) {
      v5 = this.copyV3(1);
    } else {
      v5 = this.copyV3(l3 - 1);
    }
    this.next.push(v5[0], v5[1], v5[2]);
    this.next.push(v5[0], v5[1], v5[2]);
    if (!this._attributes || this._attributes.position.count !== this.counters.length) {
      this._attributes = {
        position: new BufferAttribute(new Float32Array(this.positions), 3),
        previous: new BufferAttribute(new Float32Array(this.previous), 3),
        next: new BufferAttribute(new Float32Array(this.next), 3),
        side: new BufferAttribute(new Float32Array(this.side), 1),
        width: new BufferAttribute(new Float32Array(this.width), 1),
        uv: new BufferAttribute(new Float32Array(this.uvs), 2),
        index: new BufferAttribute(new Uint16Array(this.indices_array), 1),
        counters: new BufferAttribute(new Float32Array(this.counters), 1)
      };
    } else {
      this._attributes.position.copyArray(new Float32Array(this.positions));
      this._attributes.position.needsUpdate = true;
      this._attributes.previous.copyArray(new Float32Array(this.previous));
      this._attributes.previous.needsUpdate = true;
      this._attributes.next.copyArray(new Float32Array(this.next));
      this._attributes.next.needsUpdate = true;
      this._attributes.side.copyArray(new Float32Array(this.side));
      this._attributes.side.needsUpdate = true;
      this._attributes.width.copyArray(new Float32Array(this.width));
      this._attributes.width.needsUpdate = true;
      this._attributes.uv.copyArray(new Float32Array(this.uvs));
      this._attributes.uv.needsUpdate = true;
      this._attributes.index.copyArray(new Uint16Array(this.indices_array));
      this._attributes.index.needsUpdate = true;
    }
    this.setAttribute("position", this._attributes.position);
    this.setAttribute("previous", this._attributes.previous);
    this.setAttribute("next", this._attributes.next);
    this.setAttribute("side", this._attributes.side);
    this.setAttribute("width", this._attributes.width);
    this.setAttribute("uv", this._attributes.uv);
    this.setAttribute("counters", this._attributes.counters);
    this.setAttribute("position", this._attributes.position);
    this.setAttribute("previous", this._attributes.previous);
    this.setAttribute("next", this._attributes.next);
    this.setAttribute("side", this._attributes.side);
    this.setAttribute("width", this._attributes.width);
    this.setAttribute("uv", this._attributes.uv);
    this.setAttribute("counters", this._attributes.counters);
    this.setIndex(this._attributes.index);
    this.computeBoundingSphere();
    this.computeBoundingBox();
  }
  advance({ x: x2, y: y2, z: z2 }) {
    const positions = this._attributes.position.array;
    const previous = this._attributes.previous.array;
    const next = this._attributes.next.array;
    const l3 = positions.length;
    memcpy(positions, 0, previous, 0, l3);
    memcpy(positions, 6, positions, 0, l3 - 6);
    positions[l3 - 6] = x2;
    positions[l3 - 5] = y2;
    positions[l3 - 4] = z2;
    positions[l3 - 3] = x2;
    positions[l3 - 2] = y2;
    positions[l3 - 1] = z2;
    memcpy(positions, 6, next, 0, l3 - 6);
    next[l3 - 6] = x2;
    next[l3 - 5] = y2;
    next[l3 - 4] = z2;
    next[l3 - 3] = x2;
    next[l3 - 2] = y2;
    next[l3 - 1] = z2;
    this._attributes.position.needsUpdate = true;
    this._attributes.previous.needsUpdate = true;
    this._attributes.next.needsUpdate = true;
  }
};
var vertexShader = `
  #include <common>
  #include <logdepthbuf_pars_vertex>
  #include <fog_pars_vertex>
  #include <clipping_planes_pars_vertex>

  attribute vec3 previous;
  attribute vec3 next;
  attribute float side;
  attribute float width;
  attribute float counters;
  
  uniform vec2 resolution;
  uniform float lineWidth;
  uniform vec3 color;
  uniform float opacity;
  uniform float sizeAttenuation;
  
  varying vec2 vUV;
  varying vec4 vColor;
  varying float vCounters;
  
  vec2 fix(vec4 i, float aspect) {
    vec2 res = i.xy / i.w;
    res.x *= aspect;
    return res;
  }
  
  void main() {
    float aspect = resolution.x / resolution.y;
    vColor = vec4(color, opacity);
    vUV = uv;
    vCounters = counters;
  
    mat4 m = projectionMatrix * modelViewMatrix;
    vec4 finalPosition = m * vec4(position, 1.0) * aspect;
    vec4 prevPos = m * vec4(previous, 1.0);
    vec4 nextPos = m * vec4(next, 1.0);
  
    vec2 currentP = fix(finalPosition, aspect);
    vec2 prevP = fix(prevPos, aspect);
    vec2 nextP = fix(nextPos, aspect);
  
    float w = lineWidth * width;
  
    vec2 dir;
    if (nextP == currentP) dir = normalize(currentP - prevP);
    else if (prevP == currentP) dir = normalize(nextP - currentP);
    else {
      vec2 dir1 = normalize(currentP - prevP);
      vec2 dir2 = normalize(nextP - currentP);
      dir = normalize(dir1 + dir2);
  
      vec2 perp = vec2(-dir1.y, dir1.x);
      vec2 miter = vec2(-dir.y, dir.x);
      //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);
    }
  
    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;
    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);
    normal.xy *= .5 * w;
    //normal *= projectionMatrix;
    if (sizeAttenuation == 0.) {
      normal.xy *= finalPosition.w;
      normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy * aspect;
    }
  
    finalPosition.xy += normal.xy * side;
    gl_Position = finalPosition;
    #include <logdepthbuf_vertex>
    #include <fog_vertex>
    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
    #include <clipping_planes_vertex>
    #include <fog_vertex>
  }
`;
var version = (() => parseInt(REVISION.replace(/\D+/g, "")))();
var colorspace_fragment = version >= 154 ? "colorspace_fragment" : "encodings_fragment";
var fragmentShader = `
  #include <fog_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  
  uniform sampler2D map;
  uniform sampler2D alphaMap;
  uniform float useGradient;
  uniform float useMap;
  uniform float useAlphaMap;
  uniform float useDash;
  uniform float dashArray;
  uniform float dashOffset;
  uniform float dashRatio;
  uniform float visibility;
  uniform float alphaTest;
  uniform vec2 repeat;
  uniform vec3 gradient[2];
  
  varying vec2 vUV;
  varying vec4 vColor;
  varying float vCounters;
  
  void main() {
    #include <logdepthbuf_fragment>
    vec4 diffuseColor = vColor;
    if (useGradient == 1.) diffuseColor = vec4(mix(gradient[0], gradient[1], vCounters), 1.0);
    if (useMap == 1.) diffuseColor *= texture2D(map, vUV * repeat);
    if (useAlphaMap == 1.) diffuseColor.a *= texture2D(alphaMap, vUV * repeat).a;
    if (diffuseColor.a < alphaTest) discard;
    if (useDash == 1.) diffuseColor.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));
    diffuseColor.a *= step(vCounters, visibility);
    #include <clipping_planes_fragment>
    gl_FragColor = diffuseColor;     
    #include <fog_fragment>
    #include <tonemapping_fragment>
    #include <${colorspace_fragment}>
  }
`;
var MeshLineMaterial = class extends ShaderMaterial {
  constructor(parameters) {
    super({
      uniforms: {
        ...UniformsLib.fog,
        lineWidth: { value: 1 },
        map: { value: null },
        useMap: { value: 0 },
        alphaMap: { value: null },
        useAlphaMap: { value: 0 },
        color: { value: new Color(16777215) },
        gradient: { value: [new Color(16711680), new Color(65280)] },
        opacity: { value: 1 },
        resolution: { value: new Vector2(1, 1) },
        sizeAttenuation: { value: 1 },
        dashArray: { value: 0 },
        dashOffset: { value: 0 },
        dashRatio: { value: 0.5 },
        useDash: { value: 0 },
        useGradient: { value: 0 },
        visibility: { value: 1 },
        alphaTest: { value: 0 },
        repeat: { value: new Vector2(1, 1) }
      },
      vertexShader,
      fragmentShader
    });
    __publicField(this, "lineWidth");
    __publicField(this, "map");
    __publicField(this, "useMap");
    __publicField(this, "alphaMap");
    __publicField(this, "useAlphaMap");
    __publicField(this, "color");
    __publicField(this, "gradient");
    __publicField(this, "resolution");
    __publicField(this, "sizeAttenuation");
    __publicField(this, "dashArray");
    __publicField(this, "dashOffset");
    __publicField(this, "dashRatio");
    __publicField(this, "useDash");
    __publicField(this, "useGradient");
    __publicField(this, "visibility");
    __publicField(this, "repeat");
    this.type = "MeshLineMaterial";
    Object.defineProperties(this, {
      lineWidth: {
        enumerable: true,
        get() {
          return this.uniforms.lineWidth.value;
        },
        set(value) {
          this.uniforms.lineWidth.value = value;
        }
      },
      map: {
        enumerable: true,
        get() {
          return this.uniforms.map.value;
        },
        set(value) {
          this.uniforms.map.value = value;
        }
      },
      useMap: {
        enumerable: true,
        get() {
          return this.uniforms.useMap.value;
        },
        set(value) {
          this.uniforms.useMap.value = value;
        }
      },
      alphaMap: {
        enumerable: true,
        get() {
          return this.uniforms.alphaMap.value;
        },
        set(value) {
          this.uniforms.alphaMap.value = value;
        }
      },
      useAlphaMap: {
        enumerable: true,
        get() {
          return this.uniforms.useAlphaMap.value;
        },
        set(value) {
          this.uniforms.useAlphaMap.value = value;
        }
      },
      color: {
        enumerable: true,
        get() {
          return this.uniforms.color.value;
        },
        set(value) {
          this.uniforms.color.value = value;
        }
      },
      gradient: {
        enumerable: true,
        get() {
          return this.uniforms.gradient.value;
        },
        set(value) {
          this.uniforms.gradient.value = value;
        }
      },
      opacity: {
        enumerable: true,
        get() {
          return this.uniforms.opacity.value;
        },
        set(value) {
          this.uniforms.opacity.value = value;
        }
      },
      resolution: {
        enumerable: true,
        get() {
          return this.uniforms.resolution.value;
        },
        set(value) {
          this.uniforms.resolution.value.copy(value);
        }
      },
      sizeAttenuation: {
        enumerable: true,
        get() {
          return this.uniforms.sizeAttenuation.value;
        },
        set(value) {
          this.uniforms.sizeAttenuation.value = value;
        }
      },
      dashArray: {
        enumerable: true,
        get() {
          return this.uniforms.dashArray.value;
        },
        set(value) {
          this.uniforms.dashArray.value = value;
          this.useDash = value !== 0 ? 1 : 0;
        }
      },
      dashOffset: {
        enumerable: true,
        get() {
          return this.uniforms.dashOffset.value;
        },
        set(value) {
          this.uniforms.dashOffset.value = value;
        }
      },
      dashRatio: {
        enumerable: true,
        get() {
          return this.uniforms.dashRatio.value;
        },
        set(value) {
          this.uniforms.dashRatio.value = value;
        }
      },
      useDash: {
        enumerable: true,
        get() {
          return this.uniforms.useDash.value;
        },
        set(value) {
          this.uniforms.useDash.value = value;
        }
      },
      useGradient: {
        enumerable: true,
        get() {
          return this.uniforms.useGradient.value;
        },
        set(value) {
          this.uniforms.useGradient.value = value;
        }
      },
      visibility: {
        enumerable: true,
        get() {
          return this.uniforms.visibility.value;
        },
        set(value) {
          this.uniforms.visibility.value = value;
        }
      },
      alphaTest: {
        enumerable: true,
        get() {
          return this.uniforms.alphaTest.value;
        },
        set(value) {
          this.uniforms.alphaTest.value = value;
        }
      },
      repeat: {
        enumerable: true,
        get() {
          return this.uniforms.repeat.value;
        },
        set(value) {
          this.uniforms.repeat.value.copy(value);
        }
      }
    });
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.lineWidth = source.lineWidth;
    this.map = source.map;
    this.useMap = source.useMap;
    this.alphaMap = source.alphaMap;
    this.useAlphaMap = source.useAlphaMap;
    this.color.copy(source.color);
    this.gradient = source.gradient;
    this.opacity = source.opacity;
    this.resolution.copy(source.resolution);
    this.sizeAttenuation = source.sizeAttenuation;
    this.dashArray = source.dashArray;
    this.dashOffset = source.dashOffset;
    this.dashRatio = source.dashRatio;
    this.useDash = source.useDash;
    this.useGradient = source.useGradient;
    this.visibility = source.visibility;
    this.alphaTest = source.alphaTest;
    this.repeat.copy(source.repeat);
    return this;
  }
};

// node_modules/@react-three/drei/core/Trail.js
var defaults = {
  width: 0.2,
  length: 1,
  decay: 1,
  local: false,
  stride: 0,
  interval: 1
};
var shiftLeft = (collection, steps = 1) => {
  collection.set(collection.subarray(steps));
  collection.fill(-Infinity, -steps);
  return collection;
};
function useTrail(target2, settings) {
  const {
    length: length3,
    local,
    decay,
    interval,
    stride
  } = {
    ...defaults,
    ...settings
  };
  const points = React22.useRef();
  const [worldPosition] = React22.useState(() => new Vector3());
  React22.useLayoutEffect(() => {
    if (target2) {
      points.current = Float32Array.from({
        length: length3 * 10 * 3
      }, (_2, i4) => target2.position.getComponent(i4 % 3));
    }
  }, [length3, target2]);
  const prevPosition = React22.useRef(new Vector3());
  const frameCount = React22.useRef(0);
  useFrame(() => {
    if (!target2) return;
    if (!points.current) return;
    if (frameCount.current === 0) {
      let newPosition;
      if (local) {
        newPosition = target2.position;
      } else {
        target2.getWorldPosition(worldPosition);
        newPosition = worldPosition;
      }
      const steps = 1 * decay;
      for (let i4 = 0; i4 < steps; i4++) {
        if (newPosition.distanceTo(prevPosition.current) < stride) continue;
        shiftLeft(points.current, 3);
        points.current.set(newPosition.toArray(), points.current.length - 3);
      }
      prevPosition.current.copy(newPosition);
    }
    frameCount.current++;
    frameCount.current = frameCount.current % interval;
  });
  return points;
}
var Trail = React22.forwardRef((props, forwardRef70) => {
  const {
    children
  } = props;
  const {
    width,
    length: length3,
    decay,
    local,
    stride,
    interval
  } = {
    ...defaults,
    ...props
  };
  const {
    color = "hotpink",
    attenuation,
    target: target2
  } = props;
  const size = useThree((s3) => s3.size);
  const scene = useThree((s3) => s3.scene);
  const ref = React22.useRef(null);
  const [anchor, setAnchor] = React22.useState(null);
  const points = useTrail(anchor, {
    length: length3,
    decay,
    local,
    stride,
    interval
  });
  React22.useEffect(() => {
    const t3 = (target2 == null ? void 0 : target2.current) || ref.current.children.find((o3) => {
      return o3 instanceof Object3D;
    });
    if (t3) {
      setAnchor(t3);
    }
  }, [points, target2]);
  const geo = React22.useMemo(() => new MeshLineGeometry(), []);
  const mat2 = React22.useMemo(() => {
    var _matOverride;
    const m2 = new MeshLineMaterial({
      lineWidth: 0.1 * width,
      color,
      sizeAttenuation: 1,
      resolution: new Vector2(size.width, size.height)
    });
    let matOverride;
    if (children) {
      if (Array.isArray(children)) {
        matOverride = children.find((child) => {
          const c5 = child;
          return typeof c5.type === "string" && c5.type === "meshLineMaterial";
        });
      } else {
        const c5 = children;
        if (typeof c5.type === "string" && c5.type === "meshLineMaterial") {
          matOverride = c5;
        }
      }
    }
    if (typeof ((_matOverride = matOverride) == null ? void 0 : _matOverride.props) === "object") {
      m2.setValues(matOverride.props);
    }
    return m2;
  }, [width, color, size, children]);
  React22.useEffect(() => {
    mat2.uniforms.resolution.value.set(size.width, size.height);
  }, [size]);
  useFrame(() => {
    if (!points.current) return;
    geo.setPoints(points.current, attenuation);
  });
  return React22.createElement("group", null, createPortal(React22.createElement("mesh", {
    ref: forwardRef70,
    geometry: geo,
    material: mat2
  }), scene), React22.createElement("group", {
    ref
  }, children));
});

// node_modules/@react-three/drei/core/Sampler.js
var React23 = __toESM(require_react());
function useSurfaceSampler(mesh, count = 16, transform, weight, instanceMesh) {
  const [buffer2, setBuffer2] = React23.useState(() => {
    const arr = Array.from({
      length: count
    }, () => [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]).flat();
    return new InstancedBufferAttribute(Float32Array.from(arr), 16);
  });
  React23.useLayoutEffect(() => {
    if (typeof mesh.current === "undefined") return;
    const sampler = new MeshSurfaceSampler(mesh.current);
    if (weight) {
      sampler.setWeightAttribute(weight);
    }
    sampler.build();
    const position2 = new Vector3();
    const normal2 = new Vector3();
    const color = new Color();
    const dummy2 = new Object3D();
    mesh.current.updateMatrixWorld(true);
    for (let i4 = 0; i4 < count; i4++) {
      sampler.sample(position2, normal2, color);
      if (typeof transform === "function") {
        transform({
          dummy: dummy2,
          sampledMesh: mesh.current,
          position: position2,
          normal: normal2,
          color
        }, i4);
      } else {
        dummy2.position.copy(position2);
      }
      dummy2.updateMatrix();
      if (instanceMesh != null && instanceMesh.current) {
        instanceMesh.current.setMatrixAt(i4, dummy2.matrix);
      }
      dummy2.matrix.toArray(buffer2.array, i4 * 16);
    }
    if (instanceMesh != null && instanceMesh.current) {
      instanceMesh.current.instanceMatrix.needsUpdate = true;
    }
    buffer2.needsUpdate = true;
    setBuffer2(buffer2.clone());
  }, [mesh, instanceMesh, weight, count, transform]);
  return buffer2;
}
function Sampler({
  children,
  weight,
  transform,
  instances,
  mesh,
  count = 16,
  ...props
}) {
  const group = React23.useRef(null);
  const instancedRef = React23.useRef(null);
  const meshToSampleRef = React23.useRef(null);
  React23.useLayoutEffect(() => {
    var _instances$current, _mesh$current;
    instancedRef.current = (_instances$current = instances == null ? void 0 : instances.current) !== null && _instances$current !== void 0 ? _instances$current : group.current.children.find((c5) => c5.hasOwnProperty("instanceMatrix"));
    meshToSampleRef.current = (_mesh$current = mesh == null ? void 0 : mesh.current) !== null && _mesh$current !== void 0 ? _mesh$current : group.current.children.find((c5) => c5.type === "Mesh");
  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);
  useSurfaceSampler(meshToSampleRef, count, transform, weight, instancedRef);
  return React23.createElement("group", _extends({
    ref: group
  }, props), children);
}

// node_modules/@react-three/drei/core/ComputedAttribute.js
var React24 = __toESM(require_react());
var ComputedAttribute = ({
  compute,
  name,
  ...props
}) => {
  const [bufferAttribute] = React24.useState(() => new BufferAttribute(new Float32Array(0), 1));
  const primitive = React24.useRef(null);
  React24.useLayoutEffect(() => {
    if (primitive.current) {
      var _ref;
      const parent = (_ref = primitive.current.parent) !== null && _ref !== void 0 ? _ref : primitive.current.__r3f.parent;
      const attr = compute(parent);
      primitive.current.copy(attr);
    }
  }, [compute]);
  return React24.createElement("primitive", _extends({
    ref: primitive,
    object: bufferAttribute,
    attach: `attributes-${name}`
  }, props));
};

// node_modules/@react-three/drei/core/Clone.js
var React25 = __toESM(require_react());
var import_lodash = __toESM(require_lodash());
function createSpread(child, {
  keys = ["near", "far", "color", "distance", "decay", "penumbra", "angle", "intensity", "skeleton", "visible", "castShadow", "receiveShadow", "morphTargetDictionary", "morphTargetInfluences", "name", "geometry", "material", "position", "rotation", "scale", "up", "userData", "bindMode", "bindMatrix", "bindMatrixInverse", "skeleton"],
  deep,
  inject,
  castShadow,
  receiveShadow
}) {
  let spread = (0, import_lodash.default)(child, keys);
  if (deep) {
    if (spread.geometry && deep !== "materialsOnly") spread.geometry = spread.geometry.clone();
    if (spread.material && deep !== "geometriesOnly") spread.material = spread.material.clone();
  }
  if (inject) {
    if (typeof inject === "function") spread = {
      ...spread,
      children: inject(child)
    };
    else if (React25.isValidElement(inject)) spread = {
      ...spread,
      children: inject
    };
    else spread = {
      ...spread,
      ...inject
    };
  }
  if (child instanceof Mesh) {
    if (castShadow) spread.castShadow = true;
    if (receiveShadow) spread.receiveShadow = true;
  }
  return spread;
}
var Clone = React25.forwardRef(({
  isChild = false,
  object,
  children,
  deep,
  castShadow,
  receiveShadow,
  inject,
  keys,
  ...props
}, forwardRef70) => {
  var _object;
  const config = {
    keys,
    deep,
    inject,
    castShadow,
    receiveShadow
  };
  object = React25.useMemo(() => {
    if (isChild === false && !Array.isArray(object)) {
      let isSkinned = false;
      object.traverse((object2) => {
        if (object2.isSkinnedMesh) isSkinned = true;
      });
      if (isSkinned) return SkeletonUtils.clone(object);
    }
    return object;
  }, [object, isChild]);
  if (Array.isArray(object)) {
    return React25.createElement("group", _extends({}, props, {
      ref: forwardRef70
    }), object.map((o3) => React25.createElement(Clone, _extends({
      key: o3.uuid,
      object: o3
    }, config))), children);
  }
  const {
    children: injectChildren,
    ...spread
  } = createSpread(object, config);
  const Element = object.type[0].toLowerCase() + object.type.slice(1);
  return React25.createElement(Element, _extends({}, spread, props, {
    ref: forwardRef70
  }), ((_object = object) == null ? void 0 : _object.children).map((child) => {
    if (child.type === "Bone") return React25.createElement("primitive", _extends({
      key: child.uuid,
      object: child
    }, config));
    return React25.createElement(Clone, _extends({
      key: child.uuid,
      object: child
    }, config, {
      isChild: true
    }));
  }), children, injectChildren);
});

// node_modules/@react-three/drei/core/MarchingCubes.js
var React26 = __toESM(require_react());
var globalContext = React26.createContext(null);
var MarchingCubes2 = React26.forwardRef(({
  resolution = 28,
  maxPolyCount = 1e4,
  enableUvs = false,
  enableColors = false,
  children,
  ...props
}, ref) => {
  const marchingCubesRef = React26.useRef(null);
  const marchingCubes = React26.useMemo(() => new MarchingCubes(resolution, null, enableUvs, enableColors, maxPolyCount), [resolution, maxPolyCount, enableUvs, enableColors]);
  const api = React26.useMemo(() => ({
    getParent: () => marchingCubesRef
  }), []);
  useFrame(() => {
    marchingCubes.reset();
  }, -1);
  return React26.createElement(React26.Fragment, null, React26.createElement("primitive", _extends({
    object: marchingCubes,
    ref: react_merge_refs_esm_default([marchingCubesRef, ref])
  }, props), React26.createElement(globalContext.Provider, {
    value: api
  }, children)));
});
var MarchingCube = React26.forwardRef(({
  strength = 0.5,
  subtract = 12,
  color,
  ...props
}, ref) => {
  const {
    getParent
  } = React26.useContext(globalContext);
  const parentRef = React26.useMemo(() => getParent(), [getParent]);
  const cubeRef = React26.useRef();
  const vec = new Vector3();
  useFrame((state) => {
    if (!parentRef.current || !cubeRef.current) return;
    cubeRef.current.getWorldPosition(vec);
    parentRef.current.addBall(0.5 + vec.x * 0.5, 0.5 + vec.y * 0.5, 0.5 + vec.z * 0.5, strength, subtract, color);
  });
  return React26.createElement("group", _extends({
    ref: react_merge_refs_esm_default([ref, cubeRef])
  }, props));
});
var MarchingPlane = React26.forwardRef(({
  planeType: _planeType = "x",
  strength = 0.5,
  subtract = 12,
  ...props
}, ref) => {
  const {
    getParent
  } = React26.useContext(globalContext);
  const parentRef = React26.useMemo(() => getParent(), [getParent]);
  const wallRef = React26.useRef();
  const planeType = React26.useMemo(() => _planeType === "x" ? "addPlaneX" : _planeType === "y" ? "addPlaneY" : "addPlaneZ", [_planeType]);
  useFrame(() => {
    if (!parentRef.current || !wallRef.current) return;
    parentRef.current[planeType](strength, subtract);
  });
  return React26.createElement("group", _extends({
    ref: react_merge_refs_esm_default([ref, wallRef])
  }, props));
});

// node_modules/@react-three/drei/core/Decal.js
var React27 = __toESM(require_react());
function isArray(vec) {
  return Array.isArray(vec);
}
function vecToArray(vec = [0, 0, 0]) {
  if (isArray(vec)) {
    return vec;
  } else if (vec instanceof Vector3 || vec instanceof Euler) {
    return [vec.x, vec.y, vec.z];
  } else {
    return [vec, vec, vec];
  }
}
var Decal = React27.forwardRef(function Decal2({
  debug,
  mesh,
  children,
  position: position2,
  rotation: rotation2,
  scale: scale4,
  ...props
}, forwardRef70) {
  const ref = React27.useRef(null);
  React27.useImperativeHandle(forwardRef70, () => ref.current);
  const helper = React27.useRef(null);
  React27.useLayoutEffect(() => {
    const parent = (mesh == null ? void 0 : mesh.current) || ref.current.parent;
    const target2 = ref.current;
    if (!(parent instanceof Mesh)) {
      throw new Error('Decal must have a Mesh as parent or specify its "mesh" prop');
    }
    const state = {
      position: new Vector3(),
      rotation: new Euler(),
      scale: new Vector3(1, 1, 1)
    };
    if (parent) {
      applyProps(state, {
        position: position2,
        scale: scale4
      });
      const matrixWorld = parent.matrixWorld.clone();
      parent.matrixWorld.identity();
      if (!rotation2 || typeof rotation2 === "number") {
        const o3 = new Object3D();
        o3.position.copy(state.position);
        o3.lookAt(parent.position);
        if (typeof rotation2 === "number") o3.rotateZ(rotation2);
        applyProps(state, {
          rotation: o3.rotation
        });
      } else {
        applyProps(state, {
          rotation: rotation2
        });
      }
      target2.geometry = new DecalGeometry(parent, state.position, state.rotation, state.scale);
      if (helper.current) applyProps(helper.current, state);
      parent.matrixWorld = matrixWorld;
      return () => {
        target2.geometry.dispose();
      };
    }
  }, [mesh, ...vecToArray(position2), ...vecToArray(scale4), ...vecToArray(rotation2)]);
  return React27.createElement("mesh", {
    ref
  }, children || React27.createElement("meshStandardMaterial", _extends({
    transparent: true,
    polygonOffset: true,
    polygonOffsetFactor: -10
  }, props)), debug && React27.createElement("mesh", {
    ref: helper
  }, React27.createElement("boxGeometry", null), React27.createElement("meshNormalMaterial", {
    wireframe: true
  }), React27.createElement("axesHelper", null)));
});

// node_modules/@react-three/drei/core/Svg.js
var React28 = __toESM(require_react());
var import_react4 = __toESM(require_react());
var Svg = (0, import_react4.forwardRef)(function R3FSvg({
  src,
  skipFill,
  skipStrokes,
  fillMaterial,
  strokeMaterial,
  fillMeshProps,
  strokeMeshProps,
  ...props
}, ref) {
  const svg = useLoader(SVGLoader, !src.startsWith("<svg") ? src : `data:image/svg+xml;utf8,${src}`);
  const strokeGeometries = (0, import_react4.useMemo)(() => skipStrokes ? [] : svg.paths.map((path) => {
    var _path$userData;
    return ((_path$userData = path.userData) == null ? void 0 : _path$userData.style.stroke) === void 0 || path.userData.style.stroke === "none" ? null : path.subPaths.map((subPath) => SVGLoader.pointsToStroke(subPath.getPoints(), path.userData.style));
  }), [svg, skipStrokes]);
  (0, import_react4.useEffect)(() => {
    return () => strokeGeometries.forEach((group) => group && group.map((g2) => g2.dispose()));
  }, [strokeGeometries]);
  return React28.createElement("object3D", _extends({
    ref
  }, props), React28.createElement("object3D", {
    scale: [1, -1, 1]
  }, svg.paths.map((path, p3) => {
    var _path$userData2, _path$userData3;
    return React28.createElement(import_react4.Fragment, {
      key: p3
    }, !skipFill && ((_path$userData2 = path.userData) == null ? void 0 : _path$userData2.style.fill) !== void 0 && path.userData.style.fill !== "none" && SVGLoader.createShapes(path).map((shape, s3) => React28.createElement("mesh", _extends({
      key: s3
    }, fillMeshProps), React28.createElement("shapeGeometry", {
      args: [shape]
    }), React28.createElement("meshBasicMaterial", _extends({
      color: path.userData.style.fill,
      opacity: path.userData.style.fillOpacity,
      transparent: true,
      side: DoubleSide,
      depthWrite: false
    }, fillMaterial)))), !skipStrokes && ((_path$userData3 = path.userData) == null ? void 0 : _path$userData3.style.stroke) !== void 0 && path.userData.style.stroke !== "none" && path.subPaths.map((_subPath, s3) => React28.createElement("mesh", _extends({
      key: s3,
      geometry: strokeGeometries[p3][s3]
    }, strokeMeshProps), React28.createElement("meshBasicMaterial", _extends({
      color: path.userData.style.stroke,
      opacity: path.userData.style.strokeOpacity,
      transparent: true,
      side: DoubleSide,
      depthWrite: false
    }, strokeMaterial)))));
  })));
});

// node_modules/@react-three/drei/core/Gltf.js
var React29 = __toESM(require_react());

// node_modules/@react-three/drei/core/useGLTF.js
var dracoLoader = null;
function extensions(useDraco, useMeshopt, extendLoader) {
  return (loader2) => {
    if (extendLoader) {
      extendLoader(loader2);
    }
    if (useDraco) {
      if (!dracoLoader) {
        dracoLoader = new DRACOLoader();
      }
      dracoLoader.setDecoderPath(typeof useDraco === "string" ? useDraco : "https://www.gstatic.com/draco/versioned/decoders/1.5.5/");
      loader2.setDRACOLoader(dracoLoader);
    }
    if (useMeshopt) {
      loader2.setMeshoptDecoder(typeof MeshoptDecoder === "function" ? MeshoptDecoder() : MeshoptDecoder);
    }
  };
}
function useGLTF(path, useDraco = true, useMeshOpt = true, extendLoader) {
  const gltf = useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));
  return gltf;
}
useGLTF.preload = (path, useDraco = true, useMeshOpt = true, extendLoader) => useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));
useGLTF.clear = (input) => useLoader.clear(GLTFLoader, input);

// node_modules/@react-three/drei/core/Gltf.js
var Gltf = React29.forwardRef(({
  src,
  ...props
}, ref) => {
  const {
    scene
  } = useGLTF(src);
  return React29.createElement(Clone, _extends({
    ref
  }, props, {
    object: scene
  }));
});

// node_modules/@react-three/drei/core/AsciiRenderer.js
var React30 = __toESM(require_react());
function AsciiRenderer({
  renderIndex = 1,
  bgColor = "black",
  fgColor = "white",
  characters = " .:-+*=%@#",
  invert = true,
  color = false,
  resolution = 0.15
}) {
  const {
    size,
    gl,
    scene,
    camera
  } = useThree();
  const effect = React30.useMemo(() => {
    const effect2 = new AsciiEffect(gl, characters, {
      invert,
      color,
      resolution
    });
    effect2.domElement.style.position = "absolute";
    effect2.domElement.style.top = "0px";
    effect2.domElement.style.left = "0px";
    effect2.domElement.style.pointerEvents = "none";
    return effect2;
  }, [characters, invert, color, resolution]);
  React30.useLayoutEffect(() => {
    effect.domElement.style.color = fgColor;
    effect.domElement.style.backgroundColor = bgColor;
  }, [fgColor, bgColor]);
  React30.useEffect(() => {
    gl.domElement.style.opacity = "0";
    gl.domElement.parentNode.appendChild(effect.domElement);
    return () => {
      gl.domElement.style.opacity = "1";
      gl.domElement.parentNode.removeChild(effect.domElement);
    };
  }, [effect]);
  React30.useEffect(() => {
    effect.setSize(size.width, size.height);
  }, [effect, size]);
  useFrame((state) => {
    effect.render(scene, camera);
  }, renderIndex);
  return React30.createElement(React30.Fragment, null);
}

// node_modules/@react-three/drei/core/OrthographicCamera.js
var React32 = __toESM(require_react());

// node_modules/@react-three/drei/core/useFBO.js
var React31 = __toESM(require_react());
function useFBO(width, height, settings) {
  const size = useThree((state) => state.size);
  const viewport = useThree((state) => state.viewport);
  const _width = typeof width === "number" ? width : size.width * viewport.dpr;
  const _height = typeof height === "number" ? height : size.height * viewport.dpr;
  const _settings = (typeof width === "number" ? settings : width) || {};
  const {
    samples = 0,
    depth,
    ...targetSettings
  } = _settings;
  const target2 = React31.useMemo(() => {
    const target3 = new WebGLRenderTarget(_width, _height, {
      minFilter: LinearFilter,
      magFilter: LinearFilter,
      type: HalfFloatType,
      ...targetSettings
    });
    if (depth) {
      target3.depthTexture = new DepthTexture(_width, _height, FloatType);
    }
    target3.samples = samples;
    return target3;
  }, []);
  React31.useLayoutEffect(() => {
    target2.setSize(_width, _height);
    if (samples) target2.samples = samples;
  }, [samples, target2, _width, _height]);
  React31.useEffect(() => {
    return () => target2.dispose();
  }, []);
  return target2;
}

// node_modules/@react-three/drei/core/OrthographicCamera.js
var isFunction = (node) => typeof node === "function";
var OrthographicCamera2 = React32.forwardRef(({
  envMap,
  resolution = 256,
  frames = Infinity,
  children,
  makeDefault,
  ...props
}, ref) => {
  const set = useThree(({
    set: set2
  }) => set2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const size = useThree(({
    size: size2
  }) => size2);
  const cameraRef = React32.useRef(null);
  const groupRef = React32.useRef(null);
  const fbo = useFBO(resolution);
  React32.useLayoutEffect(() => {
    if (!props.manual) {
      cameraRef.current.updateProjectionMatrix();
    }
  }, [size, props]);
  React32.useLayoutEffect(() => {
    cameraRef.current.updateProjectionMatrix();
  });
  React32.useLayoutEffect(() => {
    if (makeDefault) {
      const oldCam = camera;
      set(() => ({
        camera: cameraRef.current
      }));
      return () => set(() => ({
        camera: oldCam
      }));
    }
  }, [cameraRef, makeDefault, set]);
  let count = 0;
  let oldEnvMap = null;
  const functional = isFunction(children);
  useFrame((state) => {
    if (functional && (frames === Infinity || count < frames)) {
      groupRef.current.visible = false;
      state.gl.setRenderTarget(fbo);
      oldEnvMap = state.scene.background;
      if (envMap) state.scene.background = envMap;
      state.gl.render(state.scene, cameraRef.current);
      state.scene.background = oldEnvMap;
      state.gl.setRenderTarget(null);
      groupRef.current.visible = true;
      count++;
    }
  });
  return React32.createElement(React32.Fragment, null, React32.createElement("orthographicCamera", _extends({
    left: size.width / -2,
    right: size.width / 2,
    top: size.height / 2,
    bottom: size.height / -2,
    ref: react_merge_refs_esm_default([cameraRef, ref])
  }, props), !functional && children), React32.createElement("group", {
    ref: groupRef
  }, functional && children(fbo.texture)));
});

// node_modules/@react-three/drei/core/PerspectiveCamera.js
var React33 = __toESM(require_react());
var isFunction2 = (node) => typeof node === "function";
var PerspectiveCamera2 = React33.forwardRef(({
  envMap,
  resolution = 256,
  frames = Infinity,
  makeDefault,
  children,
  ...props
}, ref) => {
  const set = useThree(({
    set: set2
  }) => set2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const size = useThree(({
    size: size2
  }) => size2);
  const cameraRef = React33.useRef(null);
  const groupRef = React33.useRef(null);
  const fbo = useFBO(resolution);
  React33.useLayoutEffect(() => {
    if (!props.manual) {
      cameraRef.current.aspect = size.width / size.height;
    }
  }, [size, props]);
  React33.useLayoutEffect(() => {
    cameraRef.current.updateProjectionMatrix();
  });
  let count = 0;
  let oldEnvMap = null;
  const functional = isFunction2(children);
  useFrame((state) => {
    if (functional && (frames === Infinity || count < frames)) {
      groupRef.current.visible = false;
      state.gl.setRenderTarget(fbo);
      oldEnvMap = state.scene.background;
      if (envMap) state.scene.background = envMap;
      state.gl.render(state.scene, cameraRef.current);
      state.scene.background = oldEnvMap;
      state.gl.setRenderTarget(null);
      groupRef.current.visible = true;
      count++;
    }
  });
  React33.useLayoutEffect(() => {
    if (makeDefault) {
      const oldCam = camera;
      set(() => ({
        camera: cameraRef.current
      }));
      return () => set(() => ({
        camera: oldCam
      }));
    }
  }, [cameraRef, makeDefault, set]);
  return React33.createElement(React33.Fragment, null, React33.createElement("perspectiveCamera", _extends({
    ref: react_merge_refs_esm_default([cameraRef, ref])
  }, props), !functional && children), React33.createElement("group", {
    ref: groupRef
  }, functional && children(fbo.texture)));
});

// node_modules/@react-three/drei/core/CubeCamera.js
var React35 = __toESM(require_react());

// node_modules/@react-three/drei/core/useCubeCamera.js
var React34 = __toESM(require_react());
var import_react5 = __toESM(require_react());
function useCubeCamera({
  resolution = 256,
  near = 0.1,
  far = 1e3,
  envMap,
  fog
} = {}) {
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const scene = useThree(({
    scene: scene2
  }) => scene2);
  const fbo = (0, import_react5.useMemo)(() => {
    const fbo2 = new WebGLCubeRenderTarget(resolution);
    fbo2.texture.type = HalfFloatType;
    return fbo2;
  }, [resolution]);
  (0, import_react5.useEffect)(() => {
    return () => {
      fbo.dispose();
    };
  }, [fbo]);
  const camera = (0, import_react5.useMemo)(() => new CubeCamera(near, far, fbo), [near, far, fbo]);
  let originalFog;
  let originalBackground;
  const update = React34.useCallback(() => {
    originalFog = scene.fog;
    originalBackground = scene.background;
    scene.background = envMap || originalBackground;
    scene.fog = fog || originalFog;
    camera.update(gl, scene);
    scene.fog = originalFog;
    scene.background = originalBackground;
  }, [gl, scene, camera]);
  return {
    fbo,
    camera,
    update
  };
}

// node_modules/@react-three/drei/core/CubeCamera.js
function CubeCamera2({
  children,
  frames = Infinity,
  resolution,
  near,
  far,
  envMap,
  fog,
  ...props
}) {
  const ref = React35.useRef();
  const {
    fbo,
    camera,
    update
  } = useCubeCamera({
    resolution,
    near,
    far,
    envMap,
    fog
  });
  let count = 0;
  useFrame(() => {
    if (ref.current && (frames === Infinity || count < frames)) {
      ref.current.visible = false;
      update();
      ref.current.visible = true;
      count++;
    }
  });
  return React35.createElement("group", props, React35.createElement("primitive", {
    object: camera
  }), React35.createElement("group", {
    ref
  }, children(fbo.texture)));
}

// node_modules/@react-three/drei/core/DeviceOrientationControls.js
var React36 = __toESM(require_react());
var DeviceOrientationControls2 = React36.forwardRef((props, ref) => {
  const {
    camera,
    onChange,
    makeDefault,
    ...rest
  } = props;
  const defaultCamera = useThree((state) => state.camera);
  const invalidate = useThree((state) => state.invalidate);
  const get = useThree((state) => state.get);
  const set = useThree((state) => state.set);
  const explCamera = camera || defaultCamera;
  const [controls] = React36.useState(() => new DeviceOrientationControls(explCamera));
  React36.useEffect(() => {
    const callback = (e3) => {
      invalidate();
      if (onChange) onChange(e3);
    };
    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener("change", callback);
    return () => controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener("change", callback);
  }, [onChange, controls, invalidate]);
  useFrame(() => controls == null ? void 0 : controls.update(), -1);
  React36.useEffect(() => {
    const current = controls;
    current == null ? void 0 : current.connect();
    return () => current == null ? void 0 : current.dispose();
  }, [controls]);
  React36.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return controls ? React36.createElement("primitive", _extends({
    ref,
    object: controls
  }, rest)) : null;
});

// node_modules/@react-three/drei/core/FlyControls.js
var React37 = __toESM(require_react());
var FlyControls2 = React37.forwardRef(({
  domElement,
  ...props
}, fref) => {
  const {
    onChange,
    makeDefault,
    ...rest
  } = props;
  const invalidate = useThree((state) => state.invalidate);
  const camera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const get = useThree((state) => state.get);
  const set = useThree((state) => state.set);
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = React37.useMemo(() => new FlyControls(camera), [camera]);
  React37.useEffect(() => {
    controls.connect(explDomElement);
    return () => void controls.dispose();
  }, [explDomElement, controls, invalidate]);
  React37.useEffect(() => {
    const callback = (e3) => {
      invalidate();
      if (onChange) onChange(e3);
    };
    controls.addEventListener == null ? void 0 : controls.addEventListener("change", callback);
    return () => controls.removeEventListener == null ? void 0 : controls.removeEventListener("change", callback);
  }, [onChange, invalidate]);
  React37.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  useFrame((_2, delta) => controls.update(delta));
  return React37.createElement("primitive", _extends({
    ref: fref,
    object: controls,
    args: [camera, explDomElement]
  }, rest));
});

// node_modules/@react-three/drei/core/MapControls.js
var React38 = __toESM(require_react());
var MapControls2 = React38.forwardRef((props = {
  enableDamping: true
}, ref) => {
  const {
    domElement,
    camera,
    makeDefault,
    onChange,
    onStart,
    onEnd,
    ...rest
  } = props;
  const invalidate = useThree((state) => state.invalidate);
  const defaultCamera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const set = useThree((state) => state.set);
  const get = useThree((state) => state.get);
  const explDomElement = domElement || events.connected || gl.domElement;
  const explCamera = camera || defaultCamera;
  const controls = React38.useMemo(() => new MapControls(explCamera), [explCamera]);
  React38.useEffect(() => {
    controls.connect(explDomElement);
    const callback = (e3) => {
      invalidate();
      if (onChange) onChange(e3);
    };
    controls.addEventListener("change", callback);
    if (onStart) controls.addEventListener("start", onStart);
    if (onEnd) controls.addEventListener("end", onEnd);
    return () => {
      controls.dispose();
      controls.removeEventListener("change", callback);
      if (onStart) controls.removeEventListener("start", onStart);
      if (onEnd) controls.removeEventListener("end", onEnd);
    };
  }, [onChange, onStart, onEnd, controls, invalidate, explDomElement]);
  React38.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  useFrame(() => controls.update(), -1);
  return React38.createElement("primitive", _extends({
    ref,
    object: controls,
    enableDamping: true
  }, rest));
});

// node_modules/@react-three/drei/core/OrbitControls.js
var React39 = __toESM(require_react());
var OrbitControls2 = React39.forwardRef(({
  makeDefault,
  camera,
  regress,
  domElement,
  enableDamping = true,
  keyEvents = false,
  onChange,
  onStart,
  onEnd,
  ...restProps
}, ref) => {
  const invalidate = useThree((state) => state.invalidate);
  const defaultCamera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const setEvents = useThree((state) => state.setEvents);
  const set = useThree((state) => state.set);
  const get = useThree((state) => state.get);
  const performance2 = useThree((state) => state.performance);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = React39.useMemo(() => new OrbitControls(explCamera), [explCamera]);
  useFrame(() => {
    if (controls.enabled) controls.update();
  }, -1);
  React39.useEffect(() => {
    if (keyEvents) {
      controls.connect(keyEvents === true ? explDomElement : keyEvents);
    }
    controls.connect(explDomElement);
    return () => void controls.dispose();
  }, [keyEvents, explDomElement, regress, controls, invalidate]);
  React39.useEffect(() => {
    const callback = (e3) => {
      invalidate();
      if (regress) performance2.regress();
      if (onChange) onChange(e3);
    };
    const onStartCb = (e3) => {
      if (onStart) onStart(e3);
    };
    const onEndCb = (e3) => {
      if (onEnd) onEnd(e3);
    };
    controls.addEventListener("change", callback);
    controls.addEventListener("start", onStartCb);
    controls.addEventListener("end", onEndCb);
    return () => {
      controls.removeEventListener("start", onStartCb);
      controls.removeEventListener("end", onEndCb);
      controls.removeEventListener("change", callback);
    };
  }, [onChange, onStart, onEnd, controls, invalidate, setEvents]);
  React39.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return React39.createElement("primitive", _extends({
    ref,
    object: controls,
    enableDamping
  }, restProps));
});

// node_modules/@react-three/drei/core/TrackballControls.js
var React40 = __toESM(require_react());
var TrackballControls2 = React40.forwardRef(({
  makeDefault,
  camera,
  domElement,
  regress,
  onChange,
  onStart,
  onEnd,
  ...restProps
}, ref) => {
  const {
    invalidate,
    camera: defaultCamera,
    gl,
    events,
    set,
    get,
    performance: performance2,
    viewport
  } = useThree();
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = React40.useMemo(() => new TrackballControls(explCamera), [explCamera]);
  useFrame(() => {
    if (controls.enabled) controls.update();
  }, -1);
  React40.useEffect(() => {
    controls.connect(explDomElement);
    return () => void controls.dispose();
  }, [explDomElement, regress, controls, invalidate]);
  React40.useEffect(() => {
    const callback = (e3) => {
      invalidate();
      if (regress) performance2.regress();
      if (onChange) onChange(e3);
    };
    controls.addEventListener("change", callback);
    if (onStart) controls.addEventListener("start", onStart);
    if (onEnd) controls.addEventListener("end", onEnd);
    return () => {
      if (onStart) controls.removeEventListener("start", onStart);
      if (onEnd) controls.removeEventListener("end", onEnd);
      controls.removeEventListener("change", callback);
    };
  }, [onChange, onStart, onEnd, controls, invalidate]);
  React40.useEffect(() => {
    controls.handleResize();
  }, [viewport]);
  React40.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return React40.createElement("primitive", _extends({
    ref,
    object: controls
  }, restProps));
});

// node_modules/@react-three/drei/core/ArcballControls.js
var React41 = __toESM(require_react());
var import_react6 = __toESM(require_react());
var ArcballControls2 = (0, import_react6.forwardRef)(({
  camera,
  makeDefault,
  regress,
  domElement,
  onChange,
  onStart,
  onEnd,
  ...restProps
}, ref) => {
  const invalidate = useThree((state) => state.invalidate);
  const defaultCamera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const set = useThree((state) => state.set);
  const get = useThree((state) => state.get);
  const performance2 = useThree((state) => state.performance);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = (0, import_react6.useMemo)(() => new ArcballControls(explCamera), [explCamera]);
  useFrame(() => {
    if (controls.enabled) controls.update();
  }, -1);
  (0, import_react6.useEffect)(() => {
    controls.connect(explDomElement);
    return () => void controls.dispose();
  }, [explDomElement, regress, controls, invalidate]);
  (0, import_react6.useEffect)(() => {
    const callback = (e3) => {
      invalidate();
      if (regress) performance2.regress();
      if (onChange) onChange(e3);
    };
    controls.addEventListener("change", callback);
    if (onStart) controls.addEventListener("start", onStart);
    if (onEnd) controls.addEventListener("end", onEnd);
    return () => {
      controls.removeEventListener("change", callback);
      if (onStart) controls.removeEventListener("start", onStart);
      if (onEnd) controls.removeEventListener("end", onEnd);
    };
  }, [onChange, onStart, onEnd]);
  (0, import_react6.useEffect)(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return React41.createElement("primitive", _extends({
    ref,
    object: controls
  }, restProps));
});

// node_modules/@react-three/drei/core/TransformControls.js
var import_lodash2 = __toESM(require_lodash2());
var import_lodash3 = __toESM(require_lodash());
var React42 = __toESM(require_react());
var TransformControls2 = React42.forwardRef(({
  children,
  domElement,
  onChange,
  onMouseDown,
  onMouseUp,
  onObjectChange,
  object,
  makeDefault,
  ...props
}, ref) => {
  const transformOnlyPropNames = ["enabled", "axis", "mode", "translationSnap", "rotationSnap", "scaleSnap", "space", "size", "showX", "showY", "showZ"];
  const {
    camera,
    ...rest
  } = props;
  const transformProps = (0, import_lodash3.default)(rest, transformOnlyPropNames);
  const objectProps = (0, import_lodash2.default)(rest, transformOnlyPropNames);
  const defaultControls = useThree((state) => state.controls);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const defaultCamera = useThree((state) => state.camera);
  const invalidate = useThree((state) => state.invalidate);
  const get = useThree((state) => state.get);
  const set = useThree((state) => state.set);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = React42.useMemo(() => new TransformControls(explCamera, explDomElement), [explCamera, explDomElement]);
  const group = React42.useRef();
  React42.useLayoutEffect(() => {
    if (object) {
      controls.attach(object instanceof Object3D ? object : object.current);
    } else if (group.current instanceof Object3D) {
      controls.attach(group.current);
    }
    return () => void controls.detach();
  }, [object, children, controls]);
  React42.useEffect(() => {
    if (defaultControls) {
      const callback = (event) => defaultControls.enabled = !event.value;
      controls.addEventListener("dragging-changed", callback);
      return () => controls.removeEventListener("dragging-changed", callback);
    }
  }, [controls, defaultControls]);
  const onChangeRef = React42.useRef();
  const onMouseDownRef = React42.useRef();
  const onMouseUpRef = React42.useRef();
  const onObjectChangeRef = React42.useRef();
  React42.useLayoutEffect(() => void (onChangeRef.current = onChange), [onChange]);
  React42.useLayoutEffect(() => void (onMouseDownRef.current = onMouseDown), [onMouseDown]);
  React42.useLayoutEffect(() => void (onMouseUpRef.current = onMouseUp), [onMouseUp]);
  React42.useLayoutEffect(() => void (onObjectChangeRef.current = onObjectChange), [onObjectChange]);
  React42.useEffect(() => {
    const onChange2 = (e3) => {
      invalidate();
      onChangeRef.current == null ? void 0 : onChangeRef.current(e3);
    };
    const onMouseDown2 = (e3) => onMouseDownRef.current == null ? void 0 : onMouseDownRef.current(e3);
    const onMouseUp2 = (e3) => onMouseUpRef.current == null ? void 0 : onMouseUpRef.current(e3);
    const onObjectChange2 = (e3) => onObjectChangeRef.current == null ? void 0 : onObjectChangeRef.current(e3);
    controls.addEventListener("change", onChange2);
    controls.addEventListener("mouseDown", onMouseDown2);
    controls.addEventListener("mouseUp", onMouseUp2);
    controls.addEventListener("objectChange", onObjectChange2);
    return () => {
      controls.removeEventListener("change", onChange2);
      controls.removeEventListener("mouseDown", onMouseDown2);
      controls.removeEventListener("mouseUp", onMouseUp2);
      controls.removeEventListener("objectChange", onObjectChange2);
    };
  }, [invalidate, controls]);
  React42.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return controls ? React42.createElement(React42.Fragment, null, React42.createElement("primitive", _extends({
    ref,
    object: controls
  }, transformProps)), React42.createElement("group", _extends({
    ref: group
  }, objectProps), children)) : null;
});

// node_modules/@react-three/drei/core/PointerLockControls.js
var React43 = __toESM(require_react());
var PointerLockControls2 = React43.forwardRef(({
  domElement,
  selector,
  onChange,
  onLock,
  onUnlock,
  enabled = true,
  makeDefault,
  ...props
}, ref) => {
  const {
    camera,
    ...rest
  } = props;
  const setEvents = useThree((state) => state.setEvents);
  const gl = useThree((state) => state.gl);
  const defaultCamera = useThree((state) => state.camera);
  const invalidate = useThree((state) => state.invalidate);
  const events = useThree((state) => state.events);
  const get = useThree((state) => state.get);
  const set = useThree((state) => state.set);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const [controls] = React43.useState(() => new PointerLockControls(explCamera));
  React43.useEffect(() => {
    if (enabled) {
      controls.connect(explDomElement);
      const oldComputeOffsets = get().events.compute;
      setEvents({
        compute(event, state) {
          const offsetX = state.size.width / 2;
          const offsetY = state.size.height / 2;
          state.pointer.set(offsetX / state.size.width * 2 - 1, -(offsetY / state.size.height) * 2 + 1);
          state.raycaster.setFromCamera(state.pointer, state.camera);
        }
      });
      return () => {
        controls.disconnect();
        setEvents({
          compute: oldComputeOffsets
        });
      };
    }
  }, [enabled, controls]);
  React43.useEffect(() => {
    const callback = (e3) => {
      invalidate();
      if (onChange) onChange(e3);
    };
    controls.addEventListener("change", callback);
    if (onLock) controls.addEventListener("lock", onLock);
    if (onUnlock) controls.addEventListener("unlock", onUnlock);
    const handler = () => controls.lock();
    const elements = selector ? Array.from(document.querySelectorAll(selector)) : [document];
    elements.forEach((element) => element && element.addEventListener("click", handler));
    return () => {
      controls.removeEventListener("change", callback);
      if (onLock) controls.addEventListener("lock", onLock);
      if (onUnlock) controls.addEventListener("unlock", onUnlock);
      elements.forEach((element) => element ? element.removeEventListener("click", handler) : void 0);
    };
  }, [onChange, onLock, onUnlock, selector, controls, invalidate]);
  React43.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return React43.createElement("primitive", _extends({
    ref,
    object: controls
  }, rest));
});

// node_modules/@react-three/drei/core/FirstPersonControls.js
var React44 = __toESM(require_react());
var FirstPersonControls2 = React44.forwardRef(({
  domElement,
  makeDefault,
  ...props
}, ref) => {
  const camera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const get = useThree((state) => state.get);
  const set = useThree((state) => state.set);
  const explDomElement = domElement || events.connected || gl.domElement;
  const [controls] = React44.useState(() => new FirstPersonControls(camera, explDomElement));
  React44.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  useFrame((_2, delta) => {
    controls.update(delta);
  }, -1);
  return controls ? React44.createElement("primitive", _extends({
    ref,
    object: controls
  }, props)) : null;
});

// node_modules/@react-three/drei/core/CameraControls.js
var React45 = __toESM(require_react());
var import_react7 = __toESM(require_react());

// node_modules/camera-controls/dist/camera-controls.module.js
var MOUSE_BUTTON = {
  LEFT: 1,
  RIGHT: 2,
  MIDDLE: 4
};
var ACTION = Object.freeze({
  NONE: 0,
  ROTATE: 1,
  TRUCK: 2,
  SCREEN_PAN: 4,
  OFFSET: 8,
  DOLLY: 16,
  ZOOM: 32,
  TOUCH_ROTATE: 64,
  TOUCH_TRUCK: 128,
  TOUCH_SCREEN_PAN: 256,
  TOUCH_OFFSET: 512,
  TOUCH_DOLLY: 1024,
  TOUCH_ZOOM: 2048,
  TOUCH_DOLLY_TRUCK: 4096,
  TOUCH_DOLLY_SCREEN_PAN: 8192,
  TOUCH_DOLLY_OFFSET: 16384,
  TOUCH_DOLLY_ROTATE: 32768,
  TOUCH_ZOOM_TRUCK: 65536,
  TOUCH_ZOOM_OFFSET: 131072,
  TOUCH_ZOOM_SCREEN_PAN: 262144,
  TOUCH_ZOOM_ROTATE: 524288
});
var DOLLY_DIRECTION = {
  NONE: 0,
  IN: 1,
  OUT: -1
};
function isPerspectiveCamera(camera) {
  return camera.isPerspectiveCamera;
}
function isOrthographicCamera(camera) {
  return camera.isOrthographicCamera;
}
var PI_2 = Math.PI * 2;
var PI_HALF = Math.PI / 2;
var EPSILON = 1e-5;
var DEG2RAD = Math.PI / 180;
function clamp2(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function approxZero(number, error = EPSILON) {
  return Math.abs(number) < error;
}
function approxEquals(a6, b5, error = EPSILON) {
  return approxZero(a6 - b5, error);
}
function roundToStep(value, step) {
  return Math.round(value / step) * step;
}
function infinityToMaxNumber(value) {
  if (isFinite(value))
    return value;
  if (value < 0)
    return -Number.MAX_VALUE;
  return Number.MAX_VALUE;
}
function maxNumberToInfinity(value) {
  if (Math.abs(value) < Number.MAX_VALUE)
    return value;
  return value * Infinity;
}
function smoothDamp(current, target2, currentVelocityRef, smoothTime, maxSpeed = Infinity, deltaTime) {
  smoothTime = Math.max(1e-4, smoothTime);
  const omega = 2 / smoothTime;
  const x2 = omega * deltaTime;
  const exp3 = 1 / (1 + x2 + 0.48 * x2 * x2 + 0.235 * x2 * x2 * x2);
  let change = current - target2;
  const originalTo = target2;
  const maxChange = maxSpeed * smoothTime;
  change = clamp2(change, -maxChange, maxChange);
  target2 = current - change;
  const temp5 = (currentVelocityRef.value + omega * change) * deltaTime;
  currentVelocityRef.value = (currentVelocityRef.value - omega * temp5) * exp3;
  let output = target2 + (change + temp5) * exp3;
  if (originalTo - current > 0 === output > originalTo) {
    output = originalTo;
    currentVelocityRef.value = (output - originalTo) / deltaTime;
  }
  return output;
}
function smoothDampVec3(current, target2, currentVelocityRef, smoothTime, maxSpeed = Infinity, deltaTime, out) {
  smoothTime = Math.max(1e-4, smoothTime);
  const omega = 2 / smoothTime;
  const x2 = omega * deltaTime;
  const exp3 = 1 / (1 + x2 + 0.48 * x2 * x2 + 0.235 * x2 * x2 * x2);
  let targetX = target2.x;
  let targetY = target2.y;
  let targetZ = target2.z;
  let changeX = current.x - targetX;
  let changeY = current.y - targetY;
  let changeZ = current.z - targetZ;
  const originalToX = targetX;
  const originalToY = targetY;
  const originalToZ = targetZ;
  const maxChange = maxSpeed * smoothTime;
  const maxChangeSq = maxChange * maxChange;
  const magnitudeSq = changeX * changeX + changeY * changeY + changeZ * changeZ;
  if (magnitudeSq > maxChangeSq) {
    const magnitude = Math.sqrt(magnitudeSq);
    changeX = changeX / magnitude * maxChange;
    changeY = changeY / magnitude * maxChange;
    changeZ = changeZ / magnitude * maxChange;
  }
  targetX = current.x - changeX;
  targetY = current.y - changeY;
  targetZ = current.z - changeZ;
  const tempX = (currentVelocityRef.x + omega * changeX) * deltaTime;
  const tempY = (currentVelocityRef.y + omega * changeY) * deltaTime;
  const tempZ = (currentVelocityRef.z + omega * changeZ) * deltaTime;
  currentVelocityRef.x = (currentVelocityRef.x - omega * tempX) * exp3;
  currentVelocityRef.y = (currentVelocityRef.y - omega * tempY) * exp3;
  currentVelocityRef.z = (currentVelocityRef.z - omega * tempZ) * exp3;
  out.x = targetX + (changeX + tempX) * exp3;
  out.y = targetY + (changeY + tempY) * exp3;
  out.z = targetZ + (changeZ + tempZ) * exp3;
  const origMinusCurrentX = originalToX - current.x;
  const origMinusCurrentY = originalToY - current.y;
  const origMinusCurrentZ = originalToZ - current.z;
  const outMinusOrigX = out.x - originalToX;
  const outMinusOrigY = out.y - originalToY;
  const outMinusOrigZ = out.z - originalToZ;
  if (origMinusCurrentX * outMinusOrigX + origMinusCurrentY * outMinusOrigY + origMinusCurrentZ * outMinusOrigZ > 0) {
    out.x = originalToX;
    out.y = originalToY;
    out.z = originalToZ;
    currentVelocityRef.x = (out.x - originalToX) / deltaTime;
    currentVelocityRef.y = (out.y - originalToY) / deltaTime;
    currentVelocityRef.z = (out.z - originalToZ) / deltaTime;
  }
  return out;
}
function extractClientCoordFromEvent(pointers, out) {
  out.set(0, 0);
  pointers.forEach((pointer) => {
    out.x += pointer.clientX;
    out.y += pointer.clientY;
  });
  out.x /= pointers.length;
  out.y /= pointers.length;
}
function notSupportedInOrthographicCamera(camera, message) {
  if (isOrthographicCamera(camera)) {
    console.warn(`${message} is not supported in OrthographicCamera`);
    return true;
  }
  return false;
}
var EventDispatcher2 = class {
  constructor() {
    this._listeners = {};
  }
  /**
   * Adds the specified event listener.
   * @param type event name
   * @param listener handler function
   * @category Methods
   */
  addEventListener(type, listener) {
    const listeners = this._listeners;
    if (listeners[type] === void 0)
      listeners[type] = [];
    if (listeners[type].indexOf(listener) === -1)
      listeners[type].push(listener);
  }
  /**
   * Presence of the specified event listener.
   * @param type event name
   * @param listener handler function
   * @category Methods
   */
  hasEventListener(type, listener) {
    const listeners = this._listeners;
    return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
  }
  /**
   * Removes the specified event listener
   * @param type event name
   * @param listener handler function
   * @category Methods
   */
  removeEventListener(type, listener) {
    const listeners = this._listeners;
    const listenerArray = listeners[type];
    if (listenerArray !== void 0) {
      const index2 = listenerArray.indexOf(listener);
      if (index2 !== -1)
        listenerArray.splice(index2, 1);
    }
  }
  /**
   * Removes all event listeners
   * @param type event name
   * @category Methods
   */
  removeAllEventListeners(type) {
    if (!type) {
      this._listeners = {};
      return;
    }
    if (Array.isArray(this._listeners[type]))
      this._listeners[type].length = 0;
  }
  /**
   * Fire an event type.
   * @param event DispatcherEvent
   * @category Methods
   */
  dispatchEvent(event) {
    const listeners = this._listeners;
    const listenerArray = listeners[event.type];
    if (listenerArray !== void 0) {
      event.target = this;
      const array = listenerArray.slice(0);
      for (let i4 = 0, l3 = array.length; i4 < l3; i4++) {
        array[i4].call(this, event);
      }
    }
  }
};
var _a;
var VERSION = "2.10.1";
var TOUCH_DOLLY_FACTOR = 1 / 8;
var isMac = /Mac/.test((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.navigator) === null || _a === void 0 ? void 0 : _a.platform);
var THREE;
var _ORIGIN;
var _AXIS_Y;
var _AXIS_Z;
var _v2;
var _v3A;
var _v3B;
var _v3C;
var _cameraDirection;
var _xColumn;
var _yColumn;
var _zColumn;
var _deltaTarget;
var _deltaOffset;
var _sphericalA;
var _sphericalB;
var _box3A;
var _box3B;
var _sphere;
var _quaternionA;
var _quaternionB;
var _rotationMatrix;
var _raycaster;
var CameraControls = class _CameraControls extends EventDispatcher2 {
  /**
       * Injects THREE as the dependency. You can then proceed to use CameraControls.
       *
       * e.g
       * ```javascript
       * CameraControls.install( { THREE: THREE } );
       * ```
       *
       * Note: If you do not wish to use enter three.js to reduce file size(tree-shaking for example), make a subset to install.
       *
       * ```js
       * import {
       * 	Vector2,
       * 	Vector3,
       * 	Vector4,
       * 	Quaternion,
       * 	Matrix4,
       * 	Spherical,
       * 	Box3,
       * 	Sphere,
       * 	Raycaster,
       * 	MathUtils,
       * } from 'three';
       *
       * const subsetOfTHREE = {
       * 	Vector2   : Vector2,
       * 	Vector3   : Vector3,
       * 	Vector4   : Vector4,
       * 	Quaternion: Quaternion,
       * 	Matrix4   : Matrix4,
       * 	Spherical : Spherical,
       * 	Box3      : Box3,
       * 	Sphere    : Sphere,
       * 	Raycaster : Raycaster,
       * };
  
       * CameraControls.install( { THREE: subsetOfTHREE } );
       * ```
       * @category Statics
       */
  static install(libs) {
    THREE = libs.THREE;
    _ORIGIN = Object.freeze(new THREE.Vector3(0, 0, 0));
    _AXIS_Y = Object.freeze(new THREE.Vector3(0, 1, 0));
    _AXIS_Z = Object.freeze(new THREE.Vector3(0, 0, 1));
    _v2 = new THREE.Vector2();
    _v3A = new THREE.Vector3();
    _v3B = new THREE.Vector3();
    _v3C = new THREE.Vector3();
    _cameraDirection = new THREE.Vector3();
    _xColumn = new THREE.Vector3();
    _yColumn = new THREE.Vector3();
    _zColumn = new THREE.Vector3();
    _deltaTarget = new THREE.Vector3();
    _deltaOffset = new THREE.Vector3();
    _sphericalA = new THREE.Spherical();
    _sphericalB = new THREE.Spherical();
    _box3A = new THREE.Box3();
    _box3B = new THREE.Box3();
    _sphere = new THREE.Sphere();
    _quaternionA = new THREE.Quaternion();
    _quaternionB = new THREE.Quaternion();
    _rotationMatrix = new THREE.Matrix4();
    _raycaster = new THREE.Raycaster();
  }
  /**
   * list all ACTIONs
   * @category Statics
   */
  static get ACTION() {
    return ACTION;
  }
  /**
   * @deprecated Use `cameraControls.mouseButtons.left = CameraControls.ACTION.SCREEN_PAN` instead.
   */
  set verticalDragToForward(_2) {
    console.warn("camera-controls: `verticalDragToForward` was removed. Use `mouseButtons.left = CameraControls.ACTION.SCREEN_PAN` instead.");
  }
  /**
   * Creates a `CameraControls` instance.
   *
   * Note:
   * You **must install** three.js before using camera-controls. see [#install](#install)
   * Not doing so will lead to runtime errors (`undefined` references to THREE).
   *
   * e.g.
   * ```
   * CameraControls.install( { THREE } );
   * const cameraControls = new CameraControls( camera, domElement );
   * ```
   *
   * @param camera A `THREE.PerspectiveCamera` or `THREE.OrthographicCamera` to be controlled.
   * @param domElement A `HTMLElement` for the draggable area, usually `renderer.domElement`.
   * @category Constructor
   */
  constructor(camera, domElement) {
    super();
    this.minPolarAngle = 0;
    this.maxPolarAngle = Math.PI;
    this.minAzimuthAngle = -Infinity;
    this.maxAzimuthAngle = Infinity;
    this.minDistance = Number.EPSILON;
    this.maxDistance = Infinity;
    this.infinityDolly = false;
    this.minZoom = 0.01;
    this.maxZoom = Infinity;
    this.smoothTime = 0.25;
    this.draggingSmoothTime = 0.125;
    this.maxSpeed = Infinity;
    this.azimuthRotateSpeed = 1;
    this.polarRotateSpeed = 1;
    this.dollySpeed = 1;
    this.dollyDragInverted = false;
    this.truckSpeed = 2;
    this.dollyToCursor = false;
    this.dragToOffset = false;
    this.boundaryFriction = 0;
    this.restThreshold = 0.01;
    this.colliderMeshes = [];
    this.cancel = () => {
    };
    this._enabled = true;
    this._state = ACTION.NONE;
    this._viewport = null;
    this._changedDolly = 0;
    this._changedZoom = 0;
    this._hasRested = true;
    this._boundaryEnclosesCamera = false;
    this._needsUpdate = true;
    this._updatedLastTime = false;
    this._elementRect = new DOMRect();
    this._isDragging = false;
    this._dragNeedsUpdate = true;
    this._activePointers = [];
    this._lockedPointer = null;
    this._interactiveArea = new DOMRect(0, 0, 1, 1);
    this._isUserControllingRotate = false;
    this._isUserControllingDolly = false;
    this._isUserControllingTruck = false;
    this._isUserControllingOffset = false;
    this._isUserControllingZoom = false;
    this._lastDollyDirection = DOLLY_DIRECTION.NONE;
    this._thetaVelocity = { value: 0 };
    this._phiVelocity = { value: 0 };
    this._radiusVelocity = { value: 0 };
    this._targetVelocity = new THREE.Vector3();
    this._focalOffsetVelocity = new THREE.Vector3();
    this._zoomVelocity = { value: 0 };
    this._truckInternal = (deltaX, deltaY, dragToOffset, screenSpacePanning) => {
      let truckX;
      let pedestalY;
      if (isPerspectiveCamera(this._camera)) {
        const offset = _v3A.copy(this._camera.position).sub(this._target);
        const fov = this._camera.getEffectiveFOV() * DEG2RAD;
        const targetDistance = offset.length() * Math.tan(fov * 0.5);
        truckX = this.truckSpeed * deltaX * targetDistance / this._elementRect.height;
        pedestalY = this.truckSpeed * deltaY * targetDistance / this._elementRect.height;
      } else if (isOrthographicCamera(this._camera)) {
        const camera2 = this._camera;
        truckX = this.truckSpeed * deltaX * (camera2.right - camera2.left) / camera2.zoom / this._elementRect.width;
        pedestalY = this.truckSpeed * deltaY * (camera2.top - camera2.bottom) / camera2.zoom / this._elementRect.height;
      } else {
        return;
      }
      if (screenSpacePanning) {
        dragToOffset ? this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y, this._focalOffsetEnd.z, true) : this.truck(truckX, 0, true);
        this.forward(-pedestalY, true);
      } else {
        dragToOffset ? this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y + pedestalY, this._focalOffsetEnd.z, true) : this.truck(truckX, pedestalY, true);
      }
    };
    this._rotateInternal = (deltaX, deltaY) => {
      const theta = PI_2 * this.azimuthRotateSpeed * deltaX / this._elementRect.height;
      const phi = PI_2 * this.polarRotateSpeed * deltaY / this._elementRect.height;
      this.rotate(theta, phi, true);
    };
    this._dollyInternal = (delta, x2, y2) => {
      const dollyScale = Math.pow(0.95, -delta * this.dollySpeed);
      const lastDistance = this._sphericalEnd.radius;
      const distance3 = this._sphericalEnd.radius * dollyScale;
      const clampedDistance = clamp2(distance3, this.minDistance, this.maxDistance);
      const overflowedDistance = clampedDistance - distance3;
      if (this.infinityDolly && this.dollyToCursor) {
        this._dollyToNoClamp(distance3, true);
      } else if (this.infinityDolly && !this.dollyToCursor) {
        this.dollyInFixed(overflowedDistance, true);
        this._dollyToNoClamp(clampedDistance, true);
      } else {
        this._dollyToNoClamp(clampedDistance, true);
      }
      if (this.dollyToCursor) {
        this._changedDolly += (this.infinityDolly ? distance3 : clampedDistance) - lastDistance;
        this._dollyControlCoord.set(x2, y2);
      }
      this._lastDollyDirection = Math.sign(-delta);
    };
    this._zoomInternal = (delta, x2, y2) => {
      const zoomScale = Math.pow(0.95, delta * this.dollySpeed);
      const lastZoom = this._zoom;
      const zoom = this._zoom * zoomScale;
      this.zoomTo(zoom, true);
      if (this.dollyToCursor) {
        this._changedZoom += zoom - lastZoom;
        this._dollyControlCoord.set(x2, y2);
      }
    };
    if (typeof THREE === "undefined") {
      console.error("camera-controls: `THREE` is undefined. You must first run `CameraControls.install( { THREE: THREE } )`. Check the docs for further information.");
    }
    this._camera = camera;
    this._yAxisUpSpace = new THREE.Quaternion().setFromUnitVectors(this._camera.up, _AXIS_Y);
    this._yAxisUpSpaceInverse = this._yAxisUpSpace.clone().invert();
    this._state = ACTION.NONE;
    this._target = new THREE.Vector3();
    this._targetEnd = this._target.clone();
    this._focalOffset = new THREE.Vector3();
    this._focalOffsetEnd = this._focalOffset.clone();
    this._spherical = new THREE.Spherical().setFromVector3(_v3A.copy(this._camera.position).applyQuaternion(this._yAxisUpSpace));
    this._sphericalEnd = this._spherical.clone();
    this._lastDistance = this._spherical.radius;
    this._zoom = this._camera.zoom;
    this._zoomEnd = this._zoom;
    this._lastZoom = this._zoom;
    this._nearPlaneCorners = [
      new THREE.Vector3(),
      new THREE.Vector3(),
      new THREE.Vector3(),
      new THREE.Vector3()
    ];
    this._updateNearPlaneCorners();
    this._boundary = new THREE.Box3(new THREE.Vector3(-Infinity, -Infinity, -Infinity), new THREE.Vector3(Infinity, Infinity, Infinity));
    this._cameraUp0 = this._camera.up.clone();
    this._target0 = this._target.clone();
    this._position0 = this._camera.position.clone();
    this._zoom0 = this._zoom;
    this._focalOffset0 = this._focalOffset.clone();
    this._dollyControlCoord = new THREE.Vector2();
    this.mouseButtons = {
      left: ACTION.ROTATE,
      middle: ACTION.DOLLY,
      right: ACTION.TRUCK,
      wheel: isPerspectiveCamera(this._camera) ? ACTION.DOLLY : isOrthographicCamera(this._camera) ? ACTION.ZOOM : ACTION.NONE
    };
    this.touches = {
      one: ACTION.TOUCH_ROTATE,
      two: isPerspectiveCamera(this._camera) ? ACTION.TOUCH_DOLLY_TRUCK : isOrthographicCamera(this._camera) ? ACTION.TOUCH_ZOOM_TRUCK : ACTION.NONE,
      three: ACTION.TOUCH_TRUCK
    };
    const dragStartPosition = new THREE.Vector2();
    const lastDragPosition = new THREE.Vector2();
    const dollyStart = new THREE.Vector2();
    const onPointerDown = (event) => {
      if (!this._enabled || !this._domElement)
        return;
      if (this._interactiveArea.left !== 0 || this._interactiveArea.top !== 0 || this._interactiveArea.width !== 1 || this._interactiveArea.height !== 1) {
        const elRect = this._domElement.getBoundingClientRect();
        const left = event.clientX / elRect.width;
        const top = event.clientY / elRect.height;
        if (left < this._interactiveArea.left || left > this._interactiveArea.right || top < this._interactiveArea.top || top > this._interactiveArea.bottom)
          return;
      }
      const mouseButton = event.pointerType !== "mouse" ? null : (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT : (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE ? MOUSE_BUTTON.MIDDLE : (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT ? MOUSE_BUTTON.RIGHT : null;
      if (mouseButton !== null) {
        const zombiePointer = this._findPointerByMouseButton(mouseButton);
        zombiePointer && this._disposePointer(zombiePointer);
      }
      if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT && this._lockedPointer)
        return;
      const pointer = {
        pointerId: event.pointerId,
        clientX: event.clientX,
        clientY: event.clientY,
        deltaX: 0,
        deltaY: 0,
        mouseButton
      };
      this._activePointers.push(pointer);
      this._domElement.ownerDocument.removeEventListener("pointermove", onPointerMove, { passive: false });
      this._domElement.ownerDocument.removeEventListener("pointerup", onPointerUp);
      this._domElement.ownerDocument.addEventListener("pointermove", onPointerMove, { passive: false });
      this._domElement.ownerDocument.addEventListener("pointerup", onPointerUp);
      this._isDragging = true;
      startDragging(event);
    };
    const onPointerMove = (event) => {
      if (event.cancelable)
        event.preventDefault();
      const pointerId = event.pointerId;
      const pointer = this._lockedPointer || this._findPointerById(pointerId);
      if (!pointer)
        return;
      pointer.clientX = event.clientX;
      pointer.clientY = event.clientY;
      pointer.deltaX = event.movementX;
      pointer.deltaY = event.movementY;
      this._state = 0;
      if (event.pointerType === "touch") {
        switch (this._activePointers.length) {
          case 1:
            this._state = this.touches.one;
            break;
          case 2:
            this._state = this.touches.two;
            break;
          case 3:
            this._state = this.touches.three;
            break;
        }
      } else {
        if (!this._isDragging && this._lockedPointer || this._isDragging && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {
          this._state = this._state | this.mouseButtons.left;
        }
        if (this._isDragging && (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {
          this._state = this._state | this.mouseButtons.middle;
        }
        if (this._isDragging && (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {
          this._state = this._state | this.mouseButtons.right;
        }
      }
      dragging();
    };
    const onPointerUp = (event) => {
      const pointer = this._findPointerById(event.pointerId);
      if (pointer && pointer === this._lockedPointer)
        return;
      pointer && this._disposePointer(pointer);
      if (event.pointerType === "touch") {
        switch (this._activePointers.length) {
          case 0:
            this._state = ACTION.NONE;
            break;
          case 1:
            this._state = this.touches.one;
            break;
          case 2:
            this._state = this.touches.two;
            break;
          case 3:
            this._state = this.touches.three;
            break;
        }
      } else {
        this._state = ACTION.NONE;
      }
      endDragging();
    };
    let lastScrollTimeStamp = -1;
    const onMouseWheel = (event) => {
      if (!this._domElement)
        return;
      if (!this._enabled || this.mouseButtons.wheel === ACTION.NONE)
        return;
      if (this._interactiveArea.left !== 0 || this._interactiveArea.top !== 0 || this._interactiveArea.width !== 1 || this._interactiveArea.height !== 1) {
        const elRect = this._domElement.getBoundingClientRect();
        const left = event.clientX / elRect.width;
        const top = event.clientY / elRect.height;
        if (left < this._interactiveArea.left || left > this._interactiveArea.right || top < this._interactiveArea.top || top > this._interactiveArea.bottom)
          return;
      }
      event.preventDefault();
      if (this.dollyToCursor || this.mouseButtons.wheel === ACTION.ROTATE || this.mouseButtons.wheel === ACTION.TRUCK) {
        const now2 = performance.now();
        if (lastScrollTimeStamp - now2 < 1e3)
          this._getClientRect(this._elementRect);
        lastScrollTimeStamp = now2;
      }
      const deltaYFactor = isMac ? -1 : -3;
      const delta = event.deltaMode === 1 || event.ctrlKey ? event.deltaY / deltaYFactor : event.deltaY / (deltaYFactor * 10);
      const x2 = this.dollyToCursor ? (event.clientX - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;
      const y2 = this.dollyToCursor ? (event.clientY - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;
      switch (this.mouseButtons.wheel) {
        case ACTION.ROTATE: {
          this._rotateInternal(event.deltaX, event.deltaY);
          this._isUserControllingRotate = true;
          break;
        }
        case ACTION.TRUCK: {
          this._truckInternal(event.deltaX, event.deltaY, false, false);
          this._isUserControllingTruck = true;
          break;
        }
        case ACTION.SCREEN_PAN: {
          this._truckInternal(event.deltaX, event.deltaY, false, true);
          this._isUserControllingTruck = true;
          break;
        }
        case ACTION.OFFSET: {
          this._truckInternal(event.deltaX, event.deltaY, true, false);
          this._isUserControllingOffset = true;
          break;
        }
        case ACTION.DOLLY: {
          this._dollyInternal(-delta, x2, y2);
          this._isUserControllingDolly = true;
          break;
        }
        case ACTION.ZOOM: {
          this._zoomInternal(-delta, x2, y2);
          this._isUserControllingZoom = true;
          break;
        }
      }
      this.dispatchEvent({ type: "control" });
    };
    const onContextMenu = (event) => {
      if (!this._domElement || !this._enabled)
        return;
      if (this.mouseButtons.right === _CameraControls.ACTION.NONE) {
        const pointerId = event instanceof PointerEvent ? event.pointerId : 0;
        const pointer = this._findPointerById(pointerId);
        pointer && this._disposePointer(pointer);
        this._domElement.ownerDocument.removeEventListener("pointermove", onPointerMove, { passive: false });
        this._domElement.ownerDocument.removeEventListener("pointerup", onPointerUp);
        return;
      }
      event.preventDefault();
    };
    const startDragging = (event) => {
      if (!this._enabled)
        return;
      extractClientCoordFromEvent(this._activePointers, _v2);
      this._getClientRect(this._elementRect);
      dragStartPosition.copy(_v2);
      lastDragPosition.copy(_v2);
      const isMultiTouch = this._activePointers.length >= 2;
      if (isMultiTouch) {
        const dx = _v2.x - this._activePointers[1].clientX;
        const dy = _v2.y - this._activePointers[1].clientY;
        const distance3 = Math.sqrt(dx * dx + dy * dy);
        dollyStart.set(0, distance3);
        const x2 = (this._activePointers[0].clientX + this._activePointers[1].clientX) * 0.5;
        const y2 = (this._activePointers[0].clientY + this._activePointers[1].clientY) * 0.5;
        lastDragPosition.set(x2, y2);
      }
      this._state = 0;
      if (!event) {
        if (this._lockedPointer)
          this._state = this._state | this.mouseButtons.left;
      } else if ("pointerType" in event && event.pointerType === "touch") {
        switch (this._activePointers.length) {
          case 1:
            this._state = this.touches.one;
            break;
          case 2:
            this._state = this.touches.two;
            break;
          case 3:
            this._state = this.touches.three;
            break;
        }
      } else {
        if (!this._lockedPointer && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {
          this._state = this._state | this.mouseButtons.left;
        }
        if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {
          this._state = this._state | this.mouseButtons.middle;
        }
        if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {
          this._state = this._state | this.mouseButtons.right;
        }
      }
      if ((this._state & ACTION.ROTATE) === ACTION.ROTATE || (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {
        this._sphericalEnd.theta = this._spherical.theta;
        this._sphericalEnd.phi = this._spherical.phi;
        this._thetaVelocity.value = 0;
        this._phiVelocity.value = 0;
      }
      if ((this._state & ACTION.TRUCK) === ACTION.TRUCK || (this._state & ACTION.SCREEN_PAN) === ACTION.SCREEN_PAN || (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK || (this._state & ACTION.TOUCH_SCREEN_PAN) === ACTION.TOUCH_SCREEN_PAN || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_DOLLY_SCREEN_PAN) === ACTION.TOUCH_DOLLY_SCREEN_PAN || (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK || (this._state & ACTION.TOUCH_ZOOM_SCREEN_PAN) === ACTION.TOUCH_DOLLY_SCREEN_PAN) {
        this._targetEnd.copy(this._target);
        this._targetVelocity.set(0, 0, 0);
      }
      if ((this._state & ACTION.DOLLY) === ACTION.DOLLY || (this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_DOLLY_SCREEN_PAN) === ACTION.TOUCH_DOLLY_SCREEN_PAN || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE) {
        this._sphericalEnd.radius = this._spherical.radius;
        this._radiusVelocity.value = 0;
      }
      if ((this._state & ACTION.ZOOM) === ACTION.ZOOM || (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM || (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK || (this._state & ACTION.TOUCH_ZOOM_SCREEN_PAN) === ACTION.TOUCH_ZOOM_SCREEN_PAN || (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET || (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {
        this._zoomEnd = this._zoom;
        this._zoomVelocity.value = 0;
      }
      if ((this._state & ACTION.OFFSET) === ACTION.OFFSET || (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {
        this._focalOffsetEnd.copy(this._focalOffset);
        this._focalOffsetVelocity.set(0, 0, 0);
      }
      this.dispatchEvent({ type: "controlstart" });
    };
    const dragging = () => {
      if (!this._enabled || !this._dragNeedsUpdate)
        return;
      this._dragNeedsUpdate = false;
      extractClientCoordFromEvent(this._activePointers, _v2);
      const isPointerLockActive = this._domElement && this._domElement.ownerDocument.pointerLockElement === this._domElement;
      const lockedPointer = isPointerLockActive ? this._lockedPointer || this._activePointers[0] : null;
      const deltaX = lockedPointer ? -lockedPointer.deltaX : lastDragPosition.x - _v2.x;
      const deltaY = lockedPointer ? -lockedPointer.deltaY : lastDragPosition.y - _v2.y;
      lastDragPosition.copy(_v2);
      if ((this._state & ACTION.ROTATE) === ACTION.ROTATE || (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {
        this._rotateInternal(deltaX, deltaY);
        this._isUserControllingRotate = true;
      }
      if ((this._state & ACTION.DOLLY) === ACTION.DOLLY || (this._state & ACTION.ZOOM) === ACTION.ZOOM) {
        const dollyX = this.dollyToCursor ? (dragStartPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;
        const dollyY = this.dollyToCursor ? (dragStartPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;
        const dollyDirection = this.dollyDragInverted ? -1 : 1;
        if ((this._state & ACTION.DOLLY) === ACTION.DOLLY) {
          this._dollyInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);
          this._isUserControllingDolly = true;
        } else {
          this._zoomInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);
          this._isUserControllingZoom = true;
        }
      }
      if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY || (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK || (this._state & ACTION.TOUCH_DOLLY_SCREEN_PAN) === ACTION.TOUCH_DOLLY_SCREEN_PAN || (this._state & ACTION.TOUCH_ZOOM_SCREEN_PAN) === ACTION.TOUCH_ZOOM_SCREEN_PAN || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {
        const dx = _v2.x - this._activePointers[1].clientX;
        const dy = _v2.y - this._activePointers[1].clientY;
        const distance3 = Math.sqrt(dx * dx + dy * dy);
        const dollyDelta = dollyStart.y - distance3;
        dollyStart.set(0, distance3);
        const dollyX = this.dollyToCursor ? (lastDragPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;
        const dollyY = this.dollyToCursor ? (lastDragPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;
        if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_DOLLY_SCREEN_PAN) === ACTION.TOUCH_DOLLY_SCREEN_PAN || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET) {
          this._dollyInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);
          this._isUserControllingDolly = true;
        } else {
          this._zoomInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);
          this._isUserControllingZoom = true;
        }
      }
      if ((this._state & ACTION.TRUCK) === ACTION.TRUCK || (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {
        this._truckInternal(deltaX, deltaY, false, false);
        this._isUserControllingTruck = true;
      }
      if ((this._state & ACTION.SCREEN_PAN) === ACTION.SCREEN_PAN || (this._state & ACTION.TOUCH_SCREEN_PAN) === ACTION.TOUCH_SCREEN_PAN || (this._state & ACTION.TOUCH_DOLLY_SCREEN_PAN) === ACTION.TOUCH_DOLLY_SCREEN_PAN || (this._state & ACTION.TOUCH_ZOOM_SCREEN_PAN) === ACTION.TOUCH_ZOOM_SCREEN_PAN) {
        this._truckInternal(deltaX, deltaY, false, true);
        this._isUserControllingTruck = true;
      }
      if ((this._state & ACTION.OFFSET) === ACTION.OFFSET || (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {
        this._truckInternal(deltaX, deltaY, true, false);
        this._isUserControllingOffset = true;
      }
      this.dispatchEvent({ type: "control" });
    };
    const endDragging = () => {
      extractClientCoordFromEvent(this._activePointers, _v2);
      lastDragPosition.copy(_v2);
      this._dragNeedsUpdate = false;
      if (this._activePointers.length === 0 || this._activePointers.length === 1 && this._activePointers[0] === this._lockedPointer) {
        this._isDragging = false;
      }
      if (this._activePointers.length === 0 && this._domElement) {
        this._domElement.ownerDocument.removeEventListener("pointermove", onPointerMove, { passive: false });
        this._domElement.ownerDocument.removeEventListener("pointerup", onPointerUp);
        this.dispatchEvent({ type: "controlend" });
      }
    };
    this.lockPointer = () => {
      if (!this._enabled || !this._domElement)
        return;
      this.cancel();
      this._lockedPointer = {
        pointerId: -1,
        clientX: 0,
        clientY: 0,
        deltaX: 0,
        deltaY: 0,
        mouseButton: null
      };
      this._activePointers.push(this._lockedPointer);
      this._domElement.ownerDocument.removeEventListener("pointermove", onPointerMove, { passive: false });
      this._domElement.ownerDocument.removeEventListener("pointerup", onPointerUp);
      this._domElement.requestPointerLock();
      this._domElement.ownerDocument.addEventListener("pointerlockchange", onPointerLockChange);
      this._domElement.ownerDocument.addEventListener("pointerlockerror", onPointerLockError);
      this._domElement.ownerDocument.addEventListener("pointermove", onPointerMove, { passive: false });
      this._domElement.ownerDocument.addEventListener("pointerup", onPointerUp);
      startDragging();
    };
    this.unlockPointer = () => {
      var _a3, _b, _c;
      if (this._lockedPointer !== null) {
        this._disposePointer(this._lockedPointer);
        this._lockedPointer = null;
      }
      (_a3 = this._domElement) === null || _a3 === void 0 ? void 0 : _a3.ownerDocument.exitPointerLock();
      (_b = this._domElement) === null || _b === void 0 ? void 0 : _b.ownerDocument.removeEventListener("pointerlockchange", onPointerLockChange);
      (_c = this._domElement) === null || _c === void 0 ? void 0 : _c.ownerDocument.removeEventListener("pointerlockerror", onPointerLockError);
      this.cancel();
    };
    const onPointerLockChange = () => {
      const isPointerLockActive = this._domElement && this._domElement.ownerDocument.pointerLockElement === this._domElement;
      if (!isPointerLockActive)
        this.unlockPointer();
    };
    const onPointerLockError = () => {
      this.unlockPointer();
    };
    this._addAllEventListeners = (domElement2) => {
      this._domElement = domElement2;
      this._domElement.style.touchAction = "none";
      this._domElement.style.userSelect = "none";
      this._domElement.style.webkitUserSelect = "none";
      this._domElement.addEventListener("pointerdown", onPointerDown);
      this._domElement.addEventListener("pointercancel", onPointerUp);
      this._domElement.addEventListener("wheel", onMouseWheel, { passive: false });
      this._domElement.addEventListener("contextmenu", onContextMenu);
    };
    this._removeAllEventListeners = () => {
      if (!this._domElement)
        return;
      this._domElement.style.touchAction = "";
      this._domElement.style.userSelect = "";
      this._domElement.style.webkitUserSelect = "";
      this._domElement.removeEventListener("pointerdown", onPointerDown);
      this._domElement.removeEventListener("pointercancel", onPointerUp);
      this._domElement.removeEventListener("wheel", onMouseWheel, { passive: false });
      this._domElement.removeEventListener("contextmenu", onContextMenu);
      this._domElement.ownerDocument.removeEventListener("pointermove", onPointerMove, { passive: false });
      this._domElement.ownerDocument.removeEventListener("pointerup", onPointerUp);
      this._domElement.ownerDocument.removeEventListener("pointerlockchange", onPointerLockChange);
      this._domElement.ownerDocument.removeEventListener("pointerlockerror", onPointerLockError);
    };
    this.cancel = () => {
      if (this._state === ACTION.NONE)
        return;
      this._state = ACTION.NONE;
      this._activePointers.length = 0;
      endDragging();
    };
    if (domElement)
      this.connect(domElement);
    this.update(0);
  }
  /**
   * The camera to be controlled
   * @category Properties
   */
  get camera() {
    return this._camera;
  }
  set camera(camera) {
    this._camera = camera;
    this.updateCameraUp();
    this._camera.updateProjectionMatrix();
    this._updateNearPlaneCorners();
    this._needsUpdate = true;
  }
  /**
   * Whether or not the controls are enabled.
   * `false` to disable user dragging/touch-move, but all methods works.
   * @category Properties
   */
  get enabled() {
    return this._enabled;
  }
  set enabled(enabled) {
    this._enabled = enabled;
    if (!this._domElement)
      return;
    if (enabled) {
      this._domElement.style.touchAction = "none";
      this._domElement.style.userSelect = "none";
      this._domElement.style.webkitUserSelect = "none";
    } else {
      this.cancel();
      this._domElement.style.touchAction = "";
      this._domElement.style.userSelect = "";
      this._domElement.style.webkitUserSelect = "";
    }
  }
  /**
   * Returns `true` if the controls are active updating.
   * readonly value.
   * @category Properties
   */
  get active() {
    return !this._hasRested;
  }
  /**
   * Getter for the current `ACTION`.
   * readonly value.
   * @category Properties
   */
  get currentAction() {
    return this._state;
  }
  /**
   * get/set Current distance.
   * @category Properties
   */
  get distance() {
    return this._spherical.radius;
  }
  set distance(distance3) {
    if (this._spherical.radius === distance3 && this._sphericalEnd.radius === distance3)
      return;
    this._spherical.radius = distance3;
    this._sphericalEnd.radius = distance3;
    this._needsUpdate = true;
  }
  // horizontal angle
  /**
   * get/set the azimuth angle (horizontal) in radians.
   * Every 360 degrees turn is added to `.azimuthAngle` value, which is accumulative.
   * @category Properties
   */
  get azimuthAngle() {
    return this._spherical.theta;
  }
  set azimuthAngle(azimuthAngle) {
    if (this._spherical.theta === azimuthAngle && this._sphericalEnd.theta === azimuthAngle)
      return;
    this._spherical.theta = azimuthAngle;
    this._sphericalEnd.theta = azimuthAngle;
    this._needsUpdate = true;
  }
  // vertical angle
  /**
   * get/set the polar angle (vertical) in radians.
   * @category Properties
   */
  get polarAngle() {
    return this._spherical.phi;
  }
  set polarAngle(polarAngle) {
    if (this._spherical.phi === polarAngle && this._sphericalEnd.phi === polarAngle)
      return;
    this._spherical.phi = polarAngle;
    this._sphericalEnd.phi = polarAngle;
    this._needsUpdate = true;
  }
  /**
   * Whether camera position should be enclosed in the boundary or not.
   * @category Properties
   */
  get boundaryEnclosesCamera() {
    return this._boundaryEnclosesCamera;
  }
  set boundaryEnclosesCamera(boundaryEnclosesCamera) {
    this._boundaryEnclosesCamera = boundaryEnclosesCamera;
    this._needsUpdate = true;
  }
  /**
   * Set drag-start, touches and wheel enable area in the domElement.
   * each values are between `0` and `1` inclusive, where `0` is left/top and `1` is right/bottom of the screen.
   * e.g. `{ x: 0, y: 0, width: 1, height: 1 }` for entire area.
   * @category Properties
   */
  set interactiveArea(interactiveArea) {
    this._interactiveArea.width = clamp2(interactiveArea.width, 0, 1);
    this._interactiveArea.height = clamp2(interactiveArea.height, 0, 1);
    this._interactiveArea.x = clamp2(interactiveArea.x, 0, 1 - this._interactiveArea.width);
    this._interactiveArea.y = clamp2(interactiveArea.y, 0, 1 - this._interactiveArea.height);
  }
  /**
   * Adds the specified event listener.
   * Applicable event types (which is `K`) are:
   * | Event name          | Timing |
   * | ------------------- | ------ |
   * | `'controlstart'`    | When the user starts to control the camera via mouse / touches. ¹ |
   * | `'control'`         | When the user controls the camera (dragging). |
   * | `'controlend'`      | When the user ends to control the camera. ¹ |
   * | `'transitionstart'` | When any kind of transition starts, either user control or using a method with `enableTransition = true` |
   * | `'update'`          | When the camera position is updated. |
   * | `'wake'`            | When the camera starts moving. |
   * | `'rest'`            | When the camera movement is below `.restThreshold` ². |
   * | `'sleep'`           | When the camera end moving. |
   *
   * 1. `mouseButtons.wheel` (Mouse wheel control) does not emit `'controlstart'` and `'controlend'`. `mouseButtons.wheel` uses scroll-event internally, and scroll-event happens intermittently. That means "start" and "end" cannot be detected.
   * 2. Due to damping, `sleep` will usually fire a few seconds after the camera _appears_ to have stopped moving. If you want to do something (e.g. enable UI, perform another transition) at the point when the camera has stopped, you probably want the `rest` event. This can be fine tuned using the `.restThreshold` parameter. See the [Rest and Sleep Example](https://yomotsu.github.io/camera-controls/examples/rest-and-sleep.html).
   *
   * e.g.
   * ```
   * cameraControl.addEventListener( 'controlstart', myCallbackFunction );
   * ```
   * @param type event name
   * @param listener handler function
   * @category Methods
   */
  addEventListener(type, listener) {
    super.addEventListener(type, listener);
  }
  /**
   * Removes the specified event listener
   * e.g.
   * ```
   * cameraControl.addEventListener( 'controlstart', myCallbackFunction );
   * ```
   * @param type event name
   * @param listener handler function
   * @category Methods
   */
  removeEventListener(type, listener) {
    super.removeEventListener(type, listener);
  }
  /**
   * Rotate azimuthal angle(horizontal) and polar angle(vertical).
   * Every value is added to the current value.
   * @param azimuthAngle Azimuth rotate angle. In radian.
   * @param polarAngle Polar rotate angle. In radian.
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  rotate(azimuthAngle, polarAngle, enableTransition = false) {
    return this.rotateTo(this._sphericalEnd.theta + azimuthAngle, this._sphericalEnd.phi + polarAngle, enableTransition);
  }
  /**
   * Rotate azimuthal angle(horizontal) to the given angle and keep the same polar angle(vertical) target.
   *
   * e.g.
   * ```
   * cameraControls.rotateAzimuthTo( 30 * THREE.MathUtils.DEG2RAD, true );
   * ```
   * @param azimuthAngle Azimuth rotate angle. In radian.
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  rotateAzimuthTo(azimuthAngle, enableTransition = false) {
    return this.rotateTo(azimuthAngle, this._sphericalEnd.phi, enableTransition);
  }
  /**
   * Rotate polar angle(vertical) to the given angle and keep the same azimuthal angle(horizontal) target.
   *
   * e.g.
   * ```
   * cameraControls.rotatePolarTo( 30 * THREE.MathUtils.DEG2RAD, true );
   * ```
   * @param polarAngle Polar rotate angle. In radian.
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  rotatePolarTo(polarAngle, enableTransition = false) {
    return this.rotateTo(this._sphericalEnd.theta, polarAngle, enableTransition);
  }
  /**
   * Rotate azimuthal angle(horizontal) and polar angle(vertical) to the given angle.
   * Camera view will rotate over the orbit pivot absolutely:
   *
   * azimuthAngle
   * ```
   *       0º
   *         \
   * 90º -----+----- -90º
   *           \
   *           180º
   * ```
   * | direction | angle                  |
   * | --------- | ---------------------- |
   * | front     | 0º                     |
   * | left      | 90º (`Math.PI / 2`)    |
   * | right     | -90º (`- Math.PI / 2`) |
   * | back      | 180º (`Math.PI`)       |
   *
   * polarAngle
   * ```
   *     180º
   *      |
   *      90º
   *      |
   *      0º
   * ```
   * | direction            | angle                  |
   * | -------------------- | ---------------------- |
   * | top/sky              | 180º (`Math.PI`)       |
   * | horizontal from view | 90º (`Math.PI / 2`)    |
   * | bottom/floor         | 0º                     |
   *
   * @param azimuthAngle Azimuth rotate angle to. In radian.
   * @param polarAngle Polar rotate angle to. In radian.
   * @param enableTransition  Whether to move smoothly or immediately
   * @category Methods
   */
  rotateTo(azimuthAngle, polarAngle, enableTransition = false) {
    this._isUserControllingRotate = false;
    const theta = clamp2(azimuthAngle, this.minAzimuthAngle, this.maxAzimuthAngle);
    const phi = clamp2(polarAngle, this.minPolarAngle, this.maxPolarAngle);
    this._sphericalEnd.theta = theta;
    this._sphericalEnd.phi = phi;
    this._sphericalEnd.makeSafe();
    this._needsUpdate = true;
    if (!enableTransition) {
      this._spherical.theta = this._sphericalEnd.theta;
      this._spherical.phi = this._sphericalEnd.phi;
    }
    const resolveImmediately = !enableTransition || approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold);
    return this._createOnRestPromise(resolveImmediately);
  }
  /**
   * Dolly in/out camera position.
   * @param distance Distance of dollyIn. Negative number for dollyOut.
   * @param enableTransition Whether to move smoothly or immediately.
   * @category Methods
   */
  dolly(distance3, enableTransition = false) {
    return this.dollyTo(this._sphericalEnd.radius - distance3, enableTransition);
  }
  /**
   * Dolly in/out camera position to given distance.
   * @param distance Distance of dolly.
   * @param enableTransition Whether to move smoothly or immediately.
   * @category Methods
   */
  dollyTo(distance3, enableTransition = false) {
    this._isUserControllingDolly = false;
    this._lastDollyDirection = DOLLY_DIRECTION.NONE;
    this._changedDolly = 0;
    return this._dollyToNoClamp(clamp2(distance3, this.minDistance, this.maxDistance), enableTransition);
  }
  _dollyToNoClamp(distance3, enableTransition = false) {
    const lastRadius = this._sphericalEnd.radius;
    const hasCollider = this.colliderMeshes.length >= 1;
    if (hasCollider) {
      const maxDistanceByCollisionTest = this._collisionTest();
      const isCollided = approxEquals(maxDistanceByCollisionTest, this._spherical.radius);
      const isDollyIn = lastRadius > distance3;
      if (!isDollyIn && isCollided)
        return Promise.resolve();
      this._sphericalEnd.radius = Math.min(distance3, maxDistanceByCollisionTest);
    } else {
      this._sphericalEnd.radius = distance3;
    }
    this._needsUpdate = true;
    if (!enableTransition) {
      this._spherical.radius = this._sphericalEnd.radius;
    }
    const resolveImmediately = !enableTransition || approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);
    return this._createOnRestPromise(resolveImmediately);
  }
  /**
   * Dolly in, but does not change the distance between the target and the camera, and moves the target position instead.
   * Specify a negative value for dolly out.
   * @param distance Distance of dolly.
   * @param enableTransition Whether to move smoothly or immediately.
   * @category Methods
   */
  dollyInFixed(distance3, enableTransition = false) {
    this._targetEnd.add(this._getCameraDirection(_cameraDirection).multiplyScalar(distance3));
    if (!enableTransition) {
      this._target.copy(this._targetEnd);
    }
    const resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold);
    return this._createOnRestPromise(resolveImmediately);
  }
  /**
   * Zoom in/out camera. The value is added to camera zoom.
   * Limits set with `.minZoom` and `.maxZoom`
   * @param zoomStep zoom scale
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  zoom(zoomStep, enableTransition = false) {
    return this.zoomTo(this._zoomEnd + zoomStep, enableTransition);
  }
  /**
   * Zoom in/out camera to given scale. The value overwrites camera zoom.
   * Limits set with .minZoom and .maxZoom
   * @param zoom
   * @param enableTransition
   * @category Methods
   */
  zoomTo(zoom, enableTransition = false) {
    this._isUserControllingZoom = false;
    this._zoomEnd = clamp2(zoom, this.minZoom, this.maxZoom);
    this._needsUpdate = true;
    if (!enableTransition) {
      this._zoom = this._zoomEnd;
    }
    const resolveImmediately = !enableTransition || approxEquals(this._zoom, this._zoomEnd, this.restThreshold);
    this._changedZoom = 0;
    return this._createOnRestPromise(resolveImmediately);
  }
  /**
   * @deprecated `pan()` has been renamed to `truck()`
   * @category Methods
   */
  pan(x2, y2, enableTransition = false) {
    console.warn("`pan` has been renamed to `truck`");
    return this.truck(x2, y2, enableTransition);
  }
  /**
   * Truck and pedestal camera using current azimuthal angle
   * @param x Horizontal translate amount
   * @param y Vertical translate amount
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  truck(x2, y2, enableTransition = false) {
    this._camera.updateMatrix();
    _xColumn.setFromMatrixColumn(this._camera.matrix, 0);
    _yColumn.setFromMatrixColumn(this._camera.matrix, 1);
    _xColumn.multiplyScalar(x2);
    _yColumn.multiplyScalar(-y2);
    const offset = _v3A.copy(_xColumn).add(_yColumn);
    const to2 = _v3B.copy(this._targetEnd).add(offset);
    return this.moveTo(to2.x, to2.y, to2.z, enableTransition);
  }
  /**
   * Move forward / backward.
   * @param distance Amount to move forward / backward. Negative value to move backward
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  forward(distance3, enableTransition = false) {
    _v3A.setFromMatrixColumn(this._camera.matrix, 0);
    _v3A.crossVectors(this._camera.up, _v3A);
    _v3A.multiplyScalar(distance3);
    const to2 = _v3B.copy(this._targetEnd).add(_v3A);
    return this.moveTo(to2.x, to2.y, to2.z, enableTransition);
  }
  /**
   * Move up / down.
   * @param height Amount to move up / down. Negative value to move down
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  elevate(height, enableTransition = false) {
    _v3A.copy(this._camera.up).multiplyScalar(height);
    return this.moveTo(this._targetEnd.x + _v3A.x, this._targetEnd.y + _v3A.y, this._targetEnd.z + _v3A.z, enableTransition);
  }
  /**
   * Move target position to given point.
   * @param x x coord to move center position
   * @param y y coord to move center position
   * @param z z coord to move center position
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  moveTo(x2, y2, z2, enableTransition = false) {
    this._isUserControllingTruck = false;
    const offset = _v3A.set(x2, y2, z2).sub(this._targetEnd);
    this._encloseToBoundary(this._targetEnd, offset, this.boundaryFriction);
    this._needsUpdate = true;
    if (!enableTransition) {
      this._target.copy(this._targetEnd);
    }
    const resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold);
    return this._createOnRestPromise(resolveImmediately);
  }
  /**
   * Look in the given point direction.
   * @param x point x.
   * @param y point y.
   * @param z point z.
   * @param enableTransition Whether to move smoothly or immediately.
   * @returns Transition end promise
   * @category Methods
   */
  lookInDirectionOf(x2, y2, z2, enableTransition = false) {
    const point = _v3A.set(x2, y2, z2);
    const direction = point.sub(this._targetEnd).normalize();
    const position2 = direction.multiplyScalar(-this._sphericalEnd.radius).add(this._targetEnd);
    return this.setPosition(position2.x, position2.y, position2.z, enableTransition);
  }
  /**
   * Fit the viewport to the box or the bounding box of the object, using the nearest axis. paddings are in unit.
   * set `cover: true` to fill enter screen.
   * e.g.
   * ```
   * cameraControls.fitToBox( myMesh );
   * ```
   * @param box3OrObject Axis aligned bounding box to fit the view.
   * @param enableTransition Whether to move smoothly or immediately.
   * @param options | `<object>` { cover: boolean, paddingTop: number, paddingLeft: number, paddingBottom: number, paddingRight: number }
   * @returns Transition end promise
   * @category Methods
   */
  fitToBox(box3OrObject, enableTransition, { cover = false, paddingLeft = 0, paddingRight = 0, paddingBottom = 0, paddingTop = 0 } = {}) {
    const promises = [];
    const aabb3 = box3OrObject.isBox3 ? _box3A.copy(box3OrObject) : _box3A.setFromObject(box3OrObject);
    if (aabb3.isEmpty()) {
      console.warn("camera-controls: fitTo() cannot be used with an empty box. Aborting");
      Promise.resolve();
    }
    const theta = roundToStep(this._sphericalEnd.theta, PI_HALF);
    const phi = roundToStep(this._sphericalEnd.phi, PI_HALF);
    promises.push(this.rotateTo(theta, phi, enableTransition));
    const normal2 = _v3A.setFromSpherical(this._sphericalEnd).normalize();
    const rotation2 = _quaternionA.setFromUnitVectors(normal2, _AXIS_Z);
    const viewFromPolar = approxEquals(Math.abs(normal2.y), 1);
    if (viewFromPolar) {
      rotation2.multiply(_quaternionB.setFromAxisAngle(_AXIS_Y, theta));
    }
    rotation2.multiply(this._yAxisUpSpaceInverse);
    const bb2 = _box3B.makeEmpty();
    _v3B.copy(aabb3.min).applyQuaternion(rotation2);
    bb2.expandByPoint(_v3B);
    _v3B.copy(aabb3.min).setX(aabb3.max.x).applyQuaternion(rotation2);
    bb2.expandByPoint(_v3B);
    _v3B.copy(aabb3.min).setY(aabb3.max.y).applyQuaternion(rotation2);
    bb2.expandByPoint(_v3B);
    _v3B.copy(aabb3.max).setZ(aabb3.min.z).applyQuaternion(rotation2);
    bb2.expandByPoint(_v3B);
    _v3B.copy(aabb3.min).setZ(aabb3.max.z).applyQuaternion(rotation2);
    bb2.expandByPoint(_v3B);
    _v3B.copy(aabb3.max).setY(aabb3.min.y).applyQuaternion(rotation2);
    bb2.expandByPoint(_v3B);
    _v3B.copy(aabb3.max).setX(aabb3.min.x).applyQuaternion(rotation2);
    bb2.expandByPoint(_v3B);
    _v3B.copy(aabb3.max).applyQuaternion(rotation2);
    bb2.expandByPoint(_v3B);
    bb2.min.x -= paddingLeft;
    bb2.min.y -= paddingBottom;
    bb2.max.x += paddingRight;
    bb2.max.y += paddingTop;
    rotation2.setFromUnitVectors(_AXIS_Z, normal2);
    if (viewFromPolar) {
      rotation2.premultiply(_quaternionB.invert());
    }
    rotation2.premultiply(this._yAxisUpSpace);
    const bbSize = bb2.getSize(_v3A);
    const center2 = bb2.getCenter(_v3B).applyQuaternion(rotation2);
    if (isPerspectiveCamera(this._camera)) {
      const distance3 = this.getDistanceToFitBox(bbSize.x, bbSize.y, bbSize.z, cover);
      promises.push(this.moveTo(center2.x, center2.y, center2.z, enableTransition));
      promises.push(this.dollyTo(distance3, enableTransition));
      promises.push(this.setFocalOffset(0, 0, 0, enableTransition));
    } else if (isOrthographicCamera(this._camera)) {
      const camera = this._camera;
      const width = camera.right - camera.left;
      const height = camera.top - camera.bottom;
      const zoom = cover ? Math.max(width / bbSize.x, height / bbSize.y) : Math.min(width / bbSize.x, height / bbSize.y);
      promises.push(this.moveTo(center2.x, center2.y, center2.z, enableTransition));
      promises.push(this.zoomTo(zoom, enableTransition));
      promises.push(this.setFocalOffset(0, 0, 0, enableTransition));
    }
    return Promise.all(promises);
  }
  /**
   * Fit the viewport to the sphere or the bounding sphere of the object.
   * @param sphereOrMesh
   * @param enableTransition
   * @category Methods
   */
  fitToSphere(sphereOrMesh, enableTransition) {
    const promises = [];
    const isObject3D = "isObject3D" in sphereOrMesh;
    const boundingSphere = isObject3D ? _CameraControls.createBoundingSphere(sphereOrMesh, _sphere) : _sphere.copy(sphereOrMesh);
    promises.push(this.moveTo(boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z, enableTransition));
    if (isPerspectiveCamera(this._camera)) {
      const distanceToFit = this.getDistanceToFitSphere(boundingSphere.radius);
      promises.push(this.dollyTo(distanceToFit, enableTransition));
    } else if (isOrthographicCamera(this._camera)) {
      const width = this._camera.right - this._camera.left;
      const height = this._camera.top - this._camera.bottom;
      const diameter = 2 * boundingSphere.radius;
      const zoom = Math.min(width / diameter, height / diameter);
      promises.push(this.zoomTo(zoom, enableTransition));
    }
    promises.push(this.setFocalOffset(0, 0, 0, enableTransition));
    return Promise.all(promises);
  }
  /**
   * Look at the `target` from the `position`.
   * @param positionX
   * @param positionY
   * @param positionZ
   * @param targetX
   * @param targetY
   * @param targetZ
   * @param enableTransition
   * @category Methods
   */
  setLookAt(positionX, positionY, positionZ, targetX, targetY, targetZ, enableTransition = false) {
    this._isUserControllingRotate = false;
    this._isUserControllingDolly = false;
    this._isUserControllingTruck = false;
    this._lastDollyDirection = DOLLY_DIRECTION.NONE;
    this._changedDolly = 0;
    const target2 = _v3B.set(targetX, targetY, targetZ);
    const position2 = _v3A.set(positionX, positionY, positionZ);
    this._targetEnd.copy(target2);
    this._sphericalEnd.setFromVector3(position2.sub(target2).applyQuaternion(this._yAxisUpSpace));
    this.normalizeRotations();
    this._needsUpdate = true;
    if (!enableTransition) {
      this._target.copy(this._targetEnd);
      this._spherical.copy(this._sphericalEnd);
    }
    const resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) && approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) && approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);
    return this._createOnRestPromise(resolveImmediately);
  }
  /**
   * Similar to setLookAt, but it interpolates between two states.
   * @param positionAX
   * @param positionAY
   * @param positionAZ
   * @param targetAX
   * @param targetAY
   * @param targetAZ
   * @param positionBX
   * @param positionBY
   * @param positionBZ
   * @param targetBX
   * @param targetBY
   * @param targetBZ
   * @param t
   * @param enableTransition
   * @category Methods
   */
  lerpLookAt(positionAX, positionAY, positionAZ, targetAX, targetAY, targetAZ, positionBX, positionBY, positionBZ, targetBX, targetBY, targetBZ, t3, enableTransition = false) {
    this._isUserControllingRotate = false;
    this._isUserControllingDolly = false;
    this._isUserControllingTruck = false;
    this._lastDollyDirection = DOLLY_DIRECTION.NONE;
    this._changedDolly = 0;
    const targetA = _v3A.set(targetAX, targetAY, targetAZ);
    const positionA = _v3B.set(positionAX, positionAY, positionAZ);
    _sphericalA.setFromVector3(positionA.sub(targetA).applyQuaternion(this._yAxisUpSpace));
    const targetB = _v3C.set(targetBX, targetBY, targetBZ);
    const positionB = _v3B.set(positionBX, positionBY, positionBZ);
    _sphericalB.setFromVector3(positionB.sub(targetB).applyQuaternion(this._yAxisUpSpace));
    this._targetEnd.copy(targetA.lerp(targetB, t3));
    const deltaTheta = _sphericalB.theta - _sphericalA.theta;
    const deltaPhi = _sphericalB.phi - _sphericalA.phi;
    const deltaRadius = _sphericalB.radius - _sphericalA.radius;
    this._sphericalEnd.set(_sphericalA.radius + deltaRadius * t3, _sphericalA.phi + deltaPhi * t3, _sphericalA.theta + deltaTheta * t3);
    this.normalizeRotations();
    this._needsUpdate = true;
    if (!enableTransition) {
      this._target.copy(this._targetEnd);
      this._spherical.copy(this._sphericalEnd);
    }
    const resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) && approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) && approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);
    return this._createOnRestPromise(resolveImmediately);
  }
  /**
   * Set angle and distance by given position.
   * An alias of `setLookAt()`, without target change. Thus keep gazing at the current target
   * @param positionX
   * @param positionY
   * @param positionZ
   * @param enableTransition
   * @category Methods
   */
  setPosition(positionX, positionY, positionZ, enableTransition = false) {
    return this.setLookAt(positionX, positionY, positionZ, this._targetEnd.x, this._targetEnd.y, this._targetEnd.z, enableTransition);
  }
  /**
   * Set the target position where gaze at.
   * An alias of `setLookAt()`, without position change. Thus keep the same position.
   * @param targetX
   * @param targetY
   * @param targetZ
   * @param enableTransition
   * @category Methods
   */
  setTarget(targetX, targetY, targetZ, enableTransition = false) {
    const pos = this.getPosition(_v3A);
    const promise = this.setLookAt(pos.x, pos.y, pos.z, targetX, targetY, targetZ, enableTransition);
    this._sphericalEnd.phi = clamp2(this._sphericalEnd.phi, this.minPolarAngle, this.maxPolarAngle);
    return promise;
  }
  /**
   * Set focal offset using the screen parallel coordinates. z doesn't affect in Orthographic as with Dolly.
   * @param x
   * @param y
   * @param z
   * @param enableTransition
   * @category Methods
   */
  setFocalOffset(x2, y2, z2, enableTransition = false) {
    this._isUserControllingOffset = false;
    this._focalOffsetEnd.set(x2, y2, z2);
    this._needsUpdate = true;
    if (!enableTransition)
      this._focalOffset.copy(this._focalOffsetEnd);
    const resolveImmediately = !enableTransition || approxEquals(this._focalOffset.x, this._focalOffsetEnd.x, this.restThreshold) && approxEquals(this._focalOffset.y, this._focalOffsetEnd.y, this.restThreshold) && approxEquals(this._focalOffset.z, this._focalOffsetEnd.z, this.restThreshold);
    return this._createOnRestPromise(resolveImmediately);
  }
  /**
   * Set orbit point without moving the camera.
   * SHOULD NOT RUN DURING ANIMATIONS. `setOrbitPoint()` will immediately fix the positions.
   * @param targetX
   * @param targetY
   * @param targetZ
   * @category Methods
   */
  setOrbitPoint(targetX, targetY, targetZ) {
    this._camera.updateMatrixWorld();
    _xColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 0);
    _yColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 1);
    _zColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 2);
    const position2 = _v3A.set(targetX, targetY, targetZ);
    const distance3 = position2.distanceTo(this._camera.position);
    const cameraToPoint = position2.sub(this._camera.position);
    _xColumn.multiplyScalar(cameraToPoint.x);
    _yColumn.multiplyScalar(cameraToPoint.y);
    _zColumn.multiplyScalar(cameraToPoint.z);
    _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);
    _v3A.z = _v3A.z + distance3;
    this.dollyTo(distance3, false);
    this.setFocalOffset(-_v3A.x, _v3A.y, -_v3A.z, false);
    this.moveTo(targetX, targetY, targetZ, false);
  }
  /**
   * Set the boundary box that encloses the target of the camera. box3 is in THREE.Box3
   * @param box3
   * @category Methods
   */
  setBoundary(box3) {
    if (!box3) {
      this._boundary.min.set(-Infinity, -Infinity, -Infinity);
      this._boundary.max.set(Infinity, Infinity, Infinity);
      this._needsUpdate = true;
      return;
    }
    this._boundary.copy(box3);
    this._boundary.clampPoint(this._targetEnd, this._targetEnd);
    this._needsUpdate = true;
  }
  /**
   * Set (or unset) the current viewport.
   * Set this when you want to use renderer viewport and .dollyToCursor feature at the same time.
   * @param viewportOrX
   * @param y
   * @param width
   * @param height
   * @category Methods
   */
  setViewport(viewportOrX, y2, width, height) {
    if (viewportOrX === null) {
      this._viewport = null;
      return;
    }
    this._viewport = this._viewport || new THREE.Vector4();
    if (typeof viewportOrX === "number") {
      this._viewport.set(viewportOrX, y2, width, height);
    } else {
      this._viewport.copy(viewportOrX);
    }
  }
  /**
   * Calculate the distance to fit the box.
   * @param width box width
   * @param height box height
   * @param depth box depth
   * @returns distance
   * @category Methods
   */
  getDistanceToFitBox(width, height, depth, cover = false) {
    if (notSupportedInOrthographicCamera(this._camera, "getDistanceToFitBox"))
      return this._spherical.radius;
    const boundingRectAspect = width / height;
    const fov = this._camera.getEffectiveFOV() * DEG2RAD;
    const aspect = this._camera.aspect;
    const heightToFit = (cover ? boundingRectAspect > aspect : boundingRectAspect < aspect) ? height : width / aspect;
    return heightToFit * 0.5 / Math.tan(fov * 0.5) + depth * 0.5;
  }
  /**
   * Calculate the distance to fit the sphere.
   * @param radius sphere radius
   * @returns distance
   * @category Methods
   */
  getDistanceToFitSphere(radius) {
    if (notSupportedInOrthographicCamera(this._camera, "getDistanceToFitSphere"))
      return this._spherical.radius;
    const vFOV = this._camera.getEffectiveFOV() * DEG2RAD;
    const hFOV = Math.atan(Math.tan(vFOV * 0.5) * this._camera.aspect) * 2;
    const fov = 1 < this._camera.aspect ? vFOV : hFOV;
    return radius / Math.sin(fov * 0.5);
  }
  /**
   * Returns the orbit center position, where the camera looking at.
   * @param out The receiving Vector3 instance to copy the result
   * @param receiveEndValue Whether receive the transition end coords or current. default is `true`
   * @category Methods
   */
  getTarget(out, receiveEndValue = true) {
    const _out = !!out && out.isVector3 ? out : new THREE.Vector3();
    return _out.copy(receiveEndValue ? this._targetEnd : this._target);
  }
  /**
   * Returns the camera position.
   * @param out The receiving Vector3 instance to copy the result
   * @param receiveEndValue Whether receive the transition end coords or current. default is `true`
   * @category Methods
   */
  getPosition(out, receiveEndValue = true) {
    const _out = !!out && out.isVector3 ? out : new THREE.Vector3();
    return _out.setFromSpherical(receiveEndValue ? this._sphericalEnd : this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(receiveEndValue ? this._targetEnd : this._target);
  }
  /**
   * Returns the spherical coordinates of the orbit.
   * @param out The receiving Spherical instance to copy the result
   * @param receiveEndValue Whether receive the transition end coords or current. default is `true`
   * @category Methods
   */
  getSpherical(out, receiveEndValue = true) {
    const _out = out || new THREE.Spherical();
    return _out.copy(receiveEndValue ? this._sphericalEnd : this._spherical);
  }
  /**
   * Returns the focal offset, which is how much the camera appears to be translated in screen parallel coordinates.
   * @param out The receiving Vector3 instance to copy the result
   * @param receiveEndValue Whether receive the transition end coords or current. default is `true`
   * @category Methods
   */
  getFocalOffset(out, receiveEndValue = true) {
    const _out = !!out && out.isVector3 ? out : new THREE.Vector3();
    return _out.copy(receiveEndValue ? this._focalOffsetEnd : this._focalOffset);
  }
  /**
   * Normalize camera azimuth angle rotation between 0 and 360 degrees.
   * @category Methods
   */
  normalizeRotations() {
    this._sphericalEnd.theta = this._sphericalEnd.theta % PI_2;
    if (this._sphericalEnd.theta < 0)
      this._sphericalEnd.theta += PI_2;
    this._spherical.theta += PI_2 * Math.round((this._sphericalEnd.theta - this._spherical.theta) / PI_2);
  }
  /**
   * stop all transitions.
   */
  stop() {
    this._focalOffset.copy(this._focalOffsetEnd);
    this._target.copy(this._targetEnd);
    this._spherical.copy(this._sphericalEnd);
    this._zoom = this._zoomEnd;
  }
  /**
   * Reset all rotation and position to defaults.
   * @param enableTransition
   * @category Methods
   */
  reset(enableTransition = false) {
    if (!approxEquals(this._camera.up.x, this._cameraUp0.x) || !approxEquals(this._camera.up.y, this._cameraUp0.y) || !approxEquals(this._camera.up.z, this._cameraUp0.z)) {
      this._camera.up.copy(this._cameraUp0);
      const position2 = this.getPosition(_v3A);
      this.updateCameraUp();
      this.setPosition(position2.x, position2.y, position2.z);
    }
    const promises = [
      this.setLookAt(this._position0.x, this._position0.y, this._position0.z, this._target0.x, this._target0.y, this._target0.z, enableTransition),
      this.setFocalOffset(this._focalOffset0.x, this._focalOffset0.y, this._focalOffset0.z, enableTransition),
      this.zoomTo(this._zoom0, enableTransition)
    ];
    return Promise.all(promises);
  }
  /**
   * Set current camera position as the default position.
   * @category Methods
   */
  saveState() {
    this._cameraUp0.copy(this._camera.up);
    this.getTarget(this._target0);
    this.getPosition(this._position0);
    this._zoom0 = this._zoom;
    this._focalOffset0.copy(this._focalOffset);
  }
  /**
   * Sync camera-up direction.
   * When camera-up vector is changed, `.updateCameraUp()` must be called.
   * @category Methods
   */
  updateCameraUp() {
    this._yAxisUpSpace.setFromUnitVectors(this._camera.up, _AXIS_Y);
    this._yAxisUpSpaceInverse.copy(this._yAxisUpSpace).invert();
  }
  /**
   * Apply current camera-up direction to the camera.
   * The orbit system will be re-initialized with the current position.
   * @category Methods
   */
  applyCameraUp() {
    const cameraDirection = _v3A.subVectors(this._target, this._camera.position).normalize();
    const side = _v3B.crossVectors(cameraDirection, this._camera.up);
    this._camera.up.crossVectors(side, cameraDirection).normalize();
    this._camera.updateMatrixWorld();
    const position2 = this.getPosition(_v3A);
    this.updateCameraUp();
    this.setPosition(position2.x, position2.y, position2.z);
  }
  /**
   * Update camera position and directions.
   * This should be called in your tick loop every time, and returns true if re-rendering is needed.
   * @param delta
   * @returns updated
   * @category Methods
   */
  update(delta) {
    const deltaTheta = this._sphericalEnd.theta - this._spherical.theta;
    const deltaPhi = this._sphericalEnd.phi - this._spherical.phi;
    const deltaRadius = this._sphericalEnd.radius - this._spherical.radius;
    const deltaTarget = _deltaTarget.subVectors(this._targetEnd, this._target);
    const deltaOffset = _deltaOffset.subVectors(this._focalOffsetEnd, this._focalOffset);
    const deltaZoom = this._zoomEnd - this._zoom;
    if (approxZero(deltaTheta)) {
      this._thetaVelocity.value = 0;
      this._spherical.theta = this._sphericalEnd.theta;
    } else {
      const smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;
      this._spherical.theta = smoothDamp(this._spherical.theta, this._sphericalEnd.theta, this._thetaVelocity, smoothTime, Infinity, delta);
      this._needsUpdate = true;
    }
    if (approxZero(deltaPhi)) {
      this._phiVelocity.value = 0;
      this._spherical.phi = this._sphericalEnd.phi;
    } else {
      const smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;
      this._spherical.phi = smoothDamp(this._spherical.phi, this._sphericalEnd.phi, this._phiVelocity, smoothTime, Infinity, delta);
      this._needsUpdate = true;
    }
    if (approxZero(deltaRadius)) {
      this._radiusVelocity.value = 0;
      this._spherical.radius = this._sphericalEnd.radius;
    } else {
      const smoothTime = this._isUserControllingDolly ? this.draggingSmoothTime : this.smoothTime;
      this._spherical.radius = smoothDamp(this._spherical.radius, this._sphericalEnd.radius, this._radiusVelocity, smoothTime, this.maxSpeed, delta);
      this._needsUpdate = true;
    }
    if (approxZero(deltaTarget.x) && approxZero(deltaTarget.y) && approxZero(deltaTarget.z)) {
      this._targetVelocity.set(0, 0, 0);
      this._target.copy(this._targetEnd);
    } else {
      const smoothTime = this._isUserControllingTruck ? this.draggingSmoothTime : this.smoothTime;
      smoothDampVec3(this._target, this._targetEnd, this._targetVelocity, smoothTime, this.maxSpeed, delta, this._target);
      this._needsUpdate = true;
    }
    if (approxZero(deltaOffset.x) && approxZero(deltaOffset.y) && approxZero(deltaOffset.z)) {
      this._focalOffsetVelocity.set(0, 0, 0);
      this._focalOffset.copy(this._focalOffsetEnd);
    } else {
      const smoothTime = this._isUserControllingOffset ? this.draggingSmoothTime : this.smoothTime;
      smoothDampVec3(this._focalOffset, this._focalOffsetEnd, this._focalOffsetVelocity, smoothTime, this.maxSpeed, delta, this._focalOffset);
      this._needsUpdate = true;
    }
    if (approxZero(deltaZoom)) {
      this._zoomVelocity.value = 0;
      this._zoom = this._zoomEnd;
    } else {
      const smoothTime = this._isUserControllingZoom ? this.draggingSmoothTime : this.smoothTime;
      this._zoom = smoothDamp(this._zoom, this._zoomEnd, this._zoomVelocity, smoothTime, Infinity, delta);
    }
    if (this.dollyToCursor) {
      if (isPerspectiveCamera(this._camera) && this._changedDolly !== 0) {
        const dollyControlAmount = this._spherical.radius - this._lastDistance;
        const camera = this._camera;
        const cameraDirection = this._getCameraDirection(_cameraDirection);
        const planeX = _v3A.copy(cameraDirection).cross(camera.up).normalize();
        if (planeX.lengthSq() === 0)
          planeX.x = 1;
        const planeY = _v3B.crossVectors(planeX, cameraDirection);
        const worldToScreen = this._sphericalEnd.radius * Math.tan(camera.getEffectiveFOV() * DEG2RAD * 0.5);
        const prevRadius = this._sphericalEnd.radius - dollyControlAmount;
        const lerpRatio = (prevRadius - this._sphericalEnd.radius) / this._sphericalEnd.radius;
        const cursor = _v3C.copy(this._targetEnd).add(planeX.multiplyScalar(this._dollyControlCoord.x * worldToScreen * camera.aspect)).add(planeY.multiplyScalar(this._dollyControlCoord.y * worldToScreen));
        const newTargetEnd = _v3A.copy(this._targetEnd).lerp(cursor, lerpRatio);
        const isMin = this._lastDollyDirection === DOLLY_DIRECTION.IN && this._spherical.radius <= this.minDistance;
        const isMax = this._lastDollyDirection === DOLLY_DIRECTION.OUT && this.maxDistance <= this._spherical.radius;
        if (this.infinityDolly && (isMin || isMax)) {
          this._sphericalEnd.radius -= dollyControlAmount;
          this._spherical.radius -= dollyControlAmount;
          const dollyAmount = _v3B.copy(cameraDirection).multiplyScalar(-dollyControlAmount);
          newTargetEnd.add(dollyAmount);
        }
        this._boundary.clampPoint(newTargetEnd, newTargetEnd);
        const targetEndDiff = _v3B.subVectors(newTargetEnd, this._targetEnd);
        this._targetEnd.copy(newTargetEnd);
        this._target.add(targetEndDiff);
        this._changedDolly -= dollyControlAmount;
        if (approxZero(this._changedDolly))
          this._changedDolly = 0;
      } else if (isOrthographicCamera(this._camera) && this._changedZoom !== 0) {
        const dollyControlAmount = this._zoom - this._lastZoom;
        const camera = this._camera;
        const worldCursorPosition = _v3A.set(this._dollyControlCoord.x, this._dollyControlCoord.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);
        const quaternion = _v3B.set(0, 0, -1).applyQuaternion(camera.quaternion);
        const cursor = _v3C.copy(worldCursorPosition).add(quaternion.multiplyScalar(-worldCursorPosition.dot(camera.up)));
        const prevZoom = this._zoom - dollyControlAmount;
        const lerpRatio = -(prevZoom - this._zoom) / this._zoom;
        const cameraDirection = this._getCameraDirection(_cameraDirection);
        const prevPlaneConstant = this._targetEnd.dot(cameraDirection);
        const newTargetEnd = _v3A.copy(this._targetEnd).lerp(cursor, lerpRatio);
        const newPlaneConstant = newTargetEnd.dot(cameraDirection);
        const pullBack = cameraDirection.multiplyScalar(newPlaneConstant - prevPlaneConstant);
        newTargetEnd.sub(pullBack);
        this._boundary.clampPoint(newTargetEnd, newTargetEnd);
        const targetEndDiff = _v3B.subVectors(newTargetEnd, this._targetEnd);
        this._targetEnd.copy(newTargetEnd);
        this._target.add(targetEndDiff);
        this._changedZoom -= dollyControlAmount;
        if (approxZero(this._changedZoom))
          this._changedZoom = 0;
      }
    }
    if (this._camera.zoom !== this._zoom) {
      this._camera.zoom = this._zoom;
      this._camera.updateProjectionMatrix();
      this._updateNearPlaneCorners();
      this._needsUpdate = true;
    }
    this._dragNeedsUpdate = true;
    const maxDistance = this._collisionTest();
    this._spherical.radius = Math.min(this._spherical.radius, maxDistance);
    this._spherical.makeSafe();
    this._camera.position.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(this._target);
    this._camera.lookAt(this._target);
    const affectOffset = !approxZero(this._focalOffset.x) || !approxZero(this._focalOffset.y) || !approxZero(this._focalOffset.z);
    if (affectOffset) {
      _xColumn.setFromMatrixColumn(this._camera.matrix, 0);
      _yColumn.setFromMatrixColumn(this._camera.matrix, 1);
      _zColumn.setFromMatrixColumn(this._camera.matrix, 2);
      _xColumn.multiplyScalar(this._focalOffset.x);
      _yColumn.multiplyScalar(-this._focalOffset.y);
      _zColumn.multiplyScalar(this._focalOffset.z);
      _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);
      this._camera.position.add(_v3A);
      this._camera.updateMatrixWorld();
    }
    if (this._boundaryEnclosesCamera) {
      this._encloseToBoundary(this._camera.position.copy(this._target), _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse), 1);
    }
    const updated = this._needsUpdate;
    if (updated && !this._updatedLastTime) {
      this._hasRested = false;
      this.dispatchEvent({ type: "wake" });
      this.dispatchEvent({ type: "update" });
    } else if (updated) {
      this.dispatchEvent({ type: "update" });
      if (approxZero(deltaTheta, this.restThreshold) && approxZero(deltaPhi, this.restThreshold) && approxZero(deltaRadius, this.restThreshold) && approxZero(deltaTarget.x, this.restThreshold) && approxZero(deltaTarget.y, this.restThreshold) && approxZero(deltaTarget.z, this.restThreshold) && approxZero(deltaOffset.x, this.restThreshold) && approxZero(deltaOffset.y, this.restThreshold) && approxZero(deltaOffset.z, this.restThreshold) && approxZero(deltaZoom, this.restThreshold) && !this._hasRested) {
        this._hasRested = true;
        this.dispatchEvent({ type: "rest" });
      }
    } else if (!updated && this._updatedLastTime) {
      this.dispatchEvent({ type: "sleep" });
    }
    this._lastDistance = this._spherical.radius;
    this._lastZoom = this._zoom;
    this._updatedLastTime = updated;
    this._needsUpdate = false;
    return updated;
  }
  /**
   * Get all state in JSON string
   * @category Methods
   */
  toJSON() {
    return JSON.stringify({
      enabled: this._enabled,
      minDistance: this.minDistance,
      maxDistance: infinityToMaxNumber(this.maxDistance),
      minZoom: this.minZoom,
      maxZoom: infinityToMaxNumber(this.maxZoom),
      minPolarAngle: this.minPolarAngle,
      maxPolarAngle: infinityToMaxNumber(this.maxPolarAngle),
      minAzimuthAngle: infinityToMaxNumber(this.minAzimuthAngle),
      maxAzimuthAngle: infinityToMaxNumber(this.maxAzimuthAngle),
      smoothTime: this.smoothTime,
      draggingSmoothTime: this.draggingSmoothTime,
      dollySpeed: this.dollySpeed,
      truckSpeed: this.truckSpeed,
      dollyToCursor: this.dollyToCursor,
      target: this._targetEnd.toArray(),
      position: _v3A.setFromSpherical(this._sphericalEnd).add(this._targetEnd).toArray(),
      zoom: this._zoomEnd,
      focalOffset: this._focalOffsetEnd.toArray(),
      target0: this._target0.toArray(),
      position0: this._position0.toArray(),
      zoom0: this._zoom0,
      focalOffset0: this._focalOffset0.toArray()
    });
  }
  /**
   * Reproduce the control state with JSON. enableTransition is where anim or not in a boolean.
   * @param json
   * @param enableTransition
   * @category Methods
   */
  fromJSON(json, enableTransition = false) {
    const obj = JSON.parse(json);
    this.enabled = obj.enabled;
    this.minDistance = obj.minDistance;
    this.maxDistance = maxNumberToInfinity(obj.maxDistance);
    this.minZoom = obj.minZoom;
    this.maxZoom = maxNumberToInfinity(obj.maxZoom);
    this.minPolarAngle = obj.minPolarAngle;
    this.maxPolarAngle = maxNumberToInfinity(obj.maxPolarAngle);
    this.minAzimuthAngle = maxNumberToInfinity(obj.minAzimuthAngle);
    this.maxAzimuthAngle = maxNumberToInfinity(obj.maxAzimuthAngle);
    this.smoothTime = obj.smoothTime;
    this.draggingSmoothTime = obj.draggingSmoothTime;
    this.dollySpeed = obj.dollySpeed;
    this.truckSpeed = obj.truckSpeed;
    this.dollyToCursor = obj.dollyToCursor;
    this._target0.fromArray(obj.target0);
    this._position0.fromArray(obj.position0);
    this._zoom0 = obj.zoom0;
    this._focalOffset0.fromArray(obj.focalOffset0);
    this.moveTo(obj.target[0], obj.target[1], obj.target[2], enableTransition);
    _sphericalA.setFromVector3(_v3A.fromArray(obj.position).sub(this._targetEnd).applyQuaternion(this._yAxisUpSpace));
    this.rotateTo(_sphericalA.theta, _sphericalA.phi, enableTransition);
    this.dollyTo(_sphericalA.radius, enableTransition);
    this.zoomTo(obj.zoom, enableTransition);
    this.setFocalOffset(obj.focalOffset[0], obj.focalOffset[1], obj.focalOffset[2], enableTransition);
    this._needsUpdate = true;
  }
  /**
   * Attach all internal event handlers to enable drag control.
   * @category Methods
   */
  connect(domElement) {
    if (this._domElement) {
      console.warn("camera-controls is already connected.");
      return;
    }
    domElement.setAttribute("data-camera-controls-version", VERSION);
    this._addAllEventListeners(domElement);
    this._getClientRect(this._elementRect);
  }
  /**
   * Detach all internal event handlers to disable drag control.
   */
  disconnect() {
    this.cancel();
    this._removeAllEventListeners();
    if (this._domElement) {
      this._domElement.removeAttribute("data-camera-controls-version");
      this._domElement = void 0;
    }
  }
  /**
   * Dispose the cameraControls instance itself, remove all eventListeners.
   * @category Methods
   */
  dispose() {
    this.removeAllEventListeners();
    this.disconnect();
  }
  // it's okay to expose public though
  _getTargetDirection(out) {
    return out.setFromSpherical(this._spherical).divideScalar(this._spherical.radius).applyQuaternion(this._yAxisUpSpaceInverse);
  }
  // it's okay to expose public though
  _getCameraDirection(out) {
    return this._getTargetDirection(out).negate();
  }
  _findPointerById(pointerId) {
    return this._activePointers.find((activePointer) => activePointer.pointerId === pointerId);
  }
  _findPointerByMouseButton(mouseButton) {
    return this._activePointers.find((activePointer) => activePointer.mouseButton === mouseButton);
  }
  _disposePointer(pointer) {
    this._activePointers.splice(this._activePointers.indexOf(pointer), 1);
  }
  _encloseToBoundary(position2, offset, friction) {
    const offsetLength2 = offset.lengthSq();
    if (offsetLength2 === 0) {
      return position2;
    }
    const newTarget = _v3B.copy(offset).add(position2);
    const clampedTarget = this._boundary.clampPoint(newTarget, _v3C);
    const deltaClampedTarget = clampedTarget.sub(newTarget);
    const deltaClampedTargetLength2 = deltaClampedTarget.lengthSq();
    if (deltaClampedTargetLength2 === 0) {
      return position2.add(offset);
    } else if (deltaClampedTargetLength2 === offsetLength2) {
      return position2;
    } else if (friction === 0) {
      return position2.add(offset).add(deltaClampedTarget);
    } else {
      const offsetFactor = 1 + friction * deltaClampedTargetLength2 / offset.dot(deltaClampedTarget);
      return position2.add(_v3B.copy(offset).multiplyScalar(offsetFactor)).add(deltaClampedTarget.multiplyScalar(1 - friction));
    }
  }
  _updateNearPlaneCorners() {
    if (isPerspectiveCamera(this._camera)) {
      const camera = this._camera;
      const near = camera.near;
      const fov = camera.getEffectiveFOV() * DEG2RAD;
      const heightHalf = Math.tan(fov * 0.5) * near;
      const widthHalf = heightHalf * camera.aspect;
      this._nearPlaneCorners[0].set(-widthHalf, -heightHalf, 0);
      this._nearPlaneCorners[1].set(widthHalf, -heightHalf, 0);
      this._nearPlaneCorners[2].set(widthHalf, heightHalf, 0);
      this._nearPlaneCorners[3].set(-widthHalf, heightHalf, 0);
    } else if (isOrthographicCamera(this._camera)) {
      const camera = this._camera;
      const zoomInv = 1 / camera.zoom;
      const left = camera.left * zoomInv;
      const right = camera.right * zoomInv;
      const top = camera.top * zoomInv;
      const bottom = camera.bottom * zoomInv;
      this._nearPlaneCorners[0].set(left, top, 0);
      this._nearPlaneCorners[1].set(right, top, 0);
      this._nearPlaneCorners[2].set(right, bottom, 0);
      this._nearPlaneCorners[3].set(left, bottom, 0);
    }
  }
  // lateUpdate
  _collisionTest() {
    let distance3 = Infinity;
    const hasCollider = this.colliderMeshes.length >= 1;
    if (!hasCollider)
      return distance3;
    if (notSupportedInOrthographicCamera(this._camera, "_collisionTest"))
      return distance3;
    const rayDirection = this._getTargetDirection(_cameraDirection);
    _rotationMatrix.lookAt(_ORIGIN, rayDirection, this._camera.up);
    for (let i4 = 0; i4 < 4; i4++) {
      const nearPlaneCorner = _v3B.copy(this._nearPlaneCorners[i4]);
      nearPlaneCorner.applyMatrix4(_rotationMatrix);
      const origin2 = _v3C.addVectors(this._target, nearPlaneCorner);
      _raycaster.set(origin2, rayDirection);
      _raycaster.far = this._spherical.radius + 1;
      const intersects = _raycaster.intersectObjects(this.colliderMeshes);
      if (intersects.length !== 0 && intersects[0].distance < distance3) {
        distance3 = intersects[0].distance;
      }
    }
    return distance3;
  }
  /**
   * Get its client rect and package into given `DOMRect` .
   */
  _getClientRect(target2) {
    if (!this._domElement)
      return;
    const rect = this._domElement.getBoundingClientRect();
    target2.x = rect.left;
    target2.y = rect.top;
    if (this._viewport) {
      target2.x += this._viewport.x;
      target2.y += rect.height - this._viewport.w - this._viewport.y;
      target2.width = this._viewport.z;
      target2.height = this._viewport.w;
    } else {
      target2.width = rect.width;
      target2.height = rect.height;
    }
    return target2;
  }
  _createOnRestPromise(resolveImmediately) {
    if (resolveImmediately)
      return Promise.resolve();
    this._hasRested = false;
    this.dispatchEvent({ type: "transitionstart" });
    return new Promise((resolve) => {
      const onResolve = () => {
        this.removeEventListener("rest", onResolve);
        resolve();
      };
      this.addEventListener("rest", onResolve);
    });
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _addAllEventListeners(_domElement) {
  }
  _removeAllEventListeners() {
  }
  /**
   * backward compatible
   * @deprecated use smoothTime (in seconds) instead
   * @category Properties
   */
  get dampingFactor() {
    console.warn(".dampingFactor has been deprecated. use smoothTime (in seconds) instead.");
    return 0;
  }
  /**
   * backward compatible
   * @deprecated use smoothTime (in seconds) instead
   * @category Properties
   */
  set dampingFactor(_2) {
    console.warn(".dampingFactor has been deprecated. use smoothTime (in seconds) instead.");
  }
  /**
   * backward compatible
   * @deprecated use draggingSmoothTime (in seconds) instead
   * @category Properties
   */
  get draggingDampingFactor() {
    console.warn(".draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.");
    return 0;
  }
  /**
   * backward compatible
   * @deprecated use draggingSmoothTime (in seconds) instead
   * @category Properties
   */
  set draggingDampingFactor(_2) {
    console.warn(".draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.");
  }
  static createBoundingSphere(object3d, out = new THREE.Sphere()) {
    const boundingSphere = out;
    const center2 = boundingSphere.center;
    _box3A.makeEmpty();
    object3d.traverseVisible((object) => {
      if (!object.isMesh)
        return;
      _box3A.expandByObject(object);
    });
    _box3A.getCenter(center2);
    let maxRadiusSq = 0;
    object3d.traverseVisible((object) => {
      if (!object.isMesh)
        return;
      const mesh = object;
      if (!mesh.geometry)
        return;
      const geometry2 = mesh.geometry.clone();
      geometry2.applyMatrix4(mesh.matrixWorld);
      const bufferGeometry = geometry2;
      const position2 = bufferGeometry.attributes.position;
      for (let i4 = 0, l3 = position2.count; i4 < l3; i4++) {
        _v3A.fromBufferAttribute(position2, i4);
        maxRadiusSq = Math.max(maxRadiusSq, center2.distanceToSquared(_v3A));
      }
    });
    boundingSphere.radius = Math.sqrt(maxRadiusSq);
    return boundingSphere;
  }
};

// node_modules/@react-three/drei/core/CameraControls.js
var CameraControls2 = (0, import_react7.forwardRef)((props, ref) => {
  (0, import_react7.useMemo)(() => {
    CameraControls.install({
      THREE: three_module_exports
    });
    extend({
      CameraControlsImpl: CameraControls
    });
  }, []);
  const {
    camera,
    domElement,
    makeDefault,
    onStart,
    onEnd,
    onChange,
    regress,
    ...restProps
  } = props;
  const defaultCamera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const invalidate = useThree((state) => state.invalidate);
  const events = useThree((state) => state.events);
  const setEvents = useThree((state) => state.setEvents);
  const set = useThree((state) => state.set);
  const get = useThree((state) => state.get);
  const performance2 = useThree((state) => state.performance);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = (0, import_react7.useMemo)(() => new CameraControls(explCamera), [explCamera]);
  useFrame((state, delta) => {
    if (controls.enabled) controls.update(delta);
  }, -1);
  (0, import_react7.useEffect)(() => {
    controls.connect(explDomElement);
    return () => void controls.disconnect();
  }, [explDomElement, controls]);
  React45.useEffect(() => {
    const callback = (e3) => {
      invalidate();
      if (regress) performance2.regress();
      if (onChange) onChange(e3);
    };
    const onStartCb = (e3) => {
      if (onStart) onStart(e3);
    };
    const onEndCb = (e3) => {
      if (onEnd) onEnd(e3);
    };
    controls.addEventListener("update", callback);
    controls.addEventListener("controlstart", onStartCb);
    controls.addEventListener("controlend", onEndCb);
    controls.addEventListener("control", callback);
    controls.addEventListener("transitionstart", callback);
    controls.addEventListener("wake", callback);
    return () => {
      controls.removeEventListener("update", callback);
      controls.removeEventListener("controlstart", onStartCb);
      controls.removeEventListener("controlend", onEndCb);
      controls.removeEventListener("control", callback);
      controls.removeEventListener("transitionstart", callback);
      controls.removeEventListener("wake", callback);
    };
  }, [controls, onStart, onEnd, invalidate, setEvents, regress, onChange]);
  (0, import_react7.useEffect)(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return React45.createElement("primitive", _extends({
    ref,
    object: controls
  }, restProps));
});

// node_modules/@react-three/drei/core/FaceControls.js
var React48 = __toESM(require_react());
var import_react10 = __toESM(require_react());

// node_modules/@react-three/drei/core/useVideoTexture.js
var import_react8 = __toESM(require_react());
function useVideoTexture(src, props) {
  const {
    unsuspend,
    start,
    crossOrigin,
    muted,
    loop,
    ...rest
  } = {
    unsuspend: "loadedmetadata",
    crossOrigin: "Anonymous",
    muted: true,
    loop: true,
    start: true,
    playsInline: true,
    ...props
  };
  const gl = useThree((state) => state.gl);
  const texture = suspend(() => new Promise((res, rej) => {
    const video = Object.assign(document.createElement("video"), {
      src: typeof src === "string" && src || void 0,
      srcObject: src instanceof MediaStream && src || void 0,
      crossOrigin,
      loop,
      muted,
      ...rest
    });
    const texture2 = new VideoTexture(video);
    if ("colorSpace" in texture2) texture2.colorSpace = gl.outputColorSpace;
    else texture2.encoding = gl.outputEncoding;
    video.addEventListener(unsuspend, () => res(texture2));
  }), [src]);
  (0, import_react8.useEffect)(() => void (start && texture.image.play()), [texture, start]);
  return texture;
}

// node_modules/@react-three/drei/core/Facemesh.js
var React46 = __toESM(require_react());

// node_modules/three/src/math/MathUtils.js
var DEG2RAD2 = Math.PI / 180;
var RAD2DEG = 180 / Math.PI;

// node_modules/@react-three/drei/core/Facemesh.js
var defaultLookAt = new Vector3(0, 0, -1);
var normal = function() {
  const a6 = new Vector3();
  const b5 = new Vector3();
  const c5 = new Vector3();
  const ab = new Vector3();
  const ac = new Vector3();
  return function(v12, v22, v32, v5) {
    a6.copy(v12);
    b5.copy(v22);
    c5.copy(v32);
    ab.copy(b5).sub(a6);
    ac.copy(c5).sub(a6);
    return v5.crossVectors(ac, ab).normalize();
  };
}();
function mean(v12, v22) {
  return v12.clone().add(v22).multiplyScalar(0.5);
}
var Facemesh = React46.forwardRef(({
  points = FacemeshDatas.SAMPLE_FACELANDMARKER_RESULT.faceLandmarks[0],
  face,
  facialTransformationMatrix,
  faceBlendshapes,
  offset,
  offsetScalar = 80,
  width,
  height,
  depth = 1,
  verticalTri = [159, 386, 152],
  origin: origin2,
  eyes = true,
  eyesAsOrigin = false,
  debug = false,
  children,
  ...props
}, fref) => {
  var _meshRef$current3;
  if (face) {
    points = face.keypoints;
    console.warn("Facemesh `face` prop is deprecated: use `points` instead");
  }
  const offsetRef = React46.useRef(null);
  const scaleRef = React46.useRef(null);
  const originRef = React46.useRef(null);
  const outerRef = React46.useRef(null);
  const meshRef = React46.useRef(null);
  const eyeRightRef = React46.useRef(null);
  const eyeLeftRef = React46.useRef(null);
  const [sightDir] = React46.useState(() => new Vector3());
  const [transform] = React46.useState(() => new Object3D());
  const [sightDirQuaternion] = React46.useState(() => new Quaternion());
  const [_origin] = React46.useState(() => new Vector3());
  const {
    invalidate
  } = useThree();
  React46.useEffect(() => {
    var _meshRef$current;
    (_meshRef$current = meshRef.current) == null ? void 0 : _meshRef$current.geometry.setIndex(FacemeshDatas.TRIANGULATION);
  }, []);
  const [bboxSize] = React46.useState(() => new Vector3());
  React46.useEffect(() => {
    var _meshRef$current2, _outerRef$current;
    const faceGeometry = (_meshRef$current2 = meshRef.current) == null ? void 0 : _meshRef$current2.geometry;
    if (!faceGeometry) return;
    faceGeometry.setFromPoints(points);
    faceGeometry.setDrawRange(0, FacemeshDatas.TRIANGULATION.length);
    if (facialTransformationMatrix) {
      transform.matrix.fromArray(facialTransformationMatrix.data);
      transform.matrix.decompose(transform.position, transform.quaternion, transform.scale);
      transform.rotation.y *= -1;
      transform.rotation.z *= -1;
      sightDirQuaternion.setFromEuler(transform.rotation);
      if (offset) {
        var _offsetRef$current;
        transform.position.y *= -1;
        transform.position.z *= -1;
        (_offsetRef$current = offsetRef.current) == null ? void 0 : _offsetRef$current.position.copy(transform.position.divideScalar(offsetScalar));
      } else {
        var _offsetRef$current2;
        (_offsetRef$current2 = offsetRef.current) == null ? void 0 : _offsetRef$current2.position.set(0, 0, 0);
      }
    } else {
      normal(points[verticalTri[0]], points[verticalTri[1]], points[verticalTri[2]], sightDir);
      sightDirQuaternion.setFromUnitVectors(defaultLookAt, sightDir);
    }
    const sightDirQuaternionInverse = sightDirQuaternion.clone().invert();
    faceGeometry.computeBoundingBox();
    if (debug) invalidate();
    faceGeometry.center();
    faceGeometry.applyQuaternion(sightDirQuaternionInverse);
    (_outerRef$current = outerRef.current) == null ? void 0 : _outerRef$current.setRotationFromQuaternion(sightDirQuaternion);
    if (eyes) {
      if (!faceBlendshapes) {
        console.warn("Facemesh `eyes` option only works if `faceBlendshapes` is provided: skipping.");
      } else {
        if (eyeRightRef.current && eyeLeftRef.current && originRef.current) {
          if (eyesAsOrigin) {
            const eyeRightSphere = eyeRightRef.current._computeSphere(faceGeometry);
            const eyeLeftSphere = eyeLeftRef.current._computeSphere(faceGeometry);
            const eyesCenter = mean(eyeRightSphere.center, eyeLeftSphere.center);
            origin2 = eyesCenter.negate();
            eyeRightRef.current._update(faceGeometry, faceBlendshapes, eyeRightSphere);
            eyeLeftRef.current._update(faceGeometry, faceBlendshapes, eyeLeftSphere);
          } else {
            eyeRightRef.current._update(faceGeometry, faceBlendshapes);
            eyeLeftRef.current._update(faceGeometry, faceBlendshapes);
          }
        }
      }
    }
    if (originRef.current) {
      if (origin2 !== void 0) {
        if (typeof origin2 === "number") {
          const position2 = faceGeometry.getAttribute("position");
          _origin.set(-position2.getX(origin2), -position2.getY(origin2), -position2.getZ(origin2));
        } else if (origin2.isVector3) {
          _origin.copy(origin2);
        }
      } else {
        _origin.setScalar(0);
      }
      originRef.current.position.copy(_origin);
    }
    if (scaleRef.current) {
      let scale4 = 1;
      if (width || height || depth) {
        faceGeometry.boundingBox.getSize(bboxSize);
        if (width) scale4 = width / bboxSize.x;
        if (height) scale4 = height / bboxSize.y;
        if (depth) scale4 = depth / bboxSize.z;
      }
      scaleRef.current.scale.setScalar(scale4 !== 1 ? scale4 : 1);
    }
    faceGeometry.computeVertexNormals();
    faceGeometry.attributes.position.needsUpdate = true;
  }, [points, facialTransformationMatrix, faceBlendshapes, transform, offset, offsetScalar, width, height, depth, verticalTri, origin2, eyes, debug, invalidate, sightDir, sightDirQuaternion, bboxSize, _origin]);
  const api = React46.useMemo(() => ({
    outerRef,
    meshRef,
    eyeRightRef,
    eyeLeftRef
  }), []);
  React46.useImperativeHandle(fref, () => api, [api]);
  const [meshBboxSize] = React46.useState(() => new Vector3());
  const bbox = (_meshRef$current3 = meshRef.current) == null ? void 0 : _meshRef$current3.geometry.boundingBox;
  const one3 = (bbox == null ? void 0 : bbox.getSize(meshBboxSize).z) || 1;
  return React46.createElement("group", props, React46.createElement("group", {
    ref: offsetRef
  }, React46.createElement("group", {
    ref: outerRef
  }, React46.createElement("group", {
    ref: scaleRef
  }, debug ? React46.createElement(React46.Fragment, null, React46.createElement("axesHelper", {
    args: [one3]
  }), React46.createElement(Line, {
    points: [[0, 0, 0], [0, 0, -one3]],
    color: 65535
  })) : null, React46.createElement("group", {
    ref: originRef
  }, eyes && faceBlendshapes && React46.createElement("group", {
    name: "eyes"
  }, React46.createElement(FacemeshEye, {
    side: "left",
    ref: eyeRightRef,
    debug
  }), React46.createElement(FacemeshEye, {
    side: "right",
    ref: eyeLeftRef,
    debug
  })), React46.createElement("mesh", {
    ref: meshRef,
    name: "face"
  }, children, debug ? React46.createElement(React46.Fragment, null, bbox && React46.createElement("box3Helper", {
    args: [bbox]
  })) : null))))));
});
var FacemeshEyeDefaults = {
  contourLandmarks: {
    right: [33, 133, 159, 145, 153],
    left: [263, 362, 386, 374, 380]
  },
  blendshapes: {
    right: [14, 16, 18, 12],
    // lookIn,lookOut, lookUp,lookDown
    left: [13, 15, 17, 11]
    // lookIn,lookOut, lookUp,lookDown
  },
  color: {
    right: "red",
    left: "#00ff00"
  },
  fov: {
    horizontal: 100,
    vertical: 90
  }
};
var FacemeshEye = React46.forwardRef(({
  side,
  debug = true
}, fref) => {
  const eyeMeshRef = React46.useRef(null);
  const irisDirRef = React46.useRef(null);
  const [sphere] = React46.useState(() => new Sphere());
  const _computeSphere = React46.useCallback((faceGeometry) => {
    const position2 = faceGeometry.getAttribute("position");
    const eyeContourLandmarks = FacemeshEyeDefaults.contourLandmarks[side];
    const eyeContourPoints = eyeContourLandmarks.map((i4) => new Vector3(position2.getX(i4), position2.getY(i4), position2.getZ(i4)));
    sphere.center.set(0, 0, 0);
    eyeContourPoints.forEach((v5) => sphere.center.add(v5));
    sphere.center.divideScalar(eyeContourPoints.length);
    sphere.radius = eyeContourPoints[0].sub(eyeContourPoints[1]).length() / 2;
    return sphere;
  }, [sphere, side]);
  const [rotation2] = React46.useState(() => new Euler());
  const _update = React46.useCallback((faceGeometry, faceBlendshapes, sphere2) => {
    if (eyeMeshRef.current) {
      var _sphere4;
      (_sphere4 = sphere2) !== null && _sphere4 !== void 0 ? _sphere4 : sphere2 = _computeSphere(faceGeometry);
      eyeMeshRef.current.position.copy(sphere2.center);
      eyeMeshRef.current.scale.setScalar(sphere2.radius);
    }
    if (faceBlendshapes && irisDirRef.current) {
      const blendshapes = FacemeshEyeDefaults.blendshapes[side];
      const lookIn = faceBlendshapes.categories[blendshapes[0]].score;
      const lookOut = faceBlendshapes.categories[blendshapes[1]].score;
      const lookUp = faceBlendshapes.categories[blendshapes[2]].score;
      const lookDown = faceBlendshapes.categories[blendshapes[3]].score;
      const hfov = FacemeshEyeDefaults.fov.horizontal * DEG2RAD2;
      const vfov = FacemeshEyeDefaults.fov.vertical * DEG2RAD2;
      const rx = hfov * 0.5 * (lookDown - lookUp);
      const ry = vfov * 0.5 * (lookIn - lookOut) * (side === "left" ? 1 : -1);
      rotation2.set(rx, ry, 0);
      irisDirRef.current.setRotationFromEuler(rotation2);
    }
  }, [_computeSphere, side, rotation2]);
  const api = React46.useMemo(() => ({
    eyeMeshRef,
    irisDirRef,
    _computeSphere,
    _update
  }), [_computeSphere, _update]);
  React46.useImperativeHandle(fref, () => api, [api]);
  const color = FacemeshEyeDefaults.color[side];
  return React46.createElement("group", null, React46.createElement("group", {
    ref: eyeMeshRef
  }, debug && React46.createElement("axesHelper", null), React46.createElement("group", {
    ref: irisDirRef
  }, React46.createElement(React46.Fragment, null, debug && React46.createElement(Line, {
    points: [[0, 0, 0], [0, 0, -2]],
    lineWidth: 1,
    color
  })))));
});
var FacemeshDatas = {
  // Extracted from: https://github.com/tensorflow/tfjs-models/blob/a8f500809f5afe38feea27870c77e7ba03a6ece4/face-landmarks-detection/demos/shared/triangulation.js
  // prettier-ignore
  TRIANGULATION: [127, 34, 139, 11, 0, 37, 232, 231, 120, 72, 37, 39, 128, 121, 47, 232, 121, 128, 104, 69, 67, 175, 171, 148, 157, 154, 155, 118, 50, 101, 73, 39, 40, 9, 151, 108, 48, 115, 131, 194, 204, 211, 74, 40, 185, 80, 42, 183, 40, 92, 186, 230, 229, 118, 202, 212, 214, 83, 18, 17, 76, 61, 146, 160, 29, 30, 56, 157, 173, 106, 204, 194, 135, 214, 192, 203, 165, 98, 21, 71, 68, 51, 45, 4, 144, 24, 23, 77, 146, 91, 205, 50, 187, 201, 200, 18, 91, 106, 182, 90, 91, 181, 85, 84, 17, 206, 203, 36, 148, 171, 140, 92, 40, 39, 193, 189, 244, 159, 158, 28, 247, 246, 161, 236, 3, 196, 54, 68, 104, 193, 168, 8, 117, 228, 31, 189, 193, 55, 98, 97, 99, 126, 47, 100, 166, 79, 218, 155, 154, 26, 209, 49, 131, 135, 136, 150, 47, 126, 217, 223, 52, 53, 45, 51, 134, 211, 170, 140, 67, 69, 108, 43, 106, 91, 230, 119, 120, 226, 130, 247, 63, 53, 52, 238, 20, 242, 46, 70, 156, 78, 62, 96, 46, 53, 63, 143, 34, 227, 173, 155, 133, 123, 117, 111, 44, 125, 19, 236, 134, 51, 216, 206, 205, 154, 153, 22, 39, 37, 167, 200, 201, 208, 36, 142, 100, 57, 212, 202, 20, 60, 99, 28, 158, 157, 35, 226, 113, 160, 159, 27, 204, 202, 210, 113, 225, 46, 43, 202, 204, 62, 76, 77, 137, 123, 116, 41, 38, 72, 203, 129, 142, 64, 98, 240, 49, 102, 64, 41, 73, 74, 212, 216, 207, 42, 74, 184, 169, 170, 211, 170, 149, 176, 105, 66, 69, 122, 6, 168, 123, 147, 187, 96, 77, 90, 65, 55, 107, 89, 90, 180, 101, 100, 120, 63, 105, 104, 93, 137, 227, 15, 86, 85, 129, 102, 49, 14, 87, 86, 55, 8, 9, 100, 47, 121, 145, 23, 22, 88, 89, 179, 6, 122, 196, 88, 95, 96, 138, 172, 136, 215, 58, 172, 115, 48, 219, 42, 80, 81, 195, 3, 51, 43, 146, 61, 171, 175, 199, 81, 82, 38, 53, 46, 225, 144, 163, 110, 246, 33, 7, 52, 65, 66, 229, 228, 117, 34, 127, 234, 107, 108, 69, 109, 108, 151, 48, 64, 235, 62, 78, 191, 129, 209, 126, 111, 35, 143, 163, 161, 246, 117, 123, 50, 222, 65, 52, 19, 125, 141, 221, 55, 65, 3, 195, 197, 25, 7, 33, 220, 237, 44, 70, 71, 139, 122, 193, 245, 247, 130, 33, 71, 21, 162, 153, 158, 159, 170, 169, 150, 188, 174, 196, 216, 186, 92, 144, 160, 161, 2, 97, 167, 141, 125, 241, 164, 167, 37, 72, 38, 12, 145, 159, 160, 38, 82, 13, 63, 68, 71, 226, 35, 111, 158, 153, 154, 101, 50, 205, 206, 92, 165, 209, 198, 217, 165, 167, 97, 220, 115, 218, 133, 112, 243, 239, 238, 241, 214, 135, 169, 190, 173, 133, 171, 208, 32, 125, 44, 237, 86, 87, 178, 85, 86, 179, 84, 85, 180, 83, 84, 181, 201, 83, 182, 137, 93, 132, 76, 62, 183, 61, 76, 184, 57, 61, 185, 212, 57, 186, 214, 207, 187, 34, 143, 156, 79, 239, 237, 123, 137, 177, 44, 1, 4, 201, 194, 32, 64, 102, 129, 213, 215, 138, 59, 166, 219, 242, 99, 97, 2, 94, 141, 75, 59, 235, 24, 110, 228, 25, 130, 226, 23, 24, 229, 22, 23, 230, 26, 22, 231, 112, 26, 232, 189, 190, 243, 221, 56, 190, 28, 56, 221, 27, 28, 222, 29, 27, 223, 30, 29, 224, 247, 30, 225, 238, 79, 20, 166, 59, 75, 60, 75, 240, 147, 177, 215, 20, 79, 166, 187, 147, 213, 112, 233, 244, 233, 128, 245, 128, 114, 188, 114, 217, 174, 131, 115, 220, 217, 198, 236, 198, 131, 134, 177, 132, 58, 143, 35, 124, 110, 163, 7, 228, 110, 25, 356, 389, 368, 11, 302, 267, 452, 350, 349, 302, 303, 269, 357, 343, 277, 452, 453, 357, 333, 332, 297, 175, 152, 377, 384, 398, 382, 347, 348, 330, 303, 304, 270, 9, 336, 337, 278, 279, 360, 418, 262, 431, 304, 408, 409, 310, 415, 407, 270, 409, 410, 450, 348, 347, 422, 430, 434, 313, 314, 17, 306, 307, 375, 387, 388, 260, 286, 414, 398, 335, 406, 418, 364, 367, 416, 423, 358, 327, 251, 284, 298, 281, 5, 4, 373, 374, 253, 307, 320, 321, 425, 427, 411, 421, 313, 18, 321, 405, 406, 320, 404, 405, 315, 16, 17, 426, 425, 266, 377, 400, 369, 322, 391, 269, 417, 465, 464, 386, 257, 258, 466, 260, 388, 456, 399, 419, 284, 332, 333, 417, 285, 8, 346, 340, 261, 413, 441, 285, 327, 460, 328, 355, 371, 329, 392, 439, 438, 382, 341, 256, 429, 420, 360, 364, 394, 379, 277, 343, 437, 443, 444, 283, 275, 440, 363, 431, 262, 369, 297, 338, 337, 273, 375, 321, 450, 451, 349, 446, 342, 467, 293, 334, 282, 458, 461, 462, 276, 353, 383, 308, 324, 325, 276, 300, 293, 372, 345, 447, 382, 398, 362, 352, 345, 340, 274, 1, 19, 456, 248, 281, 436, 427, 425, 381, 256, 252, 269, 391, 393, 200, 199, 428, 266, 330, 329, 287, 273, 422, 250, 462, 328, 258, 286, 384, 265, 353, 342, 387, 259, 257, 424, 431, 430, 342, 353, 276, 273, 335, 424, 292, 325, 307, 366, 447, 345, 271, 303, 302, 423, 266, 371, 294, 455, 460, 279, 278, 294, 271, 272, 304, 432, 434, 427, 272, 407, 408, 394, 430, 431, 395, 369, 400, 334, 333, 299, 351, 417, 168, 352, 280, 411, 325, 319, 320, 295, 296, 336, 319, 403, 404, 330, 348, 349, 293, 298, 333, 323, 454, 447, 15, 16, 315, 358, 429, 279, 14, 15, 316, 285, 336, 9, 329, 349, 350, 374, 380, 252, 318, 402, 403, 6, 197, 419, 318, 319, 325, 367, 364, 365, 435, 367, 397, 344, 438, 439, 272, 271, 311, 195, 5, 281, 273, 287, 291, 396, 428, 199, 311, 271, 268, 283, 444, 445, 373, 254, 339, 263, 466, 249, 282, 334, 296, 449, 347, 346, 264, 447, 454, 336, 296, 299, 338, 10, 151, 278, 439, 455, 292, 407, 415, 358, 371, 355, 340, 345, 372, 390, 249, 466, 346, 347, 280, 442, 443, 282, 19, 94, 370, 441, 442, 295, 248, 419, 197, 263, 255, 359, 440, 275, 274, 300, 383, 368, 351, 412, 465, 263, 467, 466, 301, 368, 389, 380, 374, 386, 395, 378, 379, 412, 351, 419, 436, 426, 322, 373, 390, 388, 2, 164, 393, 370, 462, 461, 164, 0, 267, 302, 11, 12, 374, 373, 387, 268, 12, 13, 293, 300, 301, 446, 261, 340, 385, 384, 381, 330, 266, 425, 426, 423, 391, 429, 355, 437, 391, 327, 326, 440, 457, 438, 341, 382, 362, 459, 457, 461, 434, 430, 394, 414, 463, 362, 396, 369, 262, 354, 461, 457, 316, 403, 402, 315, 404, 403, 314, 405, 404, 313, 406, 405, 421, 418, 406, 366, 401, 361, 306, 408, 407, 291, 409, 408, 287, 410, 409, 432, 436, 410, 434, 416, 411, 264, 368, 383, 309, 438, 457, 352, 376, 401, 274, 275, 4, 421, 428, 262, 294, 327, 358, 433, 416, 367, 289, 455, 439, 462, 370, 326, 2, 326, 370, 305, 460, 455, 254, 449, 448, 255, 261, 446, 253, 450, 449, 252, 451, 450, 256, 452, 451, 341, 453, 452, 413, 464, 463, 441, 413, 414, 258, 442, 441, 257, 443, 442, 259, 444, 443, 260, 445, 444, 467, 342, 445, 459, 458, 250, 289, 392, 290, 290, 328, 460, 376, 433, 435, 250, 290, 392, 411, 416, 433, 341, 463, 464, 453, 464, 465, 357, 465, 412, 343, 412, 399, 360, 363, 440, 437, 399, 456, 420, 456, 363, 401, 435, 288, 372, 383, 353, 339, 255, 249, 448, 261, 255, 133, 243, 190, 133, 155, 112, 33, 246, 247, 33, 130, 25, 398, 384, 286, 362, 398, 414, 362, 463, 341, 263, 359, 467, 263, 249, 255, 466, 467, 260, 75, 60, 166, 238, 239, 79, 162, 127, 139, 72, 11, 37, 121, 232, 120, 73, 72, 39, 114, 128, 47, 233, 232, 128, 103, 104, 67, 152, 175, 148, 173, 157, 155, 119, 118, 101, 74, 73, 40, 107, 9, 108, 49, 48, 131, 32, 194, 211, 184, 74, 185, 191, 80, 183, 185, 40, 186, 119, 230, 118, 210, 202, 214, 84, 83, 17, 77, 76, 146, 161, 160, 30, 190, 56, 173, 182, 106, 194, 138, 135, 192, 129, 203, 98, 54, 21, 68, 5, 51, 4, 145, 144, 23, 90, 77, 91, 207, 205, 187, 83, 201, 18, 181, 91, 182, 180, 90, 181, 16, 85, 17, 205, 206, 36, 176, 148, 140, 165, 92, 39, 245, 193, 244, 27, 159, 28, 30, 247, 161, 174, 236, 196, 103, 54, 104, 55, 193, 8, 111, 117, 31, 221, 189, 55, 240, 98, 99, 142, 126, 100, 219, 166, 218, 112, 155, 26, 198, 209, 131, 169, 135, 150, 114, 47, 217, 224, 223, 53, 220, 45, 134, 32, 211, 140, 109, 67, 108, 146, 43, 91, 231, 230, 120, 113, 226, 247, 105, 63, 52, 241, 238, 242, 124, 46, 156, 95, 78, 96, 70, 46, 63, 116, 143, 227, 116, 123, 111, 1, 44, 19, 3, 236, 51, 207, 216, 205, 26, 154, 22, 165, 39, 167, 199, 200, 208, 101, 36, 100, 43, 57, 202, 242, 20, 99, 56, 28, 157, 124, 35, 113, 29, 160, 27, 211, 204, 210, 124, 113, 46, 106, 43, 204, 96, 62, 77, 227, 137, 116, 73, 41, 72, 36, 203, 142, 235, 64, 240, 48, 49, 64, 42, 41, 74, 214, 212, 207, 183, 42, 184, 210, 169, 211, 140, 170, 176, 104, 105, 69, 193, 122, 168, 50, 123, 187, 89, 96, 90, 66, 65, 107, 179, 89, 180, 119, 101, 120, 68, 63, 104, 234, 93, 227, 16, 15, 85, 209, 129, 49, 15, 14, 86, 107, 55, 9, 120, 100, 121, 153, 145, 22, 178, 88, 179, 197, 6, 196, 89, 88, 96, 135, 138, 136, 138, 215, 172, 218, 115, 219, 41, 42, 81, 5, 195, 51, 57, 43, 61, 208, 171, 199, 41, 81, 38, 224, 53, 225, 24, 144, 110, 105, 52, 66, 118, 229, 117, 227, 34, 234, 66, 107, 69, 10, 109, 151, 219, 48, 235, 183, 62, 191, 142, 129, 126, 116, 111, 143, 7, 163, 246, 118, 117, 50, 223, 222, 52, 94, 19, 141, 222, 221, 65, 196, 3, 197, 45, 220, 44, 156, 70, 139, 188, 122, 245, 139, 71, 162, 145, 153, 159, 149, 170, 150, 122, 188, 196, 206, 216, 92, 163, 144, 161, 164, 2, 167, 242, 141, 241, 0, 164, 37, 11, 72, 12, 144, 145, 160, 12, 38, 13, 70, 63, 71, 31, 226, 111, 157, 158, 154, 36, 101, 205, 203, 206, 165, 126, 209, 217, 98, 165, 97, 237, 220, 218, 237, 239, 241, 210, 214, 169, 140, 171, 32, 241, 125, 237, 179, 86, 178, 180, 85, 179, 181, 84, 180, 182, 83, 181, 194, 201, 182, 177, 137, 132, 184, 76, 183, 185, 61, 184, 186, 57, 185, 216, 212, 186, 192, 214, 187, 139, 34, 156, 218, 79, 237, 147, 123, 177, 45, 44, 4, 208, 201, 32, 98, 64, 129, 192, 213, 138, 235, 59, 219, 141, 242, 97, 97, 2, 141, 240, 75, 235, 229, 24, 228, 31, 25, 226, 230, 23, 229, 231, 22, 230, 232, 26, 231, 233, 112, 232, 244, 189, 243, 189, 221, 190, 222, 28, 221, 223, 27, 222, 224, 29, 223, 225, 30, 224, 113, 247, 225, 99, 60, 240, 213, 147, 215, 60, 20, 166, 192, 187, 213, 243, 112, 244, 244, 233, 245, 245, 128, 188, 188, 114, 174, 134, 131, 220, 174, 217, 236, 236, 198, 134, 215, 177, 58, 156, 143, 124, 25, 110, 7, 31, 228, 25, 264, 356, 368, 0, 11, 267, 451, 452, 349, 267, 302, 269, 350, 357, 277, 350, 452, 357, 299, 333, 297, 396, 175, 377, 381, 384, 382, 280, 347, 330, 269, 303, 270, 151, 9, 337, 344, 278, 360, 424, 418, 431, 270, 304, 409, 272, 310, 407, 322, 270, 410, 449, 450, 347, 432, 422, 434, 18, 313, 17, 291, 306, 375, 259, 387, 260, 424, 335, 418, 434, 364, 416, 391, 423, 327, 301, 251, 298, 275, 281, 4, 254, 373, 253, 375, 307, 321, 280, 425, 411, 200, 421, 18, 335, 321, 406, 321, 320, 405, 314, 315, 17, 423, 426, 266, 396, 377, 369, 270, 322, 269, 413, 417, 464, 385, 386, 258, 248, 456, 419, 298, 284, 333, 168, 417, 8, 448, 346, 261, 417, 413, 285, 326, 327, 328, 277, 355, 329, 309, 392, 438, 381, 382, 256, 279, 429, 360, 365, 364, 379, 355, 277, 437, 282, 443, 283, 281, 275, 363, 395, 431, 369, 299, 297, 337, 335, 273, 321, 348, 450, 349, 359, 446, 467, 283, 293, 282, 250, 458, 462, 300, 276, 383, 292, 308, 325, 283, 276, 293, 264, 372, 447, 346, 352, 340, 354, 274, 19, 363, 456, 281, 426, 436, 425, 380, 381, 252, 267, 269, 393, 421, 200, 428, 371, 266, 329, 432, 287, 422, 290, 250, 328, 385, 258, 384, 446, 265, 342, 386, 387, 257, 422, 424, 430, 445, 342, 276, 422, 273, 424, 306, 292, 307, 352, 366, 345, 268, 271, 302, 358, 423, 371, 327, 294, 460, 331, 279, 294, 303, 271, 304, 436, 432, 427, 304, 272, 408, 395, 394, 431, 378, 395, 400, 296, 334, 299, 6, 351, 168, 376, 352, 411, 307, 325, 320, 285, 295, 336, 320, 319, 404, 329, 330, 349, 334, 293, 333, 366, 323, 447, 316, 15, 315, 331, 358, 279, 317, 14, 316, 8, 285, 9, 277, 329, 350, 253, 374, 252, 319, 318, 403, 351, 6, 419, 324, 318, 325, 397, 367, 365, 288, 435, 397, 278, 344, 439, 310, 272, 311, 248, 195, 281, 375, 273, 291, 175, 396, 199, 312, 311, 268, 276, 283, 445, 390, 373, 339, 295, 282, 296, 448, 449, 346, 356, 264, 454, 337, 336, 299, 337, 338, 151, 294, 278, 455, 308, 292, 415, 429, 358, 355, 265, 340, 372, 388, 390, 466, 352, 346, 280, 295, 442, 282, 354, 19, 370, 285, 441, 295, 195, 248, 197, 457, 440, 274, 301, 300, 368, 417, 351, 465, 251, 301, 389, 385, 380, 386, 394, 395, 379, 399, 412, 419, 410, 436, 322, 387, 373, 388, 326, 2, 393, 354, 370, 461, 393, 164, 267, 268, 302, 12, 386, 374, 387, 312, 268, 13, 298, 293, 301, 265, 446, 340, 380, 385, 381, 280, 330, 425, 322, 426, 391, 420, 429, 437, 393, 391, 326, 344, 440, 438, 458, 459, 461, 364, 434, 394, 428, 396, 262, 274, 354, 457, 317, 316, 402, 316, 315, 403, 315, 314, 404, 314, 313, 405, 313, 421, 406, 323, 366, 361, 292, 306, 407, 306, 291, 408, 291, 287, 409, 287, 432, 410, 427, 434, 411, 372, 264, 383, 459, 309, 457, 366, 352, 401, 1, 274, 4, 418, 421, 262, 331, 294, 358, 435, 433, 367, 392, 289, 439, 328, 462, 326, 94, 2, 370, 289, 305, 455, 339, 254, 448, 359, 255, 446, 254, 253, 449, 253, 252, 450, 252, 256, 451, 256, 341, 452, 414, 413, 463, 286, 441, 414, 286, 258, 441, 258, 257, 442, 257, 259, 443, 259, 260, 444, 260, 467, 445, 309, 459, 250, 305, 289, 290, 305, 290, 460, 401, 376, 435, 309, 250, 392, 376, 411, 433, 453, 341, 464, 357, 453, 465, 343, 357, 412, 437, 343, 399, 344, 360, 440, 420, 437, 456, 360, 420, 363, 361, 401, 288, 265, 372, 353, 390, 339, 249, 339, 448, 255],
  // My face as default (captured with a 640x480 webcam)
  // prettier-ignore
  SAMPLE_FACE: {
    "keypoints": [{
      "x": 356.2804412841797,
      "y": 295.1960563659668,
      "z": -23.786449432373047,
      "name": "lips"
    }, {
      "x": 354.8859405517578,
      "y": 264.69520568847656,
      "z": -36.718435287475586
    }, {
      "x": 355.2180862426758,
      "y": 275.3360366821289,
      "z": -21.183712482452393
    }, {
      "x": 347.349853515625,
      "y": 242.4400234222412,
      "z": -25.093655586242676
    }, {
      "x": 354.40135955810547,
      "y": 256.67933464050293,
      "z": -38.23572635650635
    }, {
      "x": 353.7689971923828,
      "y": 247.54886627197266,
      "z": -34.5475435256958
    }, {
      "x": 352.1288299560547,
      "y": 227.34312057495117,
      "z": -13.095386028289795
    }, {
      "x": 303.5013198852539,
      "y": 234.67002868652344,
      "z": 12.500141859054565,
      "name": "rightEye"
    }, {
      "x": 351.09378814697266,
      "y": 211.87547206878662,
      "z": -6.413471698760986
    }, {
      "x": 350.7115936279297,
      "y": 202.1251630783081,
      "z": -6.413471698760986
    }, {
      "x": 348.33667755126953,
      "y": 168.7741756439209,
      "z": 6.483500003814697,
      "name": "faceOval"
    }, {
      "x": 356.4806365966797,
      "y": 299.2995357513428,
      "z": -23.144519329071045
    }, {
      "x": 356.5511703491211,
      "y": 302.66146659851074,
      "z": -21.020312309265137
    }, {
      "x": 356.6239547729492,
      "y": 304.1536331176758,
      "z": -18.137459754943848,
      "name": "lips"
    }, {
      "x": 356.5807342529297,
      "y": 305.1840591430664,
      "z": -18.767719268798828,
      "name": "lips"
    }, {
      "x": 356.8241500854492,
      "y": 308.25711250305176,
      "z": -20.16829490661621
    }, {
      "x": 357.113037109375,
      "y": 312.26277351379395,
      "z": -22.10575819015503
    }, {
      "x": 357.34962463378906,
      "y": 317.1123218536377,
      "z": -21.837315559387207,
      "name": "lips"
    }, {
      "x": 357.6658630371094,
      "y": 325.51036834716797,
      "z": -16.27002477645874
    }, {
      "x": 355.0201416015625,
      "y": 269.36279296875,
      "z": -33.73054027557373
    }, {
      "x": 348.5237503051758,
      "y": 270.33411026000977,
      "z": -24.93025302886963
    }, {
      "x": 279.97331619262695,
      "y": 213.24176788330078,
      "z": 47.759642601013184,
      "name": "faceOval"
    }, {
      "x": 322.66529083251953,
      "y": 238.5027265548706,
      "z": 5.535193085670471
    }, {
      "x": 316.0983657836914,
      "y": 239.94489669799805,
      "z": 5.777376294136047
    }, {
      "x": 309.9431610107422,
      "y": 240.24518966674805,
      "z": 7.510589361190796
    }, {
      "x": 301.31994247436523,
      "y": 237.86138534545898,
      "z": 13.118728399276733
    }, {
      "x": 328.14266204833984,
      "y": 235.80496788024902,
      "z": 6.646900177001953
    }, {
      "x": 313.7326431274414,
      "y": 222.11161136627197,
      "z": 3.9887237548828125
    }, {
      "x": 320.45196533203125,
      "y": 221.87729358673096,
      "z": 4.601476192474365
    }, {
      "x": 307.35679626464844,
      "y": 223.63793849945068,
      "z": 5.932023525238037
    }, {
      "x": 303.0031204223633,
      "y": 226.3743782043457,
      "z": 8.479321002960205
    }, {
      "x": 296.80023193359375,
      "y": 242.94299125671387,
      "z": 15.931552648544312
    }, {
      "x": 332.2352981567383,
      "y": 340.77341079711914,
      "z": -10.165848731994629
    }, {
      "x": 301.38587951660156,
      "y": 233.46447944641113,
      "z": 14.764405488967896,
      "name": "rightEye"
    }, {
      "x": 279.0147018432617,
      "y": 244.37155723571777,
      "z": 45.77549457550049
    }, {
      "x": 289.60548400878906,
      "y": 239.1807460784912,
      "z": 23.191204071044922
    }, {
      "x": 320.32257080078125,
      "y": 267.1292781829834,
      "z": -4.954537749290466
    }, {
      "x": 347.64583587646484,
      "y": 294.4955062866211,
      "z": -23.062820434570312,
      "name": "lips"
    }, {
      "x": 349.28138732910156,
      "y": 303.1095886230469,
      "z": -20.238323211669922
    }, {
      "x": 338.9453125,
      "y": 298.19186210632324,
      "z": -19.456336498260498,
      "name": "lips"
    }, {
      "x": 333.36788177490234,
      "y": 302.6706790924072,
      "z": -14.776077270507812,
      "name": "lips"
    }, {
      "x": 342.89188385009766,
      "y": 304.3561363220215,
      "z": -17.752301692962646
    }, {
      "x": 337.7375030517578,
      "y": 306.0098361968994,
      "z": -13.410515785217285
    }, {
      "x": 325.6159210205078,
      "y": 316.22995376586914,
      "z": -6.681914925575256
    }, {
      "x": 349.0104675292969,
      "y": 264.9818515777588,
      "z": -36.274919509887695
    }, {
      "x": 347.7138900756836,
      "y": 257.5664806365967,
      "z": -37.67549514770508
    }, {
      "x": 291.79357528686523,
      "y": 218.88171672821045,
      "z": 11.578094959259033,
      "name": "rightEyebrow"
    }, {
      "x": 332.2689437866211,
      "y": 247.56946563720703,
      "z": -3.3730539679527283
    }, {
      "x": 332.0074462890625,
      "y": 267.1201229095459,
      "z": -19.969879388809204
    }, {
      "x": 331.27952575683594,
      "y": 263.6967658996582,
      "z": -17.47218608856201
    }, {
      "x": 301.04373931884766,
      "y": 269.56552505493164,
      "z": 3.61815482378006
    }, {
      "x": 347.4863815307617,
      "y": 249.0706443786621,
      "z": -32.633421421051025
    }, {
      "x": 307.26118087768555,
      "y": 208.2646894454956,
      "z": 1.1591226607561111,
      "name": "rightEyebrow"
    }, {
      "x": 297.91919708251953,
      "y": 212.22604751586914,
      "z": 5.914516448974609,
      "name": "rightEyebrow"
    }, {
      "x": 285.1651382446289,
      "y": 197.98450469970703,
      "z": 36.391637325286865,
      "name": "faceOval"
    }, {
      "x": 337.04097747802734,
      "y": 211.25229835510254,
      "z": -4.548954665660858
    }, {
      "x": 326.5912628173828,
      "y": 223.16698551177979,
      "z": 6.670243740081787
    }, {
      "x": 320.05664825439453,
      "y": 309.5834255218506,
      "z": -4.055835008621216
    }, {
      "x": 289.6866226196289,
      "y": 314.617395401001,
      "z": 53.875489234924316,
      "name": "faceOval"
    }, {
      "x": 337.4256896972656,
      "y": 270.8755302429199,
      "z": -17.67060160636902
    }, {
      "x": 343.69922637939453,
      "y": 273.0000400543213,
      "z": -18.756048679351807
    }, {
      "x": 327.4242401123047,
      "y": 309.22399520874023,
      "z": -4.703601002693176,
      "name": "lips"
    }, {
      "x": 330.37220001220703,
      "y": 308.3323001861572,
      "z": -6.442649960517883
    }, {
      "x": 293.87027740478516,
      "y": 207.7961826324463,
      "z": 9.821539521217346,
      "name": "rightEyebrow"
    }, {
      "x": 332.11437225341797,
      "y": 271.22812271118164,
      "z": -16.64351224899292
    }, {
      "x": 320.1197814941406,
      "y": 207.40366458892822,
      "z": -2.48164564371109,
      "name": "rightEyebrow"
    }, {
      "x": 318.59575271606445,
      "y": 201.07443809509277,
      "z": -3.110446035861969,
      "name": "rightEyebrow"
    }, {
      "x": 310.72303771972656,
      "y": 175.75075149536133,
      "z": 13.328815698623657,
      "name": "faceOval"
    }, {
      "x": 289.67578887939453,
      "y": 202.29835510253906,
      "z": 21.370456218719482
    }, {
      "x": 315.30879974365234,
      "y": 187.35260009765625,
      "z": 5.0304025411605835
    }, {
      "x": 287.8936767578125,
      "y": 216.54793739318848,
      "z": 17.81065821647644,
      "name": "rightEyebrow"
    }, {
      "x": 283.9391899108887,
      "y": 215.01142501831055,
      "z": 32.04984903335571
    }, {
      "x": 348.35330963134766,
      "y": 299.4155788421631,
      "z": -22.47924566268921
    }, {
      "x": 341.1790466308594,
      "y": 301.8221855163574,
      "z": -18.977805376052856
    }, {
      "x": 335.69713592529297,
      "y": 304.4266891479492,
      "z": -14.682706594467163
    }, {
      "x": 339.4615173339844,
      "y": 272.3654365539551,
      "z": -16.38674020767212
    }, {
      "x": 328.99600982666016,
      "y": 308.86685371398926,
      "z": -5.616893768310547
    }, {
      "x": 332.00313568115234,
      "y": 309.1875743865967,
      "z": -10.335084199905396
    }, {
      "x": 331.0068130493164,
      "y": 307.9274368286133,
      "z": -6.681914925575256,
      "name": "lips"
    }, {
      "x": 341.13792419433594,
      "y": 266.4876937866211,
      "z": -26.56425952911377
    }, {
      "x": 339.02950286865234,
      "y": 305.6663703918457,
      "z": -12.33674168586731,
      "name": "lips"
    }, {
      "x": 344.22935485839844,
      "y": 304.9452781677246,
      "z": -15.161235332489014,
      "name": "lips"
    }, {
      "x": 350.1844024658203,
      "y": 304.374303817749,
      "z": -17.5305438041687,
      "name": "lips"
    }, {
      "x": 348.52630615234375,
      "y": 325.9562301635742,
      "z": -16.164982318878174
    }, {
      "x": 348.6581802368164,
      "y": 317.1624183654785,
      "z": -21.510512828826904,
      "name": "lips"
    }, {
      "x": 348.9766311645508,
      "y": 312.1923065185547,
      "z": -21.708929538726807
    }, {
      "x": 349.2427444458008,
      "y": 308.0660820007324,
      "z": -19.643079042434692
    }, {
      "x": 349.67491149902344,
      "y": 305.42747497558594,
      "z": -18.16080331802368,
      "name": "lips"
    }, {
      "x": 337.95589447021484,
      "y": 306.6535949707031,
      "z": -12.803598642349243,
      "name": "lips"
    }, {
      "x": 337.06878662109375,
      "y": 307.63169288635254,
      "z": -14.274203777313232
    }, {
      "x": 335.77449798583984,
      "y": 309.8449516296387,
      "z": -15.698124170303345
    }, {
      "x": 334.6099090576172,
      "y": 312.7997016906738,
      "z": -14.764405488967896,
      "name": "lips"
    }, {
      "x": 327.2330856323242,
      "y": 293.80866050720215,
      "z": -11.864047050476074
    }, {
      "x": 280.97679138183594,
      "y": 279.79928970336914,
      "z": 68.90834331512451,
      "name": "faceOval"
    }, {
      "x": 355.13843536376953,
      "y": 271.7875671386719,
      "z": -25.350427627563477
    }, {
      "x": 334.7235870361328,
      "y": 307.4656391143799,
      "z": -9.302158951759338,
      "name": "lips"
    }, {
      "x": 333.5293960571289,
      "y": 307.89782524108887,
      "z": -10.200862884521484
    }, {
      "x": 346.29688262939453,
      "y": 276.4256286621094,
      "z": -19.748122692108154
    }, {
      "x": 335.16246795654297,
      "y": 276.22097969055176,
      "z": -12.313398122787476
    }, {
      "x": 345.09132385253906,
      "y": 274.7082996368408,
      "z": -19.304605722427368
    }, {
      "x": 325.4267883300781,
      "y": 252.95130729675293,
      "z": -1.6661019623279572
    }, {
      "x": 315.347843170166,
      "y": 259.05200958251953,
      "z": -0.25604281574487686
    }, {
      "x": 330.44933319091797,
      "y": 267.7570152282715,
      "z": -14.017432928085327
    }, {
      "x": 294.96768951416016,
      "y": 185.26001930236816,
      "z": 23.903164863586426,
      "name": "faceOval"
    }, {
      "x": 299.63531494140625,
      "y": 192.7913761138916,
      "z": 12.640198469161987
    }, {
      "x": 304.5452117919922,
      "y": 202.4142837524414,
      "z": 3.244667649269104,
      "name": "rightEyebrow"
    }, {
      "x": 331.6915512084961,
      "y": 320.0467872619629,
      "z": -10.632705688476562
    }, {
      "x": 334.5911407470703,
      "y": 201.27566814422607,
      "z": -6.133356094360352,
      "name": "rightEyebrow"
    }, {
      "x": 331.4815902709961,
      "y": 185.44180870056152,
      "z": 0.6627205014228821
    }, {
      "x": 328.05816650390625,
      "y": 170.8385467529297,
      "z": 7.358860373497009,
      "name": "faceOval"
    }, {
      "x": 304.49764251708984,
      "y": 239.76297855377197,
      "z": 10.387605428695679
    }, {
      "x": 290.6382179260254,
      "y": 248.85257720947266,
      "z": 19.03616428375244
    }, {
      "x": 331.5682601928711,
      "y": 233.20727348327637,
      "z": 7.837390303611755
    }, {
      "x": 295.5115509033203,
      "y": 228.9834451675415,
      "z": 14.41426157951355
    }, {
      "x": 336.94332122802734,
      "y": 241.8259334564209,
      "z": -5.27842104434967
    }, {
      "x": 336.2792205810547,
      "y": 262.7049922943115,
      "z": -26.12074375152588
    }, {
      "x": 284.4102478027344,
      "y": 255.3262710571289,
      "z": 25.467140674591064
    }, {
      "x": 295.1420593261719,
      "y": 253.02655220031738,
      "z": 12.430112361907959
    }, {
      "x": 303.5196113586426,
      "y": 254.20703887939453,
      "z": 6.139191389083862
    }, {
      "x": 315.73450088500977,
      "y": 251.64799690246582,
      "z": 3.3788898587226868
    }, {
      "x": 324.69661712646484,
      "y": 247.56494522094727,
      "z": 2.3328344523906708
    }, {
      "x": 331.57970428466797,
      "y": 243.02241325378418,
      "z": 1.1423448473215103
    }, {
      "x": 345.6210708618164,
      "y": 229.9976634979248,
      "z": -10.825285911560059
    }, {
      "x": 286.26644134521484,
      "y": 270.37991523742676,
      "z": 21.708929538726807
    }, {
      "x": 290.2525520324707,
      "y": 228.4921360015869,
      "z": 17.71728754043579
    }, {
      "x": 351.65367126464844,
      "y": 269.3400764465332,
      "z": -33.450424671173096
    }, {
      "x": 333.1378936767578,
      "y": 253.88388633728027,
      "z": -7.230473756790161
    }, {
      "x": 277.8318977355957,
      "y": 246.95331573486328,
      "z": 68.20805549621582,
      "name": "faceOval"
    }, {
      "x": 336.6680908203125,
      "y": 238.10003757476807,
      "z": 0.7688578963279724
    }, {
      "x": 329.95800018310547,
      "y": 269.18323516845703,
      "z": -7.207130789756775
    }, {
      "x": 299.17491912841797,
      "y": 234.13324356079102,
      "z": 15.95489501953125
    }, {
      "x": 335.61729431152344,
      "y": 258.71752738952637,
      "z": -23.016133308410645
    }, {
      "x": 284.1079330444336,
      "y": 297.0343494415283,
      "z": 63.25934886932373,
      "name": "faceOval"
    }, {
      "x": 331.44542694091797,
      "y": 230.6892442703247,
      "z": 9.92658257484436,
      "name": "rightEye"
    }, {
      "x": 341.41536712646484,
      "y": 253.01264762878418,
      "z": -29.038610458374023
    }, {
      "x": 303.5472869873047,
      "y": 327.5896739959717,
      "z": 16.725212335586548
    }, {
      "x": 304.7756576538086,
      "y": 337.4389457702637,
      "z": 27.38126277923584,
      "name": "faceOval"
    }, {
      "x": 280.80501556396484,
      "y": 275.32050132751465,
      "z": 45.0752067565918
    }, {
      "x": 295.43582916259766,
      "y": 318.4501647949219,
      "z": 26.2608003616333
    }, {
      "x": 281.4303207397461,
      "y": 228.7355661392212,
      "z": 40.94350814819336
    }, {
      "x": 331.2549591064453,
      "y": 349.4216537475586,
      "z": -7.376367449760437
    }, {
      "x": 352.4247741699219,
      "y": 271.7330074310303,
      "z": -24.953596591949463
    }, {
      "x": 327.5672912597656,
      "y": 260.41900634765625,
      "z": -5.456410646438599
    }, {
      "x": 284.5432472229004,
      "y": 241.7647933959961,
      "z": 29.668869972229004
    }, {
      "x": 310,
      "y": 235.66174507141113,
      "z": 8.502663969993591,
      "name": "rightEye"
    }, {
      "x": 315.7071113586426,
      "y": 235.7572603225708,
      "z": 6.938687562942505,
      "name": "rightEye"
    }, {
      "x": 330.41088104248047,
      "y": 311.04143142700195,
      "z": -9.325502514839172,
      "name": "lips"
    }, {
      "x": 288.5377502441406,
      "y": 285.31983375549316,
      "z": 21.837315559387207
    }, {
      "x": 344.55039978027344,
      "y": 359.4300842285156,
      "z": -6.705257892608643,
      "name": "faceOval"
    }, {
      "x": 323.41880798339844,
      "y": 351.67362213134766,
      "z": 7.802375555038452,
      "name": "faceOval"
    }, {
      "x": 314.64088439941406,
      "y": 346.11894607543945,
      "z": 16.36339783668518,
      "name": "faceOval"
    }, {
      "x": 349.4945526123047,
      "y": 184.8434829711914,
      "z": -0.21847527474164963
    }, {
      "x": 359.24694061279297,
      "y": 359.8348903656006,
      "z": -8.403456211090088,
      "name": "faceOval"
    }, {
      "x": 321.26182556152344,
      "y": 234.64492321014404,
      "z": 6.90950870513916,
      "name": "rightEye"
    }, {
      "x": 326.318359375,
      "y": 232.90250301361084,
      "z": 8.029969334602356,
      "name": "rightEye"
    }, {
      "x": 329.6211624145508,
      "y": 231.6195774078369,
      "z": 9.722331762313843,
      "name": "rightEye"
    }, {
      "x": 285.9398078918457,
      "y": 228.2351303100586,
      "z": 24.650139808654785
    }, {
      "x": 325.79288482666016,
      "y": 227.88007736206055,
      "z": 7.469738721847534,
      "name": "rightEye"
    }, {
      "x": 320.1699447631836,
      "y": 227.5934886932373,
      "z": 6.168370842933655,
      "name": "rightEye"
    }, {
      "x": 314.85408782958984,
      "y": 227.85282611846924,
      "z": 6.2675780057907104,
      "name": "rightEye"
    }, {
      "x": 309.3084907531738,
      "y": 229.1516876220703,
      "z": 7.7031683921813965,
      "name": "rightEye"
    }, {
      "x": 305.5621337890625,
      "y": 230.92366218566895,
      "z": 9.722331762313843,
      "name": "rightEye"
    }, {
      "x": 277.8681945800781,
      "y": 228.5354232788086,
      "z": 59.71122741699219,
      "name": "faceOval"
    }, {
      "x": 306.1444664001465,
      "y": 235.1954698562622,
      "z": 10.603528022766113,
      "name": "rightEye"
    }, {
      "x": 355.4478454589844,
      "y": 281.96210861206055,
      "z": -20.565123558044434
    }, {
      "x": 333.02661895751953,
      "y": 288.0105400085449,
      "z": -14.72939133644104
    }, {
      "x": 337.15728759765625,
      "y": 269.2059516906738,
      "z": -19.8414945602417
    }, {
      "x": 345.9898376464844,
      "y": 283.5453128814697,
      "z": -20.4834246635437
    }, {
      "x": 351.48963928222656,
      "y": 219.98916149139404,
      "z": -7.0378947257995605
    }, {
      "x": 312.39574432373047,
      "y": 336.50628089904785,
      "z": 8.671900033950806
    }, {
      "x": 321.32152557373047,
      "y": 343.1755256652832,
      "z": 0.9067271649837494
    }, {
      "x": 343.78379821777344,
      "y": 353.2975959777832,
      "z": -14.355905055999756
    }, {
      "x": 296.8791389465332,
      "y": 327.91497230529785,
      "z": 41.01353645324707,
      "name": "faceOval"
    }, {
      "x": 329.6939468383789,
      "y": 229.27897453308105,
      "z": 8.934508562088013,
      "name": "rightEye"
    }, {
      "x": 341.6905212402344,
      "y": 241.4073657989502,
      "z": -14.589333534240723
    }, {
      "x": 359.03079986572266,
      "y": 353.48859786987305,
      "z": -15.803166627883911
    }, {
      "x": 333.1861877441406,
      "y": 356.43213272094727,
      "z": -1.0234417766332626,
      "name": "faceOval"
    }, {
      "x": 283.97483825683594,
      "y": 291.4318656921387,
      "z": 41.94725513458252
    }, {
      "x": 343.33770751953125,
      "y": 305.830135345459,
      "z": -15.756480693817139,
      "name": "lips"
    }, {
      "x": 342.40283966064453,
      "y": 307.7453899383545,
      "z": -17.4021577835083
    }, {
      "x": 341.53621673583984,
      "y": 311.0595703125,
      "z": -19.047834873199463
    }, {
      "x": 340.9107208251953,
      "y": 315.4837703704834,
      "z": -18.5576331615448,
      "name": "lips"
    }, {
      "x": 339.1478729248047,
      "y": 323.42233657836914,
      "z": -14.367576837539673
    }, {
      "x": 333.3201599121094,
      "y": 307.4406337738037,
      "z": -9.617288708686829
    }, {
      "x": 331.2411117553711,
      "y": 306.9811820983887,
      "z": -9.669809937477112
    }, {
      "x": 329.23255920410156,
      "y": 306.0508346557617,
      "z": -9.582273960113525,
      "name": "lips"
    }, {
      "x": 322.4586486816406,
      "y": 301.33323669433594,
      "z": -7.720675468444824
    }, {
      "x": 297.1712112426758,
      "y": 286.9552803039551,
      "z": 8.240055441856384
    }, {
      "x": 341.3060760498047,
      "y": 235.4432201385498,
      "z": -7.504753470420837
    }, {
      "x": 336.9318389892578,
      "y": 224.3451976776123,
      "z": 5.829898118972778
    }, {
      "x": 332.65323638916016,
      "y": 226.70403957366943,
      "z": 8.105834126472473
    }, {
      "x": 334.67357635498047,
      "y": 306.4397621154785,
      "z": -8.981193900108337,
      "name": "lips"
    }, {
      "x": 297.4601936340332,
      "y": 306.29210472106934,
      "z": 15.476365089416504
    }, {
      "x": 342.9119110107422,
      "y": 222.37077713012695,
      "z": -2.754466235637665
    }, {
      "x": 335.4629898071289,
      "y": 332.20250129699707,
      "z": -11.823196411132812
    }, {
      "x": 353.2412338256836,
      "y": 240.56339263916016,
      "z": -27.147831916809082
    }, {
      "x": 346.3080596923828,
      "y": 236.41446590423584,
      "z": -18.452589511871338
    }, {
      "x": 352.6475143432617,
      "y": 234.1420555114746,
      "z": -19.748122692108154
    }, {
      "x": 337.3209762573242,
      "y": 253.39937210083008,
      "z": -16.024924516677856
    }, {
      "x": 358.6122131347656,
      "y": 344.90861892700195,
      "z": -18.592647314071655
    }, {
      "x": 358.1117248535156,
      "y": 334.64990615844727,
      "z": -17.49552845954895
    }, {
      "x": 346.4450454711914,
      "y": 335.0321102142334,
      "z": -16.32838249206543
    }, {
      "x": 319.17640686035156,
      "y": 320.2833938598633,
      "z": -3.276764452457428
    }, {
      "x": 325.2540588378906,
      "y": 276.2369728088379,
      "z": -6.460157036781311
    }, {
      "x": 326.7214584350586,
      "y": 327.3939514160156,
      "z": -7.417217493057251
    }, {
      "x": 310.7190132141113,
      "y": 277.2265148162842,
      "z": -3.5452082753181458
    }, {
      "x": 319.78355407714844,
      "y": 284.8238182067871,
      "z": -6.4543211460113525
    }, {
      "x": 305.773983001709,
      "y": 290.83580017089844,
      "z": 0.06907138042151928
    }, {
      "x": 344.4001770019531,
      "y": 344.85408782958984,
      "z": -16.946970224380493
    }, {
      "x": 333.1879425048828,
      "y": 258.74256134033203,
      "z": -11.90489649772644
    }, {
      "x": 313.80598068237305,
      "y": 327.08919525146484,
      "z": 2.2277912497520447
    }, {
      "x": 322.9637908935547,
      "y": 334.6819496154785,
      "z": -3.3643004298210144
    }, {
      "x": 313.4055519104004,
      "y": 311.2166690826416,
      "z": -1.1175429821014404
    }, {
      "x": 291.0865783691406,
      "y": 298.2831001281738,
      "z": 22.467575073242188
    }, {
      "x": 305.6580924987793,
      "y": 313.3707904815674,
      "z": 5.561453700065613
    }, {
      "x": 288.23760986328125,
      "y": 305.9941864013672,
      "z": 36.765122413635254
    }, {
      "x": 315.10692596435547,
      "y": 296.26991271972656,
      "z": -4.604393839836121
    }, {
      "x": 337.50518798828125,
      "y": 247.5944423675537,
      "z": -10.597691535949707
    }, {
      "x": 338.8450622558594,
      "y": 265.47778129577637,
      "z": -27.778091430664062
    }, {
      "x": 334.25254821777344,
      "y": 269.0671920776367,
      "z": -20.938611030578613
    }, {
      "x": 341.64512634277344,
      "y": 259.6387195587158,
      "z": -32.189905643463135
    }, {
      "x": 331.44081115722656,
      "y": 219.0976095199585,
      "z": 4.207563698291779
    }, {
      "x": 320.56339263916016,
      "y": 216.49658203125,
      "z": 2.930997312068939
    }, {
      "x": 311.21912002563477,
      "y": 216.57853603363037,
      "z": 2.9674705862998962
    }, {
      "x": 303.46256256103516,
      "y": 218.54614734649658,
      "z": 5.357203483581543
    }, {
      "x": 297.99999237060547,
      "y": 222.505202293396,
      "z": 9.325502514839172
    }, {
      "x": 294.93839263916016,
      "y": 236.39654159545898,
      "z": 18.534289598464966
    }, {
      "x": 278.87489318847656,
      "y": 259.7095584869385,
      "z": 45.68212032318115
    }, {
      "x": 300.3782653808594,
      "y": 245.38593292236328,
      "z": 12.278382778167725
    }, {
      "x": 307.06348419189453,
      "y": 246.36857986450195,
      "z": 8.164191246032715
    }, {
      "x": 315.5229187011719,
      "y": 245.3949737548828,
      "z": 5.503097176551819
    }, {
      "x": 323.71395111083984,
      "y": 242.75178909301758,
      "z": 4.6335723996162415
    }, {
      "x": 330.2785873413086,
      "y": 239.34658527374268,
      "z": 4.937030673027039
    }, {
      "x": 334.6982192993164,
      "y": 236.0460376739502,
      "z": 4.823233783245087
    }, {
      "x": 279.3412208557129,
      "y": 263.5196113586426,
      "z": 70.91583728790283,
      "name": "faceOval"
    }, {
      "x": 334.65972900390625,
      "y": 271.6648578643799,
      "z": -17.775644063949585
    }, {
      "x": 342.05677032470703,
      "y": 246.99846267700195,
      "z": -20.84523916244507
    }, {
      "x": 344.0357971191406,
      "y": 264.5701503753662,
      "z": -32.936880588531494
    }, {
      "x": 348.25531005859375,
      "y": 268.6645030975342,
      "z": -30.695960521697998
    }, {
      "x": 344.12227630615234,
      "y": 266.34212493896484,
      "z": -29.808926582336426
    }, {
      "x": 337.12318420410156,
      "y": 274.2556858062744,
      "z": -15.768152475357056
    }, {
      "x": 349.49047088623047,
      "y": 269.071683883667,
      "z": -32.51670837402344
    }, {
      "x": 350.1683044433594,
      "y": 271.4691352844238,
      "z": -24.93025302886963
    }, {
      "x": 333.9634704589844,
      "y": 230.56639194488525,
      "z": 8.89949381351471
    }, {
      "x": 338.2147979736328,
      "y": 231.4807891845703,
      "z": 4.6715047955513
    }, {
      "x": 340.4712677001953,
      "y": 231.74463272094727,
      "z": -0.34996166825294495
    }, {
      "x": 303.28975677490234,
      "y": 232.24980354309082,
      "z": 11.916568279266357,
      "name": "rightEye"
    }, {
      "x": 299.4649124145508,
      "y": 229.53842639923096,
      "z": 12.325069904327393
    }, {
      "x": 359.09618377685547,
      "y": 241.77349090576172,
      "z": -24.650139808654785
    }, {
      "x": 399.46216583251953,
      "y": 229.89503860473633,
      "z": 15.919880867004395,
      "name": "leftEye"
    }, {
      "x": 361.38919830322266,
      "y": 269.6129894256592,
      "z": -24.510080814361572
    }, {
      "x": 416.9973373413086,
      "y": 206.0895538330078,
      "z": 53.26857566833496,
      "name": "faceOval"
    }, {
      "x": 381.32179260253906,
      "y": 235.5476474761963,
      "z": 7.6214683055877686
    }, {
      "x": 387.8068542480469,
      "y": 236.25958442687988,
      "z": 8.345099091529846
    }, {
      "x": 393.95751953125,
      "y": 235.8660364151001,
      "z": 10.475142002105713
    }, {
      "x": 401.84600830078125,
      "y": 232.77019500732422,
      "z": 16.760226488113403
    }, {
      "x": 375.70568084716797,
      "y": 233.48456382751465,
      "z": 8.234220147132874
    }, {
      "x": 388.17752838134766,
      "y": 218.94717693328857,
      "z": 6.810300946235657
    }, {
      "x": 381.64928436279297,
      "y": 219.2656660079956,
      "z": 6.711093783378601
    }, {
      "x": 394.4760513305664,
      "y": 219.66821193695068,
      "z": 9.173773527145386
    }, {
      "x": 398.8843536376953,
      "y": 221.8837022781372,
      "z": 12.03328251838684
    }, {
      "x": 406.5454864501953,
      "y": 237.12156772613525,
      "z": 19.7131085395813
    }, {
      "x": 383.87447357177734,
      "y": 337.6932907104492,
      "z": -8.631049990653992
    }, {
      "x": 401.2682342529297,
      "y": 228.5916566848755,
      "z": 18.359217643737793,
      "name": "leftEye"
    }, {
      "x": 422.0449447631836,
      "y": 236.73934936523438,
      "z": 51.16771221160889
    }, {
      "x": 412.69153594970703,
      "y": 232.80198097229004,
      "z": 27.52131938934326
    }, {
      "x": 387.3497772216797,
      "y": 263.298397064209,
      "z": -2.8609684109687805
    }, {
      "x": 364.5124053955078,
      "y": 293.39221000671387,
      "z": -22.397546768188477,
      "name": "lips"
    }, {
      "x": 363.62987518310547,
      "y": 302.1291446685791,
      "z": -19.643079042434692
    }, {
      "x": 373.2334518432617,
      "y": 295.8647060394287,
      "z": -18.125789165496826,
      "name": "lips"
    }, {
      "x": 378.83365631103516,
      "y": 299.5177745819092,
      "z": -13.153743743896484,
      "name": "lips"
    }, {
      "x": 369.91477966308594,
      "y": 302.5704002380371,
      "z": -16.65518283843994
    }, {
      "x": 374.9167251586914,
      "y": 303.5416603088379,
      "z": -11.963253021240234
    }, {
      "x": 387.58888244628906,
      "y": 312.2716999053955,
      "z": -4.680258631706238
    }, {
      "x": 360.6635284423828,
      "y": 264.31986808776855,
      "z": -35.94811677932739
    }, {
      "x": 361.04564666748047,
      "y": 256.8225860595703,
      "z": -37.278664112091064
    }, {
      "x": 408.3855438232422,
      "y": 213.52088928222656,
      "z": 15.756480693817139,
      "name": "leftEyebrow"
    }, {
      "x": 373.2946014404297,
      "y": 245.38101196289062,
      "z": -1.9316278398036957
    }, {
      "x": 376.83860778808594,
      "y": 264.3721103668213,
      "z": -18.510947227478027
    }, {
      "x": 376.9546127319336,
      "y": 261.0010528564453,
      "z": -15.989909172058105
    }, {
      "x": 406.1498260498047,
      "y": 263.5030174255371,
      "z": 7.072908878326416
    }, {
      "x": 360.07205963134766,
      "y": 248.3631706237793,
      "z": -32.16656446456909
    }, {
      "x": 393.11119079589844,
      "y": 205.10473251342773,
      "z": 3.7786373496055603,
      "name": "leftEyebrow"
    }, {
      "x": 402.12791442871094,
      "y": 207.89000988006592,
      "z": 9.383859634399414,
      "name": "leftEyebrow"
    }, {
      "x": 410.8693313598633,
      "y": 191.6182279586792,
      "z": 41.27030849456787,
      "name": "faceOval"
    }, {
      "x": 364.9509811401367,
      "y": 210.40483474731445,
      "z": -3.758212625980377
    }, {
      "x": 375.94444274902344,
      "y": 221.1331844329834,
      "z": 8.368442058563232
    }, {
      "x": 392.1904754638672,
      "y": 305.0360298156738,
      "z": -1.752179116010666
    }, {
      "x": 419.50225830078125,
      "y": 307.25592613220215,
      "z": 58.96425247192383,
      "name": "faceOval"
    }, {
      "x": 372.0027160644531,
      "y": 268.7212657928467,
      "z": -16.631840467453003
    }, {
      "x": 366.1614227294922,
      "y": 271.6237449645996,
      "z": -18.219159841537476
    }, {
      "x": 385.00938415527344,
      "y": 305.3863334655762,
      "z": -2.567722797393799
    }, {
      "x": 381.99771881103516,
      "y": 304.9723720550537,
      "z": -4.575215280056
    }, {
      "x": 405.078125,
      "y": 203.21216583251953,
      "z": 13.713973760604858,
      "name": "leftEyebrow"
    }, {
      "x": 377.13207244873047,
      "y": 268.4710121154785,
      "z": -15.266278982162476
    }, {
      "x": 380.9713363647461,
      "y": 205.36980628967285,
      "z": -0.7250899076461792,
      "name": "leftEyebrow"
    }, {
      "x": 381.7788314819336,
      "y": 198.9268398284912,
      "z": -1.184653863310814,
      "name": "leftEyebrow"
    }, {
      "x": 385.5204772949219,
      "y": 172.1484375,
      "z": 16.04826807975769,
      "name": "faceOval"
    }, {
      "x": 407.94189453125,
      "y": 196.76236152648926,
      "z": 25.723915100097656
    }, {
      "x": 383.03890228271484,
      "y": 184.5157527923584,
      "z": 7.393874526023865
    }, {
      "x": 411.61781311035156,
      "y": 210.79241752624512,
      "z": 22.315845489501953,
      "name": "leftEyebrow"
    }, {
      "x": 414.30870056152344,
      "y": 208.4643030166626,
      "z": 37.021894454956055
    }, {
      "x": 364.28722381591797,
      "y": 298.35777282714844,
      "z": -21.86065673828125
    }, {
      "x": 371.3682556152344,
      "y": 299.78848457336426,
      "z": -17.834001779556274
    }, {
      "x": 376.88201904296875,
      "y": 301.6696071624756,
      "z": -13.153743743896484
    }, {
      "x": 370.2193832397461,
      "y": 270.49095153808594,
      "z": -15.569736957550049
    }, {
      "x": 383.5081100463867,
      "y": 305.2726364135742,
      "z": -3.673594295978546
    }, {
      "x": 380.73760986328125,
      "y": 305.96869468688965,
      "z": -8.660228252410889
    }, {
      "x": 381.2334442138672,
      "y": 304.63574409484863,
      "z": -4.820316135883331,
      "name": "lips"
    }, {
      "x": 368.1698989868164,
      "y": 264.8884963989258,
      "z": -25.653886795043945
    }, {
      "x": 373.5087203979492,
      "y": 303.4233856201172,
      "z": -10.95950722694397,
      "name": "lips"
    }, {
      "x": 368.4544372558594,
      "y": 303.29601287841797,
      "z": -14.169161319732666,
      "name": "lips"
    }, {
      "x": 362.76554107666016,
      "y": 303.5735607147217,
      "z": -16.911956071853638,
      "name": "lips"
    }, {
      "x": 366.60980224609375,
      "y": 324.8870658874512,
      "z": -15.616422891616821
    }, {
      "x": 365.7067108154297,
      "y": 315.95678329467773,
      "z": -20.903596878051758,
      "name": "lips"
    }, {
      "x": 365.0083923339844,
      "y": 311.2232208251953,
      "z": -21.066999435424805
    }, {
      "x": 364.1508102416992,
      "y": 307.0583438873291,
      "z": -18.907777070999146
    }, {
      "x": 363.37512969970703,
      "y": 304.5721435546875,
      "z": -17.42550015449524,
      "name": "lips"
    }, {
      "x": 374.580078125,
      "y": 304.3059539794922,
      "z": -11.40302300453186,
      "name": "lips"
    }, {
      "x": 375.55362701416016,
      "y": 305.0998020172119,
      "z": -12.861957550048828
    }, {
      "x": 377.2437286376953,
      "y": 307.1674346923828,
      "z": -14.215847253799438
    }, {
      "x": 378.68587493896484,
      "y": 309.9015712738037,
      "z": -13.223772048950195,
      "name": "lips"
    }, {
      "x": 383.8992691040039,
      "y": 290.29629707336426,
      "z": -9.97326910495758
    }, {
      "x": 423.3871841430664,
      "y": 271.91688537597656,
      "z": 74.37058925628662,
      "name": "faceOval"
    }, {
      "x": 377.68043518066406,
      "y": 304.62209701538086,
      "z": -7.603961229324341,
      "name": "lips"
    }, {
      "x": 379.00428771972656,
      "y": 304.9314594268799,
      "z": -8.57852816581726
    }, {
      "x": 364.00279998779297,
      "y": 275.2813911437988,
      "z": -19.25792098045349
    }, {
      "x": 374.68231201171875,
      "y": 273.82555961608887,
      "z": -11.28047227859497
    }, {
      "x": 365.0354766845703,
      "y": 273.4548568725586,
      "z": -18.791062831878662
    }, {
      "x": 380.61901092529297,
      "y": 249.8848056793213,
      "z": 0.15501167625188828
    }, {
      "x": 391.14158630371094,
      "y": 254.7934627532959,
      "z": 2.0906515419483185
    }, {
      "x": 378.1761169433594,
      "y": 264.9612236022949,
      "z": -12.605184316635132
    }, {
      "x": 400.9540557861328,
      "y": 179.99592304229736,
      "z": 27.82477855682373,
      "name": "faceOval"
    }, {
      "x": 398.0038833618164,
      "y": 188.50656509399414,
      "z": 16.094952821731567
    }, {
      "x": 394.8717498779297,
      "y": 199.0359592437744,
      "z": 6.226727366447449,
      "name": "leftEyebrow"
    }, {
      "x": 382.10926055908203,
      "y": 316.83926582336426,
      "z": -8.946179747581482
    }, {
      "x": 366.51588439941406,
      "y": 200.32583713531494,
      "z": -5.24632453918457,
      "name": "leftEyebrow"
    }, {
      "x": 367.4893569946289,
      "y": 183.87210845947266,
      "z": 1.9039081037044525
    }, {
      "x": 368.6243438720703,
      "y": 168.8127565383911,
      "z": 8.736093044281006,
      "name": "faceOval"
    }, {
      "x": 398.96175384521484,
      "y": 234.9675178527832,
      "z": 13.713973760604858
    }, {
      "x": 412.9645538330078,
      "y": 242.23042488098145,
      "z": 23.272905349731445
    }, {
      "x": 372.05257415771484,
      "y": 231.41919136047363,
      "z": 9.226294755935669
    }, {
      "x": 406.0722351074219,
      "y": 223.58965873718262,
      "z": 18.370890617370605
    }, {
      "x": 368.27442169189453,
      "y": 240.2039337158203,
      "z": -4.166713654994965
    }, {
      "x": 372.3575210571289,
      "y": 260.66442489624023,
      "z": -24.976940155029297
    }, {
      "x": 419.2244338989258,
      "y": 247.9079246520996,
      "z": 30.299127101898193
    }, {
      "x": 409.43885803222656,
      "y": 246.60913467407227,
      "z": 16.398411989212036
    }, {
      "x": 401.69139862060547,
      "y": 248.76328468322754,
      "z": 9.395531415939331
    }, {
      "x": 389.7608184814453,
      "y": 247.56915092468262,
      "z": 5.841569304466248
    }, {
      "x": 380.5461883544922,
      "y": 244.55984115600586,
      "z": 4.263003468513489
    }, {
      "x": 373.25817108154297,
      "y": 240.80214500427246,
      "z": 2.5356262922286987
    }, {
      "x": 358.77086639404297,
      "y": 229.35615062713623,
      "z": -10.387605428695679
    }, {
      "x": 419.5793914794922,
      "y": 262.8478717803955,
      "z": 26.5175724029541
    }, {
      "x": 410.8808898925781,
      "y": 222.51372814178467,
      "z": 22.199130058288574
    }, {
      "x": 358.45714569091797,
      "y": 268.91467094421387,
      "z": -33.17030906677246
    }, {
      "x": 373.4129333496094,
      "y": 251.6385841369629,
      "z": -5.771540403366089
    }, {
      "x": 422.5408172607422,
      "y": 239.23919677734375,
      "z": 74.04378890991211,
      "name": "faceOval"
    }, {
      "x": 367.8171920776367,
      "y": 236.58040523529053,
      "z": 1.820748895406723
    }, {
      "x": 378.51959228515625,
      "y": 266.2532329559326,
      "z": -5.74819803237915
    }, {
      "x": 403.3472442626953,
      "y": 229.05112266540527,
      "z": 19.689764976501465
    }, {
      "x": 372.34840393066406,
      "y": 256.6451168060303,
      "z": -21.872329711914062
    }, {
      "x": 422.54566192626953,
      "y": 289.1587829589844,
      "z": 68.67491245269775,
      "name": "faceOval"
    }, {
      "x": 371.9297409057617,
      "y": 228.90116214752197,
      "z": 11.432201862335205,
      "name": "leftEye"
    }, {
      "x": 366.21360778808594,
      "y": 251.6158962249756,
      "z": -28.19826364517212
    }, {
      "x": 409.1571807861328,
      "y": 321.3156223297119,
      "z": 20.2266526222229
    }, {
      "x": 408.52943420410156,
      "y": 331.44238471984863,
      "z": 31.09278917312622,
      "name": "faceOval"
    }, {
      "x": 424.2788314819336,
      "y": 267.1992301940918,
      "z": 50.467424392700195
    }, {
      "x": 415.60352325439453,
      "y": 311.6528606414795,
      "z": 30.579242706298828
    }, {
      "x": 418.12793731689453,
      "y": 221.59927368164062,
      "z": 46.26569747924805
    }, {
      "x": 385.68286895751953,
      "y": 346.0184955596924,
      "z": -5.70151150226593
    }, {
      "x": 357.82936096191406,
      "y": 271.3758373260498,
      "z": -24.836881160736084
    }, {
      "x": 379.588623046875,
      "y": 257.5071716308594,
      "z": -3.755294680595398
    }, {
      "x": 417.4592590332031,
      "y": 234.71948146820068,
      "z": 34.5475435256958
    }, {
      "x": 393.4684371948242,
      "y": 231.58967971801758,
      "z": 11.408859491348267,
      "name": "leftEye"
    }, {
      "x": 387.8864288330078,
      "y": 232.14245796203613,
      "z": 9.51808214187622,
      "name": "leftEye"
    }, {
      "x": 382.4981689453125,
      "y": 307.5654888153076,
      "z": -7.522260546684265,
      "name": "lips"
    }, {
      "x": 419.00169372558594,
      "y": 277.8332805633545,
      "z": 26.424202919006348
    }, {
      "x": 373.62953186035156,
      "y": 357.6375102996826,
      "z": -5.75986921787262,
      "name": "faceOval"
    }, {
      "x": 392.8708267211914,
      "y": 347.72446632385254,
      "z": 10.154176950454712,
      "name": "faceOval"
    }, {
      "x": 400.3953552246094,
      "y": 341.0005187988281,
      "z": 19.39797878265381,
      "name": "faceOval"
    }, {
      "x": 382.25440979003906,
      "y": 231.66935920715332,
      "z": 8.998700976371765,
      "name": "leftEye"
    }, {
      "x": 377.14550018310547,
      "y": 230.4228687286377,
      "z": 9.804032444953918,
      "name": "leftEye"
    }, {
      "x": 373.8358688354492,
      "y": 229.64950561523438,
      "z": 11.292144060134888,
      "name": "leftEye"
    }, {
      "x": 414.5794677734375,
      "y": 221.67891025543213,
      "z": 29.412097930908203
    }, {
      "x": 377.00672149658203,
      "y": 225.66201210021973,
      "z": 9.360517263412476,
      "name": "leftEye"
    }, {
      "x": 382.29530334472656,
      "y": 224.8431158065796,
      "z": 8.32175612449646,
      "name": "leftEye"
    }, {
      "x": 387.5133514404297,
      "y": 224.49507236480713,
      "z": 8.917000889778137,
      "name": "leftEye"
    }, {
      "x": 393.15906524658203,
      "y": 225.24795055389404,
      "z": 10.737749338150024,
      "name": "leftEye"
    }, {
      "x": 397.05554962158203,
      "y": 226.55359268188477,
      "z": 13.002015352249146,
      "name": "leftEye"
    }, {
      "x": 420.5299377441406,
      "y": 221.014666557312,
      "z": 65.40690422058105,
      "name": "faceOval"
    }, {
      "x": 397.06920623779297,
      "y": 230.6661558151245,
      "z": 13.807345628738403,
      "name": "leftEye"
    }, {
      "x": 377.94647216796875,
      "y": 285.1647090911865,
      "z": -13.305472135543823
    }, {
      "x": 372.1118927001953,
      "y": 267.1267318725586,
      "z": -18.83774757385254
    }, {
      "x": 364.9968719482422,
      "y": 282.24411964416504,
      "z": -19.818150997161865
    }, {
      "x": 401.973876953125,
      "y": 331.20131492614746,
      "z": 11.566424369812012
    }, {
      "x": 394.3083190917969,
      "y": 338.86693954467773,
      "z": 3.142542541027069
    }, {
      "x": 373.9820861816406,
      "y": 351.4504623413086,
      "z": -13.50388765335083
    }, {
      "x": 414.3888854980469,
      "y": 321.24735832214355,
      "z": 45.51872253417969,
      "name": "faceOval"
    }, {
      "x": 373.44234466552734,
      "y": 227.33163356781006,
      "z": 10.626870393753052,
      "name": "leftEye"
    }, {
      "x": 364.0731430053711,
      "y": 240.31539916992188,
      "z": -13.807345628738403
    }, {
      "x": 384.2658233642578,
      "y": 353.3793067932129,
      "z": 0.7385850697755814,
      "name": "faceOval"
    }, {
      "x": 423.20526123046875,
      "y": 283.5176181793213,
      "z": 47.152724266052246
    }, {
      "x": 369.42798614501953,
      "y": 304.0898895263672,
      "z": -14.647691249847412,
      "name": "lips"
    }, {
      "x": 370.63812255859375,
      "y": 305.90051651000977,
      "z": -16.211668252944946
    }, {
      "x": 371.91192626953125,
      "y": 309.0167713165283,
      "z": -17.84567356109619
    }, {
      "x": 373.0583953857422,
      "y": 313.3545398712158,
      "z": -17.378815412521362,
      "name": "lips"
    }, {
      "x": 375.39905548095703,
      "y": 321.09289169311523,
      "z": -13.118728399276733
    }, {
      "x": 379.2567825317383,
      "y": 304.3582534790039,
      "z": -7.924926280975342
    }, {
      "x": 381.18797302246094,
      "y": 303.7031364440918,
      "z": -7.843226194381714
    }, {
      "x": 383.0918502807617,
      "y": 302.4884605407715,
      "z": -7.6506465673446655,
      "name": "lips"
    }, {
      "x": 389.09461975097656,
      "y": 297.1475315093994,
      "z": -5.5497825145721436
    }, {
      "x": 411.6408920288086,
      "y": 280.24898529052734,
      "z": 12.02161192893982
    }, {
      "x": 363.3110809326172,
      "y": 234.27620887756348,
      "z": -6.775286793708801
    }, {
      "x": 366.0474395751953,
      "y": 223.29872131347656,
      "z": 6.827808618545532
    }, {
      "x": 370.34427642822266,
      "y": 225.1457118988037,
      "z": 9.558931589126587
    }, {
      "x": 377.5371551513672,
      "y": 303.60079765319824,
      "z": -7.358860373497009,
      "name": "lips"
    }, {
      "x": 412.9557800292969,
      "y": 299.53579902648926,
      "z": 19.39797878265381
    }, {
      "x": 360.0810241699219,
      "y": 221.72012329101562,
      "z": -2.153385728597641
    }, {
      "x": 379.82784271240234,
      "y": 329.47723388671875,
      "z": -10.48097848892212
    }, {
      "x": 359.08477783203125,
      "y": 235.7911491394043,
      "z": -18.079102039337158
    }, {
      "x": 369.6688461303711,
      "y": 251.5407943725586,
      "z": -14.962821006774902
    }, {
      "x": 369.5555114746094,
      "y": 333.5307312011719,
      "z": -15.67478060722351
    }, {
      "x": 394.0193176269531,
      "y": 315.6973171234131,
      "z": -0.9920747578144073
    }, {
      "x": 383.78997802734375,
      "y": 272.7268695831299,
      "z": -4.689012169837952
    }, {
      "x": 387.67765045166016,
      "y": 323.6722755432129,
      "z": -5.640236139297485
    }, {
      "x": 397.8769302368164,
      "y": 272.1331214904785,
      "z": -0.9395531564950943
    }, {
      "x": 389.87476348876953,
      "y": 280.5630111694336,
      "z": -4.29218202829361
    }, {
      "x": 403.83888244628906,
      "y": 285.1167869567871,
      "z": 3.0229100584983826
    }, {
      "x": 372.5467300415039,
      "y": 343.1070327758789,
      "z": -16.153310537338257
    }, {
      "x": 374.1112518310547,
      "y": 256.3721466064453,
      "z": -10.574349164962769
    }, {
      "x": 399.73785400390625,
      "y": 321.77515983581543,
      "z": 4.849494695663452
    }, {
      "x": 392.03365325927734,
      "y": 330.56447982788086,
      "z": -1.3407598435878754
    }, {
      "x": 398.59134674072266,
      "y": 305.93902587890625,
      "z": 1.517290621995926
    }, {
      "x": 417.95997619628906,
      "y": 290.9716987609863,
      "z": 26.89105987548828
    }, {
      "x": 406.04541778564453,
      "y": 307.35154151916504,
      "z": 8.666064143180847
    }, {
      "x": 420.75328826904297,
      "y": 298.40752601623535,
      "z": 41.78385257720947
    }, {
      "x": 395.4522705078125,
      "y": 291.4153575897217,
      "z": -2.1752697229385376
    }, {
      "x": 368.6452102661133,
      "y": 245.8882999420166,
      "z": -9.453888535499573
    }, {
      "x": 370.34900665283203,
      "y": 263.56690406799316,
      "z": -26.75100326538086
    }, {
      "x": 374.98477935791016,
      "y": 266.6126346588135,
      "z": -19.77146625518799
    }, {
      "x": 366.99840545654297,
      "y": 258.12140464782715,
      "z": -31.372904777526855
    }, {
      "x": 371.00616455078125,
      "y": 217.63479709625244,
      "z": 5.60522198677063
    }, {
      "x": 381.30577087402344,
      "y": 214.14087295532227,
      "z": 4.983716309070587
    }, {
      "x": 390.1496124267578,
      "y": 213.38221549987793,
      "z": 5.593550801277161
    }, {
      "x": 397.7696990966797,
      "y": 214.3659782409668,
      "z": 8.57852816581726
    }, {
      "x": 403.1652069091797,
      "y": 217.65509605407715,
      "z": 13.013685941696167
    }, {
      "x": 407.3551940917969,
      "y": 230.72525024414062,
      "z": 22.444231510162354
    }, {
      "x": 424.0876770019531,
      "y": 251.7839241027832,
      "z": 51.16771221160889
    }, {
      "x": 403.50196838378906,
      "y": 239.88757610321045,
      "z": 15.803166627883911
    }, {
      "x": 397.31719970703125,
      "y": 241.49806022644043,
      "z": 11.233787536621094
    }, {
      "x": 388.99425506591797,
      "y": 241.4366912841797,
      "z": 7.948269248008728
    }, {
      "x": 380.7804489135742,
      "y": 239.78078842163086,
      "z": 6.600214838981628
    }, {
      "x": 374.01336669921875,
      "y": 237.11946487426758,
      "z": 6.349278092384338
    }, {
      "x": 369.39125061035156,
      "y": 234.35351371765137,
      "z": 5.987462401390076
    }, {
      "x": 422.9730987548828,
      "y": 255.76455116271973,
      "z": 76.61150932312012,
      "name": "faceOval"
    }, {
      "x": 374.73915100097656,
      "y": 269.24214363098145,
      "z": -16.608498096466064
    }, {
      "x": 364.61681365966797,
      "y": 245.71088790893555,
      "z": -20.02823829650879
    }, {
      "x": 365.3834533691406,
      "y": 263.34174156188965,
      "z": -32.32996463775635
    }, {
      "x": 361.58252716064453,
      "y": 267.8273677825928,
      "z": -30.345816612243652
    }, {
      "x": 365.37208557128906,
      "y": 265.0249671936035,
      "z": -29.178667068481445
    }, {
      "x": 372.72605895996094,
      "y": 272.05135345458984,
      "z": -14.834434986114502
    }, {
      "x": 360.48614501953125,
      "y": 268.34827423095703,
      "z": -32.189905643463135
    }, {
      "x": 359.9516296386719,
      "y": 270.8049201965332,
      "z": -24.650139808654785
    }, {
      "x": 369.5049285888672,
      "y": 229.01945114135742,
      "z": 10.107489824295044
    }, {
      "x": 365.5447769165039,
      "y": 230.24096488952637,
      "z": 5.593550801277161
    }, {
      "x": 363.50669860839844,
      "y": 230.6208372116089,
      "z": 0.43622106313705444
    }, {
      "x": 399.3529510498047,
      "y": 227.65677452087402,
      "z": 15.35965085029602,
      "name": "leftEye"
    }, {
      "x": 402.5693130493164,
      "y": 224.60190296173096,
      "z": 15.931552648544312
    }],
    "box": {
      "xMin": 277.8318977355957,
      "yMin": 168.7741756439209,
      "xMax": 424.2788314819336,
      "yMax": 359.8348903656006,
      "width": 146.4469337463379,
      "height": 191.0607147216797
    }
  },
  // Tasks-vision: https://developers.google.com/mediapipe/solutions/vision/face_landmarker/web_js
  // prettier-ignore
  SAMPLE_FACELANDMARKER_RESULT: {
    "faceLandmarks": [[{
      "x": 0.5760777592658997,
      "y": 0.8639070391654968,
      "z": -0.030997956171631813
    }, {
      "x": 0.572094738483429,
      "y": 0.7886289358139038,
      "z": -0.07189624011516571
    }, {
      "x": 0.5723551511764526,
      "y": 0.8075382709503174,
      "z": -0.03578168898820877
    }, {
      "x": 0.5548420548439026,
      "y": 0.7188365459442139,
      "z": -0.057787876576185226
    }, {
      "x": 0.5706077814102173,
      "y": 0.7674974799156189,
      "z": -0.07740399986505508
    }, {
      "x": 0.5681378245353699,
      "y": 0.7387768030166626,
      "z": -0.07356284558773041
    }, {
      "x": 0.5621535181999207,
      "y": 0.6681165099143982,
      "z": -0.04189874976873398
    }, {
      "x": 0.46613582968711853,
      "y": 0.6679812073707581,
      "z": 0.011289681307971478
    }, {
      "x": 0.5579932928085327,
      "y": 0.6174106597900391,
      "z": -0.03502821549773216
    }, {
      "x": 0.5563451647758484,
      "y": 0.5905600190162659,
      "z": -0.03928658738732338
    }, {
      "x": 0.5487832427024841,
      "y": 0.4900572597980499,
      "z": -0.029898937791585922
    }, {
      "x": 0.5765544176101685,
      "y": 0.8692144751548767,
      "z": -0.02831427752971649
    }, {
      "x": 0.5771114230155945,
      "y": 0.873644232749939,
      "z": -0.02345779910683632
    }, {
      "x": 0.5771905779838562,
      "y": 0.877016007900238,
      "z": -0.016658689826726913
    }, {
      "x": 0.5778058767318726,
      "y": 0.8770116567611694,
      "z": -0.014505492523312569
    }, {
      "x": 0.5783766508102417,
      "y": 0.8835000991821289,
      "z": -0.015996402129530907
    }, {
      "x": 0.5792440176010132,
      "y": 0.8913810849189758,
      "z": -0.01924579218029976
    }, {
      "x": 0.5796768069267273,
      "y": 0.8996334671974182,
      "z": -0.018261712044477463
    }, {
      "x": 0.5817288160324097,
      "y": 0.9255813956260681,
      "z": -0.007126849144697189
    }, {
      "x": 0.5726592540740967,
      "y": 0.7992473244667053,
      "z": -0.0643521398305893
    }, {
      "x": 0.5579419136047363,
      "y": 0.7996989488601685,
      "z": -0.04566684365272522
    }, {
      "x": 0.4216199815273285,
      "y": 0.5958762764930725,
      "z": 0.06776496022939682
    }, {
      "x": 0.5052269697189331,
      "y": 0.6796539425849915,
      "z": -0.0010737782577052712
    }, {
      "x": 0.49243026971817017,
      "y": 0.6838865876197815,
      "z": -5227324436418712e-19
    }, {
      "x": 0.4796970784664154,
      "y": 0.6856290102005005,
      "z": 0.002684245817363262
    }, {
      "x": 0.4618356227874756,
      "y": 0.6764569878578186,
      "z": 0.013439622707664967
    }, {
      "x": 0.5160380601882935,
      "y": 0.6737282276153564,
      "z": -17607348127057776e-21
    }, {
      "x": 0.48070961236953735,
      "y": 0.6255870461463928,
      "z": -0.008339674212038517
    }, {
      "x": 0.49719780683517456,
      "y": 0.6256808042526245,
      "z": -0.008027955889701843
    }, {
      "x": 0.46674346923828125,
      "y": 0.6317623853683472,
      "z": -0.004460199736058712
    }, {
      "x": 0.4582492709159851,
      "y": 0.641118049621582,
      "z": 0.0011905613355338573
    }, {
      "x": 0.45408669114112854,
      "y": 0.6911458969116211,
      "z": 0.020514748990535736
    }, {
      "x": 0.535312294960022,
      "y": 0.9619986414909363,
      "z": 0.012499462813138962
    }, {
      "x": 0.4608460068702698,
      "y": 0.6628725528717041,
      "z": 0.01517564244568348
    }, {
      "x": 0.4206731915473938,
      "y": 0.6828458309173584,
      "z": 0.07848648726940155
    }, {
      "x": 0.4390624463558197,
      "y": 0.6796106696128845,
      "z": 0.03283142298460007
    }, {
      "x": 0.5029968619346619,
      "y": 0.7701570391654968,
      "z": -0.009734481573104858
    }, {
      "x": 0.5595027208328247,
      "y": 0.8607323169708252,
      "z": -0.030043255537748337
    }, {
      "x": 0.5621269941329956,
      "y": 0.8738374710083008,
      "z": -0.021709579974412918
    }, {
      "x": 0.5451499819755554,
      "y": 0.865527331829071,
      "z": -0.022014077752828598
    }, {
      "x": 0.5351184010505676,
      "y": 0.8705098032951355,
      "z": -0.011602800339460373
    }, {
      "x": 0.5495014190673828,
      "y": 0.8744956254959106,
      "z": -0.016490943729877472
    }, {
      "x": 0.5395170450210571,
      "y": 0.8759440779685974,
      "z": -0.007333362940698862
    }, {
      "x": 0.5183624029159546,
      "y": 0.8959754705429077,
      "z": 0.010520773939788342
    }, {
      "x": 0.5604349374771118,
      "y": 0.7895449995994568,
      "z": -0.07082037627696991
    }, {
      "x": 0.557381272315979,
      "y": 0.7687489986419678,
      "z": -0.07590588927268982
    }, {
      "x": 0.4432901442050934,
      "y": 0.6308897733688354,
      "z": 0.0027153254486620426
    }, {
      "x": 0.5258325338363647,
      "y": 0.7151225805282593,
      "z": -0.014676518738269806
    }, {
      "x": 0.5271827578544617,
      "y": 0.7833116054534912,
      "z": -0.037643320858478546
    }, {
      "x": 0.5257382988929749,
      "y": 0.7717816233634949,
      "z": -0.03401920944452286
    }, {
      "x": 0.46516409516334534,
      "y": 0.7705106735229492,
      "z": 0.0065747760236263275
    }, {
      "x": 0.5558893084526062,
      "y": 0.7420997619628906,
      "z": -0.0694495290517807
    }, {
      "x": 0.4720408320426941,
      "y": 0.6066038608551025,
      "z": -0.021204356104135513
    }, {
      "x": 0.45432573556900024,
      "y": 0.6158540844917297,
      "z": -0.011054684408009052
    }, {
      "x": 0.4305151402950287,
      "y": 0.5608053803443909,
      "z": 0.0396830290555954
    }, {
      "x": 0.5310865640640259,
      "y": 0.6157484650611877,
      "z": -0.03081176057457924
    }, {
      "x": 0.5114666223526001,
      "y": 0.6329749226570129,
      "z": -0.00335998204536736
    }, {
      "x": 0.506435751914978,
      "y": 0.8786543607711792,
      "z": 0.012980876490473747
    }, {
      "x": 0.4480472207069397,
      "y": 0.8640613555908203,
      "z": 0.12569651007652283
    }, {
      "x": 0.5372058153152466,
      "y": 0.7942581176757812,
      "z": -0.03168361634016037
    }, {
      "x": 0.5488379597663879,
      "y": 0.8001630306243896,
      "z": -0.03280917927622795
    }, {
      "x": 0.5213388204574585,
      "y": 0.8794381618499756,
      "z": 0.011892606504261494
    }, {
      "x": 0.5242055654525757,
      "y": 0.8789222240447998,
      "z": 0.008370225317776203
    }, {
      "x": 0.4477175176143646,
      "y": 0.6039950251579285,
      "z": -0.0050799972377717495
    }, {
      "x": 0.526964008808136,
      "y": 0.7916748523712158,
      "z": -0.02968614175915718
    }, {
      "x": 0.4971255660057068,
      "y": 0.6050706505775452,
      "z": -0.028175678104162216
    }, {
      "x": 0.4938119053840637,
      "y": 0.5882453918457031,
      "z": -0.03210941329598427
    }, {
      "x": 0.4757143557071686,
      "y": 0.5094879865646362,
      "z": -0.01300730835646391
    }, {
      "x": 0.43947282433509827,
      "y": 0.5816648006439209,
      "z": 0.01415177434682846
    }, {
      "x": 0.485664039850235,
      "y": 0.5477864146232605,
      "z": -0.023685332387685776
    }, {
      "x": 0.43635931611061096,
      "y": 0.6226438283920288,
      "z": 0.013606148771941662
    }, {
      "x": 0.42910251021385193,
      "y": 0.6102726459503174,
      "z": 0.03926564007997513
    }, {
      "x": 0.5605402588844299,
      "y": 0.8680099248886108,
      "z": -0.027318159118294716
    }, {
      "x": 0.5474816560745239,
      "y": 0.8702861070632935,
      "z": -0.019686367362737656
    }, {
      "x": 0.5373021364212036,
      "y": 0.8728838562965393,
      "z": -0.010484928265213966
    }, {
      "x": 0.540735125541687,
      "y": 0.7979167103767395,
      "z": -0.029073253273963928
    }, {
      "x": 0.5228585004806519,
      "y": 0.87913578748703,
      "z": 0.009915109723806381
    }, {
      "x": 0.530497670173645,
      "y": 0.8815253973007202,
      "z": 0.0020524784922599792
    }, {
      "x": 0.5259912610054016,
      "y": 0.8790552616119385,
      "z": 0.007895970717072487
    }, {
      "x": 0.5433906316757202,
      "y": 0.7882310748100281,
      "z": -0.05121905356645584
    }, {
      "x": 0.541388213634491,
      "y": 0.8777219653129578,
      "z": -0.00466804439201951
    }, {
      "x": 0.5515822172164917,
      "y": 0.8767023086547852,
      "z": -0.010475946590304375
    }, {
      "x": 0.5637003779411316,
      "y": 0.877059817314148,
      "z": -0.015273625031113625
    }, {
      "x": 0.5640299320220947,
      "y": 0.9263423085212708,
      "z": -0.00658724969252944
    }, {
      "x": 0.5642300248146057,
      "y": 0.8993074893951416,
      "z": -0.017653480172157288
    }, {
      "x": 0.5637336373329163,
      "y": 0.8910360932350159,
      "z": -0.01852807030081749
    }, {
      "x": 0.5637134313583374,
      "y": 0.8837276697158813,
      "z": -0.01482592523097992
    }, {
      "x": 0.564205527305603,
      "y": 0.8768964409828186,
      "z": -0.01331155002117157
    }, {
      "x": 0.5419867634773254,
      "y": 0.8778373599052429,
      "z": -0.0037720394320786
    }, {
      "x": 0.5404468774795532,
      "y": 0.880696177482605,
      "z": -0.005610354244709015
    }, {
      "x": 0.5392338633537292,
      "y": 0.8845721483230591,
      "z": -0.007352025713771582
    }, {
      "x": 0.538469672203064,
      "y": 0.8891173601150513,
      "z": -0.005154991988092661
    }, {
      "x": 0.5189250111579895,
      "y": 0.8452741503715515,
      "z": -0.009755070321261883
    }, {
      "x": 0.4258975088596344,
      "y": 0.7662280797958374,
      "z": 0.1387351155281067
    }, {
      "x": 0.5725725293159485,
      "y": 0.8041572570800781,
      "z": -0.04583907872438431
    }, {
      "x": 0.5342061519622803,
      "y": 0.8785833120346069,
      "z": 0.002659974154084921
    }, {
      "x": 0.5324031114578247,
      "y": 0.8804071545600891,
      "z": 0.0017832003068178892
    }, {
      "x": 0.5538818836212158,
      "y": 0.8078407645225525,
      "z": -0.03254539892077446
    }, {
      "x": 0.5325431823730469,
      "y": 0.8026832938194275,
      "z": -0.019140373915433884
    }, {
      "x": 0.5514076948165894,
      "y": 0.8043903112411499,
      "z": -0.03313535451889038
    }, {
      "x": 0.5131856203079224,
      "y": 0.7284771800041199,
      "z": -0.009399853646755219
    }, {
      "x": 0.49331504106521606,
      "y": 0.7443980574607849,
      "z": -0.005225230939686298
    }, {
      "x": 0.5239617824554443,
      "y": 0.7807451486587524,
      "z": -0.025881027802824974
    }, {
      "x": 0.4473606050014496,
      "y": 0.5315827131271362,
      "z": 0.011164786294102669
    }, {
      "x": 0.45718759298324585,
      "y": 0.5604941248893738,
      "z": -0.005943301599472761
    }, {
      "x": 0.4670005738735199,
      "y": 0.5909327268600464,
      "z": -0.019681761041283607
    }, {
      "x": 0.5311570167541504,
      "y": 0.9076261520385742,
      "z": 0.00389476353302598
    }, {
      "x": 0.5249923467636108,
      "y": 0.5893563628196716,
      "z": -0.037981919944286346
    }, {
      "x": 0.5166932344436646,
      "y": 0.5429551005363464,
      "z": -0.03319704160094261
    }, {
      "x": 0.5085030198097229,
      "y": 0.49676206707954407,
      "z": -0.02691275253891945
    }, {
      "x": 0.4687720239162445,
      "y": 0.6834565997123718,
      "z": 0.008113506250083447
    }, {
      "x": 0.4426414966583252,
      "y": 0.7069531679153442,
      "z": 0.028577271848917007
    }, {
      "x": 0.5230373740196228,
      "y": 0.6675713658332825,
      "z": 0.001773772411979735
    }, {
      "x": 0.4481240212917328,
      "y": 0.6527872085571289,
      "z": 0.012414850294589996
    }, {
      "x": 0.5339856743812561,
      "y": 0.7012367844581604,
      "z": -0.020220188423991203
    }, {
      "x": 0.5347223281860352,
      "y": 0.7761190533638,
      "z": -0.05141595005989075
    }, {
      "x": 0.4315067231655121,
      "y": 0.7211957573890686,
      "z": 0.04381405934691429
    }, {
      "x": 0.45203351974487305,
      "y": 0.7206180095672607,
      "z": 0.017288070172071457
    }, {
      "x": 0.46892452239990234,
      "y": 0.7265436053276062,
      "z": 0.005602988880127668
    }, {
      "x": 0.49314674735069275,
      "y": 0.7202282547950745,
      "z": -6408205372281373e-19
    }, {
      "x": 0.5104925632476807,
      "y": 0.7091827392578125,
      "z": -0.00362918758764863
    }, {
      "x": 0.5232142210006714,
      "y": 0.698553740978241,
      "z": -0.00787867046892643
    }, {
      "x": 0.5497883558273315,
      "y": 0.6743605136871338,
      "z": -0.036349106580019
    }, {
      "x": 0.43658503890037537,
      "y": 0.7627100348472595,
      "z": 0.042555369436740875
    }, {
      "x": 0.4397648870944977,
      "y": 0.6528646349906921,
      "z": 0.017956094816327095
    }, {
      "x": 0.5653332471847534,
      "y": 0.7992802858352661,
      "z": -0.06365057826042175
    }, {
      "x": 0.5285563468933105,
      "y": 0.736810564994812,
      "z": -0.018836988136172295
    }, {
      "x": 0.4180678725242615,
      "y": 0.6792560815811157,
      "z": 0.12284679710865021
    }, {
      "x": 0.5328429937362671,
      "y": 0.6865872144699097,
      "z": -0.010484723374247551
    }, {
      "x": 0.5230283141136169,
      "y": 0.7809416055679321,
      "z": -0.011922398582100868
    }, {
      "x": 0.4551771283149719,
      "y": 0.6650775074958801,
      "z": 0.01774493046104908
    }, {
      "x": 0.5337203741073608,
      "y": 0.7618928551673889,
      "z": -0.04697106033563614
    }, {
      "x": 0.43463975191116333,
      "y": 0.8133478164672852,
      "z": 0.1354849934577942
    }, {
      "x": 0.5225707292556763,
      "y": 0.6605283617973328,
      "z": 0.004980515688657761
    }, {
      "x": 0.5441933870315552,
      "y": 0.7497199773788452,
      "z": -0.06091512367129326
    }, {
      "x": 0.4774007797241211,
      "y": 0.9159183502197266,
      "z": 0.059622734785079956
    }, {
      "x": 0.48068761825561523,
      "y": 0.9364941716194153,
      "z": 0.08404944837093353
    }, {
      "x": 0.4268292486667633,
      "y": 0.7657528519630432,
      "z": 0.09051097184419632
    }, {
      "x": 0.46051913499832153,
      "y": 0.8880485892295837,
      "z": 0.0738474428653717
    }, {
      "x": 0.4243420660495758,
      "y": 0.6434382200241089,
      "z": 0.06230505183339119
    }, {
      "x": 0.5342157483100891,
      "y": 0.9835634231567383,
      "z": 0.021662971004843712
    }, {
      "x": 0.5668109655380249,
      "y": 0.8042187094688416,
      "z": -0.044937074184417725
    }, {
      "x": 0.5176341533660889,
      "y": 0.7530587315559387,
      "z": -0.012967454269528389
    }, {
      "x": 0.430206298828125,
      "y": 0.6835605502128601,
      "z": 0.04612284153699875
    }, {
      "x": 0.4794231951236725,
      "y": 0.6732114553451538,
      "z": 0.003970044665038586
    }, {
      "x": 0.49073347449302673,
      "y": 0.6722435355186462,
      "z": 8692514384165406e-19
    }, {
      "x": 0.5294116139411926,
      "y": 0.884677529335022,
      "z": 0.004413890186697245
    }, {
      "x": 0.4430122375488281,
      "y": 0.80235356092453,
      "z": 0.04987282305955887
    }, {
      "x": 0.5603825449943542,
      "y": 1.0092442035675049,
      "z": 0.026417359709739685
    }, {
      "x": 0.5186598300933838,
      "y": 0.9828659892082214,
      "z": 0.0513598807156086
    }, {
      "x": 0.5010536909103394,
      "y": 0.9640932679176331,
      "z": 0.06591596454381943
    }, {
      "x": 0.5524769425392151,
      "y": 0.539441704750061,
      "z": -0.035816047340631485
    }, {
      "x": 0.5879997611045837,
      "y": 1.0091472864151,
      "z": 0.02285068854689598
    }, {
      "x": 0.5016193985939026,
      "y": 0.6684437990188599,
      "z": 28415941051207483e-20
    }, {
      "x": 0.511952817440033,
      "y": 0.6642197370529175,
      "z": 0.0021144719794392586
    }, {
      "x": 0.5194343328475952,
      "y": 0.6623469591140747,
      "z": 0.004674181342124939
    }, {
      "x": 0.4321230351924896,
      "y": 0.6496355533599854,
      "z": 0.03124697133898735
    }, {
      "x": 0.508686363697052,
      "y": 0.6479565501213074,
      "z": -44765998609364033e-20
    }, {
      "x": 0.4963986277580261,
      "y": 0.6431032419204712,
      "z": -0.0032507688738405704
    }, {
      "x": 0.4845542013645172,
      "y": 0.6430778503417969,
      "z": -0.002903624437749386
    }, {
      "x": 0.4733612537384033,
      "y": 0.647506833076477,
      "z": 23347247042693198e-20
    }, {
      "x": 0.4668654501438141,
      "y": 0.653346598148346,
      "z": 0.004762572236359119
    }, {
      "x": 0.41815051436424255,
      "y": 0.633708119392395,
      "z": 0.09809435904026031
    }, {
      "x": 0.47159942984580994,
      "y": 0.6711485385894775,
      "z": 0.007849935442209244
    }, {
      "x": 0.5734396576881409,
      "y": 0.8256140351295471,
      "z": -0.03155219927430153
    }, {
      "x": 0.5306524038314819,
      "y": 0.8337990641593933,
      "z": -0.018351426348090172
    }, {
      "x": 0.5371729135513306,
      "y": 0.7910830974578857,
      "z": -0.037286680191755295
    }, {
      "x": 0.5549534559249878,
      "y": 0.8275275826454163,
      "z": -0.030664825811982155
    }, {
      "x": 0.5597432255744934,
      "y": 0.6418541669845581,
      "z": -0.03318847343325615
    }, {
      "x": 0.4958484172821045,
      "y": 0.9429569244384766,
      "z": 0.048340678215026855
    }, {
      "x": 0.5140507817268372,
      "y": 0.9634028077125549,
      "z": 0.03589847311377525
    }, {
      "x": 0.5587693452835083,
      "y": 0.9951097369194031,
      "z": 0.00908728688955307
    }, {
      "x": 0.46411189436912537,
      "y": 0.9051855206489563,
      "z": 0.10601935535669327
    }, {
      "x": 0.5181609392166138,
      "y": 0.6554316878318787,
      "z": 0.002546071307733655
    }, {
      "x": 0.5436590909957886,
      "y": 0.7085841298103333,
      "z": -0.03844436630606651
    }, {
      "x": 0.5872187614440918,
      "y": 0.9960382580757141,
      "z": 0.0063423276878893375
    }, {
      "x": 0.5379653573036194,
      "y": 0.9989125728607178,
      "z": 0.03636329993605614
    }, {
      "x": 0.4350326955318451,
      "y": 0.8088565468788147,
      "z": 0.09147704392671585
    }, {
      "x": 0.5523084998130798,
      "y": 0.8773422837257385,
      "z": -0.009068487212061882
    }, {
      "x": 0.5510149598121643,
      "y": 0.8816931843757629,
      "z": -0.011043853126466274
    }, {
      "x": 0.5503793954849243,
      "y": 0.88776695728302,
      "z": -0.01348799467086792
    }, {
      "x": 0.5501549243927002,
      "y": 0.8954370617866516,
      "z": -0.012142189778387547
    }, {
      "x": 0.546072781085968,
      "y": 0.9192524552345276,
      "z": -0.003157563041895628
    }, {
      "x": 0.5314661860466003,
      "y": 0.8771666884422302,
      "z": 5075141089037061e-19
    }, {
      "x": 0.5293324589729309,
      "y": 0.8762547969818115,
      "z": 39177737198770046e-20
    }, {
      "x": 0.5275698900222778,
      "y": 0.8750609755516052,
      "z": 47732755774632096e-21
    }, {
      "x": 0.5104271173477173,
      "y": 0.8607332110404968,
      "z": 0.0012934643309563398
    }, {
      "x": 0.45938700437545776,
      "y": 0.8134918212890625,
      "z": 0.023569690063595772
    }, {
      "x": 0.5418947339057922,
      "y": 0.6864100694656372,
      "z": -0.027333909645676613
    }, {
      "x": 0.531914234161377,
      "y": 0.6456130743026733,
      "z": -0.005434140563011169
    }, {
      "x": 0.523697018623352,
      "y": 0.647885262966156,
      "z": -2466466394253075e-19
    }, {
      "x": 0.5338191390037537,
      "y": 0.8783687353134155,
      "z": 0.002268768846988678
    }, {
      "x": 0.46226605772972107,
      "y": 0.8610277771949768,
      "z": 0.04718952998518944
    }, {
      "x": 0.5434442758560181,
      "y": 0.6456181406974792,
      "z": -0.02327350154519081
    }, {
      "x": 0.5399754643440247,
      "y": 0.940219521522522,
      "z": 0.005075343884527683
    }, {
      "x": 0.5661457777023315,
      "y": 0.71457839012146,
      "z": -0.06242101639509201
    }, {
      "x": 0.5523148775100708,
      "y": 0.6974870562553406,
      "z": -0.04863070324063301
    }, {
      "x": 0.5639959573745728,
      "y": 0.6923378109931946,
      "z": -0.05180761218070984
    }, {
      "x": 0.5367592573165894,
      "y": 0.7423217296600342,
      "z": -0.03623027727007866
    }, {
      "x": 0.5853689908981323,
      "y": 0.9752064943313599,
      "z": -0.002361974213272333
    }, {
      "x": 0.5835235118865967,
      "y": 0.9493685960769653,
      "z": -0.003941743168979883
    }, {
      "x": 0.5615018606185913,
      "y": 0.949194610118866,
      "z": -0.0015953965485095978
    }, {
      "x": 0.5068561434745789,
      "y": 0.9048219323158264,
      "z": 0.01862684078514576
    }, {
      "x": 0.5134067535400391,
      "y": 0.7971825003623962,
      "z": -0.008485661819577217
    }, {
      "x": 0.5223897099494934,
      "y": 0.925589919090271,
      "z": 0.01249657291918993
    }, {
      "x": 0.48500555753707886,
      "y": 0.7959478497505188,
      "z": -0.0032065745908766985
    }, {
      "x": 0.5037734508514404,
      "y": 0.8184596300125122,
      "z": -0.004932103678584099
    }, {
      "x": 0.4766361117362976,
      "y": 0.828806459903717,
      "z": 0.01027688942849636
    }, {
      "x": 0.5589827299118042,
      "y": 0.974656343460083,
      "z": 9666886180639267e-19
    }, {
      "x": 0.5294582843780518,
      "y": 0.7541216611862183,
      "z": -0.025603046640753746
    }, {
      "x": 0.4973002076148987,
      "y": 0.9208990931510925,
      "z": 0.031931452453136444
    }, {
      "x": 0.5163551568984985,
      "y": 0.9432790875434875,
      "z": 0.024321340024471283
    }, {
      "x": 0.49399662017822266,
      "y": 0.8814862370491028,
      "z": 0.018687399104237556
    }, {
      "x": 0.44948166608810425,
      "y": 0.836137592792511,
      "z": 0.05702034756541252
    }, {
      "x": 0.47898444533348083,
      "y": 0.8836610913276672,
      "z": 0.03150695189833641
    }, {
      "x": 0.4454479217529297,
      "y": 0.8499438166618347,
      "z": 0.08868525922298431
    }, {
      "x": 0.49572959542274475,
      "y": 0.8452823758125305,
      "z": 0.0036111653316766024
    }, {
      "x": 0.5362502336502075,
      "y": 0.7222585678100586,
      "z": -0.027912352234125137
    }, {
      "x": 0.5393770337104797,
      "y": 0.7850722074508667,
      "z": -0.05415399745106697
    }, {
      "x": 0.531399667263031,
      "y": 0.7898418307304382,
      "z": -0.03883346915245056
    }, {
      "x": 0.5451627373695374,
      "y": 0.7717036604881287,
      "z": -0.06480253487825394
    }, {
      "x": 0.5206395983695984,
      "y": 0.6287745833396912,
      "z": -0.010521138086915016
    }, {
      "x": 0.4974782466888428,
      "y": 0.6191938519477844,
      "z": -0.014098240062594414
    }, {
      "x": 0.4774145185947418,
      "y": 0.6193130612373352,
      "z": -0.013643337413668633
    }, {
      "x": 0.4616098403930664,
      "y": 0.6259890198707581,
      "z": -0.008448202162981033
    }, {
      "x": 0.4516478478908539,
      "y": 0.6368461847305298,
      "z": 9050309745362028e-20
    }, {
      "x": 0.4485096037387848,
      "y": 0.6719120740890503,
      "z": 0.022984720766544342
    }, {
      "x": 0.42177659273147583,
      "y": 0.7240667343139648,
      "z": 0.08511673659086227
    }, {
      "x": 0.4616215229034424,
      "y": 0.6988231539726257,
      "z": 0.014238474890589714
    }, {
      "x": 0.4755798876285553,
      "y": 0.7034608721733093,
      "z": 0.00625590980052948
    }, {
      "x": 0.4924992024898529,
      "y": 0.7005885243415833,
      "z": 9391739731654525e-19
    }, {
      "x": 0.5082254409790039,
      "y": 0.693384051322937,
      "z": -9464038303121924e-19
    }, {
      "x": 0.5203112959861755,
      "y": 0.6849707961082458,
      "z": -0.0022114769089967012
    }, {
      "x": 0.52867591381073,
      "y": 0.6779075860977173,
      "z": -0.002962538506835699
    }, {
      "x": 0.4213953912258148,
      "y": 0.7219811677932739,
      "z": 0.1350894570350647
    }, {
      "x": 0.5320829749107361,
      "y": 0.794858992099762,
      "z": -0.03181503340601921
    }, {
      "x": 0.5452795028686523,
      "y": 0.7286570072174072,
      "z": -0.04771539941430092
    }, {
      "x": 0.5496407747268677,
      "y": 0.7866933345794678,
      "z": -0.06452003121376038
    }, {
      "x": 0.557040274143219,
      "y": 0.7962084412574768,
      "z": -0.05837344378232956
    }, {
      "x": 0.549176812171936,
      "y": 0.7895247936248779,
      "z": -0.057761140167713165
    }, {
      "x": 0.5362890362739563,
      "y": 0.8005836606025696,
      "z": -0.026903774589300156
    }, {
      "x": 0.560200035572052,
      "y": 0.7983731031417847,
      "z": -0.06172555685043335
    }, {
      "x": 0.5616944432258606,
      "y": 0.8022753596305847,
      "z": -0.045200999826192856
    }, {
      "x": 0.5273328423500061,
      "y": 0.6611284017562866,
      "z": 0.0029021520167589188
    }, {
      "x": 0.534850537776947,
      "y": 0.6660012006759644,
      "z": -0.005215510260313749
    }, {
      "x": 0.5394860506057739,
      "y": 0.6701375246047974,
      "z": -0.014931917190551758
    }, {
      "x": 0.4634307324886322,
      "y": 0.658291757106781,
      "z": 0.009295716881752014
    }, {
      "x": 0.4538393020629883,
      "y": 0.6519932150840759,
      "z": 0.00930330716073513
    }, {
      "x": 0.5776031613349915,
      "y": 0.7159298658370972,
      "z": -0.057365912944078445
    }, {
      "x": 0.6504855155944824,
      "y": 0.6461779475212097,
      "z": 0.014184834435582161
    }, {
      "x": 0.5860154032707214,
      "y": 0.7962266206741333,
      "z": -0.04522843658924103
    }, {
      "x": 0.6842049360275269,
      "y": 0.5631637573242188,
      "z": 0.07207967340946198
    }, {
      "x": 0.6152560710906982,
      "y": 0.6674962639808655,
      "z": 7529259892180562e-19
    }, {
      "x": 0.6280948519706726,
      "y": 0.6684326529502869,
      "z": 0.0016892586136236787
    }, {
      "x": 0.6408625245094299,
      "y": 0.6663892269134521,
      "z": 0.005331226624548435
    }, {
      "x": 0.6557814478874207,
      "y": 0.6534678936004639,
      "z": 0.01646413467824459
    }, {
      "x": 0.6035663485527039,
      "y": 0.6639701724052429,
      "z": 0.0013799630105495453
    }, {
      "x": 0.6329053044319153,
      "y": 0.608010470867157,
      "z": -0.006195899099111557
    }, {
      "x": 0.6167260408401489,
      "y": 0.6117533445358276,
      "z": -0.006319951266050339
    }, {
      "x": 0.6471013426780701,
      "y": 0.6112449765205383,
      "z": -0.0017843559617176652
    }, {
      "x": 0.6560901999473572,
      "y": 0.6185776591300964,
      "z": 0.004047257360070944
    }, {
      "x": 0.6666946411132812,
      "y": 0.6651176810264587,
      "z": 0.023647578433156013
    }, {
      "x": 0.6311345100402832,
      "y": 0.9495396018028259,
      "z": 0.014004078693687916
    }, {
      "x": 0.6544655561447144,
      "y": 0.6397901773452759,
      "z": 0.01809609681367874
    }, {
      "x": 0.6965808868408203,
      "y": 0.6482675075531006,
      "z": 0.08304904401302338
    }, {
      "x": 0.679817259311676,
      "y": 0.650188148021698,
      "z": 0.03632688894867897
    }, {
      "x": 0.6336516737937927,
      "y": 0.7541458010673523,
      "z": -0.007742783520370722
    }, {
      "x": 0.5921701192855835,
      "y": 0.8567668199539185,
      "z": -0.029399123042821884
    }, {
      "x": 0.591663658618927,
      "y": 0.870215654373169,
      "z": -0.02103729173541069
    }, {
      "x": 0.6068367958068848,
      "y": 0.8584195375442505,
      "z": -0.020668085664510727
    }, {
      "x": 0.6176617741584778,
      "y": 0.860965371131897,
      "z": -0.009790095500648022
    }, {
      "x": 0.6040634512901306,
      "y": 0.8686612844467163,
      "z": -0.015289564616978168
    }, {
      "x": 0.6143736839294434,
      "y": 0.8671170473098755,
      "z": -0.005712216719985008
    }, {
      "x": 0.6373105049133301,
      "y": 0.8815656900405884,
      "z": 0.012672550976276398
    }, {
      "x": 0.5832505822181702,
      "y": 0.7866312861442566,
      "z": -0.07051534950733185
    }, {
      "x": 0.5836675763130188,
      "y": 0.7658692598342896,
      "z": -0.07566110789775848
    }, {
      "x": 0.6709531545639038,
      "y": 0.604898989200592,
      "z": 0.005951565690338612
    }, {
      "x": 0.6029891967773438,
      "y": 0.705652117729187,
      "z": -0.013388276100158691
    }, {
      "x": 0.6131622195243835,
      "y": 0.7728396058082581,
      "z": -0.036248479038476944
    }, {
      "x": 0.6123163104057312,
      "y": 0.7612020373344421,
      "z": -0.03264721855521202
    }, {
      "x": 0.6696187853813171,
      "y": 0.744706928730011,
      "z": 0.009673702530562878
    }, {
      "x": 0.5803102254867554,
      "y": 0.7385968565940857,
      "z": -0.0689152330160141
    }, {
      "x": 0.6404349207878113,
      "y": 0.5877999663352966,
      "z": -0.01929756999015808
    }, {
      "x": 0.6588467955589294,
      "y": 0.5929454565048218,
      "z": -0.008487257175147533
    }, {
      "x": 0.6720337867736816,
      "y": 0.530631422996521,
      "z": 0.043437421321868896
    }, {
      "x": 0.584305465221405,
      "y": 0.6099005341529846,
      "z": -0.030301367864012718
    }, {
      "x": 0.6034283638000488,
      "y": 0.6217452883720398,
      "z": -0.001970183802768588
    }, {
      "x": 0.6460927724838257,
      "y": 0.8608663082122803,
      "z": 0.015541625209152699
    }, {
      "x": 0.6957815289497375,
      "y": 0.8326103091239929,
      "z": 0.13015234470367432
    }, {
      "x": 0.6043362617492676,
      "y": 0.7861682772636414,
      "z": -0.030476901680231094
    }, {
      "x": 0.594293475151062,
      "y": 0.7942103147506714,
      "z": -0.032218821346759796
    }, {
      "x": 0.6324057579040527,
      "y": 0.8665139675140381,
      "z": 0.014255806803703308
    }, {
      "x": 0.6296147704124451,
      "y": 0.8667733669281006,
      "z": 0.010388285852968693
    }, {
      "x": 0.663644552230835,
      "y": 0.5798642635345459,
      "z": -0.0022301070857793093
    }, {
      "x": 0.6140630841255188,
      "y": 0.7809288501739502,
      "z": -0.02835679054260254
    }, {
      "x": 0.615908145904541,
      "y": 0.5921698212623596,
      "z": -0.026804860681295395
    }, {
      "x": 0.617181122303009,
      "y": 0.5748661756515503,
      "z": -0.03060605563223362
    }, {
      "x": 0.6222207546234131,
      "y": 0.49137672781944275,
      "z": -0.011151673272252083
    }, {
      "x": 0.6669357419013977,
      "y": 0.5541607141494751,
      "z": 0.017466170713305473
    }, {
      "x": 0.6182981729507446,
      "y": 0.5320425629615784,
      "z": -0.021793590858578682
    }, {
      "x": 0.6760554313659668,
      "y": 0.595052182674408,
      "z": 0.017115700989961624
    }, {
      "x": 0.6801463961601257,
      "y": 0.5800720453262329,
      "z": 0.043127160519361496
    }, {
      "x": 0.5922210812568665,
      "y": 0.8644017577171326,
      "z": -0.02662893570959568
    }, {
      "x": 0.6054555177688599,
      "y": 0.8637874722480774,
      "z": -0.018363753333687782
    }, {
      "x": 0.6161889433860779,
      "y": 0.8641164898872375,
      "z": -0.008808949030935764
    }, {
      "x": 0.6017249822616577,
      "y": 0.7901403307914734,
      "z": -0.028126630932092667
    }, {
      "x": 0.631446123123169,
      "y": 0.8664817810058594,
      "z": 0.012112865224480629
    }, {
      "x": 0.6249198913574219,
      "y": 0.8716511130332947,
      "z": 0.003882825840264559
    }, {
      "x": 0.6281915903091431,
      "y": 0.867301881313324,
      "z": 0.009891441091895103
    }, {
      "x": 0.5986843109130859,
      "y": 0.7813931703567505,
      "z": -0.050227612257003784
    }, {
      "x": 0.6126407384872437,
      "y": 0.869275689125061,
      "z": -0.0031255714129656553
    }, {
      "x": 0.6027271151542664,
      "y": 0.8711842894554138,
      "z": -0.009324162267148495
    }, {
      "x": 0.59088134765625,
      "y": 0.8742044568061829,
      "z": -0.014608660712838173
    }, {
      "x": 0.5984604358673096,
      "y": 0.9216185212135315,
      "z": -0.005981989670544863
    }, {
      "x": 0.5950398445129395,
      "y": 0.8964707255363464,
      "z": -0.01703473925590515
    }, {
      "x": 0.5941568613052368,
      "y": 0.8882410526275635,
      "z": -0.017784785479307175
    }, {
      "x": 0.5928806662559509,
      "y": 0.8803883194923401,
      "z": -0.014153128489851952
    }, {
      "x": 0.5909661054611206,
      "y": 0.8748103976249695,
      "z": -0.012609979137778282
    }, {
      "x": 0.6128016710281372,
      "y": 0.8702545762062073,
      "z": -0.0022550546564161777
    }, {
      "x": 0.6150846481323242,
      "y": 0.8726804256439209,
      "z": -0.00414019962772727
    }, {
      "x": 0.6173093914985657,
      "y": 0.8770190477371216,
      "z": -0.005970994010567665
    }, {
      "x": 0.619335412979126,
      "y": 0.8814800977706909,
      "z": -0.0036864024586975574
    }, {
      "x": 0.6292637586593628,
      "y": 0.8314558267593384,
      "z": -0.007714875973761082
    }, {
      "x": 0.702275276184082,
      "y": 0.7320667505264282,
      "z": 0.1433621346950531
    }, {
      "x": 0.6204835176467896,
      "y": 0.8689177632331848,
      "z": 0.0044869170524179935
    }, {
      "x": 0.6223508715629578,
      "y": 0.8704851269721985,
      "z": 0.00352082890458405
    }, {
      "x": 0.590448260307312,
      "y": 0.8029727935791016,
      "z": -0.03200828656554222
    }, {
      "x": 0.6097423434257507,
      "y": 0.7933741211891174,
      "z": -0.018042555078864098
    }, {
      "x": 0.59229576587677,
      "y": 0.7993767261505127,
      "z": -0.032564569264650345
    }, {
      "x": 0.6171364188194275,
      "y": 0.7153720259666443,
      "z": -0.007672437466681004
    }, {
      "x": 0.6389747858047485,
      "y": 0.726390540599823,
      "z": -0.002999067772179842
    }, {
      "x": 0.6151940226554871,
      "y": 0.769412100315094,
      "z": -0.024427521973848343
    }, {
      "x": 0.6526776552200317,
      "y": 0.505868136882782,
      "z": 0.01412637997418642
    }, {
      "x": 0.6475822329521179,
      "y": 0.5375454425811768,
      "z": -0.0033899128902703524
    }, {
      "x": 0.6433356404304504,
      "y": 0.5714520215988159,
      "z": -0.017428796738386154
    }, {
      "x": 0.626949667930603,
      "y": 0.8962116837501526,
      "z": 0.005602736957371235
    }, {
      "x": 0.5868416428565979,
      "y": 0.5829002261161804,
      "z": -0.03727729618549347
    }, {
      "x": 0.5877229571342468,
      "y": 0.5345035791397095,
      "z": -0.032396964728832245
    }, {
      "x": 0.5887066125869751,
      "y": 0.48655083775520325,
      "z": -0.025856535881757736
    }, {
      "x": 0.6507197618484497,
      "y": 0.6612282991409302,
      "z": 0.011114613153040409
    }, {
      "x": 0.6803066730499268,
      "y": 0.677992045879364,
      "z": 0.032125361263751984
    }, {
      "x": 0.5963194370269775,
      "y": 0.6598632335662842,
      "z": 0.002976928371936083
    }, {
      "x": 0.667536199092865,
      "y": 0.6274255514144897,
      "z": 0.015618261881172657
    }, {
      "x": 0.5930740833282471,
      "y": 0.6940041780471802,
      "z": -0.019217798486351967
    }, {
      "x": 0.6053346395492554,
      "y": 0.7676517963409424,
      "z": -0.050308309495449066
    }, {
      "x": 0.6934473514556885,
      "y": 0.6884298920631409,
      "z": 0.04794462397694588
    }, {
      "x": 0.6738007664680481,
      "y": 0.6934011578559875,
      "z": 0.020697161555290222
    }, {
      "x": 0.6588084697723389,
      "y": 0.7033141851425171,
      "z": 0.008462334051728249
    }, {
      "x": 0.6346072554588318,
      "y": 0.7029502391815186,
      "z": 0.001542167621664703
    }, {
      "x": 0.6157816648483276,
      "y": 0.6966525912284851,
      "z": -0.002009218093007803
    }, {
      "x": 0.6015574336051941,
      "y": 0.688928484916687,
      "z": -0.006588225718587637
    }, {
      "x": 0.5746836066246033,
      "y": 0.6711069345474243,
      "z": -0.03597589209675789
    }, {
      "x": 0.6947521567344666,
      "y": 0.7309479117393494,
      "z": 0.046707939356565475
    }, {
      "x": 0.6759101152420044,
      "y": 0.6249120831489563,
      "z": 0.021654341369867325
    }, {
      "x": 0.5794773101806641,
      "y": 0.7971615195274353,
      "z": -0.06339326500892639
    }, {
      "x": 0.6041849851608276,
      "y": 0.727514922618866,
      "z": -0.017512541264295578
    }, {
      "x": 0.6968844532966614,
      "y": 0.6440950036048889,
      "z": 0.12727996706962585
    }, {
      "x": 0.5910853147506714,
      "y": 0.679325520992279,
      "z": -0.009497715160250664
    }, {
      "x": 0.6157375574111938,
      "y": 0.7695677280426025,
      "z": -0.010624290443956852
    }, {
      "x": 0.6606494784355164,
      "y": 0.6410489678382874,
      "z": 0.0208158977329731
    }, {
      "x": 0.6040687561035156,
      "y": 0.7531470656394958,
      "z": -0.045887019485235214
    }, {
      "x": 0.7012156248092651,
      "y": 0.780247151851654,
      "z": 0.14028730988502502
    }, {
      "x": 0.595149576663971,
      "y": 0.6527782678604126,
      "z": 0.006308757700026035
    }, {
      "x": 0.5925500392913818,
      "y": 0.7436665892601013,
      "z": -0.060151755809783936
    }, {
      "x": 0.6780198812484741,
      "y": 0.8905693888664246,
      "z": 0.0626060739159584
    }, {
      "x": 0.676746666431427,
      "y": 0.9113880395889282,
      "z": 0.08726003766059875
    }, {
      "x": 0.7030686140060425,
      "y": 0.7312687635421753,
      "z": 0.09529774636030197
    }, {
      "x": 0.688987135887146,
      "y": 0.8588417172431946,
      "z": 0.07752864807844162
    }, {
      "x": 0.6883691549301147,
      "y": 0.6109960675239563,
      "z": 0.06669612973928452
    }, {
      "x": 0.6358906030654907,
      "y": 0.9702065587043762,
      "z": 0.023120900616049767
    }, {
      "x": 0.5781539678573608,
      "y": 0.8023634552955627,
      "z": -0.044763918966054916
    }, {
      "x": 0.6170316934585571,
      "y": 0.7408350706100464,
      "z": -0.011375460773706436
    }, {
      "x": 0.688542366027832,
      "y": 0.6516284346580505,
      "z": 0.050206027925014496
    }, {
      "x": 0.6385149359703064,
      "y": 0.6540714502334595,
      "z": 0.006462941411882639
    }, {
      "x": 0.6279382109642029,
      "y": 0.6563615798950195,
      "z": 0.003062846139073372
    }, {
      "x": 0.6268895268440247,
      "y": 0.8736732006072998,
      "z": 0.00627936702221632
    }, {
      "x": 0.6944946050643921,
      "y": 0.7709181308746338,
      "z": 0.053824134171009064
    }, {
      "x": 0.614617109298706,
      "y": 1.0022112131118774,
      "z": 0.02719894051551819
    }, {
      "x": 0.6493719220161438,
      "y": 0.9665167927742004,
      "z": 0.053563784807920456
    }, {
      "x": 0.6624587178230286,
      "y": 0.943530797958374,
      "z": 0.068605437874794
    }, {
      "x": 0.6162528991699219,
      "y": 0.6558693051338196,
      "z": 0.002187855076044798
    }, {
      "x": 0.6058168411254883,
      "y": 0.654328465461731,
      "z": 0.0036193584091961384
    }, {
      "x": 0.5987918972969055,
      "y": 0.6536934971809387,
      "z": 0.006134530063718557
    }, {
      "x": 0.6831037402153015,
      "y": 0.6195642948150635,
      "z": 0.03511790186166763
    }, {
      "x": 0.6062582731246948,
      "y": 0.6356398463249207,
      "z": 0.001280312892049551
    }, {
      "x": 0.6174948811531067,
      "y": 0.62776118516922,
      "z": -0.0013642468256875873
    }, {
      "x": 0.6297246217727661,
      "y": 0.6253792643547058,
      "z": -7034156005829573e-19
    }, {
      "x": 0.6407091617584229,
      "y": 0.627578616142273,
      "z": 0.0028144705574959517
    }, {
      "x": 0.6479622721672058,
      "y": 0.6322650909423828,
      "z": 0.00750273372977972
    }, {
      "x": 0.6915091276168823,
      "y": 0.5990704298019409,
      "z": 0.10270945727825165
    }, {
      "x": 0.6457163095474243,
      "y": 0.6504453420639038,
      "z": 0.010696077719330788
    }, {
      "x": 0.6164222955703735,
      "y": 0.8231936097145081,
      "z": -0.016772059723734856
    }, {
      "x": 0.6042401194572449,
      "y": 0.7830976843833923,
      "z": -0.03630910441279411
    }, {
      "x": 0.5922216773033142,
      "y": 0.8228387236595154,
      "z": -0.029992375522851944
    }, {
      "x": 0.6646111011505127,
      "y": 0.92097008228302,
      "z": 0.050967294722795486
    }, {
      "x": 0.651232898235321,
      "y": 0.9460107088088989,
      "z": 0.038000158965587616
    }, {
      "x": 0.6140977144241333,
      "y": 0.9882472157478333,
      "z": 0.009882091544568539
    }, {
      "x": 0.6870781183242798,
      "y": 0.8768675327301025,
      "z": 0.10980932414531708
    }, {
      "x": 0.5986856818199158,
      "y": 0.6456438899040222,
      "z": 0.003999010659754276
    }, {
      "x": 0.585981547832489,
      "y": 0.7034481763839722,
      "z": -0.0377722829580307
    }, {
      "x": 0.6342031359672546,
      "y": 0.9867448806762695,
      "z": 0.03786521404981613
    }, {
      "x": 0.7013950943946838,
      "y": 0.776049017906189,
      "z": 0.09598205983638763
    }, {
      "x": 0.6030206680297852,
      "y": 0.8719133138656616,
      "z": -0.007931148633360863
    }, {
      "x": 0.6050592064857483,
      "y": 0.8767156004905701,
      "z": -0.009791925549507141
    }, {
      "x": 0.6073468923568726,
      "y": 0.8831382393836975,
      "z": -0.012361008673906326
    }, {
      "x": 0.6087977290153503,
      "y": 0.890143632888794,
      "z": -0.01098148338496685
    }, {
      "x": 0.6147705316543579,
      "y": 0.9110084772109985,
      "z": -0.0018823575228452682
    }, {
      "x": 0.622577965259552,
      "y": 0.8670604825019836,
      "z": 0.002609190298244357
    }, {
      "x": 0.6241236329078674,
      "y": 0.8651344180107117,
      "z": 0.0025534380692988634
    }, {
      "x": 0.6257084608078003,
      "y": 0.8638408184051514,
      "z": 0.0023300074972212315
    }, {
      "x": 0.639931321144104,
      "y": 0.8449671268463135,
      "z": 0.0038123116828501225
    }, {
      "x": 0.6810906529426575,
      "y": 0.7856625318527222,
      "z": 0.02717764675617218
    }, {
      "x": 0.583532452583313,
      "y": 0.6811994910240173,
      "z": -0.026588857173919678
    }, {
      "x": 0.5855660438537598,
      "y": 0.6393819451332092,
      "z": -0.004512844607234001
    }, {
      "x": 0.5932201743125916,
      "y": 0.6398029327392578,
      "z": 8020466193556786e-19
    }, {
      "x": 0.6200879812240601,
      "y": 0.8683351874351501,
      "z": 0.00417016725987196
    }, {
      "x": 0.6842559576034546,
      "y": 0.8330534100532532,
      "z": 0.050836317241191864
    }, {
      "x": 0.5754412412643433,
      "y": 0.6418221592903137,
      "z": -0.022838059812784195
    }, {
      "x": 0.6232790350914001,
      "y": 0.9295297265052795,
      "z": 0.006339520215988159
    }, {
      "x": 0.5764067769050598,
      "y": 0.694546639919281,
      "z": -0.04825803264975548
    }, {
      "x": 0.59778892993927,
      "y": 0.7343927621841431,
      "z": -0.035004377365112305
    }, {
      "x": 0.6042810678482056,
      "y": 0.9441440105438232,
      "z": -0.0010970570147037506
    }, {
      "x": 0.6496372222900391,
      "y": 0.8869078159332275,
      "z": 0.021036235615611076
    }, {
      "x": 0.6274012327194214,
      "y": 0.7830310463905334,
      "z": -0.006658440921455622
    }, {
      "x": 0.637792706489563,
      "y": 0.9104999899864197,
      "z": 0.014290250837802887
    }, {
      "x": 0.6549934148788452,
      "y": 0.7748609185218811,
      "z": -6672973395325243e-19
    }, {
      "x": 0.6404005289077759,
      "y": 0.801220715045929,
      "z": -0.0026642554439604282
    }, {
      "x": 0.6671456694602966,
      "y": 0.8045546412467957,
      "z": 0.013180811889469624
    }, {
      "x": 0.6107483506202698,
      "y": 0.9680658578872681,
      "z": 0.001778992242179811
    }, {
      "x": 0.6060343980789185,
      "y": 0.744587242603302,
      "z": -0.024382334202528
    }, {
      "x": 0.6602751612663269,
      "y": 0.8998945355415344,
      "z": 0.0344940721988678
    }, {
      "x": 0.6463775038719177,
      "y": 0.9262562394142151,
      "z": 0.02617623284459114
    }, {
      "x": 0.6579852104187012,
      "y": 0.8602304458618164,
      "z": 0.021586716175079346
    }, {
      "x": 0.6926165223121643,
      "y": 0.8053340315818787,
      "z": 0.061075080186128616
    }, {
      "x": 0.6724731922149658,
      "y": 0.8594399690628052,
      "z": 0.03457934781908989
    }, {
      "x": 0.6975721716880798,
      "y": 0.8183245062828064,
      "z": 0.09300774335861206
    }, {
      "x": 0.6512877941131592,
      "y": 0.8258221745491028,
      "z": 0.006324059329926968
    }, {
      "x": 0.594887375831604,
      "y": 0.7148372530937195,
      "z": -0.026898479089140892
    }, {
      "x": 0.6017440557479858,
      "y": 0.7773507833480835,
      "z": -0.05312420800328255
    }, {
      "x": 0.6096571683883667,
      "y": 0.7806998491287231,
      "z": -0.037646256387233734
    }, {
      "x": 0.5952993035316467,
      "y": 0.7654367685317993,
      "z": -0.06398405134677887
    }, {
      "x": 0.5950021147727966,
      "y": 0.6201304793357849,
      "z": -0.009297547861933708
    }, {
      "x": 0.6165438890457153,
      "y": 0.6052900552749634,
      "z": -0.012455573305487633
    }, {
      "x": 0.6362661719322205,
      "y": 0.6015968918800354,
      "z": -0.011649220250546932
    }, {
      "x": 0.6522727608680725,
      "y": 0.6046400666236877,
      "z": -0.005903332494199276
    }, {
      "x": 0.6625409722328186,
      "y": 0.6128141283988953,
      "z": 0.0030042496509850025
    }, {
      "x": 0.6688099503517151,
      "y": 0.6457712054252625,
      "z": 0.026322703808546066
    }, {
      "x": 0.7013440728187561,
      "y": 0.6893666386604309,
      "z": 0.08984331786632538
    }, {
      "x": 0.6608623266220093,
      "y": 0.6749406456947327,
      "z": 0.0172116681933403
    }, {
      "x": 0.6482325196266174,
      "y": 0.6823726296424866,
      "z": 0.008881398476660252
    }, {
      "x": 0.6313265562057495,
      "y": 0.6842025518417358,
      "z": 0.0031308617908507586
    }, {
      "x": 0.6147016286849976,
      "y": 0.6809731721878052,
      "z": 7630771724507213e-19
    }, {
      "x": 0.6018834114074707,
      "y": 0.6755372285842896,
      "z": -8834321051836014e-19
    }, {
      "x": 0.5925027132034302,
      "y": 0.670681357383728,
      "z": -0.001968748401850462
    }, {
      "x": 0.700127363204956,
      "y": 0.6871103644371033,
      "z": 0.13980500400066376
    }, {
      "x": 0.6095665693283081,
      "y": 0.7853189706802368,
      "z": -0.03074747882783413
    }, {
      "x": 0.5880423784255981,
      "y": 0.7229287028312683,
      "z": -0.04691500961780548
    }, {
      "x": 0.5930182337760925,
      "y": 0.7811514139175415,
      "z": -0.06398335844278336
    }, {
      "x": 0.5867722034454346,
      "y": 0.7922660112380981,
      "z": -0.05794971063733101
    }, {
      "x": 0.5933279991149902,
      "y": 0.7842848896980286,
      "z": -0.05714067071676254
    }, {
      "x": 0.6063535809516907,
      "y": 0.7920218706130981,
      "z": -0.02590685710310936
    }, {
      "x": 0.5839452743530273,
      "y": 0.794978141784668,
      "z": -0.0615212507545948
    }, {
      "x": 0.5828126072883606,
      "y": 0.8000800013542175,
      "z": -0.0449722595512867
    }, {
      "x": 0.5909603834152222,
      "y": 0.6541213393211365,
      "z": 0.003991890233010054
    }, {
      "x": 0.5852181911468506,
      "y": 0.6602938771247864,
      "z": -0.004428438376635313
    }, {
      "x": 0.5825737714767456,
      "y": 0.6651063561439514,
      "z": -0.014345290139317513
    }, {
      "x": 0.6517343521118164,
      "y": 0.6362385153770447,
      "z": 0.012151890434324741
    }, {
      "x": 0.6615052819252014,
      "y": 0.6281577944755554,
      "z": 0.0123682152479887
    }, {
      "x": 0.4856873154640198,
      "y": 0.6568945646286011,
      "z": 720038078725338e-18
    }, {
      "x": 0.49988406896591187,
      "y": 0.6547410488128662,
      "z": 6949726957827806e-19
    }, {
      "x": 0.48438939452171326,
      "y": 0.6392973065376282,
      "z": 705525919329375e-18
    }, {
      "x": 0.47143134474754333,
      "y": 0.6589511632919312,
      "z": 6980331381782889e-19
    }, {
      "x": 0.48704618215560913,
      "y": 0.6752797961235046,
      "z": 6921177846379578e-19
    }, {
      "x": 0.6243702173233032,
      "y": 0.640461802482605,
      "z": -6592126737814397e-20
    }, {
      "x": 0.6390967965126038,
      "y": 0.6385173797607422,
      "z": -16105435497593135e-20
    }, {
      "x": 0.6230536699295044,
      "y": 0.6224825382232666,
      "z": -16136496560648084e-20
    }, {
      "x": 0.6095397472381592,
      "y": 0.641917884349823,
      "z": -1803556369850412e-19
    }, {
      "x": 0.6250996589660645,
      "y": 0.6586247682571411,
      "z": -1785515050869435e-19
    }]],
    "faceBlendshapes": [{
      "categories": [{
        "index": 0,
        "score": 5187174338061595e-21,
        "categoryName": "_neutral",
        "displayName": ""
      }, {
        "index": 1,
        "score": 0.24521504342556,
        "categoryName": "browDownLeft",
        "displayName": ""
      }, {
        "index": 2,
        "score": 0.1987743377685547,
        "categoryName": "browDownRight",
        "displayName": ""
      }, {
        "index": 3,
        "score": 0.013400448486208916,
        "categoryName": "browInnerUp",
        "displayName": ""
      }, {
        "index": 4,
        "score": 0.012361560948193073,
        "categoryName": "browOuterUpLeft",
        "displayName": ""
      }, {
        "index": 5,
        "score": 0.019305096939206123,
        "categoryName": "browOuterUpRight",
        "displayName": ""
      }, {
        "index": 6,
        "score": 28426356948330067e-21,
        "categoryName": "cheekPuff",
        "displayName": ""
      }, {
        "index": 7,
        "score": 34500112633395474e-23,
        "categoryName": "cheekSquintLeft",
        "displayName": ""
      }, {
        "index": 8,
        "score": 483789051486383e-21,
        "categoryName": "cheekSquintRight",
        "displayName": ""
      }, {
        "index": 9,
        "score": 0.07650448381900787,
        "categoryName": "eyeBlinkLeft",
        "displayName": ""
      }, {
        "index": 10,
        "score": 0.05070012807846069,
        "categoryName": "eyeBlinkRight",
        "displayName": ""
      }, {
        "index": 11,
        "score": 0.13978900015354156,
        "categoryName": "eyeLookDownLeft",
        "displayName": ""
      }, {
        "index": 12,
        "score": 0.14198613166809082,
        "categoryName": "eyeLookDownRight",
        "displayName": ""
      }, {
        "index": 13,
        "score": 0.2177766114473343,
        "categoryName": "eyeLookInLeft",
        "displayName": ""
      }, {
        "index": 14,
        "score": 0.014739357866346836,
        "categoryName": "eyeLookInRight",
        "displayName": ""
      }, {
        "index": 15,
        "score": 0.02361512929201126,
        "categoryName": "eyeLookOutLeft",
        "displayName": ""
      }, {
        "index": 16,
        "score": 0.19679604470729828,
        "categoryName": "eyeLookOutRight",
        "displayName": ""
      }, {
        "index": 17,
        "score": 0.04874616861343384,
        "categoryName": "eyeLookUpLeft",
        "displayName": ""
      }, {
        "index": 18,
        "score": 0.049392376095056534,
        "categoryName": "eyeLookUpRight",
        "displayName": ""
      }, {
        "index": 19,
        "score": 0.34944331645965576,
        "categoryName": "eyeSquintLeft",
        "displayName": ""
      }, {
        "index": 20,
        "score": 0.2939716875553131,
        "categoryName": "eyeSquintRight",
        "displayName": ""
      }, {
        "index": 21,
        "score": 0.005955042317509651,
        "categoryName": "eyeWideLeft",
        "displayName": ""
      }, {
        "index": 22,
        "score": 0.006776117719709873,
        "categoryName": "eyeWideRight",
        "displayName": ""
      }, {
        "index": 23,
        "score": 16942436559475027e-21,
        "categoryName": "jawForward",
        "displayName": ""
      }, {
        "index": 24,
        "score": 0.0045165494084358215,
        "categoryName": "jawLeft",
        "displayName": ""
      }, {
        "index": 25,
        "score": 0.07803940027952194,
        "categoryName": "jawOpen",
        "displayName": ""
      }, {
        "index": 26,
        "score": 2090057751047425e-20,
        "categoryName": "jawRight",
        "displayName": ""
      }, {
        "index": 27,
        "score": 0.06032035872340202,
        "categoryName": "mouthClose",
        "displayName": ""
      }, {
        "index": 28,
        "score": 0.00228882092051208,
        "categoryName": "mouthDimpleLeft",
        "displayName": ""
      }, {
        "index": 29,
        "score": 0.00781762320548296,
        "categoryName": "mouthDimpleRight",
        "displayName": ""
      }, {
        "index": 30,
        "score": 0.0017093931091949344,
        "categoryName": "mouthFrownLeft",
        "displayName": ""
      }, {
        "index": 31,
        "score": 0.0019319106359034777,
        "categoryName": "mouthFrownRight",
        "displayName": ""
      }, {
        "index": 32,
        "score": 8485237776767462e-20,
        "categoryName": "mouthFunnel",
        "displayName": ""
      }, {
        "index": 33,
        "score": 9051355300471187e-19,
        "categoryName": "mouthLeft",
        "displayName": ""
      }, {
        "index": 34,
        "score": 3630454302765429e-19,
        "categoryName": "mouthLowerDownLeft",
        "displayName": ""
      }, {
        "index": 35,
        "score": 17601238505449146e-20,
        "categoryName": "mouthLowerDownRight",
        "displayName": ""
      }, {
        "index": 36,
        "score": 0.12865161895751953,
        "categoryName": "mouthPressLeft",
        "displayName": ""
      }, {
        "index": 37,
        "score": 0.20137207210063934,
        "categoryName": "mouthPressRight",
        "displayName": ""
      }, {
        "index": 38,
        "score": 0.0022203284315764904,
        "categoryName": "mouthPucker",
        "displayName": ""
      }, {
        "index": 39,
        "score": 9096377179957926e-19,
        "categoryName": "mouthRight",
        "displayName": ""
      }, {
        "index": 40,
        "score": 0.34189721941947937,
        "categoryName": "mouthRollLower",
        "displayName": ""
      }, {
        "index": 41,
        "score": 0.11409689486026764,
        "categoryName": "mouthRollUpper",
        "displayName": ""
      }, {
        "index": 42,
        "score": 0.17172536253929138,
        "categoryName": "mouthShrugLower",
        "displayName": ""
      }, {
        "index": 43,
        "score": 0.004038424696773291,
        "categoryName": "mouthShrugUpper",
        "displayName": ""
      }, {
        "index": 44,
        "score": 23205230536404997e-20,
        "categoryName": "mouthSmileLeft",
        "displayName": ""
      }, {
        "index": 45,
        "score": 19313619122840464e-20,
        "categoryName": "mouthSmileRight",
        "displayName": ""
      }, {
        "index": 46,
        "score": 0.0018571305554360151,
        "categoryName": "mouthStretchLeft",
        "displayName": ""
      }, {
        "index": 47,
        "score": 0.0023813238367438316,
        "categoryName": "mouthStretchRight",
        "displayName": ""
      }, {
        "index": 48,
        "score": 24323100660694763e-21,
        "categoryName": "mouthUpperUpLeft",
        "displayName": ""
      }, {
        "index": 49,
        "score": 3161552012898028e-20,
        "categoryName": "mouthUpperUpRight",
        "displayName": ""
      }, {
        "index": 50,
        "score": 108198406678639e-21,
        "categoryName": "noseSneerLeft",
        "displayName": ""
      }, {
        "index": 51,
        "score": 12652527630052646e-22,
        "categoryName": "noseSneerRight",
        "displayName": ""
      }],
      "headIndex": -1,
      "headName": ""
    }],
    "facialTransformationMatrixes": [{
      "rows": 4,
      "columns": 4,
      "data": [0.9947517514228821, 0.10230544209480286, 0.0013679931871592999, 0, -0.10230997204780579, 0.9947447776794434, 0.003816320328041911, 0, -970348424743861e-18, -0.0039362297393381596, 0.9999914169311523, 0, 2.8888821601867676, -7.808934211730957, -30.52109146118164, 1]
    }]
  }
};

// node_modules/@react-three/drei/core/FaceLandmarker.js
var React47 = __toESM(require_react());
var import_react9 = __toESM(require_react());

// node_modules/@mediapipe/tasks-vision/vision_bundle.mjs
var t = "undefined" != typeof self ? self : {};
function e(e3, n3) {
  t: {
    for (var r3 = ["CLOSURE_FLAGS"], i4 = t, s3 = 0; s3 < r3.length; s3++) if (null == (i4 = i4[r3[s3]])) {
      r3 = null;
      break t;
    }
    r3 = i4;
  }
  return null != (e3 = r3 && r3[e3]) ? e3 : n3;
}
function n() {
  throw Error("Invalid UTF8");
}
function r(t3, e3) {
  return e3 = String.fromCharCode.apply(null, e3), null == t3 ? e3 : t3 + e3;
}
var i;
var s;
var o = "undefined" != typeof TextDecoder;
var a;
var h = "undefined" != typeof TextEncoder;
function c(t3) {
  if (h) t3 = (a ||= new TextEncoder()).encode(t3);
  else {
    let n3 = 0;
    const r3 = new Uint8Array(3 * t3.length);
    for (let i4 = 0; i4 < t3.length; i4++) {
      var e3 = t3.charCodeAt(i4);
      if (e3 < 128) r3[n3++] = e3;
      else {
        if (e3 < 2048) r3[n3++] = e3 >> 6 | 192;
        else {
          if (e3 >= 55296 && e3 <= 57343) {
            if (e3 <= 56319 && i4 < t3.length) {
              const s3 = t3.charCodeAt(++i4);
              if (s3 >= 56320 && s3 <= 57343) {
                e3 = 1024 * (e3 - 55296) + s3 - 56320 + 65536, r3[n3++] = e3 >> 18 | 240, r3[n3++] = e3 >> 12 & 63 | 128, r3[n3++] = e3 >> 6 & 63 | 128, r3[n3++] = 63 & e3 | 128;
                continue;
              }
              i4--;
            }
            e3 = 65533;
          }
          r3[n3++] = e3 >> 12 | 224, r3[n3++] = e3 >> 6 & 63 | 128;
        }
        r3[n3++] = 63 & e3 | 128;
      }
    }
    t3 = n3 === r3.length ? r3 : r3.subarray(0, n3);
  }
  return t3;
}
var u;
var l = e(610401301, false);
var f = e(653718497, e(1, true));
var d = e(660014094, false);
var p2 = t.navigator;
function g(t3) {
  return !!l && (!!u && u.brands.some(({ brand: e3 }) => e3 && -1 != e3.indexOf(t3)));
}
function m(e3) {
  var n3;
  return (n3 = t.navigator) && (n3 = n3.userAgent) || (n3 = ""), -1 != n3.indexOf(e3);
}
function y() {
  return !!l && (!!u && u.brands.length > 0);
}
function _() {
  return y() ? g("Chromium") : (m("Chrome") || m("CriOS")) && !(!y() && m("Edge")) || m("Silk");
}
function v4(t3) {
  return v4[" "](t3), t3;
}
u = p2 && p2.userAgentData || null, v4[" "] = function() {
};
var E = !y() && (m("Trident") || m("MSIE"));
!m("Android") || _(), _(), m("Safari") && (_() || !y() && m("Coast") || !y() && m("Opera") || !y() && m("Edge") || (y() ? g("Microsoft Edge") : m("Edg/")) || y() && g("Opera"));
var w = {};
var T = null;
function A(t3) {
  var e3 = t3.length, n3 = 3 * e3 / 4;
  n3 % 3 ? n3 = Math.floor(n3) : -1 != "=.".indexOf(t3[e3 - 1]) && (n3 = -1 != "=.".indexOf(t3[e3 - 2]) ? n3 - 2 : n3 - 1);
  var r3 = new Uint8Array(n3), i4 = 0;
  return function(t4, e4) {
    function n4(e5) {
      for (; r4 < t4.length; ) {
        var n5 = t4.charAt(r4++), i6 = T[n5];
        if (null != i6) return i6;
        if (!/^[\s\xa0]*$/.test(n5)) throw Error("Unknown base64 encoding at char: " + n5);
      }
      return e5;
    }
    b();
    for (var r4 = 0; ; ) {
      var i5 = n4(-1), s3 = n4(0), o3 = n4(64), a6 = n4(64);
      if (64 === a6 && -1 === i5) break;
      e4(i5 << 2 | s3 >> 4), 64 != o3 && (e4(s3 << 4 & 240 | o3 >> 2), 64 != a6 && e4(o3 << 6 & 192 | a6));
    }
  }(t3, function(t4) {
    r3[i4++] = t4;
  }), i4 !== n3 ? r3.subarray(0, i4) : r3;
}
function b() {
  if (!T) {
    T = {};
    for (var t3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""), e3 = ["+/=", "+/", "-_=", "-_.", "-_"], n3 = 0; n3 < 5; n3++) {
      var r3 = t3.concat(e3[n3].split(""));
      w[n3] = r3;
      for (var i4 = 0; i4 < r3.length; i4++) {
        var s3 = r3[i4];
        void 0 === T[s3] && (T[s3] = i4);
      }
    }
  }
}
var k = "undefined" != typeof Uint8Array;
var S = !E && "function" == typeof btoa;
function x(t3) {
  if (!S) {
    var e3;
    void 0 === e3 && (e3 = 0), b(), e3 = w[e3];
    var n3 = Array(Math.floor(t3.length / 3)), r3 = e3[64] || "";
    let h2 = 0, c5 = 0;
    for (; h2 < t3.length - 2; h2 += 3) {
      var i4 = t3[h2], s3 = t3[h2 + 1], o3 = t3[h2 + 2], a6 = e3[i4 >> 2];
      i4 = e3[(3 & i4) << 4 | s3 >> 4], s3 = e3[(15 & s3) << 2 | o3 >> 6], o3 = e3[63 & o3], n3[c5++] = a6 + i4 + s3 + o3;
    }
    switch (a6 = 0, o3 = r3, t3.length - h2) {
      case 2:
        o3 = e3[(15 & (a6 = t3[h2 + 1])) << 2] || r3;
      case 1:
        t3 = t3[h2], n3[c5] = e3[t3 >> 2] + e3[(3 & t3) << 4 | a6 >> 4] + o3 + r3;
    }
    return n3.join("");
  }
  for (e3 = "", n3 = 0, r3 = t3.length - 10240; n3 < r3; ) e3 += String.fromCharCode.apply(null, t3.subarray(n3, n3 += 10240));
  return e3 += String.fromCharCode.apply(null, n3 ? t3.subarray(n3) : t3), btoa(e3);
}
var L = /[-_.]/g;
var R = { "-": "+", _: "/", ".": "=" };
function F(t3) {
  return R[t3] || "";
}
function M(t3) {
  if (!S) return A(t3);
  L.test(t3) && (t3 = t3.replace(L, F)), t3 = atob(t3);
  const e3 = new Uint8Array(t3.length);
  for (let n3 = 0; n3 < t3.length; n3++) e3[n3] = t3.charCodeAt(n3);
  return e3;
}
function I(t3) {
  return k && null != t3 && t3 instanceof Uint8Array;
}
var P = {};
var O;
function C(t3) {
  if (t3 !== P) throw Error("illegal external caller");
}
function N() {
  return O ||= new D(null, P);
}
function U(t3) {
  C(P);
  var e3 = t3.ba;
  return null == (e3 = null == e3 || I(e3) ? e3 : "string" == typeof e3 ? M(e3) : null) ? e3 : t3.ba = e3;
}
var D = class {
  constructor(t3, e3) {
    if (C(e3), this.ba = t3, null != t3 && 0 === t3.length) throw Error("ByteString should be constructed with non-empty values");
  }
  ua() {
    return new Uint8Array(U(this) || 0);
  }
};
function B(t3, e3) {
  t3.__closure__error__context__984382 || (t3.__closure__error__context__984382 = {}), t3.__closure__error__context__984382.severity = e3;
}
var G;
function j() {
  const e3 = Error();
  B(e3, "incident"), function(e4) {
    t.setTimeout(() => {
      throw e4;
    }, 0);
  }(e3);
}
function V(t3) {
  return B(t3 = Error(t3), "warning"), t3;
}
function X() {
  return "function" == typeof BigInt;
}
function H(t3) {
  return Array.prototype.slice.call(t3);
}
var W = "function" == typeof Symbol && "symbol" == typeof Symbol();
function z(t3) {
  return "function" == typeof Symbol && "symbol" == typeof Symbol() ? Symbol() : t3;
}
var K = z();
var Y = z("0di");
var $ = z("2ex");
var q = z("1oa");
var J = z("0dg");
var Z = W ? (t3, e3) => {
  t3[K] |= e3;
} : (t3, e3) => {
  void 0 !== t3.G ? t3.G |= e3 : Object.defineProperties(t3, { G: { value: e3, configurable: true, writable: true, enumerable: false } });
};
var Q = W ? (t3, e3) => {
  t3[K] &= ~e3;
} : (t3, e3) => {
  void 0 !== t3.G && (t3.G &= ~e3);
};
var tt = W ? (t3) => 0 | t3[K] : (t3) => 0 | t3.G;
var et = W ? (t3) => t3[K] : (t3) => t3.G;
var nt = W ? (t3, e3) => {
  t3[K] = e3;
} : (t3, e3) => {
  void 0 !== t3.G ? t3.G = e3 : Object.defineProperties(t3, { G: { value: e3, configurable: true, writable: true, enumerable: false } });
};
function rt(t3) {
  return Z(t3, 34), t3;
}
function it(t3, e3) {
  nt(e3, -14591 & (0 | t3));
}
function st(t3, e3) {
  nt(e3, -14557 & (34 | t3));
}
var ot;
var at = {};
var ht = {};
function ct(t3) {
  return !(!t3 || "object" != typeof t3 || t3.La !== ht);
}
function ut(t3) {
  return null !== t3 && "object" == typeof t3 && !Array.isArray(t3) && t3.constructor === Object;
}
function lt(t3, e3, n3) {
  if (null != t3) {
    if ("string" == typeof t3) t3 = t3 ? new D(t3, P) : N();
    else if (t3.constructor !== D) if (I(t3)) t3 = t3.length ? new D(n3 ? t3 : new Uint8Array(t3), P) : N();
    else {
      if (!e3) throw Error();
      t3 = void 0;
    }
  }
  return t3;
}
function ft(t3) {
  return !(!Array.isArray(t3) || t3.length) && !!(1 & tt(t3));
}
var dt = [];
function pt(t3) {
  if (2 & t3) throw Error();
}
nt(dt, 55), ot = Object.freeze(dt);
var gt = class _gt {
  constructor(t3, e3, n3) {
    this.l = 0, this.g = t3, this.h = e3, this.m = n3;
  }
  next() {
    if (this.l < this.g.length) {
      const t3 = this.g[this.l++];
      return { done: false, value: this.h ? this.h.call(this.m, t3) : t3 };
    }
    return { done: true, value: void 0 };
  }
  [Symbol.iterator]() {
    return new _gt(this.g, this.h, this.m);
  }
};
var mt;
function yt(t3, e3) {
  (e3 = mt ? e3[mt] : void 0) && (t3[mt] = H(e3));
}
var _t = Object.freeze({});
Object.freeze({});
var vt = Object.freeze({});
function Et(t3) {
  return t3.Sa = true, t3;
}
var wt = Et((t3) => "number" == typeof t3);
var Tt = Et((t3) => "string" == typeof t3);
var At = Et((t3) => "boolean" == typeof t3);
var bt = "function" == typeof t.BigInt && "bigint" == typeof t.BigInt(0);
var kt = Et((t3) => bt ? t3 >= xt && t3 <= Rt : "-" === t3[0] ? Ft(t3, St) : Ft(t3, Lt));
var St = Number.MIN_SAFE_INTEGER.toString();
var xt = bt ? BigInt(Number.MIN_SAFE_INTEGER) : void 0;
var Lt = Number.MAX_SAFE_INTEGER.toString();
var Rt = bt ? BigInt(Number.MAX_SAFE_INTEGER) : void 0;
function Ft(t3, e3) {
  if (t3.length > e3.length) return false;
  if (t3.length < e3.length || t3 === e3) return true;
  for (let n3 = 0; n3 < t3.length; n3++) {
    const r3 = t3[n3], i4 = e3[n3];
    if (r3 > i4) return false;
    if (r3 < i4) return true;
  }
}
var Mt = "function" == typeof Uint8Array.prototype.slice;
var It;
var Pt = 0;
var Ot = 0;
function Ct(t3) {
  const e3 = t3 >>> 0;
  Pt = e3, Ot = (t3 - e3) / 4294967296 >>> 0;
}
function Nt(t3) {
  if (t3 < 0) {
    Ct(-t3);
    const [e3, n3] = Xt(Pt, Ot);
    Pt = e3 >>> 0, Ot = n3 >>> 0;
  } else Ct(t3);
}
function Ut(t3) {
  const e3 = It ||= new DataView(new ArrayBuffer(8));
  e3.setFloat32(0, +t3, true), Ot = 0, Pt = e3.getUint32(0, true);
}
function Dt(t3, e3) {
  return 4294967296 * e3 + (t3 >>> 0);
}
function Bt(t3, e3) {
  const n3 = 2147483648 & e3;
  return n3 && (e3 = ~e3 >>> 0, 0 == (t3 = 1 + ~t3 >>> 0) && (e3 = e3 + 1 >>> 0)), t3 = Dt(t3, e3), n3 ? -t3 : t3;
}
function Gt(t3, e3) {
  if (t3 >>>= 0, (e3 >>>= 0) <= 2097151) var n3 = "" + (4294967296 * e3 + t3);
  else X() ? n3 = "" + (BigInt(e3) << BigInt(32) | BigInt(t3)) : (t3 = (16777215 & t3) + 6777216 * (n3 = 16777215 & (t3 >>> 24 | e3 << 8)) + 6710656 * (e3 = e3 >> 16 & 65535), n3 += 8147497 * e3, e3 *= 2, t3 >= 1e7 && (n3 += t3 / 1e7 >>> 0, t3 %= 1e7), n3 >= 1e7 && (e3 += n3 / 1e7 >>> 0, n3 %= 1e7), n3 = e3 + jt(n3) + jt(t3));
  return n3;
}
function jt(t3) {
  return t3 = String(t3), "0000000".slice(t3.length) + t3;
}
function Vt(t3) {
  if (t3.length < 16) Nt(Number(t3));
  else if (X()) t3 = BigInt(t3), Pt = Number(t3 & BigInt(4294967295)) >>> 0, Ot = Number(t3 >> BigInt(32) & BigInt(4294967295));
  else {
    const e3 = +("-" === t3[0]);
    Ot = Pt = 0;
    const n3 = t3.length;
    for (let r3 = e3, i4 = (n3 - e3) % 6 + e3; i4 <= n3; r3 = i4, i4 += 6) {
      const e4 = Number(t3.slice(r3, i4));
      Ot *= 1e6, Pt = 1e6 * Pt + e4, Pt >= 4294967296 && (Ot += Math.trunc(Pt / 4294967296), Ot >>>= 0, Pt >>>= 0);
    }
    if (e3) {
      const [t4, e4] = Xt(Pt, Ot);
      Pt = t4, Ot = e4;
    }
  }
}
function Xt(t3, e3) {
  return e3 = ~e3, t3 ? t3 = 1 + ~t3 : e3 += 1, [t3, e3];
}
function Ht(t3) {
  return null == t3 || "number" == typeof t3 ? t3 : "NaN" === t3 || "Infinity" === t3 || "-Infinity" === t3 ? Number(t3) : void 0;
}
function Wt(t3) {
  return null == t3 || "boolean" == typeof t3 ? t3 : "number" == typeof t3 ? !!t3 : void 0;
}
var zt = /^-?([1-9][0-9]*|0)(\.[0-9]+)?$/;
function Kt(t3) {
  const e3 = typeof t3;
  switch (e3) {
    case "bigint":
      return true;
    case "number":
      return Number.isFinite(t3);
  }
  return "string" === e3 && zt.test(t3);
}
function Yt(t3) {
  if (null == t3) return t3;
  if ("string" == typeof t3) {
    if (!t3) return;
    t3 = +t3;
  }
  return "number" == typeof t3 && Number.isFinite(t3) ? 0 | t3 : void 0;
}
function $t(t3) {
  if (null == t3) return t3;
  if ("string" == typeof t3) {
    if (!t3) return;
    t3 = +t3;
  }
  return "number" == typeof t3 && Number.isFinite(t3) ? t3 >>> 0 : void 0;
}
function qt2(t3) {
  return "-" !== t3[0] && (t3.length < 20 || 20 === t3.length && Number(t3.substring(0, 6)) < 184467);
}
function Jt(t3) {
  return t3 = Math.trunc(t3), Number.isSafeInteger(t3) || (Nt(t3), t3 = Bt(Pt, Ot)), t3;
}
function Zt(t3) {
  var e3 = Math.trunc(Number(t3));
  if (Number.isSafeInteger(e3)) return String(e3);
  if (-1 !== (e3 = t3.indexOf(".")) && (t3 = t3.substring(0, e3)), !("-" === t3[0] ? t3.length < 20 || 20 === t3.length && Number(t3.substring(0, 7)) > -922337 : t3.length < 19 || 19 === t3.length && Number(t3.substring(0, 6)) < 922337)) if (Vt(t3), t3 = Pt, 2147483648 & (e3 = Ot)) if (X()) t3 = "" + (BigInt(0 | e3) << BigInt(32) | BigInt(t3 >>> 0));
  else {
    const [n3, r3] = Xt(t3, e3);
    t3 = "-" + Gt(n3, r3);
  }
  else t3 = Gt(t3, e3);
  return t3;
}
function Qt(t3) {
  return null == t3 ? t3 : "bigint" == typeof t3 ? (kt(t3) ? t3 = Number(t3) : (t3 = BigInt.asIntN(64, t3), t3 = kt(t3) ? Number(t3) : String(t3)), t3) : Kt(t3) ? "number" == typeof t3 ? Jt(t3) : Zt(t3) : void 0;
}
function te(t3) {
  if (null == t3) return t3;
  var e3 = typeof t3;
  if ("bigint" === e3) return String(BigInt.asUintN(64, t3));
  if (Kt(t3)) {
    if ("string" === e3) return e3 = Math.trunc(Number(t3)), Number.isSafeInteger(e3) && e3 >= 0 ? t3 = String(e3) : (-1 !== (e3 = t3.indexOf(".")) && (t3 = t3.substring(0, e3)), qt2(t3) || (Vt(t3), t3 = Gt(Pt, Ot))), t3;
    if ("number" === e3) return (t3 = Math.trunc(t3)) >= 0 && Number.isSafeInteger(t3) ? t3 : function(t4) {
      if (t4 < 0) {
        Nt(t4);
        const e4 = Gt(Pt, Ot);
        return t4 = Number(e4), Number.isSafeInteger(t4) ? t4 : e4;
      }
      return qt2(String(t4)) ? t4 : (Nt(t4), Dt(Pt, Ot));
    }(t3);
  }
}
function ee(t3) {
  if ("string" != typeof t3) throw Error();
  return t3;
}
function ne(t3) {
  if (null != t3 && "string" != typeof t3) throw Error();
  return t3;
}
function re(t3) {
  return null == t3 || "string" == typeof t3 ? t3 : void 0;
}
function ie(t3, e3, n3, r3) {
  if (null != t3 && "object" == typeof t3 && t3.Y === at) return t3;
  if (!Array.isArray(t3)) return n3 ? 2 & r3 ? (t3 = e3[Y]) ? e3 = t3 : (rt((t3 = new e3()).u), e3 = e3[Y] = t3) : e3 = new e3() : e3 = void 0, e3;
  let i4 = n3 = tt(t3);
  return 0 === i4 && (i4 |= 32 & r3), i4 |= 2 & r3, i4 !== n3 && nt(t3, i4), new e3(t3);
}
function se(t3, e3, n3) {
  if (e3) t: {
    if (!Kt(e3 = t3)) throw V("int64");
    switch (typeof e3) {
      case "string":
        e3 = Zt(e3);
        break t;
      case "bigint":
        if (t3 = e3 = BigInt.asIntN(64, e3), Tt(t3)) {
          if (!/^\s*(?:-?[1-9]\d*|0)?\s*$/.test(t3)) throw Error(String(t3));
        } else if (wt(t3) && !Number.isSafeInteger(t3)) throw Error(String(t3));
        e3 = bt ? BigInt(e3) : At(e3) ? e3 ? "1" : "0" : Tt(e3) ? e3.trim() || "0" : String(e3);
        break t;
      default:
        e3 = Jt(e3);
    }
  }
  else e3 = Qt(t3);
  return "string" == typeof (n3 = null == (t3 = e3) ? n3 ? 0 : void 0 : t3) && (e3 = +n3, Number.isSafeInteger(e3)) ? e3 : n3;
}
function oe(t3) {
  if (void 0 === ce && (ce = "function" == typeof Proxy ? ye(Proxy) : null), !ce || !me()) return t3;
  let e3 = ae?.get(t3);
  return e3 || (Math.random() > 0.01 ? t3 : (function(t4) {
    if (void 0 === le) {
      const t5 = new ce([], {});
      le = 1 === Array.prototype.concat.call([], t5).length;
    }
    le && "function" == typeof Symbol && Symbol.isConcatSpreadable && (t4[Symbol.isConcatSpreadable] = true);
  }(t3), e3 = new ce(t3, { set: (t4, e4, n3) => (j(), t4[e4] = n3, true) }), function(t4, e4) {
    (ae ||= new ue()).set(t4, e4), (he ||= new ue()).set(e4, t4);
  }(t3, e3), e3));
}
var ae;
var he;
var ce;
var ue;
var le;
var fe;
var de;
var pe;
var ge;
function me() {
  return void 0 === ue && (ue = "function" == typeof WeakMap ? ye(WeakMap) : null), ue;
}
function ye(t3) {
  try {
    return -1 !== t3.toString().indexOf("[native code]") ? t3 : null;
  } catch {
    return null;
  }
}
function _e(t3, e3, n3) {
  if (f && me()) {
    if (fe?.get(e3)?.get(t3)) {
      if (n3) return;
    } else if (Math.random() > 0.01) return;
    var r3 = t3.length;
    n3 = { length: r3 };
    for (var i4 = 0; i4 < Math.min(r3, 10); i4++) {
      if (r3 <= 10) var s3 = i4;
      else {
        s3 = r3 / 10;
        const t4 = Math.floor(i4 * s3);
        s3 = t4 + Math.floor(Math.random() * (Math.floor((i4 + 1) * s3) - t4));
      }
      n3[s3] = t3[s3];
    }
    Ee(t3, n3) ? ((i4 = (r3 = fe ||= new ue()).get(e3)) || (i4 = new ue(), r3.set(e3, i4)), i4.set(t3, n3)) : (j(), Te(t3, e3));
  }
}
function ve(t3, e3) {
  const n3 = fe?.get(e3)?.get(t3);
  n3 && !Ee(t3, n3) && (j(), Te(t3, e3));
}
function Ee(t3, e3) {
  if (t3.length !== e3.length) return false;
  for (const i4 in e3) {
    var n3, r3 = Number(i4);
    if ((n3 = Number.isInteger(r3)) && (n3 = t3[r3], r3 = e3[r3], n3 = !(Number.isNaN(n3) ? Number.isNaN(r3) : n3 === r3)), n3) return false;
  }
  return true;
}
function we(t3) {
  if (t3 && fe?.has(t3)) {
    var e3 = t3.u;
    if (e3) for (let n3 = 0; n3 < e3.length; n3++) {
      const r3 = e3[n3];
      if (n3 === e3.length - 1 && ut(r3)) for (const e4 in r3) {
        const n4 = r3[e4];
        Array.isArray(n4) && ve(n4, t3);
      }
      else Array.isArray(r3) && ve(r3, t3);
    }
  }
}
function Te(t3, e3) {
  fe?.get(e3)?.delete(t3);
}
function Ae(t3, e3) {
  return t3 = be(t3, e3[0], e3[1]), Z(t3, 16384), t3;
}
function be(t3, e3, n3) {
  if (null == t3 && (t3 = de), de = void 0, null == t3) {
    var r3 = 96;
    n3 ? (t3 = [n3], r3 |= 512) : t3 = [], e3 && (r3 = -33521665 & r3 | (1023 & e3) << 15);
  } else {
    if (!Array.isArray(t3)) throw Error("narr");
    if (2048 & (r3 = tt(t3))) throw Error("farr");
    if (64 & r3) return t3;
    if (r3 |= 64, n3 && (r3 |= 512, n3 !== t3[0])) throw Error("mid");
    t: {
      const i4 = (n3 = t3).length;
      if (i4) {
        const t4 = i4 - 1;
        if (ut(n3[t4])) {
          if ((e3 = t4 - (+!!(512 & (r3 |= 256)) - 1)) >= 1024) throw Error("pvtlmt");
          r3 = -33521665 & r3 | (1023 & e3) << 15;
          break t;
        }
      }
      if (e3) {
        if ((e3 = Math.max(e3, i4 - (+!!(512 & r3) - 1))) > 1024) throw Error("spvt");
        r3 = -33521665 & r3 | (1023 & e3) << 15;
      }
    }
  }
  return nt(t3, r3), t3;
}
var ke = {};
var Se = function() {
  try {
    return v4(new class extends Map {
      constructor() {
        super();
      }
    }()), false;
  } catch {
    return true;
  }
}();
var xe = class {
  constructor() {
    this.g = /* @__PURE__ */ new Map();
  }
  get(t3) {
    return this.g.get(t3);
  }
  set(t3, e3) {
    return this.g.set(t3, e3), this.size = this.g.size, this;
  }
  delete(t3) {
    return t3 = this.g.delete(t3), this.size = this.g.size, t3;
  }
  clear() {
    this.g.clear(), this.size = this.g.size;
  }
  has(t3) {
    return this.g.has(t3);
  }
  entries() {
    return this.g.entries();
  }
  keys() {
    return this.g.keys();
  }
  values() {
    return this.g.values();
  }
  forEach(t3, e3) {
    return this.g.forEach(t3, e3);
  }
  [Symbol.iterator]() {
    return this.entries();
  }
};
var Le = Se ? (Object.setPrototypeOf(xe.prototype, Map.prototype), Object.defineProperties(xe.prototype, { size: { value: 0, configurable: true, enumerable: true, writable: true } }), xe) : class extends Map {
  constructor() {
    super();
  }
};
function Re(t3) {
  return t3;
}
function Fe(t3) {
  if (2 & t3.M) throw Error("Cannot mutate an immutable Map");
}
var Me = class extends Le {
  constructor(t3, e3, n3 = Re, r3 = Re) {
    super();
    let i4 = tt(t3);
    i4 |= 64, nt(t3, i4), this.M = i4, this.U = e3, this.T = n3, this.aa = this.U ? Ie : r3;
    for (let s3 = 0; s3 < t3.length; s3++) {
      const o3 = t3[s3], a6 = n3(o3[0], false, true);
      let h2 = o3[1];
      e3 ? void 0 === h2 && (h2 = null) : h2 = r3(o3[1], false, true, void 0, void 0, i4), super.set(a6, h2);
    }
  }
  pa(t3 = Pe) {
    if (0 !== this.size) return this.Z(t3);
  }
  Z(t3 = Pe) {
    const e3 = [], n3 = super.entries();
    for (var r3; !(r3 = n3.next()).done; ) (r3 = r3.value)[0] = t3(r3[0]), r3[1] = t3(r3[1]), e3.push(r3);
    return e3;
  }
  clear() {
    Fe(this), super.clear();
  }
  delete(t3) {
    return Fe(this), super.delete(this.T(t3, true, false));
  }
  entries() {
    var t3 = this.oa();
    return new gt(t3, Oe, this);
  }
  keys() {
    return this.Ka();
  }
  values() {
    var t3 = this.oa();
    return new gt(t3, Me.prototype.get, this);
  }
  forEach(t3, e3) {
    super.forEach((n3, r3) => {
      t3.call(e3, this.get(r3), r3, this);
    });
  }
  set(t3, e3) {
    return Fe(this), null == (t3 = this.T(t3, true, false)) ? this : null == e3 ? (super.delete(t3), this) : super.set(t3, this.aa(e3, true, true, this.U, false, this.M));
  }
  Qa(t3) {
    const e3 = this.T(t3[0], false, true);
    t3 = t3[1], t3 = this.U ? void 0 === t3 ? null : t3 : this.aa(t3, false, true, void 0, false, this.M), super.set(e3, t3);
  }
  has(t3) {
    return super.has(this.T(t3, false, false));
  }
  get(t3) {
    t3 = this.T(t3, false, false);
    const e3 = super.get(t3);
    if (void 0 !== e3) {
      var n3 = this.U;
      return n3 ? ((n3 = this.aa(e3, false, true, n3, this.va, this.M)) !== e3 && super.set(t3, n3), n3) : e3;
    }
  }
  oa() {
    return Array.from(super.keys());
  }
  Ka() {
    return super.keys();
  }
  [Symbol.iterator]() {
    return this.entries();
  }
};
function Ie(t3, e3, n3, r3, i4, s3) {
  return t3 = ie(t3, r3, n3, s3), i4 && (t3 = He(t3)), t3;
}
function Pe(t3) {
  return t3;
}
function Oe(t3) {
  return [t3, this.get(t3)];
}
var Ce;
function Ne() {
  return Ce ||= new Me(rt([]), void 0, void 0, void 0, ke);
}
function Ue(t3, e3, n3, r3, i4) {
  if (null != t3) {
    if (Array.isArray(t3)) t3 = ft(t3) ? void 0 : i4 && 2 & tt(t3) ? t3 : De(t3, e3, n3, void 0 !== r3, i4);
    else if (ut(t3)) {
      const s3 = {};
      for (let o3 in t3) s3[o3] = Ue(t3[o3], e3, n3, r3, i4);
      t3 = s3;
    } else t3 = e3(t3, r3);
    return t3;
  }
}
function De(t3, e3, n3, r3, i4) {
  const s3 = r3 || n3 ? tt(t3) : 0;
  r3 = r3 ? !!(32 & s3) : void 0;
  const o3 = H(t3);
  for (let t4 = 0; t4 < o3.length; t4++) o3[t4] = Ue(o3[t4], e3, n3, r3, i4);
  return n3 && (yt(o3, t3), n3(s3, o3)), o3;
}
function Be(t3) {
  return Ue(t3, Ge, void 0, void 0, false);
}
function Ge(t3) {
  return t3.Y === at ? t3.toJSON() : t3 instanceof Me ? t3.pa(Be) : function(t4) {
    switch (typeof t4) {
      case "number":
        return isFinite(t4) ? t4 : String(t4);
      case "bigint":
        return kt(t4) ? Number(t4) : String(t4);
      case "boolean":
        return t4 ? 1 : 0;
      case "object":
        if (t4) if (Array.isArray(t4)) {
          if (ft(t4)) return;
        } else {
          if (I(t4)) return x(t4);
          if (t4 instanceof D) {
            const e3 = t4.ba;
            return null == e3 ? "" : "string" == typeof e3 ? e3 : t4.ba = x(e3);
          }
          if (t4 instanceof Me) return t4.pa();
        }
    }
    return t4;
  }(t3);
}
function je(t3, e3, n3 = st) {
  if (null != t3) {
    if (k && t3 instanceof Uint8Array) return e3 ? t3 : new Uint8Array(t3);
    if (Array.isArray(t3)) {
      var r3 = tt(t3);
      return 2 & r3 ? t3 : (e3 &&= 0 === r3 || !!(32 & r3) && !(64 & r3 || !(16 & r3)), e3 ? (nt(t3, -12293 & (34 | r3)), t3) : De(t3, je, 4 & r3 ? st : n3, true, true));
    }
    return t3.Y === at ? (n3 = t3.u, t3 = 2 & (r3 = et(n3)) ? t3 : Ve(t3, n3, r3, true)) : t3 instanceof Me && !(2 & t3.M) && (n3 = rt(t3.Z(je)), t3 = new Me(n3, t3.U, t3.T, t3.aa)), t3;
  }
}
function Ve(t3, e3, n3, r3) {
  return we(t3), t3 = t3.constructor, de = e3 = Xe(e3, n3, r3), e3 = new t3(e3), de = void 0, e3;
}
function Xe(t3, e3, n3) {
  const r3 = n3 || 2 & e3 ? st : it, i4 = !!(32 & e3);
  return t3 = function(t4, e4, n4) {
    const r4 = H(t4);
    var i5 = r4.length;
    const s3 = 256 & e4 ? r4[i5 - 1] : void 0;
    for (i5 += s3 ? -1 : 0, e4 = 512 & e4 ? 1 : 0; e4 < i5; e4++) r4[e4] = n4(r4[e4]);
    if (s3) {
      e4 = r4[e4] = {};
      for (const t5 in s3) e4[t5] = n4(s3[t5]);
    }
    return yt(r4, t4), r4;
  }(t3, e3, (t4) => je(t4, i4, r3)), Z(t3, 32 | (n3 ? 2 : 0)), t3;
}
function He(t3) {
  const e3 = t3.u, n3 = et(e3);
  return 2 & n3 ? Ve(t3, e3, n3, false) : t3;
}
function We(t3, e3, n3, r3) {
  return !(4 & e3) || null != n3 && (!r3 && 0 === n3 && (4096 & e3 || 8192 & e3) && (t3.constructor[J] = 1 + (0 | t3.constructor[J])) < 5 && j(), 0 !== n3 && !(n3 & e3));
}
function ze(t3, e3) {
  return Ye(t3 = t3.u, et(t3), e3);
}
function Ke(t3, e3, n3, r3) {
  if (!((e3 = r3 + (+!!(512 & e3) - 1)) < 0 || e3 >= t3.length || e3 >= n3)) return t3[e3];
}
function Ye(t3, e3, n3, r3) {
  if (-1 === n3) return null;
  const i4 = e3 >> 15 & 1023 || 536870912;
  if (!(n3 >= i4)) {
    var s3 = t3.length;
    return r3 && 256 & e3 && null != (r3 = t3[s3 - 1][n3]) ? (Ke(t3, e3, i4, n3) && null != $ && ((e3 = (t3 = G ??= {})[$] || 0) >= 4 || (t3[$] = e3 + 1, j())), r3) : Ke(t3, e3, i4, n3);
  }
  return 256 & e3 ? t3[t3.length - 1][n3] : void 0;
}
function $e(t3, e3, n3) {
  const r3 = t3.u;
  let i4 = et(r3);
  return pt(i4), qe(r3, i4, e3, n3), t3;
}
function qe(t3, e3, n3, r3) {
  const i4 = e3 >> 15 & 1023 || 536870912;
  if (n3 >= i4) {
    let s3, o3 = e3;
    if (256 & e3) s3 = t3[t3.length - 1];
    else {
      if (null == r3) return o3;
      s3 = t3[i4 + (+!!(512 & e3) - 1)] = {}, o3 |= 256;
    }
    return s3[n3] = r3, n3 < i4 && (t3[n3 + (+!!(512 & e3) - 1)] = void 0), o3 !== e3 && nt(t3, o3), o3;
  }
  return t3[n3 + (+!!(512 & e3) - 1)] = r3, 256 & e3 && (n3 in (t3 = t3[t3.length - 1]) && delete t3[n3]), e3;
}
function Je(t3, e3, n3, r3, i4) {
  var s3 = 2 & e3;
  i4 = Ye(t3, e3, n3, i4), Array.isArray(i4) || (i4 = ot);
  const o3 = !(2 & r3);
  r3 = !(1 & r3);
  const a6 = !!(32 & e3);
  let h2 = tt(i4);
  return 0 !== h2 || !a6 || s3 || o3 ? 1 & h2 || (h2 |= 1, nt(i4, h2)) : (h2 |= 33, nt(i4, h2)), s3 ? (t3 = false, 2 & h2 || (rt(i4), t3 = !!(4 & h2)), (r3 || t3) && Object.freeze(i4)) : (s3 = !!(2 & h2) || !!(2048 & h2), r3 && s3 ? (i4 = H(i4), s3 = 1, a6 && !o3 && (s3 |= 32), nt(i4, s3), qe(t3, e3, n3, i4)) : o3 && 32 & h2 && !s3 && Q(i4, 32)), i4;
}
function Ze(t3, e3) {
  t3 = t3.u;
  let n3 = et(t3);
  const r3 = Ye(t3, n3, e3), i4 = Ht(r3);
  return null != i4 && i4 !== r3 && qe(t3, n3, e3, i4), i4;
}
function Qe(t3) {
  t3 = t3.u;
  let e3 = et(t3);
  const n3 = Ye(t3, e3, 1), r3 = lt(n3, true, !!(34 & e3));
  return null != r3 && r3 !== n3 && qe(t3, e3, 1, r3), r3;
}
function tn() {
  return void 0 === _t ? 2 : 5;
}
function en(t3, e3, n3, r3, i4, s3) {
  const o3 = t3.u;
  let a6 = et(o3);
  r3 = 2 & a6 ? 1 : r3, s3 = !!s3, i4 = nn(o3, a6, e3, i4);
  var h2 = tt(i4), c5 = i4;
  if (ve(c5, t3), 2 !== r3 && 1 !== r3 || Te(c5, t3), We(t3, h2, void 0, s3)) {
    4 & h2 && (i4 = H(i4), h2 = vn(h2, a6), a6 = qe(o3, a6, e3, i4));
    let t4 = c5 = 0;
    for (; c5 < i4.length; c5++) {
      const e4 = n3(i4[c5]);
      null != e4 && (i4[t4++] = e4);
    }
    t4 < c5 && (i4.length = t4), h2 = -4097 & (20 | (h2 = rn(h2, a6))), nt(i4, h2 &= -8193), 2 & h2 && Object.freeze(i4);
  }
  let u2;
  return 1 === r3 || 4 === r3 && 32 & h2 ? sn(h2) || (t3 = h2, (h2 |= 2) !== t3 && nt(i4, h2), Object.freeze(i4)) : (n3 = 5 === r3 && (!!(32 & h2) || sn(h2) || !!ae?.get(i4)), (2 === r3 || n3) && sn(h2) && (i4 = H(i4), h2 = En(h2 = vn(h2, a6), a6, s3), nt(i4, h2), a6 = qe(o3, a6, e3, i4)), sn(h2) || (e3 = h2, (h2 = En(h2, a6, s3)) !== e3 && nt(i4, h2)), n3 ? (u2 = oe(i4), _e(i4, t3, true)) : 2 !== r3 || s3 || ae?.delete(i4)), u2 || i4;
}
function nn(t3, e3, n3, r3) {
  return t3 = Ye(t3, e3, n3, r3), Array.isArray(t3) ? t3 : ot;
}
function rn(t3, e3) {
  return 0 === t3 && (t3 = vn(t3, e3)), 1 | t3;
}
function sn(t3) {
  return !!(2 & t3) && !!(4 & t3) || !!(2048 & t3);
}
function on(t3) {
  t3 = H(t3);
  for (let e3 = 0; e3 < t3.length; e3++) {
    const n3 = t3[e3] = H(t3[e3]);
    Array.isArray(n3[1]) && (n3[1] = rt(n3[1]));
  }
  return t3;
}
function an(t3, e3, n3, r3) {
  t3 = t3.u;
  let i4 = et(t3);
  pt(i4), qe(t3, i4, e3, ("0" === r3 ? 0 === Number(n3) : n3 === r3) ? void 0 : n3);
}
function hn(t3, e3) {
  var n3 = _s;
  return ln(cn(t3 = t3.u), t3, et(t3), n3) === e3 ? e3 : -1;
}
function cn(t3) {
  if (W) return t3[q] ?? (t3[q] = /* @__PURE__ */ new Map());
  if (q in t3) return t3[q];
  const e3 = /* @__PURE__ */ new Map();
  return Object.defineProperty(t3, q, { value: e3 }), e3;
}
function un(t3, e3, n3, r3) {
  const i4 = cn(t3), s3 = ln(i4, t3, e3, n3);
  return s3 !== r3 && (s3 && (e3 = qe(t3, e3, s3)), i4.set(n3, r3)), e3;
}
function ln(t3, e3, n3, r3) {
  let i4 = t3.get(r3);
  if (null != i4) return i4;
  i4 = 0;
  for (let t4 = 0; t4 < r3.length; t4++) {
    const s3 = r3[t4];
    null != Ye(e3, n3, s3) && (0 !== i4 && (n3 = qe(e3, n3, i4)), i4 = s3);
  }
  return t3.set(r3, i4), i4;
}
function fn(t3, e3, n3, r3) {
  let i4, s3 = et(t3);
  if (null != (r3 = Ye(t3, s3, n3, r3)) && r3.Y === at) return (e3 = He(r3)) !== r3 && qe(t3, s3, n3, e3), e3.u;
  if (Array.isArray(r3)) {
    const t4 = tt(r3);
    i4 = 2 & t4 ? Xe(r3, t4, false) : r3, i4 = Ae(i4, e3);
  } else i4 = Ae(void 0, e3);
  return i4 !== r3 && qe(t3, s3, n3, i4), i4;
}
function dn(t3, e3, n3, r3) {
  t3 = t3.u;
  let i4 = et(t3);
  return (e3 = ie(r3 = Ye(t3, i4, n3, r3), e3, false, i4)) !== r3 && null != e3 && qe(t3, i4, n3, e3), e3;
}
function pn(t3, e3, n3, r3 = false) {
  if (null == (e3 = dn(t3, e3, n3, r3))) return e3;
  if (t3 = t3.u, !(2 & (r3 = et(t3)))) {
    const i4 = He(e3);
    i4 !== e3 && qe(t3, r3, n3, e3 = i4);
  }
  return e3;
}
function gn(t3, e3, n3, r3, i4, s3, o3) {
  const a6 = t3.u;
  var h2 = !!(2 & e3);
  i4 = h2 ? 1 : i4, s3 = !!s3, o3 &&= !h2, h2 = nn(a6, e3, r3);
  var c5 = tt(h2), u2 = h2;
  if (ve(u2, t3), 2 !== i4 && 1 !== i4 || Te(u2, t3), !(u2 = !!(4 & c5))) {
    var l3 = h2, f3 = e3;
    const t4 = !!(2 & (c5 = rn(c5, e3)));
    t4 && (f3 |= 2);
    let r4 = !t4, i5 = true, s4 = 0, o4 = 0;
    for (; s4 < l3.length; s4++) {
      const e4 = ie(l3[s4], n3, false, f3);
      if (e4 instanceof n3) {
        if (!t4) {
          const t5 = !!(2 & tt(e4.u));
          r4 &&= !t5, i5 &&= t5;
        }
        l3[o4++] = e4;
      }
    }
    o4 < s4 && (l3.length = o4), c5 |= 4, c5 = i5 ? 16 | c5 : -17 & c5, nt(l3, c5 = r4 ? 8 | c5 : -9 & c5), t4 && Object.freeze(l3);
  }
  if (o3 && !(8 & c5 || !h2.length && (1 === i4 || 4 === i4 && 32 & c5))) {
    for (sn(c5) ? (h2 = H(h2), c5 = vn(c5, e3), e3 = qe(a6, e3, r3, h2)) : Te(h2, t3), n3 = h2, o3 = c5, l3 = 0; l3 < n3.length; l3++) (c5 = n3[l3]) !== (f3 = He(c5)) && (n3[l3] = f3);
    o3 |= 8, o3 = n3.length ? -17 & o3 : 16 | o3, nt(n3, o3), c5 = o3;
  }
  let d3;
  return 1 === i4 || 4 === i4 && 32 & c5 ? sn(c5) || (t3 = c5, (c5 |= !h2.length || 16 & c5 && (!u2 || 32 & c5) ? 2 : 2048) !== t3 && nt(h2, c5), Object.freeze(h2)) : (u2 = 5 === i4 && (!!(32 & c5) || sn(c5) || !!ae?.get(h2)), (2 === i4 || u2) && sn(c5) && (h2 = H(h2), c5 = En(c5 = vn(c5, e3), e3, s3), nt(h2, c5), e3 = qe(a6, e3, r3, h2)), sn(c5) || (r3 = c5, (c5 = En(c5, e3, s3)) !== r3 && nt(h2, c5)), u2 ? (d3 = oe(h2), _e(h2, t3, true)) : 2 !== i4 || s3 || ae?.delete(h2)), d3 || h2;
}
function mn(t3, e3, n3) {
  const r3 = et(t3.u);
  return gn(t3, r3, e3, n3, tn(), false, !(2 & r3));
}
function yn(t3, e3, n3, r3) {
  return null == r3 && (r3 = void 0), $e(t3, n3, r3);
}
function _n(t3, e3, n3, r3) {
  null == r3 && (r3 = void 0);
  t: {
    t3 = t3.u;
    let i4 = et(t3);
    if (pt(i4), null == r3) {
      const r4 = cn(t3);
      if (ln(r4, t3, i4, n3) !== e3) break t;
      r4.set(n3, 0);
    } else i4 = un(t3, i4, n3, e3);
    qe(t3, i4, e3, r3);
  }
}
function vn(t3, e3) {
  return -2049 & (t3 = 32 | (2 & e3 ? 2 | t3 : -3 & t3));
}
function En(t3, e3, n3) {
  return 32 & e3 && n3 || (t3 &= -33), t3;
}
function wn(t3, e3, n3, r3) {
  const i4 = et(t3.u);
  pt(i4), t3 = gn(t3, i4, n3, e3, 2, true), n3 = null != r3 ? r3 : new n3(), t3.push(n3), 2 & tt(n3.u) ? Q(t3, 8) : Q(t3, 16);
}
function Tn(t3, e3) {
  return t3 ?? e3;
}
function An(t3, e3) {
  return Yt(ze(t3, e3));
}
function bn(t3, e3) {
  return Tn(Ze(t3, e3), 0);
}
function kn(t3, e3) {
  return Tn(re(ze(t3, e3)), "");
}
function Sn(t3, e3, n3) {
  if (null != n3 && "boolean" != typeof n3) throw t3 = typeof n3, Error(`Expected boolean but got ${"object" != t3 ? t3 : n3 ? Array.isArray(n3) ? "array" : t3 : "null"}: ${n3}`);
  $e(t3, e3, n3);
}
function xn(t3, e3, n3) {
  if (null != n3) {
    if ("number" != typeof n3) throw V("int32");
    if (!Number.isFinite(n3)) throw V("int32");
    n3 |= 0;
  }
  $e(t3, e3, n3);
}
function Ln(t3, e3, n3) {
  if (null != n3 && "number" != typeof n3) throw Error(`Value of float/double field must be a number, found ${typeof n3}: ${n3}`);
  $e(t3, e3, n3);
}
function Rn(t3, e3, n3) {
  {
    const a6 = t3.u;
    let h2 = et(a6);
    if (pt(h2), null == n3) qe(a6, h2, e3);
    else {
      n3 = he?.get(n3) || n3;
      var r3, i4 = tt(n3), s3 = i4, o3 = !!(2 & i4) || Object.isFrozen(n3);
      if ((r3 = !o3) && (r3 = void 0 === vt || false), We(t3, i4)) {
        i4 = 21, o3 && (n3 = H(n3), s3 = 0, i4 = En(i4 = vn(i4, h2), h2, true));
        for (let t4 = 0; t4 < n3.length; t4++) n3[t4] = ee(n3[t4]);
      }
      r3 ? (n3 = H(n3), s3 = 0, i4 = En(i4 = vn(i4, h2), h2, true)) : o3 || _e(n3, t3), i4 !== s3 && nt(n3, i4), qe(a6, h2, e3, n3);
    }
  }
}
function Fn(t3, e3, n3) {
  pt(et(t3.u)), en(t3, e3, re, 2, void 0, true).push(ee(n3));
}
function Mn(t3, e3) {
  return Error(`Invalid wire type: ${t3} (at position ${e3})`);
}
function In() {
  return Error("Failed to read varint, encoding is invalid.");
}
function Pn(t3, e3) {
  return Error(`Tried to read past the end of the data ${e3} > ${t3}`);
}
function On(t3) {
  if ("string" == typeof t3) return { buffer: M(t3), O: false };
  if (Array.isArray(t3)) return { buffer: new Uint8Array(t3), O: false };
  if (t3.constructor === Uint8Array) return { buffer: t3, O: false };
  if (t3.constructor === ArrayBuffer) return { buffer: new Uint8Array(t3), O: false };
  if (t3.constructor === D) return { buffer: U(t3) || new Uint8Array(0), O: true };
  if (t3 instanceof Uint8Array) return { buffer: new Uint8Array(t3.buffer, t3.byteOffset, t3.byteLength), O: false };
  throw Error("Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, a ByteString or an Array of numbers");
}
function Cn(t3, e3) {
  let n3, r3 = 0, i4 = 0, s3 = 0;
  const o3 = t3.h;
  let a6 = t3.g;
  do {
    n3 = o3[a6++], r3 |= (127 & n3) << s3, s3 += 7;
  } while (s3 < 32 && 128 & n3);
  for (s3 > 32 && (i4 |= (127 & n3) >> 4), s3 = 3; s3 < 32 && 128 & n3; s3 += 7) n3 = o3[a6++], i4 |= (127 & n3) << s3;
  if (Xn(t3, a6), n3 < 128) return e3(r3 >>> 0, i4 >>> 0);
  throw In();
}
function Nn(t3) {
  let e3 = 0, n3 = t3.g;
  const r3 = n3 + 10, i4 = t3.h;
  for (; n3 < r3; ) {
    const r4 = i4[n3++];
    if (e3 |= r4, 0 == (128 & r4)) return Xn(t3, n3), !!(127 & e3);
  }
  throw In();
}
function Un(t3) {
  const e3 = t3.h;
  let n3 = t3.g, r3 = e3[n3++], i4 = 127 & r3;
  if (128 & r3 && (r3 = e3[n3++], i4 |= (127 & r3) << 7, 128 & r3 && (r3 = e3[n3++], i4 |= (127 & r3) << 14, 128 & r3 && (r3 = e3[n3++], i4 |= (127 & r3) << 21, 128 & r3 && (r3 = e3[n3++], i4 |= r3 << 28, 128 & r3 && 128 & e3[n3++] && 128 & e3[n3++] && 128 & e3[n3++] && 128 & e3[n3++] && 128 & e3[n3++]))))) throw In();
  return Xn(t3, n3), i4;
}
function Dn(t3) {
  return Un(t3) >>> 0;
}
function Bn(t3) {
  var e3 = t3.h;
  const n3 = t3.g, r3 = e3[n3], i4 = e3[n3 + 1], s3 = e3[n3 + 2];
  return e3 = e3[n3 + 3], Xn(t3, t3.g + 4), (r3 << 0 | i4 << 8 | s3 << 16 | e3 << 24) >>> 0;
}
function Gn(t3) {
  var e3 = Bn(t3);
  t3 = 2 * (e3 >> 31) + 1;
  const n3 = e3 >>> 23 & 255;
  return e3 &= 8388607, 255 == n3 ? e3 ? NaN : t3 * (1 / 0) : 0 == n3 ? 1401298464324817e-60 * t3 * e3 : t3 * Math.pow(2, n3 - 150) * (e3 + 8388608);
}
function jn(t3) {
  return Un(t3);
}
function Vn(t3, e3, { ea: n3 = false } = {}) {
  t3.ea = n3, e3 && (e3 = On(e3), t3.h = e3.buffer, t3.m = e3.O, t3.j = 0, t3.l = t3.h.length, t3.g = t3.j);
}
function Xn(t3, e3) {
  if (t3.g = e3, e3 > t3.l) throw Pn(t3.l, e3);
}
function Hn(t3, e3) {
  if (e3 < 0) throw Error(`Tried to read a negative byte length: ${e3}`);
  const n3 = t3.g, r3 = n3 + e3;
  if (r3 > t3.l) throw Pn(e3, t3.l - n3);
  return t3.g = r3, n3;
}
function Wn(t3, e3) {
  if (0 == e3) return N();
  var n3 = Hn(t3, e3);
  return t3.ea && t3.m ? n3 = t3.h.subarray(n3, n3 + e3) : (t3 = t3.h, n3 = n3 === (e3 = n3 + e3) ? new Uint8Array(0) : Mt ? t3.slice(n3, e3) : new Uint8Array(t3.subarray(n3, e3))), 0 == n3.length ? N() : new D(n3, P);
}
Me.prototype.toJSON = void 0, Me.prototype.La = ht;
var zn = [];
function Kn(t3) {
  var e3 = t3.g;
  if (e3.g == e3.l) return false;
  t3.l = t3.g.g;
  var n3 = Dn(t3.g);
  if (e3 = n3 >>> 3, !((n3 &= 7) >= 0 && n3 <= 5)) throw Mn(n3, t3.l);
  if (e3 < 1) throw Error(`Invalid field number: ${e3} (at position ${t3.l})`);
  return t3.m = e3, t3.h = n3, true;
}
function Yn(t3) {
  switch (t3.h) {
    case 0:
      0 != t3.h ? Yn(t3) : Nn(t3.g);
      break;
    case 1:
      Xn(t3 = t3.g, t3.g + 8);
      break;
    case 2:
      if (2 != t3.h) Yn(t3);
      else {
        var e3 = Dn(t3.g);
        Xn(t3 = t3.g, t3.g + e3);
      }
      break;
    case 5:
      Xn(t3 = t3.g, t3.g + 4);
      break;
    case 3:
      for (e3 = t3.m; ; ) {
        if (!Kn(t3)) throw Error("Unmatched start-group tag: stream EOF");
        if (4 == t3.h) {
          if (t3.m != e3) throw Error("Unmatched end-group tag");
          break;
        }
        Yn(t3);
      }
      break;
    default:
      throw Mn(t3.h, t3.l);
  }
}
function $n(t3, e3, n3) {
  const r3 = t3.g.l, i4 = Dn(t3.g), s3 = t3.g.g + i4;
  let o3 = s3 - r3;
  if (o3 <= 0 && (t3.g.l = s3, n3(e3, t3, void 0, void 0, void 0), o3 = s3 - t3.g.g), o3) throw Error(`Message parsing ended unexpectedly. Expected to read ${i4} bytes, instead read ${i4 - o3} bytes, either the data ended unexpectedly or the message misreported its own length`);
  return t3.g.g = s3, t3.g.l = r3, e3;
}
function qn(t3) {
  var e3 = Dn(t3.g), a6 = Hn(t3 = t3.g, e3);
  if (t3 = t3.h, o) {
    var h2, c5 = t3;
    (h2 = s) || (h2 = s = new TextDecoder("utf-8", { fatal: true })), e3 = a6 + e3, c5 = 0 === a6 && e3 === c5.length ? c5 : c5.subarray(a6, e3);
    try {
      var u2 = h2.decode(c5);
    } catch (t4) {
      if (void 0 === i) {
        try {
          h2.decode(new Uint8Array([128]));
        } catch (t5) {
        }
        try {
          h2.decode(new Uint8Array([97])), i = true;
        } catch (t5) {
          i = false;
        }
      }
      throw !i && (s = void 0), t4;
    }
  } else {
    e3 = (u2 = a6) + e3, a6 = [];
    let i4, s3 = null;
    for (; u2 < e3; ) {
      var l3 = t3[u2++];
      l3 < 128 ? a6.push(l3) : l3 < 224 ? u2 >= e3 ? n() : (i4 = t3[u2++], l3 < 194 || 128 != (192 & i4) ? (u2--, n()) : a6.push((31 & l3) << 6 | 63 & i4)) : l3 < 240 ? u2 >= e3 - 1 ? n() : (i4 = t3[u2++], 128 != (192 & i4) || 224 === l3 && i4 < 160 || 237 === l3 && i4 >= 160 || 128 != (192 & (h2 = t3[u2++])) ? (u2--, n()) : a6.push((15 & l3) << 12 | (63 & i4) << 6 | 63 & h2)) : l3 <= 244 ? u2 >= e3 - 2 ? n() : (i4 = t3[u2++], 128 != (192 & i4) || i4 - 144 + (l3 << 28) >> 30 != 0 || 128 != (192 & (h2 = t3[u2++])) || 128 != (192 & (c5 = t3[u2++])) ? (u2--, n()) : (l3 = (7 & l3) << 18 | (63 & i4) << 12 | (63 & h2) << 6 | 63 & c5, l3 -= 65536, a6.push(55296 + (l3 >> 10 & 1023), 56320 + (1023 & l3)))) : n(), a6.length >= 8192 && (s3 = r(s3, a6), a6.length = 0);
    }
    u2 = r(s3, a6);
  }
  return u2;
}
function Jn(t3) {
  const e3 = Dn(t3.g);
  return Wn(t3.g, e3);
}
function Zn(t3, e3, n3) {
  var r3 = Dn(t3.g);
  for (r3 = t3.g.g + r3; t3.g.g < r3; ) n3.push(e3(t3.g));
}
var Qn = [];
var tr;
function er(t3, e3, n3) {
  e3.g ? e3.m(t3, e3.g, e3.h, n3, true) : e3.m(t3, e3.h, n3, true);
}
var nr = class {
  constructor(t3, e3) {
    this.u = be(t3, e3);
  }
  toJSON() {
    return rr(this);
  }
  l() {
    var t3 = vo;
    return t3.g ? t3.l(this, t3.g, t3.h, true) : t3.l(this, t3.h, t3.defaultValue, true);
  }
  clone() {
    const t3 = this.u;
    return Ve(this, t3, et(t3), false);
  }
  O() {
    return !!(2 & tt(this.u));
  }
};
function rr(t3) {
  we(t3), t3 = tr ? t3.u : De(t3.u, Ge, void 0, void 0, false);
  {
    var e3 = !tr;
    let c5 = t3.length;
    if (c5) {
      var n3 = t3[c5 - 1], r3 = ut(n3);
      r3 ? c5-- : n3 = void 0;
      var i4 = t3;
      if (r3) {
        t: {
          var s3, o3 = n3, a6 = false;
          if (o3) for (let t4 in o3) isNaN(+t4) ? (s3 ??= {})[t4] = o3[t4] : (r3 = o3[t4], Array.isArray(r3) && (ft(r3) || ct(r3) && 0 === r3.size) && (r3 = null), null == r3 && (a6 = true), null != r3 && ((s3 ??= {})[t4] = r3));
          if (a6 || (s3 = o3), s3) for (let t4 in s3) {
            a6 = s3;
            break t;
          }
          a6 = null;
        }
        o3 = null == a6 ? null != n3 : a6 !== n3;
      }
      for (; c5 > 0 && (null == (s3 = i4[c5 - 1]) || ft(s3) || ct(s3) && 0 === s3.size); c5--) var h2 = true;
      (i4 !== t3 || o3 || h2) && (e3 ? (h2 || o3 || a6) && (i4.length = c5) : i4 = Array.prototype.slice.call(i4, 0, c5), a6 && i4.push(a6)), h2 = i4;
    } else h2 = t3;
  }
  return h2;
}
function ir(t3) {
  return t3 ? /^\d+$/.test(t3) ? (Vt(t3), new sr(Pt, Ot)) : null : or ||= new sr(0, 0);
}
nr.prototype.Y = at, nr.prototype.toString = function() {
  try {
    return tr = true, rr(this).toString();
  } finally {
    tr = false;
  }
};
var sr = class {
  constructor(t3, e3) {
    this.h = t3 >>> 0, this.g = e3 >>> 0;
  }
};
var or;
function ar(t3) {
  return t3 ? /^-?\d+$/.test(t3) ? (Vt(t3), new hr(Pt, Ot)) : null : cr ||= new hr(0, 0);
}
var hr = class {
  constructor(t3, e3) {
    this.h = t3 >>> 0, this.g = e3 >>> 0;
  }
};
var cr;
function ur(t3, e3, n3) {
  for (; n3 > 0 || e3 > 127; ) t3.g.push(127 & e3 | 128), e3 = (e3 >>> 7 | n3 << 25) >>> 0, n3 >>>= 7;
  t3.g.push(e3);
}
function lr(t3, e3) {
  for (; e3 > 127; ) t3.g.push(127 & e3 | 128), e3 >>>= 7;
  t3.g.push(e3);
}
function fr(t3, e3) {
  if (e3 >= 0) lr(t3, e3);
  else {
    for (let n3 = 0; n3 < 9; n3++) t3.g.push(127 & e3 | 128), e3 >>= 7;
    t3.g.push(1);
  }
}
function dr(t3, e3) {
  t3.g.push(e3 >>> 0 & 255), t3.g.push(e3 >>> 8 & 255), t3.g.push(e3 >>> 16 & 255), t3.g.push(e3 >>> 24 & 255);
}
function pr(t3, e3) {
  0 !== e3.length && (t3.l.push(e3), t3.h += e3.length);
}
function gr(t3, e3, n3) {
  lr(t3.g, 8 * e3 + n3);
}
function mr(t3, e3) {
  return gr(t3, e3, 2), e3 = t3.g.end(), pr(t3, e3), e3.push(t3.h), e3;
}
function yr(t3, e3) {
  var n3 = e3.pop();
  for (n3 = t3.h + t3.g.length() - n3; n3 > 127; ) e3.push(127 & n3 | 128), n3 >>>= 7, t3.h++;
  e3.push(n3), t3.h++;
}
function _r(t3, e3, n3) {
  gr(t3, e3, 2), lr(t3.g, n3.length), pr(t3, t3.g.end()), pr(t3, n3);
}
function vr(t3, e3, n3, r3) {
  null != n3 && (e3 = mr(t3, e3), r3(n3, t3), yr(t3, e3));
}
var Er = class {
  constructor(t3, e3, n3) {
    this.g = t3, this.h = e3, this.qa = n3;
  }
};
function wr(t3) {
  return Array.isArray(t3) ? t3[0] instanceof Er ? t3 : [gi, t3] : [t3, void 0];
}
function Tr(t3, e3) {
  if (Array.isArray(e3)) {
    var n3 = tt(e3);
    if (4 & n3) return e3;
    for (var r3 = 0, i4 = 0; r3 < e3.length; r3++) {
      const n4 = t3(e3[r3]);
      null != n4 && (e3[i4++] = n4);
    }
    return i4 < r3 && (e3.length = i4), nt(e3, -12289 & (5 | n3)), 2 & n3 && Object.freeze(e3), e3;
  }
}
var Ar = Symbol();
function br(t3) {
  let e3 = t3[Ar];
  if (!e3) {
    const n3 = Ur(t3), r3 = n3.h;
    e3 = r3 ? (t4, e4) => r3(t4, e4, n3) : (t4, e4) => {
      for (; Kn(e4) && 4 != e4.h; ) {
        var r4 = e4.m;
        let o3 = n3[r4];
        const a6 = !o3;
        let h2 = false;
        if (!o3) {
          var i4 = n3.X;
          if (i4) {
            var s3 = i4[r4];
            s3 && (h2 = i4.P?.[r4], (!d || h2) && (i4 = kr(s3)) && (o3 = n3[r4] = i4));
          }
        }
        o3 && o3(e4, t4, r4) || (r4 = (i4 = e4).l, Yn(i4), i4.ja ? i4 = void 0 : (s3 = i4.g.g - r4, i4.g.g = r4, i4 = Wn(i4.g, s3)), r4 = t4, i4 && (mt ||= Symbol(), (s3 = r4[mt]) ? s3.push(i4) : r4[mt] = [i4])), a6 && o3 && !h2 && Wr++ < 5 && j();
      }
    }, t3[Ar] = e3;
  }
  return e3;
}
function kr(t3) {
  const e3 = (t3 = wr(t3))[0].g;
  if (t3 = t3[1]) {
    const n3 = br(t3), r3 = Ur(t3).g;
    return (t4, i4, s3) => e3(t4, i4, s3, r3, n3);
  }
  return e3;
}
function Sr(t3, e3, n3) {
  t3[e3] = n3;
}
function xr(t3, e3, n3, r3) {
  var i4 = Sr;
  e3.g = function(t4) {
    switch (typeof t4) {
      case "boolean":
        return pe ||= [0, void 0, true];
      case "number":
        return t4 > 0 ? void 0 : 0 === t4 ? ge ||= [0, void 0] : [-t4, void 0];
      case "string":
        return [0, t4];
      case "object":
        return t4;
    }
  }(t3[0]);
  let s3 = 0;
  var o3 = t3[++s3];
  o3 && o3.constructor === Object && (e3.X = o3, "function" == typeof (o3 = t3[++s3]) && (e3.h = o3, e3.l = t3[++s3], o3 = t3[++s3]));
  const a6 = {};
  for (; Array.isArray(o3) && "number" == typeof o3[0] && o3[0] > 0; ) {
    for (var h2 = 0; h2 < o3.length; h2++) a6[o3[h2]] = o3;
    o3 = t3[++s3];
  }
  for (h2 = 1; void 0 !== o3; ) {
    let l3;
    "number" == typeof o3 && (h2 += o3, o3 = t3[++s3]);
    var c5 = void 0;
    if (o3 instanceof Er ? l3 = o3 : (l3 = mi, s3--), l3.qa) {
      o3 = t3[++s3], c5 = t3;
      var u2 = s3;
      "function" == typeof o3 && (o3 = o3(), c5[u2] = o3), c5 = o3;
    }
    for (u2 = h2 + 1, "number" == typeof (o3 = t3[++s3]) && o3 < 0 && (u2 -= o3, o3 = t3[++s3]); h2 < u2; h2++) {
      const t4 = a6[h2];
      i4(e3, h2, c5 ? r3(l3, c5, t4) : n3(l3, t4));
    }
  }
  return e3;
}
var Lr = Symbol();
function Rr(t3) {
  let e3 = t3[Lr];
  if (!e3) {
    const n3 = Pr(t3);
    e3 = (t4, e4) => Br(t4, e4, n3), t3[Lr] = e3;
  }
  return e3;
}
var Fr = Symbol();
function Mr(t3) {
  return t3.h;
}
function Ir(t3, e3) {
  let n3, r3;
  const i4 = t3.h;
  return (t4, s3, o3) => i4(t4, s3, o3, r3 ||= Pr(e3).g, n3 ||= Rr(e3));
}
function Pr(t3) {
  let e3 = t3[Fr];
  return e3 || (e3 = xr(t3, t3[Fr] = {}, Mr, Ir));
}
var Or = Symbol();
function Cr(t3, e3) {
  const n3 = t3.g;
  return e3 ? (t4, r3, i4) => n3(t4, r3, i4, e3) : n3;
}
function Nr(t3, e3, n3) {
  const r3 = t3.g;
  let i4, s3;
  return (t4, o3, a6) => r3(t4, o3, a6, s3 ||= Ur(e3).g, i4 ||= br(e3), n3);
}
function Ur(t3) {
  let e3 = t3[Or];
  return e3 || (e3 = xr(t3, t3[Or] = {}, Cr, Nr));
}
function Dr(t3, e3) {
  var n3 = t3[e3];
  if (n3) return n3;
  if (n3 = t3.X) {
    var r3 = n3[e3];
    if (r3) {
      var i4 = (r3 = wr(r3))[0].h;
      if (r3 = r3[1], n3 = n3.P?.[e3], !d || n3) {
        if (r3) {
          const e4 = Rr(r3), s3 = Pr(r3).g;
          n3 = (n3 = t3.l) ? n3(s3, e4) : (t4, n4, r4) => i4(t4, n4, r4, s3, e4);
        } else n3 = i4;
        return t3[e3] = n3;
      }
    }
  }
}
function Br(t3, e3, n3) {
  for (var r3 = et(t3), i4 = +!!(512 & r3) - 1, s3 = t3.length, o3 = 512 & r3 ? 1 : 0, a6 = s3 + (256 & r3 ? -1 : 0); o3 < a6; o3++) {
    const r4 = t3[o3];
    if (null == r4) continue;
    const s4 = o3 - i4, a7 = Dr(n3, s4);
    if (!a7) continue;
    const h2 = n3.X;
    h2?.[s4] && !h2?.P?.[s4] && Wr++ < 5 && j(), a7(e3, r4, s4);
  }
  if (256 & r3) {
    r3 = t3[s3 - 1];
    for (let t4 in r3) i4 = +t4, !Number.isNaN(i4) && (null != (s3 = r3[t4]) && (a6 = Dr(n3, i4))) && ((o3 = n3.X)?.[i4] && !o3?.P?.[i4] && Wr++ < 5 && j(), a6(e3, s3, i4));
  }
  if (t3 = mt ? t3[mt] : void 0) for (pr(e3, e3.g.end()), n3 = 0; n3 < t3.length; n3++) pr(e3, U(t3[n3]) || new Uint8Array(0));
}
function Gr(t3, e3) {
  return new Er(t3, e3, false);
}
function jr(t3, e3) {
  return new Er(t3, e3, false);
}
function Vr(t3, e3) {
  return new Er(t3, e3, true);
}
function Xr(t3, e3, n3) {
  qe(t3, et(t3), e3, n3);
}
var Hr = Vr(function(t3, e3, n3, r3, i4) {
  return 2 === t3.h && (t3 = $n(t3, Ae([void 0, void 0], r3), i4), pt(r3 = et(e3)), (i4 = Ye(e3, r3, n3)) instanceof Me ? 0 != (2 & i4.M) ? ((i4 = i4.Z()).push(t3), qe(e3, r3, n3, i4)) : i4.Qa(t3) : Array.isArray(i4) ? (2 & tt(i4) && qe(e3, r3, n3, i4 = on(i4)), i4.push(t3)) : qe(e3, r3, n3, [t3]), true);
}, function(t3, e3, n3, r3, i4) {
  if (e3 instanceof Me) e3.forEach((e4, s3) => {
    vr(t3, n3, Ae([s3, e4], r3), i4);
  });
  else if (Array.isArray(e3)) for (let s3 = 0; s3 < e3.length; s3++) {
    const o3 = e3[s3];
    Array.isArray(o3) && vr(t3, n3, Ae(o3, r3), i4);
  }
});
var Wr = 0;
function zr(t3, e3, n3) {
  if (e3 = function(t4) {
    if (null == t4) return t4;
    const e4 = typeof t4;
    if ("bigint" === e4) return String(BigInt.asIntN(64, t4));
    if (Kt(t4)) {
      if ("string" === e4) return Zt(t4);
      if ("number" === e4) return Jt(t4);
    }
  }(e3), null != e3) {
    if ("string" == typeof e3) ar(e3);
    if (null != e3) switch (gr(t3, n3, 0), typeof e3) {
      case "number":
        t3 = t3.g, Nt(e3), ur(t3, Pt, Ot);
        break;
      case "bigint":
        n3 = BigInt.asUintN(64, e3), n3 = new hr(Number(n3 & BigInt(4294967295)), Number(n3 >> BigInt(32))), ur(t3.g, n3.h, n3.g);
        break;
      default:
        n3 = ar(e3), ur(t3.g, n3.h, n3.g);
    }
  }
}
function Kr(t3, e3, n3) {
  null != (e3 = Yt(e3)) && null != e3 && (gr(t3, n3, 0), fr(t3.g, e3));
}
function Yr(t3, e3, n3) {
  null != (e3 = Wt(e3)) && (gr(t3, n3, 0), t3.g.g.push(e3 ? 1 : 0));
}
function $r(t3, e3, n3) {
  null != (e3 = re(e3)) && _r(t3, n3, c(e3));
}
function qr(t3, e3, n3, r3, i4) {
  e3 instanceof nr ? (we(e3), e3 = e3.u) : e3 = Array.isArray(e3) ? Ae(e3, r3) : void 0, vr(t3, n3, e3, i4);
}
function Jr(t3, e3, n3) {
  null != (e3 = null == e3 || "string" == typeof e3 || I(e3) || e3 instanceof D ? e3 : void 0) && _r(t3, n3, On(e3).buffer);
}
function Zr(t3, e3, n3) {
  return (5 === t3.h || 2 === t3.h) && (e3 = Je(e3, et(e3), n3, 2, false), 2 == t3.h ? Zn(t3, Gn, e3) : e3.push(Gn(t3.g)), true);
}
var Qr;
var ti = Gr(function(t3, e3, n3) {
  if (1 !== t3.h) return false;
  var r3 = t3.g;
  t3 = Bn(r3);
  const i4 = Bn(r3);
  r3 = 2 * (i4 >> 31) + 1;
  const s3 = i4 >>> 20 & 2047;
  return t3 = 4294967296 * (1048575 & i4) + t3, Xr(e3, n3, 2047 == s3 ? t3 ? NaN : r3 * (1 / 0) : 0 == s3 ? 5e-324 * r3 * t3 : r3 * Math.pow(2, s3 - 1075) * (t3 + 4503599627370496)), true;
}, function(t3, e3, n3) {
  null != (e3 = Ht(e3)) && (gr(t3, n3, 1), t3 = t3.g, (n3 = It ||= new DataView(new ArrayBuffer(8))).setFloat64(0, +e3, true), Pt = n3.getUint32(0, true), Ot = n3.getUint32(4, true), dr(t3, Pt), dr(t3, Ot));
});
var ei = Gr(function(t3, e3, n3) {
  return 5 === t3.h && (Xr(e3, n3, Gn(t3.g)), true);
}, function(t3, e3, n3) {
  null != (e3 = Ht(e3)) && (gr(t3, n3, 5), t3 = t3.g, Ut(e3), dr(t3, Pt));
});
var ni = jr(Zr, function(t3, e3, n3) {
  if (null != (e3 = Tr(Ht, e3))) for (let o3 = 0; o3 < e3.length; o3++) {
    var r3 = t3, i4 = n3, s3 = e3[o3];
    null != s3 && (gr(r3, i4, 5), r3 = r3.g, Ut(s3), dr(r3, Pt));
  }
});
var ri = jr(Zr, function(t3, e3, n3) {
  if (null != (e3 = Tr(Ht, e3)) && e3.length) {
    gr(t3, n3, 2), lr(t3.g, 4 * e3.length);
    for (let r3 = 0; r3 < e3.length; r3++) n3 = t3.g, Ut(e3[r3]), dr(n3, Pt);
  }
});
var ii = Gr(function(t3, e3, n3) {
  return 0 === t3.h && (Xr(e3, n3, Cn(t3.g, Bt)), true);
}, zr);
var si = Gr(function(t3, e3, n3) {
  return 0 === t3.h && (Xr(e3, n3, 0 === (t3 = Cn(t3.g, Bt)) ? void 0 : t3), true);
}, zr);
var oi = Gr(function(t3, e3, n3) {
  return 0 === t3.h && (Xr(e3, n3, Cn(t3.g, Dt)), true);
}, function(t3, e3, n3) {
  if (null != (e3 = te(e3))) {
    if ("string" == typeof e3) ir(e3);
    if (null != e3) switch (gr(t3, n3, 0), typeof e3) {
      case "number":
        t3 = t3.g, Nt(e3), ur(t3, Pt, Ot);
        break;
      case "bigint":
        n3 = BigInt.asUintN(64, e3), n3 = new sr(Number(n3 & BigInt(4294967295)), Number(n3 >> BigInt(32))), ur(t3.g, n3.h, n3.g);
        break;
      default:
        n3 = ir(e3), ur(t3.g, n3.h, n3.g);
    }
  }
});
var ai = Gr(function(t3, e3, n3) {
  return 0 === t3.h && (Xr(e3, n3, Un(t3.g)), true);
}, Kr);
var hi = jr(function(t3, e3, n3) {
  return (0 === t3.h || 2 === t3.h) && (e3 = Je(e3, et(e3), n3, 2, false), 2 == t3.h ? Zn(t3, Un, e3) : e3.push(Un(t3.g)), true);
}, function(t3, e3, n3) {
  if (null != (e3 = Tr(Yt, e3)) && e3.length) {
    n3 = mr(t3, n3);
    for (let n4 = 0; n4 < e3.length; n4++) fr(t3.g, e3[n4]);
    yr(t3, n3);
  }
});
var ci = Gr(function(t3, e3, n3) {
  return 0 === t3.h && (Xr(e3, n3, 0 === (t3 = Un(t3.g)) ? void 0 : t3), true);
}, Kr);
var ui = Gr(function(t3, e3, n3) {
  return 0 === t3.h && (Xr(e3, n3, Nn(t3.g)), true);
}, Yr);
var li = Gr(function(t3, e3, n3) {
  return 0 === t3.h && (Xr(e3, n3, false === (t3 = Nn(t3.g)) ? void 0 : t3), true);
}, Yr);
var fi = jr(function(t3, e3, n3) {
  if (2 !== t3.h) return false;
  t3 = qn(t3);
  const r3 = et(e3);
  return pt(r3), Je(e3, r3, n3, 2).push(t3), true;
}, function(t3, e3, n3) {
  if (null != (e3 = Tr(re, e3))) for (let o3 = 0; o3 < e3.length; o3++) {
    var r3 = t3, i4 = n3, s3 = e3[o3];
    null != s3 && _r(r3, i4, c(s3));
  }
});
var di = Gr(function(t3, e3, n3) {
  return 2 === t3.h && (Xr(e3, n3, "" === (t3 = qn(t3)) ? void 0 : t3), true);
}, $r);
var pi = Gr(function(t3, e3, n3) {
  return 2 === t3.h && (Xr(e3, n3, qn(t3)), true);
}, $r);
var gi = Vr(function(t3, e3, n3, r3, i4) {
  return 2 === t3.h && ($n(t3, fn(e3, r3, n3, true), i4), true);
}, qr);
var mi = Vr(function(t3, e3, n3, r3, i4) {
  return 2 === t3.h && ($n(t3, fn(e3, r3, n3), i4), true);
}, qr);
Qr = new Er(function(t3, e3, n3, r3, i4) {
  if (2 !== t3.h) return false;
  r3 = Ae(void 0, r3);
  let s3 = et(e3);
  pt(s3);
  let o3 = Je(e3, s3, n3, 3);
  return s3 = et(e3), 4 & tt(o3) && (o3 = H(o3), nt(o3, -2079 & (1 | tt(o3))), qe(e3, s3, n3, o3)), o3.push(r3), $n(t3, r3, i4), true;
}, function(t3, e3, n3, r3, i4) {
  if (Array.isArray(e3)) for (let s3 = 0; s3 < e3.length; s3++) qr(t3, e3[s3], n3, r3, i4);
}, true);
var yi = Vr(function(t3, e3, n3, r3, i4, s3) {
  return 2 === t3.h && (un(e3, et(e3), s3, n3), $n(t3, e3 = fn(e3, r3, n3), i4), true);
}, qr);
var _i = Gr(function(t3, e3, n3) {
  return 2 === t3.h && (Xr(e3, n3, Jn(t3)), true);
}, Jr);
var vi = jr(function(t3, e3, n3) {
  return (0 === t3.h || 2 === t3.h) && (e3 = Je(e3, et(e3), n3, 2, false), 2 == t3.h ? Zn(t3, Dn, e3) : e3.push(Dn(t3.g)), true);
}, function(t3, e3, n3) {
  if (null != (e3 = Tr($t, e3))) for (let o3 = 0; o3 < e3.length; o3++) {
    var r3 = t3, i4 = n3, s3 = e3[o3];
    null != s3 && (gr(r3, i4, 0), lr(r3.g, s3));
  }
});
var Ei = Gr(function(t3, e3, n3) {
  return 0 === t3.h && (Xr(e3, n3, Un(t3.g)), true);
}, function(t3, e3, n3) {
  null != (e3 = Yt(e3)) && (e3 = parseInt(e3, 10), gr(t3, n3, 0), fr(t3.g, e3));
});
var wi = class {
  constructor(t3, e3) {
    this.h = t3, this.g = e3, this.l = pn, this.m = yn, this.defaultValue = void 0;
  }
};
function Ti(t3, e3) {
  return new wi(t3, e3);
}
function Ai(t3, e3) {
  return (n3, r3) => {
    if (Qn.length) {
      const t4 = Qn.pop();
      t4.o(r3), Vn(t4.g, n3, r3), n3 = t4;
    } else n3 = new class {
      constructor(t4, e4) {
        if (zn.length) {
          const n4 = zn.pop();
          Vn(n4, t4, e4), t4 = n4;
        } else t4 = new class {
          constructor(t5, e5) {
            this.h = null, this.m = false, this.g = this.l = this.j = 0, Vn(this, t5, e5);
          }
          clear() {
            this.h = null, this.m = false, this.g = this.l = this.j = 0, this.ea = false;
          }
        }(t4, e4);
        this.g = t4, this.l = this.g.g, this.h = this.m = -1, this.o(e4);
      }
      o({ ja: t4 = false } = {}) {
        this.ja = t4;
      }
    }(n3, r3);
    try {
      const r4 = new t3(), s3 = r4.u;
      br(e3)(s3, n3);
      var i4 = r4;
    } finally {
      n3.g.clear(), n3.m = -1, n3.h = -1, Qn.length < 100 && Qn.push(n3);
    }
    return i4;
  };
}
function bi(t3) {
  return function() {
    we(this);
    const e3 = new class {
      constructor() {
        this.l = [], this.h = 0, this.g = new class {
          constructor() {
            this.g = [];
          }
          length() {
            return this.g.length;
          }
          end() {
            const t4 = this.g;
            return this.g = [], t4;
          }
        }();
      }
    }();
    Br(this.u, e3, Pr(t3)), pr(e3, e3.g.end());
    const n3 = new Uint8Array(e3.h), r3 = e3.l, i4 = r3.length;
    let s3 = 0;
    for (let t4 = 0; t4 < i4; t4++) {
      const e4 = r3[t4];
      n3.set(e4, s3), s3 += e4.length;
    }
    return e3.l = [n3], n3;
  };
}
var ki = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var Si = [0, di, Gr(function(t3, e3, n3) {
  return 2 === t3.h && (Xr(e3, n3, (t3 = Jn(t3)) === N() ? void 0 : t3), true);
}, function(t3, e3, n3) {
  if (null != e3) {
    if (e3 instanceof nr) {
      const r3 = e3.Ta;
      return void (r3 && (e3 = r3(e3), null != e3 && _r(t3, n3, On(e3).buffer)));
    }
    if (Array.isArray(e3)) return;
  }
  Jr(t3, e3, n3);
})];
var xi = [0, ai, Ei, ui, -1, hi, Ei, -1];
var Li = class extends nr {
  constructor() {
    super();
  }
};
var Ri = [0, ui, pi, ui, Ei, -1, jr(function(t3, e3, n3) {
  return (0 === t3.h || 2 === t3.h) && (e3 = Je(e3, et(e3), n3, 2, false), 2 == t3.h ? Zn(t3, jn, e3) : e3.push(Un(t3.g)), true);
}, function(t3, e3, n3) {
  if (null != (e3 = Tr(Yt, e3)) && e3.length) {
    n3 = mr(t3, n3);
    for (let n4 = 0; n4 < e3.length; n4++) fr(t3.g, e3[n4]);
    yr(t3, n3);
  }
}), pi, -1, [0, ui, -1], Ei, ui, -1];
var Fi = [0, pi, -2];
var Mi = class extends nr {
  constructor() {
    super();
  }
};
var Ii = [0];
var Pi = [0, ai, ui, 1, ui, -3];
var Oi = [0, pi, ui, -1, ai, [0, [1, 2, 3, 4, 5, 6, 7], yi, Ii, yi, Ri, yi, Fi, yi, Pi, yi, xi, yi, [0, pi, -2], yi, [0, pi, Ei]], [0, pi], ui, [0, [1, 3], [2, 4], yi, [0, hi], -1, yi, [0, fi], -1, Qr, [0, pi, -1]], pi];
var Ci = class extends nr {
  constructor(t3) {
    super(t3, 2);
  }
};
var Ni = {};
var Ui = Ni.P = {};
Ni[336783863] = Oi, Ui[336783863] = 1;
var Di = [0, si, -1, li, -3, si, hi, di, ci, si, -1, li, ci, li, -2, di];
function Bi(t3, e3) {
  an(t3, 2, ne(e3), "");
}
function Gi(t3, e3) {
  Fn(t3, 3, e3);
}
function ji(t3, e3) {
  Fn(t3, 4, e3);
}
var Vi = class extends nr {
  constructor(t3) {
    super(t3, 500);
  }
  o(t3) {
    return yn(this, 0, 7, t3);
  }
};
var Xi = [-1, { P: {} }];
var Hi = [0, pi, 1, Xi];
var Wi = [0, pi, fi, Xi];
function zi(t3, e3) {
  wn(t3, 1, Vi, e3);
}
function Ki(t3, e3) {
  Fn(t3, 10, e3);
}
function Yi(t3, e3) {
  Fn(t3, 15, e3);
}
var $i = class extends nr {
  constructor(t3) {
    super(t3, 500);
  }
  o(t3) {
    return yn(this, 0, 1001, t3);
  }
};
var qi = [-500, Qr, [-500, di, -1, fi, -3, [-2, Ni, ui], Qr, Si, ci, -1, Hi, Wi, Qr, [0, di, li], di, Di, ci, fi, 987, fi], 4, Qr, [-500, pi, -1, [-1, { P: {} }], 998, pi], Qr, [-500, pi, fi, -1, [-2, { P: {} }, ui], 997, fi, -1], ci, Qr, [-500, pi, fi, Xi, 998, fi], fi, ci, Hi, Wi, Qr, [0, di, -1, Xi], fi, -2, Di, di, -1, li, 979, Xi, Qr, Si];
$i.prototype.g = bi(qi);
var Ji = Ai($i, qi);
var Zi = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var Qi = class extends nr {
  constructor(t3) {
    super(t3);
  }
  g() {
    return mn(this, Zi, 1);
  }
};
var ts = [0, Qr, [0, ai, ei, pi, -1]];
var es = Ai(Qi, ts);
var ns = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var rs = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var is = class extends nr {
  constructor(t3) {
    super(t3);
  }
  h() {
    return pn(this, ns, 2);
  }
  g() {
    return mn(this, rs, 5);
  }
};
var ss = Ai(class extends nr {
  constructor(t3) {
    super(t3);
  }
}, [0, fi, hi, ri, [0, Ei, [0, ai, -3], [0, ei, -3], [0, ai, -1, [0, Qr, [0, ai, -2]]], Qr, [0, ei, -1, pi, ei]], pi, -1, ii, Qr, [0, ai, ei], fi, ii]);
var os = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var as = Ai(class extends nr {
  constructor(t3) {
    super(t3);
  }
}, [0, Qr, [0, ei, -4]]);
var hs = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var cs = Ai(class extends nr {
  constructor(t3) {
    super(t3);
  }
}, [0, Qr, [0, ei, -4]]);
var us = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var ls = [0, ai, -1, ri, Ei];
var fs = class extends nr {
  constructor() {
    super();
  }
};
fs.prototype.g = bi([0, ei, -4, ii]);
var ds = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var ps = Ai(class extends nr {
  constructor(t3) {
    super(t3);
  }
}, [0, Qr, [0, 1, ai, pi, ts], ii]);
var gs = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var ms = class extends nr {
  constructor(t3) {
    super(t3);
  }
  ra() {
    const t3 = Qe(this);
    return null == t3 ? N() : t3;
  }
};
var ys = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var _s = [1, 2];
var vs = Ai(class extends nr {
  constructor(t3) {
    super(t3);
  }
}, [0, Qr, [0, _s, yi, [0, ri], yi, [0, _i], ai, pi], ii]);
var Es = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var ws = [0, pi, ai, ei, fi, -1];
var Ts = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var As = [0, ui, -1];
var bs = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var ks = [1, 2, 3, 4, 5];
var Ss = class extends nr {
  constructor(t3) {
    super(t3);
  }
  g() {
    return null != Qe(this);
  }
  h() {
    return null != re(ze(this, 2));
  }
};
var xs = class extends nr {
  constructor(t3) {
    super(t3);
  }
  g() {
    return Wt(ze(this, 2)) ?? false;
  }
};
var Ls = [0, _i, pi, [0, ai, ii, -1], [0, oi, ii]];
var Rs = [0, Ls, ui, [0, ks, yi, Pi, yi, Ri, yi, xi, yi, Ii, yi, Fi], Ei];
var Fs = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var Ms = [0, Rs, ei, -1, ai];
var Is = Ti(502141897, Fs);
Ni[502141897] = Ms, Ui[502141897] = 1;
var Ps = [0, Ls];
Ni[512499200] = Ps;
var Os = [0, Ps];
Ni[515723506] = Os;
var Cs = Ai(class extends nr {
  constructor(t3) {
    super(t3);
  }
}, [0, [0, Ei, -1, ni, vi], ls]);
var Ns = [0, Rs];
Ni[508981768] = Ns;
var Us = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var Ds = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var Bs = [0, Rs, ei, Ns, ui];
var Gs = [0, Rs, Ms, Bs, ei, Os];
Ni[508968149] = Bs;
var js = Ti(508968150, Ds);
Ni[508968150] = Gs, Ui[508968150] = 1, Ui[508968149] = 1;
var Vs = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var Xs = Ti(513916220, Vs);
Ni[513916220] = [0, Rs, Gs, ai], Ui[513916220] = 1;
var Hs = class extends nr {
  constructor(t3) {
    super(t3);
  }
  h() {
    return pn(this, Es, 2);
  }
  g() {
    $e(this, 2);
  }
};
var Ws = [0, Rs, ws];
Ni[478825465] = Ws, Ui[478825465] = 1;
var zs = [0, Rs];
Ni[478825422] = zs;
var Ks = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var Ys = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var $s = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var qs = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var Js = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var Zs = [0, Rs, zs, Ws, -1];
var Qs = [0, Rs, ei, ai];
var to = [0, Rs, ei];
var eo = [0, Rs, Qs, to, ei];
var no = [0, Rs, eo, Zs];
Ni[463370452] = Zs, Ni[464864288] = Qs, Ni[474472470] = to;
var ro = Ti(462713202, qs);
Ni[462713202] = eo;
var io = Ti(479097054, Js);
Ni[479097054] = no, Ui[479097054] = 1, Ui[463370452] = 1, Ui[464864288] = 1, Ui[462713202] = 1, Ui[474472470] = 1;
var so = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var oo = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var ao = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var ho = class extends nr {
  constructor() {
    super();
  }
};
var co = [0, Rs, ei, -1, ai];
var uo = [0, Rs, ei, ui];
ho.prototype.g = bi([0, Rs, to, [0, Rs], Ms, Bs, co, uo]), Ni[514774813] = co, Ni[518928384] = uo;
var lo = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var fo = Ti(456383383, lo);
Ni[456383383] = [0, Rs, ws], Ui[456383383] = 1;
var po = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var go = Ti(476348187, po);
Ni[476348187] = [0, Rs, As], Ui[476348187] = 1;
var mo = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var yo = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var _o = [0, Ei, -1];
var vo = Ti(458105876, class extends nr {
  constructor(t3) {
    super(t3);
  }
  g() {
    var t3 = this.u;
    const e3 = et(t3);
    const n3 = 2 & e3;
    return t3 = function(t4, e4, n4) {
      var r3 = yo;
      const i4 = 2 & e4;
      let s3 = false;
      if (null == n4) {
        if (i4) return Ne();
        n4 = [];
      } else if (n4.constructor === Me) {
        if (0 == (2 & n4.M) || i4) return n4;
        n4 = n4.Z();
      } else Array.isArray(n4) ? s3 = !!(2 & tt(n4)) : n4 = [];
      if (i4) {
        if (!n4.length) return Ne();
        s3 || (s3 = true, rt(n4));
      } else s3 && (s3 = false, n4 = on(n4));
      return s3 || (64 & tt(n4) ? Q(n4, 32) : 32 & e4 && Z(n4, 32)), qe(t4, e4, 2, r3 = new Me(n4, r3, se, void 0)), r3;
    }(t3, e3, Ye(t3, e3, 2)), !n3 && yo && (t3.va = true), t3;
  }
});
Ni[458105876] = [0, _o, Hr, [true, ii, [0, pi, -1, fi]]], Ui[458105876] = 1;
var Eo = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var wo = Ti(458105758, Eo);
Ni[458105758] = [0, Rs, pi, _o], Ui[458105758] = 1;
var To = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var Ao = Ti(443442058, To);
Ni[443442058] = [0, Rs, pi, ai, ei, fi, -1], Ui[443442058] = 1, Ui[514774813] = 1;
var bo = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var ko = Ti(516587230, bo);
function So(t3, e3) {
  return e3 = e3 ? e3.clone() : new Es(), void 0 !== t3.displayNamesLocale ? $e(e3, 1, ne(t3.displayNamesLocale)) : void 0 === t3.displayNamesLocale && $e(e3, 1), void 0 !== t3.maxResults ? xn(e3, 2, t3.maxResults) : "maxResults" in t3 && $e(e3, 2), void 0 !== t3.scoreThreshold ? Ln(e3, 3, t3.scoreThreshold) : "scoreThreshold" in t3 && $e(e3, 3), void 0 !== t3.categoryAllowlist ? Rn(e3, 4, t3.categoryAllowlist) : "categoryAllowlist" in t3 && $e(e3, 4), void 0 !== t3.categoryDenylist ? Rn(e3, 5, t3.categoryDenylist) : "categoryDenylist" in t3 && $e(e3, 5), e3;
}
function xo(t3, e3 = -1, n3 = "") {
  return { categories: t3.map((t4) => ({ index: Tn(An(t4, 1), 0) ?? -1, score: bn(t4, 2) ?? 0, categoryName: kn(t4, 3) ?? "", displayName: kn(t4, 4) ?? "" })), headIndex: e3, headName: n3 };
}
function Lo(t3) {
  var e3 = en(t3, 3, Ht, tn()), n3 = en(t3, 2, Yt, tn()), r3 = en(t3, 1, re, tn()), i4 = en(t3, 9, re, tn());
  const s3 = { categories: [], keypoints: [] };
  for (let t4 = 0; t4 < e3.length; t4++) s3.categories.push({ score: e3[t4], index: n3[t4] ?? -1, categoryName: r3[t4] ?? "", displayName: i4[t4] ?? "" });
  if ((e3 = pn(t3, is, 4)?.h()) && (s3.boundingBox = { originX: An(e3, 1) ?? 0, originY: An(e3, 2) ?? 0, width: An(e3, 3) ?? 0, height: An(e3, 4) ?? 0, angle: 0 }), pn(t3, is, 4)?.g().length) for (const e4 of pn(t3, is, 4).g()) s3.keypoints.push({ x: Ze(e4, 1) ?? 0, y: Ze(e4, 2) ?? 0, score: Ze(e4, 4) ?? 0, label: re(ze(e4, 3)) ?? "" });
  return s3;
}
function Ro(t3) {
  const e3 = [];
  for (const n3 of mn(t3, hs, 1)) e3.push({ x: bn(n3, 1) ?? 0, y: bn(n3, 2) ?? 0, z: bn(n3, 3) ?? 0, visibility: bn(n3, 4) ?? 0 });
  return e3;
}
function Fo(t3) {
  const e3 = [];
  for (const n3 of mn(t3, os, 1)) e3.push({ x: bn(n3, 1) ?? 0, y: bn(n3, 2) ?? 0, z: bn(n3, 3) ?? 0, visibility: bn(n3, 4) ?? 0 });
  return e3;
}
function Mo(t3) {
  return Array.from(t3, (t4) => t4 > 127 ? t4 - 256 : t4);
}
function Io(t3, e3) {
  if (t3.length !== e3.length) throw Error(`Cannot compute cosine similarity between embeddings of different sizes (${t3.length} vs. ${e3.length}).`);
  let n3 = 0, r3 = 0, i4 = 0;
  for (let s3 = 0; s3 < t3.length; s3++) n3 += t3[s3] * e3[s3], r3 += t3[s3] * t3[s3], i4 += e3[s3] * e3[s3];
  if (r3 <= 0 || i4 <= 0) throw Error("Cannot compute cosine similarity on embedding with 0 norm.");
  return n3 / Math.sqrt(r3 * i4);
}
var Po;
Ni[516587230] = [0, Rs, co, uo, ei], Ui[516587230] = 1, Ui[518928384] = 1;
var Oo = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 123, 3, 2, 1, 0, 10, 10, 1, 8, 0, 65, 0, 253, 15, 253, 98, 11]);
async function Co() {
  if (void 0 === Po) try {
    await WebAssembly.instantiate(Oo), Po = true;
  } catch {
    Po = false;
  }
  return Po;
}
async function No(t3, e3 = "") {
  const n3 = await Co() ? "wasm_internal" : "wasm_nosimd_internal";
  return { wasmLoaderPath: `${e3}/${t3}_${n3}.js`, wasmBinaryPath: `${e3}/${t3}_${n3}.wasm` };
}
var Uo = class {
};
function Do() {
  var t3 = navigator;
  return "undefined" != typeof OffscreenCanvas && (!function(t4 = navigator) {
    return (t4 = t4.userAgent).includes("Safari") && !t4.includes("Chrome");
  }(t3) || !!((t3 = t3.userAgent.match(/Version\/([\d]+).*Safari/)) && t3.length >= 1 && Number(t3[1]) >= 17));
}
async function Bo(t3) {
  if ("function" != typeof importScripts) {
    const e3 = document.createElement("script");
    return e3.src = t3.toString(), e3.crossOrigin = "anonymous", new Promise((t4, n3) => {
      e3.addEventListener("load", () => {
        t4();
      }, false), e3.addEventListener("error", (t5) => {
        n3(t5);
      }, false), document.body.appendChild(e3);
    });
  }
  importScripts(t3.toString());
}
function Go(t3) {
  return void 0 !== t3.videoWidth ? [t3.videoWidth, t3.videoHeight] : void 0 !== t3.naturalWidth ? [t3.naturalWidth, t3.naturalHeight] : void 0 !== t3.displayWidth ? [t3.displayWidth, t3.displayHeight] : [t3.width, t3.height];
}
function jo(t3, e3, n3) {
  t3.m || console.error("No wasm multistream support detected: ensure dependency inclusion of :gl_graph_runner_internal_multi_input target"), n3(e3 = t3.i.stringToNewUTF8(e3)), t3.i._free(e3);
}
function Vo(t3, e3, n3) {
  if (!t3.i.canvas) throw Error("No OpenGL canvas configured.");
  if (n3 ? t3.i._bindTextureToStream(n3) : t3.i._bindTextureToCanvas(), !(n3 = t3.i.canvas.getContext("webgl2") || t3.i.canvas.getContext("webgl"))) throw Error("Failed to obtain WebGL context from the provided canvas. `getContext()` should only be invoked with `webgl` or `webgl2`.");
  t3.i.gpuOriginForWebTexturesIsBottomLeft && n3.pixelStorei(n3.UNPACK_FLIP_Y_WEBGL, true), n3.texImage2D(n3.TEXTURE_2D, 0, n3.RGBA, n3.RGBA, n3.UNSIGNED_BYTE, e3), t3.i.gpuOriginForWebTexturesIsBottomLeft && n3.pixelStorei(n3.UNPACK_FLIP_Y_WEBGL, false);
  const [r3, i4] = Go(e3);
  return !t3.l || r3 === t3.i.canvas.width && i4 === t3.i.canvas.height || (t3.i.canvas.width = r3, t3.i.canvas.height = i4), [r3, i4];
}
function Xo(t3, e3, n3) {
  t3.m || console.error("No wasm multistream support detected: ensure dependency inclusion of :gl_graph_runner_internal_multi_input target");
  const r3 = new Uint32Array(e3.length);
  for (let n4 = 0; n4 < e3.length; n4++) r3[n4] = t3.i.stringToNewUTF8(e3[n4]);
  e3 = t3.i._malloc(4 * r3.length), t3.i.HEAPU32.set(r3, e3 >> 2), n3(e3);
  for (const e4 of r3) t3.i._free(e4);
  t3.i._free(e3);
}
function Ho(t3, e3, n3) {
  t3.i.simpleListeners = t3.i.simpleListeners || {}, t3.i.simpleListeners[e3] = n3;
}
function Wo(t3, e3, n3) {
  let r3 = [];
  t3.i.simpleListeners = t3.i.simpleListeners || {}, t3.i.simpleListeners[e3] = (t4, e4, i4) => {
    e4 ? (n3(r3, i4), r3 = []) : r3.push(t4);
  };
}
Uo.forVisionTasks = function(t3) {
  return No("vision", t3);
}, Uo.forTextTasks = function(t3) {
  return No("text", t3);
}, Uo.forGenAiExperimentalTasks = function(t3) {
  return No("genai_experimental", t3);
}, Uo.forGenAiTasks = function(t3) {
  return No("genai", t3);
}, Uo.forAudioTasks = function(t3) {
  return No("audio", t3);
}, Uo.isSimdSupported = function() {
  return Co();
};
async function zo(t3, e3, n3, r3) {
  return t3 = await (async (t4, e4, n4, r4, i4) => {
    if (e4 && await Bo(e4), !self.ModuleFactory) throw Error("ModuleFactory not set.");
    if (n4 && (await Bo(n4), !self.ModuleFactory)) throw Error("ModuleFactory not set.");
    return self.Module && i4 && ((e4 = self.Module).locateFile = i4.locateFile, i4.mainScriptUrlOrBlob && (e4.mainScriptUrlOrBlob = i4.mainScriptUrlOrBlob)), i4 = await self.ModuleFactory(self.Module || i4), self.ModuleFactory = self.Module = void 0, new t4(i4, r4);
  })(t3, n3.wasmLoaderPath, n3.assetLoaderPath, e3, { locateFile: (t4) => t4.endsWith(".wasm") ? n3.wasmBinaryPath.toString() : n3.assetBinaryPath && t4.endsWith(".data") ? n3.assetBinaryPath.toString() : t4 }), await t3.o(r3), t3;
}
function Ko(t3, e3) {
  const n3 = pn(t3.baseOptions, Ss, 1) || new Ss();
  "string" == typeof e3 ? ($e(n3, 2, ne(e3)), $e(n3, 1)) : e3 instanceof Uint8Array && ($e(n3, 1, lt(e3, false, false)), $e(n3, 2)), yn(t3.baseOptions, 0, 1, n3);
}
function Yo(t3) {
  try {
    const e3 = t3.H.length;
    if (1 === e3) throw Error(t3.H[0].message);
    if (e3 > 1) throw Error("Encountered multiple errors: " + t3.H.map((t4) => t4.message).join(", "));
  } finally {
    t3.H = [];
  }
}
function $o(t3, e3) {
  t3.B = Math.max(t3.B, e3);
}
function qo(t3, e3) {
  t3.A = new Vi(), Bi(t3.A, "PassThroughCalculator"), Gi(t3.A, "free_memory"), ji(t3.A, "free_memory_unused_out"), Ki(e3, "free_memory"), zi(e3, t3.A);
}
function Jo(t3, e3) {
  Gi(t3.A, e3), ji(t3.A, e3 + "_unused_out");
}
function Zo(t3) {
  t3.g.addBoolToStream(true, "free_memory", t3.B);
}
var Qo = class {
  constructor(t3) {
    this.g = t3, this.H = [], this.B = 0, this.g.setAutoRenderToScreen(false);
  }
  l(t3, e3 = true) {
    if (e3) {
      const e4 = t3.baseOptions || {};
      if (t3.baseOptions?.modelAssetBuffer && t3.baseOptions?.modelAssetPath) throw Error("Cannot set both baseOptions.modelAssetPath and baseOptions.modelAssetBuffer");
      if (!(pn(this.baseOptions, Ss, 1)?.g() || pn(this.baseOptions, Ss, 1)?.h() || t3.baseOptions?.modelAssetBuffer || t3.baseOptions?.modelAssetPath)) throw Error("Either baseOptions.modelAssetPath or baseOptions.modelAssetBuffer must be set");
      if (function(t4, e5) {
        let n3 = pn(t4.baseOptions, bs, 3);
        if (!n3) {
          var r3 = n3 = new bs(), i4 = new Mi();
          _n(r3, 4, ks, i4);
        }
        "delegate" in e5 && ("GPU" === e5.delegate ? (e5 = n3, r3 = new Li(), _n(e5, 2, ks, r3)) : (e5 = n3, r3 = new Mi(), _n(e5, 4, ks, r3))), yn(t4.baseOptions, 0, 3, n3);
      }(this, e4), e4.modelAssetPath) return fetch(e4.modelAssetPath.toString()).then((t4) => {
        if (t4.ok) return t4.arrayBuffer();
        throw Error(`Failed to fetch model: ${e4.modelAssetPath} (${t4.status})`);
      }).then((t4) => {
        try {
          this.g.i.FS_unlink("/model.dat");
        } catch {
        }
        this.g.i.FS_createDataFile("/", "model.dat", new Uint8Array(t4), true, false, false), Ko(this, "/model.dat"), this.m(), this.J();
      });
      if (e4.modelAssetBuffer instanceof Uint8Array) Ko(this, e4.modelAssetBuffer);
      else if (e4.modelAssetBuffer) return async function(t4) {
        const e5 = [];
        for (var n3 = 0; ; ) {
          const { done: r3, value: i4 } = await t4.read();
          if (r3) break;
          e5.push(i4), n3 += i4.length;
        }
        if (0 === e5.length) return new Uint8Array(0);
        if (1 === e5.length) return e5[0];
        t4 = new Uint8Array(n3), n3 = 0;
        for (const r3 of e5) t4.set(r3, n3), n3 += r3.length;
        return t4;
      }(e4.modelAssetBuffer).then((t4) => {
        Ko(this, t4), this.m(), this.J();
      });
    }
    return this.m(), this.J(), Promise.resolve();
  }
  J() {
  }
  ga() {
    let t3;
    if (this.g.ga((e3) => {
      t3 = Ji(e3);
    }), !t3) throw Error("Failed to retrieve CalculatorGraphConfig");
    return t3;
  }
  setGraph(t3, e3) {
    this.g.attachErrorListener((t4, e4) => {
      this.H.push(Error(e4));
    }), this.g.Oa(), this.g.setGraph(t3, e3), this.A = void 0, Yo(this);
  }
  finishProcessing() {
    this.g.finishProcessing(), Yo(this);
  }
  close() {
    this.A = void 0, this.g.closeGraph();
  }
};
function ta(t3, e3) {
  if (!t3) throw Error(`Unable to obtain required WebGL resource: ${e3}`);
  return t3;
}
Qo.prototype.close = Qo.prototype.close, function(e3, n3) {
  e3 = e3.split(".");
  var r3, i4 = t;
  e3[0] in i4 || void 0 === i4.execScript || i4.execScript("var " + e3[0]);
  for (; e3.length && (r3 = e3.shift()); ) e3.length || void 0 === n3 ? i4 = i4[r3] && i4[r3] !== Object.prototype[r3] ? i4[r3] : i4[r3] = {} : i4[r3] = n3;
}("TaskRunner", Qo);
var ea = class {
  constructor(t3, e3, n3, r3) {
    this.g = t3, this.h = e3, this.m = n3, this.l = r3;
  }
  bind() {
    this.g.bindVertexArray(this.h);
  }
  close() {
    this.g.deleteVertexArray(this.h), this.g.deleteBuffer(this.m), this.g.deleteBuffer(this.l);
  }
};
function na(t3, e3, n3) {
  const r3 = t3.g;
  if (n3 = ta(r3.createShader(n3), "Failed to create WebGL shader"), r3.shaderSource(n3, e3), r3.compileShader(n3), !r3.getShaderParameter(n3, r3.COMPILE_STATUS)) throw Error(`Could not compile WebGL shader: ${r3.getShaderInfoLog(n3)}`);
  return r3.attachShader(t3.h, n3), n3;
}
function ra(t3, e3) {
  const n3 = t3.g, r3 = ta(n3.createVertexArray(), "Failed to create vertex array");
  n3.bindVertexArray(r3);
  const i4 = ta(n3.createBuffer(), "Failed to create buffer");
  n3.bindBuffer(n3.ARRAY_BUFFER, i4), n3.enableVertexAttribArray(t3.R), n3.vertexAttribPointer(t3.R, 2, n3.FLOAT, false, 0, 0), n3.bufferData(n3.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), n3.STATIC_DRAW);
  const s3 = ta(n3.createBuffer(), "Failed to create buffer");
  return n3.bindBuffer(n3.ARRAY_BUFFER, s3), n3.enableVertexAttribArray(t3.J), n3.vertexAttribPointer(t3.J, 2, n3.FLOAT, false, 0, 0), n3.bufferData(n3.ARRAY_BUFFER, new Float32Array(e3 ? [0, 1, 0, 0, 1, 0, 1, 1] : [0, 0, 0, 1, 1, 1, 1, 0]), n3.STATIC_DRAW), n3.bindBuffer(n3.ARRAY_BUFFER, null), n3.bindVertexArray(null), new ea(n3, r3, i4, s3);
}
function ia(t3, e3) {
  if (t3.g) {
    if (e3 !== t3.g) throw Error("Cannot change GL context once initialized");
  } else t3.g = e3;
}
function sa(t3, e3, n3, r3) {
  return ia(t3, e3), t3.h || (t3.m(), t3.C()), n3 ? (t3.s || (t3.s = ra(t3, true)), n3 = t3.s) : (t3.v || (t3.v = ra(t3, false)), n3 = t3.v), e3.useProgram(t3.h), n3.bind(), t3.l(), t3 = r3(), n3.g.bindVertexArray(null), t3;
}
function oa(t3, e3, n3) {
  return ia(t3, e3), t3 = ta(e3.createTexture(), "Failed to create texture"), e3.bindTexture(e3.TEXTURE_2D, t3), e3.texParameteri(e3.TEXTURE_2D, e3.TEXTURE_WRAP_S, e3.CLAMP_TO_EDGE), e3.texParameteri(e3.TEXTURE_2D, e3.TEXTURE_WRAP_T, e3.CLAMP_TO_EDGE), e3.texParameteri(e3.TEXTURE_2D, e3.TEXTURE_MIN_FILTER, n3 ?? e3.LINEAR), e3.texParameteri(e3.TEXTURE_2D, e3.TEXTURE_MAG_FILTER, n3 ?? e3.LINEAR), e3.bindTexture(e3.TEXTURE_2D, null), t3;
}
function aa(t3, e3, n3) {
  ia(t3, e3), t3.A || (t3.A = ta(e3.createFramebuffer(), "Failed to create framebuffe.")), e3.bindFramebuffer(e3.FRAMEBUFFER, t3.A), e3.framebufferTexture2D(e3.FRAMEBUFFER, e3.COLOR_ATTACHMENT0, e3.TEXTURE_2D, n3, 0);
}
function ha(t3) {
  t3.g?.bindFramebuffer(t3.g.FRAMEBUFFER, null);
}
var ca = class {
  H() {
    return "\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D inputTexture;\n  void main() {\n    gl_FragColor = texture2D(inputTexture, vTex);\n  }\n ";
  }
  m() {
    const t3 = this.g;
    if (this.h = ta(t3.createProgram(), "Failed to create WebGL program"), this.da = na(this, "\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }", t3.VERTEX_SHADER), this.ca = na(this, this.H(), t3.FRAGMENT_SHADER), t3.linkProgram(this.h), !t3.getProgramParameter(this.h, t3.LINK_STATUS)) throw Error(`Error during program linking: ${t3.getProgramInfoLog(this.h)}`);
    this.R = t3.getAttribLocation(this.h, "aVertex"), this.J = t3.getAttribLocation(this.h, "aTex");
  }
  C() {
  }
  l() {
  }
  close() {
    if (this.h) {
      const t3 = this.g;
      t3.deleteProgram(this.h), t3.deleteShader(this.da), t3.deleteShader(this.ca);
    }
    this.A && this.g.deleteFramebuffer(this.A), this.v && this.v.close(), this.s && this.s.close();
  }
};
var ua = class extends ca {
  H() {
    return "\n  precision mediump float;\n  uniform sampler2D backgroundTexture;\n  uniform sampler2D maskTexture;\n  uniform sampler2D colorMappingTexture;\n  varying vec2 vTex;\n  void main() {\n    vec4 backgroundColor = texture2D(backgroundTexture, vTex);\n    float category = texture2D(maskTexture, vTex).r;\n    vec4 categoryColor = texture2D(colorMappingTexture, vec2(category, 0.0));\n    gl_FragColor = mix(backgroundColor, categoryColor, categoryColor.a);\n  }\n ";
  }
  C() {
    const t3 = this.g;
    t3.activeTexture(t3.TEXTURE1), this.B = oa(this, t3, t3.LINEAR), t3.activeTexture(t3.TEXTURE2), this.j = oa(this, t3, t3.NEAREST);
  }
  m() {
    super.m();
    const t3 = this.g;
    this.L = ta(t3.getUniformLocation(this.h, "backgroundTexture"), "Uniform location"), this.V = ta(t3.getUniformLocation(this.h, "colorMappingTexture"), "Uniform location"), this.K = ta(t3.getUniformLocation(this.h, "maskTexture"), "Uniform location");
  }
  l() {
    super.l();
    const t3 = this.g;
    t3.uniform1i(this.K, 0), t3.uniform1i(this.L, 1), t3.uniform1i(this.V, 2);
  }
  close() {
    this.B && this.g.deleteTexture(this.B), this.j && this.g.deleteTexture(this.j), super.close();
  }
};
var la = class extends ca {
  H() {
    return "\n  precision mediump float;\n  uniform sampler2D maskTexture;\n  uniform sampler2D defaultTexture;\n  uniform sampler2D overlayTexture;\n  varying vec2 vTex;\n  void main() {\n    float confidence = texture2D(maskTexture, vTex).r;\n    vec4 defaultColor = texture2D(defaultTexture, vTex);\n    vec4 overlayColor = texture2D(overlayTexture, vTex);\n    // Apply the alpha from the overlay and merge in the default color\n    overlayColor = mix(defaultColor, overlayColor, overlayColor.a);\n    gl_FragColor = mix(defaultColor, overlayColor, confidence);\n  }\n ";
  }
  C() {
    const t3 = this.g;
    t3.activeTexture(t3.TEXTURE1), this.j = oa(this, t3), t3.activeTexture(t3.TEXTURE2), this.B = oa(this, t3);
  }
  m() {
    super.m();
    const t3 = this.g;
    this.K = ta(t3.getUniformLocation(this.h, "defaultTexture"), "Uniform location"), this.L = ta(t3.getUniformLocation(this.h, "overlayTexture"), "Uniform location"), this.I = ta(t3.getUniformLocation(this.h, "maskTexture"), "Uniform location");
  }
  l() {
    super.l();
    const t3 = this.g;
    t3.uniform1i(this.I, 0), t3.uniform1i(this.K, 1), t3.uniform1i(this.L, 2);
  }
  close() {
    this.j && this.g.deleteTexture(this.j), this.B && this.g.deleteTexture(this.B), super.close();
  }
};
function fa(t3, e3) {
  switch (e3) {
    case 0:
      return t3.g.find((t4) => t4 instanceof Uint8Array);
    case 1:
      return t3.g.find((t4) => t4 instanceof Float32Array);
    case 2:
      return t3.g.find((t4) => "undefined" != typeof WebGLTexture && t4 instanceof WebGLTexture);
    default:
      throw Error(`Type is not supported: ${e3}`);
  }
}
function da(t3) {
  var e3 = fa(t3, 1);
  if (!e3) {
    if (e3 = fa(t3, 0)) e3 = new Float32Array(e3).map((t4) => t4 / 255);
    else {
      e3 = new Float32Array(t3.width * t3.height);
      const r3 = ga(t3);
      var n3 = ya(t3);
      if (aa(n3, r3, pa(t3)), "iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in self.document) {
        n3 = new Float32Array(t3.width * t3.height * 4), r3.readPixels(0, 0, t3.width, t3.height, r3.RGBA, r3.FLOAT, n3);
        for (let t4 = 0, r4 = 0; t4 < e3.length; ++t4, r4 += 4) e3[t4] = n3[r4];
      } else r3.readPixels(0, 0, t3.width, t3.height, r3.RED, r3.FLOAT, e3);
    }
    t3.g.push(e3);
  }
  return e3;
}
function pa(t3) {
  let e3 = fa(t3, 2);
  if (!e3) {
    const n3 = ga(t3);
    e3 = _a2(t3);
    const r3 = da(t3), i4 = ma(t3);
    n3.texImage2D(n3.TEXTURE_2D, 0, i4, t3.width, t3.height, 0, n3.RED, n3.FLOAT, r3), va(t3);
  }
  return e3;
}
function ga(t3) {
  if (!t3.canvas) throw Error("Conversion to different image formats require that a canvas is passed when initializing the image.");
  return t3.h || (t3.h = ta(t3.canvas.getContext("webgl2"), "You cannot use a canvas that is already bound to a different type of rendering context.")), t3.h;
}
function ma(t3) {
  if (t3 = ga(t3), !Ea) if (t3.getExtension("EXT_color_buffer_float") && t3.getExtension("OES_texture_float_linear") && t3.getExtension("EXT_float_blend")) Ea = t3.R32F;
  else {
    if (!t3.getExtension("EXT_color_buffer_half_float")) throw Error("GPU does not fully support 4-channel float32 or float16 formats");
    Ea = t3.R16F;
  }
  return Ea;
}
function ya(t3) {
  return t3.l || (t3.l = new ca()), t3.l;
}
function _a2(t3) {
  const e3 = ga(t3);
  e3.viewport(0, 0, t3.width, t3.height), e3.activeTexture(e3.TEXTURE0);
  let n3 = fa(t3, 2);
  return n3 || (n3 = oa(ya(t3), e3, t3.m ? e3.LINEAR : e3.NEAREST), t3.g.push(n3), t3.j = true), e3.bindTexture(e3.TEXTURE_2D, n3), n3;
}
function va(t3) {
  t3.h.bindTexture(t3.h.TEXTURE_2D, null);
}
var Ea;
var wa = class {
  constructor(t3, e3, n3, r3, i4, s3, o3) {
    this.g = t3, this.m = e3, this.j = n3, this.canvas = r3, this.l = i4, this.width = s3, this.height = o3, this.j && (0 === --Ta && console.error("You seem to be creating MPMask instances without invoking .close(). This leaks resources."));
  }
  Ja() {
    return !!fa(this, 0);
  }
  ma() {
    return !!fa(this, 1);
  }
  S() {
    return !!fa(this, 2);
  }
  la() {
    return (e3 = fa(t3 = this, 0)) || (e3 = da(t3), e3 = new Uint8Array(e3.map((t4) => 255 * t4)), t3.g.push(e3)), e3;
    var t3, e3;
  }
  ka() {
    return da(this);
  }
  N() {
    return pa(this);
  }
  clone() {
    const t3 = [];
    for (const e3 of this.g) {
      let n3;
      if (e3 instanceof Uint8Array) n3 = new Uint8Array(e3);
      else if (e3 instanceof Float32Array) n3 = new Float32Array(e3);
      else {
        if (!(e3 instanceof WebGLTexture)) throw Error(`Type is not supported: ${e3}`);
        {
          const t4 = ga(this), e4 = ya(this);
          t4.activeTexture(t4.TEXTURE1), n3 = oa(e4, t4, this.m ? t4.LINEAR : t4.NEAREST), t4.bindTexture(t4.TEXTURE_2D, n3);
          const r3 = ma(this);
          t4.texImage2D(t4.TEXTURE_2D, 0, r3, this.width, this.height, 0, t4.RED, t4.FLOAT, null), t4.bindTexture(t4.TEXTURE_2D, null), aa(e4, t4, n3), sa(e4, t4, false, () => {
            _a2(this), t4.clearColor(0, 0, 0, 0), t4.clear(t4.COLOR_BUFFER_BIT), t4.drawArrays(t4.TRIANGLE_FAN, 0, 4), va(this);
          }), ha(e4), va(this);
        }
      }
      t3.push(n3);
    }
    return new wa(t3, this.m, this.S(), this.canvas, this.l, this.width, this.height);
  }
  close() {
    this.j && ga(this).deleteTexture(fa(this, 2)), Ta = -1;
  }
};
wa.prototype.close = wa.prototype.close, wa.prototype.clone = wa.prototype.clone, wa.prototype.getAsWebGLTexture = wa.prototype.N, wa.prototype.getAsFloat32Array = wa.prototype.ka, wa.prototype.getAsUint8Array = wa.prototype.la, wa.prototype.hasWebGLTexture = wa.prototype.S, wa.prototype.hasFloat32Array = wa.prototype.ma, wa.prototype.hasUint8Array = wa.prototype.Ja;
var Ta = 250;
var Aa = { color: "white", lineWidth: 4, radius: 6 };
function ba(t3) {
  return { ...Aa, fillColor: (t3 = t3 || {}).color, ...t3 };
}
function ka(t3, e3) {
  return t3 instanceof Function ? t3(e3) : t3;
}
function Sa(t3, e3, n3) {
  return Math.max(Math.min(e3, n3), Math.min(Math.max(e3, n3), t3));
}
function xa(t3) {
  if (!t3.l) throw Error("CPU rendering requested but CanvasRenderingContext2D not provided.");
  return t3.l;
}
function La(t3) {
  if (!t3.j) throw Error("GPU rendering requested but WebGL2RenderingContext not provided.");
  return t3.j;
}
function Ra(t3, e3, n3) {
  if (e3.S()) n3(e3.N());
  else {
    const r3 = e3.ma() ? e3.ka() : e3.la();
    t3.m = t3.m ?? new ca();
    const i4 = La(t3);
    n3((t3 = new wa([r3], e3.m, false, i4.canvas, t3.m, e3.width, e3.height)).N()), t3.close();
  }
}
function Fa(t3, e3, n3, r3) {
  const i4 = function(t4) {
    return t4.g || (t4.g = new ua()), t4.g;
  }(t3), s3 = La(t3), o3 = Array.isArray(n3) ? new ImageData(new Uint8ClampedArray(n3), 1, 1) : n3;
  sa(i4, s3, true, () => {
    !function(t5, e4, n4, r4) {
      const i5 = t5.g;
      if (i5.activeTexture(i5.TEXTURE0), i5.bindTexture(i5.TEXTURE_2D, e4), i5.activeTexture(i5.TEXTURE1), i5.bindTexture(i5.TEXTURE_2D, t5.B), i5.texImage2D(i5.TEXTURE_2D, 0, i5.RGBA, i5.RGBA, i5.UNSIGNED_BYTE, n4), t5.I && function(t6, e5) {
        if (t6 !== e5) return false;
        t6 = t6.entries(), e5 = e5.entries();
        for (const [r5, i6] of t6) {
          t6 = r5;
          const s4 = i6;
          var n5 = e5.next();
          if (n5.done) return false;
          const [o4, a6] = n5.value;
          if (n5 = a6, t6 !== o4 || s4[0] !== n5[0] || s4[1] !== n5[1] || s4[2] !== n5[2] || s4[3] !== n5[3]) return false;
        }
        return !!e5.next().done;
      }(t5.I, r4)) i5.activeTexture(i5.TEXTURE2), i5.bindTexture(i5.TEXTURE_2D, t5.j);
      else {
        t5.I = r4;
        const e5 = Array(1024).fill(0);
        r4.forEach((t6, n5) => {
          if (4 !== t6.length) throw Error(`Color at index ${n5} is not a four-channel value.`);
          e5[4 * n5] = t6[0], e5[4 * n5 + 1] = t6[1], e5[4 * n5 + 2] = t6[2], e5[4 * n5 + 3] = t6[3];
        }), i5.activeTexture(i5.TEXTURE2), i5.bindTexture(i5.TEXTURE_2D, t5.j), i5.texImage2D(i5.TEXTURE_2D, 0, i5.RGBA, 256, 1, 0, i5.RGBA, i5.UNSIGNED_BYTE, new Uint8Array(e5));
      }
    }(i4, e3, o3, r3), s3.clearColor(0, 0, 0, 0), s3.clear(s3.COLOR_BUFFER_BIT), s3.drawArrays(s3.TRIANGLE_FAN, 0, 4);
    const t4 = i4.g;
    t4.activeTexture(t4.TEXTURE0), t4.bindTexture(t4.TEXTURE_2D, null), t4.activeTexture(t4.TEXTURE1), t4.bindTexture(t4.TEXTURE_2D, null), t4.activeTexture(t4.TEXTURE2), t4.bindTexture(t4.TEXTURE_2D, null);
  });
}
function Ma(t3, e3, n3, r3) {
  const i4 = La(t3), s3 = function(t4) {
    return t4.h || (t4.h = new la()), t4.h;
  }(t3), o3 = Array.isArray(n3) ? new ImageData(new Uint8ClampedArray(n3), 1, 1) : n3, a6 = Array.isArray(r3) ? new ImageData(new Uint8ClampedArray(r3), 1, 1) : r3;
  sa(s3, i4, true, () => {
    var t4 = s3.g;
    t4.activeTexture(t4.TEXTURE0), t4.bindTexture(t4.TEXTURE_2D, e3), t4.activeTexture(t4.TEXTURE1), t4.bindTexture(t4.TEXTURE_2D, s3.j), t4.texImage2D(t4.TEXTURE_2D, 0, t4.RGBA, t4.RGBA, t4.UNSIGNED_BYTE, o3), t4.activeTexture(t4.TEXTURE2), t4.bindTexture(t4.TEXTURE_2D, s3.B), t4.texImage2D(t4.TEXTURE_2D, 0, t4.RGBA, t4.RGBA, t4.UNSIGNED_BYTE, a6), i4.clearColor(0, 0, 0, 0), i4.clear(i4.COLOR_BUFFER_BIT), i4.drawArrays(i4.TRIANGLE_FAN, 0, 4), i4.bindTexture(i4.TEXTURE_2D, null), (t4 = s3.g).activeTexture(t4.TEXTURE0), t4.bindTexture(t4.TEXTURE_2D, null), t4.activeTexture(t4.TEXTURE1), t4.bindTexture(t4.TEXTURE_2D, null), t4.activeTexture(t4.TEXTURE2), t4.bindTexture(t4.TEXTURE_2D, null);
  });
}
var Ia = class {
  constructor(t3, e3) {
    t3 instanceof CanvasRenderingContext2D || t3 instanceof OffscreenCanvasRenderingContext2D ? (this.l = t3, this.j = e3) : this.j = t3;
  }
  Ca(t3, e3) {
    if (t3) {
      var n3 = xa(this);
      e3 = ba(e3), n3.save();
      var r3 = n3.canvas, i4 = 0;
      for (const s3 of t3) n3.fillStyle = ka(e3.fillColor, { index: i4, from: s3 }), n3.strokeStyle = ka(e3.color, { index: i4, from: s3 }), n3.lineWidth = ka(e3.lineWidth, { index: i4, from: s3 }), (t3 = new Path2D()).arc(s3.x * r3.width, s3.y * r3.height, ka(e3.radius, { index: i4, from: s3 }), 0, 2 * Math.PI), n3.fill(t3), n3.stroke(t3), ++i4;
      n3.restore();
    }
  }
  Ba(t3, e3, n3) {
    if (t3 && e3) {
      var r3 = xa(this);
      n3 = ba(n3), r3.save();
      var i4 = r3.canvas, s3 = 0;
      for (const o3 of e3) {
        r3.beginPath(), e3 = t3[o3.start];
        const a6 = t3[o3.end];
        e3 && a6 && (r3.strokeStyle = ka(n3.color, { index: s3, from: e3, to: a6 }), r3.lineWidth = ka(n3.lineWidth, { index: s3, from: e3, to: a6 }), r3.moveTo(e3.x * i4.width, e3.y * i4.height), r3.lineTo(a6.x * i4.width, a6.y * i4.height)), ++s3, r3.stroke();
      }
      r3.restore();
    }
  }
  ya(t3, e3) {
    const n3 = xa(this);
    e3 = ba(e3), n3.save(), n3.beginPath(), n3.lineWidth = ka(e3.lineWidth, {}), n3.strokeStyle = ka(e3.color, {}), n3.fillStyle = ka(e3.fillColor, {}), n3.moveTo(t3.originX, t3.originY), n3.lineTo(t3.originX + t3.width, t3.originY), n3.lineTo(t3.originX + t3.width, t3.originY + t3.height), n3.lineTo(t3.originX, t3.originY + t3.height), n3.lineTo(t3.originX, t3.originY), n3.stroke(), n3.fill(), n3.restore();
  }
  za(t3, e3, n3 = [0, 0, 0, 255]) {
    this.l ? function(t4, e4, n4, r3) {
      const i4 = La(t4);
      Ra(t4, e4, (e5) => {
        Fa(t4, e5, n4, r3), (e5 = xa(t4)).drawImage(i4.canvas, 0, 0, e5.canvas.width, e5.canvas.height);
      });
    }(this, t3, n3, e3) : Fa(this, t3.N(), n3, e3);
  }
  Aa(t3, e3, n3) {
    this.l ? function(t4, e4, n4, r3) {
      const i4 = La(t4);
      Ra(t4, e4, (e5) => {
        Ma(t4, e5, n4, r3), (e5 = xa(t4)).drawImage(i4.canvas, 0, 0, e5.canvas.width, e5.canvas.height);
      });
    }(this, t3, e3, n3) : Ma(this, t3.N(), e3, n3);
  }
  close() {
    this.g?.close(), this.g = void 0, this.h?.close(), this.h = void 0, this.m?.close(), this.m = void 0;
  }
};
function Pa(t3, e3) {
  switch (e3) {
    case 0:
      return t3.g.find((t4) => t4 instanceof ImageData);
    case 1:
      return t3.g.find((t4) => "undefined" != typeof ImageBitmap && t4 instanceof ImageBitmap);
    case 2:
      return t3.g.find((t4) => "undefined" != typeof WebGLTexture && t4 instanceof WebGLTexture);
    default:
      throw Error(`Type is not supported: ${e3}`);
  }
}
function Oa(t3) {
  var e3 = Pa(t3, 0);
  if (!e3) {
    e3 = Na(t3);
    const n3 = Ua(t3), r3 = new Uint8Array(t3.width * t3.height * 4);
    aa(n3, e3, Ca(t3)), e3.readPixels(0, 0, t3.width, t3.height, e3.RGBA, e3.UNSIGNED_BYTE, r3), ha(n3), e3 = new ImageData(new Uint8ClampedArray(r3.buffer), t3.width, t3.height), t3.g.push(e3);
  }
  return e3;
}
function Ca(t3) {
  let e3 = Pa(t3, 2);
  if (!e3) {
    const n3 = Na(t3);
    e3 = Da(t3);
    const r3 = Pa(t3, 1) || Oa(t3);
    n3.texImage2D(n3.TEXTURE_2D, 0, n3.RGBA, n3.RGBA, n3.UNSIGNED_BYTE, r3), Ba(t3);
  }
  return e3;
}
function Na(t3) {
  if (!t3.canvas) throw Error("Conversion to different image formats require that a canvas is passed when iniitializing the image.");
  return t3.h || (t3.h = ta(t3.canvas.getContext("webgl2"), "You cannot use a canvas that is already bound to a different type of rendering context.")), t3.h;
}
function Ua(t3) {
  return t3.l || (t3.l = new ca()), t3.l;
}
function Da(t3) {
  const e3 = Na(t3);
  e3.viewport(0, 0, t3.width, t3.height), e3.activeTexture(e3.TEXTURE0);
  let n3 = Pa(t3, 2);
  return n3 || (n3 = oa(Ua(t3), e3), t3.g.push(n3), t3.m = true), e3.bindTexture(e3.TEXTURE_2D, n3), n3;
}
function Ba(t3) {
  t3.h.bindTexture(t3.h.TEXTURE_2D, null);
}
function Ga(t3) {
  const e3 = Na(t3);
  return sa(Ua(t3), e3, true, () => function(t4, e4) {
    const n3 = t4.canvas;
    if (n3.width === t4.width && n3.height === t4.height) return e4();
    const r3 = n3.width, i4 = n3.height;
    return n3.width = t4.width, n3.height = t4.height, t4 = e4(), n3.width = r3, n3.height = i4, t4;
  }(t3, () => {
    if (e3.bindFramebuffer(e3.FRAMEBUFFER, null), e3.clearColor(0, 0, 0, 0), e3.clear(e3.COLOR_BUFFER_BIT), e3.drawArrays(e3.TRIANGLE_FAN, 0, 4), !(t3.canvas instanceof OffscreenCanvas)) throw Error("Conversion to ImageBitmap requires that the MediaPipe Tasks is initialized with an OffscreenCanvas");
    return t3.canvas.transferToImageBitmap();
  }));
}
Ia.prototype.close = Ia.prototype.close, Ia.prototype.drawConfidenceMask = Ia.prototype.Aa, Ia.prototype.drawCategoryMask = Ia.prototype.za, Ia.prototype.drawBoundingBox = Ia.prototype.ya, Ia.prototype.drawConnectors = Ia.prototype.Ba, Ia.prototype.drawLandmarks = Ia.prototype.Ca, Ia.lerp = function(t3, e3, n3, r3, i4) {
  return Sa(r3 * (1 - (t3 - e3) / (n3 - e3)) + i4 * (1 - (n3 - t3) / (n3 - e3)), r3, i4);
}, Ia.clamp = Sa;
var ja = class {
  constructor(t3, e3, n3, r3, i4, s3, o3) {
    this.g = t3, this.j = e3, this.m = n3, this.canvas = r3, this.l = i4, this.width = s3, this.height = o3, (this.j || this.m) && (0 === --Va && console.error("You seem to be creating MPImage instances without invoking .close(). This leaks resources."));
  }
  Ia() {
    return !!Pa(this, 0);
  }
  na() {
    return !!Pa(this, 1);
  }
  S() {
    return !!Pa(this, 2);
  }
  Ga() {
    return Oa(this);
  }
  Fa() {
    var t3 = Pa(this, 1);
    return t3 || (Ca(this), Da(this), t3 = Ga(this), Ba(this), this.g.push(t3), this.j = true), t3;
  }
  N() {
    return Ca(this);
  }
  clone() {
    const t3 = [];
    for (const e3 of this.g) {
      let n3;
      if (e3 instanceof ImageData) n3 = new ImageData(e3.data, this.width, this.height);
      else if (e3 instanceof WebGLTexture) {
        const t4 = Na(this), e4 = Ua(this);
        t4.activeTexture(t4.TEXTURE1), n3 = oa(e4, t4), t4.bindTexture(t4.TEXTURE_2D, n3), t4.texImage2D(t4.TEXTURE_2D, 0, t4.RGBA, this.width, this.height, 0, t4.RGBA, t4.UNSIGNED_BYTE, null), t4.bindTexture(t4.TEXTURE_2D, null), aa(e4, t4, n3), sa(e4, t4, false, () => {
          Da(this), t4.clearColor(0, 0, 0, 0), t4.clear(t4.COLOR_BUFFER_BIT), t4.drawArrays(t4.TRIANGLE_FAN, 0, 4), Ba(this);
        }), ha(e4), Ba(this);
      } else {
        if (!(e3 instanceof ImageBitmap)) throw Error(`Type is not supported: ${e3}`);
        Ca(this), Da(this), n3 = Ga(this), Ba(this);
      }
      t3.push(n3);
    }
    return new ja(t3, this.na(), this.S(), this.canvas, this.l, this.width, this.height);
  }
  close() {
    this.j && Pa(this, 1).close(), this.m && Na(this).deleteTexture(Pa(this, 2)), Va = -1;
  }
};
ja.prototype.close = ja.prototype.close, ja.prototype.clone = ja.prototype.clone, ja.prototype.getAsWebGLTexture = ja.prototype.N, ja.prototype.getAsImageBitmap = ja.prototype.Fa, ja.prototype.getAsImageData = ja.prototype.Ga, ja.prototype.hasWebGLTexture = ja.prototype.S, ja.prototype.hasImageBitmap = ja.prototype.na, ja.prototype.hasImageData = ja.prototype.Ia;
var Va = 250;
function Xa(...t3) {
  return t3.map(([t4, e3]) => ({ start: t4, end: e3 }));
}
var Ha = /* @__PURE__ */ function(t3) {
  return class extends t3 {
    Oa() {
      this.i._registerModelResourcesGraphService();
    }
  };
}((Wa = class {
  constructor(t3, e3) {
    this.l = true, this.i = t3, this.g = null, this.h = 0, this.m = "function" == typeof this.i._addIntToInputStream, void 0 !== e3 ? this.i.canvas = e3 : Do() ? this.i.canvas = new OffscreenCanvas(1, 1) : (console.warn("OffscreenCanvas not supported and GraphRunner constructor glCanvas parameter is undefined. Creating backup canvas."), this.i.canvas = document.createElement("canvas"));
  }
  async initializeGraph(t3) {
    const e3 = await (await fetch(t3)).arrayBuffer();
    t3 = !(t3.endsWith(".pbtxt") || t3.endsWith(".textproto")), this.setGraph(new Uint8Array(e3), t3);
  }
  setGraphFromString(t3) {
    this.setGraph(new TextEncoder().encode(t3), false);
  }
  setGraph(t3, e3) {
    const n3 = t3.length, r3 = this.i._malloc(n3);
    this.i.HEAPU8.set(t3, r3), e3 ? this.i._changeBinaryGraph(n3, r3) : this.i._changeTextGraph(n3, r3), this.i._free(r3);
  }
  configureAudio(t3, e3, n3, r3, i4) {
    this.i._configureAudio || console.warn('Attempting to use configureAudio without support for input audio. Is build dep ":gl_graph_runner_audio" missing?'), jo(this, r3 || "input_audio", (r4) => {
      jo(this, i4 = i4 || "audio_header", (i5) => {
        this.i._configureAudio(r4, i5, t3, e3, n3);
      });
    });
  }
  setAutoResizeCanvas(t3) {
    this.l = t3;
  }
  setAutoRenderToScreen(t3) {
    this.i._setAutoRenderToScreen(t3);
  }
  setGpuBufferVerticalFlip(t3) {
    this.i.gpuOriginForWebTexturesIsBottomLeft = t3;
  }
  ga(t3) {
    Ho(this, "__graph_config__", (e3) => {
      t3(e3);
    }), jo(this, "__graph_config__", (t4) => {
      this.i._getGraphConfig(t4, void 0);
    }), delete this.i.simpleListeners.__graph_config__;
  }
  attachErrorListener(t3) {
    this.i.errorListener = t3;
  }
  attachEmptyPacketListener(t3, e3) {
    this.i.emptyPacketListeners = this.i.emptyPacketListeners || {}, this.i.emptyPacketListeners[t3] = e3;
  }
  addAudioToStream(t3, e3, n3) {
    this.addAudioToStreamWithShape(t3, 0, 0, e3, n3);
  }
  addAudioToStreamWithShape(t3, e3, n3, r3, i4) {
    const s3 = 4 * t3.length;
    this.h !== s3 && (this.g && this.i._free(this.g), this.g = this.i._malloc(s3), this.h = s3), this.i.HEAPF32.set(t3, this.g / 4), jo(this, r3, (t4) => {
      this.i._addAudioToInputStream(this.g, e3, n3, t4, i4);
    });
  }
  addGpuBufferToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      const [r3, i4] = Vo(this, t3, e4);
      this.i._addBoundTextureToStream(e4, r3, i4, n3);
    });
  }
  addBoolToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      this.i._addBoolToInputStream(t3, e4, n3);
    });
  }
  addDoubleToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      this.i._addDoubleToInputStream(t3, e4, n3);
    });
  }
  addFloatToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      this.i._addFloatToInputStream(t3, e4, n3);
    });
  }
  addIntToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      this.i._addIntToInputStream(t3, e4, n3);
    });
  }
  addUintToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      this.i._addUintToInputStream(t3, e4, n3);
    });
  }
  addStringToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      jo(this, t3, (t4) => {
        this.i._addStringToInputStream(t4, e4, n3);
      });
    });
  }
  addStringRecordToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      Xo(this, Object.keys(t3), (r3) => {
        Xo(this, Object.values(t3), (i4) => {
          this.i._addFlatHashMapToInputStream(r3, i4, Object.keys(t3).length, e4, n3);
        });
      });
    });
  }
  addProtoToStream(t3, e3, n3, r3) {
    jo(this, n3, (n4) => {
      jo(this, e3, (e4) => {
        const i4 = this.i._malloc(t3.length);
        this.i.HEAPU8.set(t3, i4), this.i._addProtoToInputStream(i4, t3.length, e4, n4, r3), this.i._free(i4);
      });
    });
  }
  addEmptyPacketToStream(t3, e3) {
    jo(this, t3, (t4) => {
      this.i._addEmptyPacketToInputStream(t4, e3);
    });
  }
  addBoolVectorToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      const r3 = this.i._allocateBoolVector(t3.length);
      if (!r3) throw Error("Unable to allocate new bool vector on heap.");
      for (const e5 of t3) this.i._addBoolVectorEntry(r3, e5);
      this.i._addBoolVectorToInputStream(r3, e4, n3);
    });
  }
  addDoubleVectorToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      const r3 = this.i._allocateDoubleVector(t3.length);
      if (!r3) throw Error("Unable to allocate new double vector on heap.");
      for (const e5 of t3) this.i._addDoubleVectorEntry(r3, e5);
      this.i._addDoubleVectorToInputStream(r3, e4, n3);
    });
  }
  addFloatVectorToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      const r3 = this.i._allocateFloatVector(t3.length);
      if (!r3) throw Error("Unable to allocate new float vector on heap.");
      for (const e5 of t3) this.i._addFloatVectorEntry(r3, e5);
      this.i._addFloatVectorToInputStream(r3, e4, n3);
    });
  }
  addIntVectorToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      const r3 = this.i._allocateIntVector(t3.length);
      if (!r3) throw Error("Unable to allocate new int vector on heap.");
      for (const e5 of t3) this.i._addIntVectorEntry(r3, e5);
      this.i._addIntVectorToInputStream(r3, e4, n3);
    });
  }
  addUintVectorToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      const r3 = this.i._allocateUintVector(t3.length);
      if (!r3) throw Error("Unable to allocate new unsigned int vector on heap.");
      for (const e5 of t3) this.i._addUintVectorEntry(r3, e5);
      this.i._addUintVectorToInputStream(r3, e4, n3);
    });
  }
  addStringVectorToStream(t3, e3, n3) {
    jo(this, e3, (e4) => {
      const r3 = this.i._allocateStringVector(t3.length);
      if (!r3) throw Error("Unable to allocate new string vector on heap.");
      for (const e5 of t3) jo(this, e5, (t4) => {
        this.i._addStringVectorEntry(r3, t4);
      });
      this.i._addStringVectorToInputStream(r3, e4, n3);
    });
  }
  addBoolToInputSidePacket(t3, e3) {
    jo(this, e3, (e4) => {
      this.i._addBoolToInputSidePacket(t3, e4);
    });
  }
  addDoubleToInputSidePacket(t3, e3) {
    jo(this, e3, (e4) => {
      this.i._addDoubleToInputSidePacket(t3, e4);
    });
  }
  addFloatToInputSidePacket(t3, e3) {
    jo(this, e3, (e4) => {
      this.i._addFloatToInputSidePacket(t3, e4);
    });
  }
  addIntToInputSidePacket(t3, e3) {
    jo(this, e3, (e4) => {
      this.i._addIntToInputSidePacket(t3, e4);
    });
  }
  addUintToInputSidePacket(t3, e3) {
    jo(this, e3, (e4) => {
      this.i._addUintToInputSidePacket(t3, e4);
    });
  }
  addStringToInputSidePacket(t3, e3) {
    jo(this, e3, (e4) => {
      jo(this, t3, (t4) => {
        this.i._addStringToInputSidePacket(t4, e4);
      });
    });
  }
  addProtoToInputSidePacket(t3, e3, n3) {
    jo(this, n3, (n4) => {
      jo(this, e3, (e4) => {
        const r3 = this.i._malloc(t3.length);
        this.i.HEAPU8.set(t3, r3), this.i._addProtoToInputSidePacket(r3, t3.length, e4, n4), this.i._free(r3);
      });
    });
  }
  addBoolVectorToInputSidePacket(t3, e3) {
    jo(this, e3, (e4) => {
      const n3 = this.i._allocateBoolVector(t3.length);
      if (!n3) throw Error("Unable to allocate new bool vector on heap.");
      for (const e5 of t3) this.i._addBoolVectorEntry(n3, e5);
      this.i._addBoolVectorToInputSidePacket(n3, e4);
    });
  }
  addDoubleVectorToInputSidePacket(t3, e3) {
    jo(this, e3, (e4) => {
      const n3 = this.i._allocateDoubleVector(t3.length);
      if (!n3) throw Error("Unable to allocate new double vector on heap.");
      for (const e5 of t3) this.i._addDoubleVectorEntry(n3, e5);
      this.i._addDoubleVectorToInputSidePacket(n3, e4);
    });
  }
  addFloatVectorToInputSidePacket(t3, e3) {
    jo(this, e3, (e4) => {
      const n3 = this.i._allocateFloatVector(t3.length);
      if (!n3) throw Error("Unable to allocate new float vector on heap.");
      for (const e5 of t3) this.i._addFloatVectorEntry(n3, e5);
      this.i._addFloatVectorToInputSidePacket(n3, e4);
    });
  }
  addIntVectorToInputSidePacket(t3, e3) {
    jo(this, e3, (e4) => {
      const n3 = this.i._allocateIntVector(t3.length);
      if (!n3) throw Error("Unable to allocate new int vector on heap.");
      for (const e5 of t3) this.i._addIntVectorEntry(n3, e5);
      this.i._addIntVectorToInputSidePacket(n3, e4);
    });
  }
  addUintVectorToInputSidePacket(t3, e3) {
    jo(this, e3, (e4) => {
      const n3 = this.i._allocateUintVector(t3.length);
      if (!n3) throw Error("Unable to allocate new unsigned int vector on heap.");
      for (const e5 of t3) this.i._addUintVectorEntry(n3, e5);
      this.i._addUintVectorToInputSidePacket(n3, e4);
    });
  }
  addStringVectorToInputSidePacket(t3, e3) {
    jo(this, e3, (e4) => {
      const n3 = this.i._allocateStringVector(t3.length);
      if (!n3) throw Error("Unable to allocate new string vector on heap.");
      for (const e5 of t3) jo(this, e5, (t4) => {
        this.i._addStringVectorEntry(n3, t4);
      });
      this.i._addStringVectorToInputSidePacket(n3, e4);
    });
  }
  attachBoolListener(t3, e3) {
    Ho(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachBoolListener(t4);
    });
  }
  attachBoolVectorListener(t3, e3) {
    Wo(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachBoolVectorListener(t4);
    });
  }
  attachIntListener(t3, e3) {
    Ho(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachIntListener(t4);
    });
  }
  attachIntVectorListener(t3, e3) {
    Wo(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachIntVectorListener(t4);
    });
  }
  attachUintListener(t3, e3) {
    Ho(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachUintListener(t4);
    });
  }
  attachUintVectorListener(t3, e3) {
    Wo(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachUintVectorListener(t4);
    });
  }
  attachDoubleListener(t3, e3) {
    Ho(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachDoubleListener(t4);
    });
  }
  attachDoubleVectorListener(t3, e3) {
    Wo(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachDoubleVectorListener(t4);
    });
  }
  attachFloatListener(t3, e3) {
    Ho(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachFloatListener(t4);
    });
  }
  attachFloatVectorListener(t3, e3) {
    Wo(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachFloatVectorListener(t4);
    });
  }
  attachStringListener(t3, e3) {
    Ho(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachStringListener(t4);
    });
  }
  attachStringVectorListener(t3, e3) {
    Wo(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachStringVectorListener(t4);
    });
  }
  attachProtoListener(t3, e3, n3) {
    Ho(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachProtoListener(t4, n3 || false);
    });
  }
  attachProtoVectorListener(t3, e3, n3) {
    Wo(this, t3, e3), jo(this, t3, (t4) => {
      this.i._attachProtoVectorListener(t4, n3 || false);
    });
  }
  attachAudioListener(t3, e3, n3) {
    this.i._attachAudioListener || console.warn('Attempting to use attachAudioListener without support for output audio. Is build dep ":gl_graph_runner_audio_out" missing?'), Ho(this, t3, (t4, n4) => {
      t4 = new Float32Array(t4.buffer, t4.byteOffset, t4.length / 4), e3(t4, n4);
    }), jo(this, t3, (t4) => {
      this.i._attachAudioListener(t4, n3 || false);
    });
  }
  finishProcessing() {
    this.i._waitUntilIdle();
  }
  closeGraph() {
    this.i._closeGraph(), this.i.simpleListeners = void 0, this.i.emptyPacketListeners = void 0;
  }
}, class extends Wa {
  get ia() {
    return this.i;
  }
  ta(t3, e3, n3) {
    jo(this, e3, (e4) => {
      const [r3, i4] = Vo(this, t3, e4);
      this.ia._addBoundTextureAsImageToStream(e4, r3, i4, n3);
    });
  }
  W(t3, e3) {
    Ho(this, t3, e3), jo(this, t3, (t4) => {
      this.ia._attachImageListener(t4);
    });
  }
  fa(t3, e3) {
    Wo(this, t3, e3), jo(this, t3, (t4) => {
      this.ia._attachImageVectorListener(t4);
    });
  }
}));
var Wa;
var za = class extends Ha {
};
async function Ka(t3, e3, n3) {
  return async function(t4, e4, n4, r3) {
    return zo(t4, e4, n4, r3);
  }(t3, n3.canvas ?? (Do() ? void 0 : document.createElement("canvas")), e3, n3);
}
function Ya(t3, e3, n3, r3) {
  if (t3.V) {
    const s3 = new fs();
    if (n3?.regionOfInterest) {
      if (!t3.sa) throw Error("This task doesn't support region-of-interest.");
      var i4 = n3.regionOfInterest;
      if (i4.left >= i4.right || i4.top >= i4.bottom) throw Error("Expected RectF with left < right and top < bottom.");
      if (i4.left < 0 || i4.top < 0 || i4.right > 1 || i4.bottom > 1) throw Error("Expected RectF values to be in [0,1].");
      Ln(s3, 1, (i4.left + i4.right) / 2), Ln(s3, 2, (i4.top + i4.bottom) / 2), Ln(s3, 4, i4.right - i4.left), Ln(s3, 3, i4.bottom - i4.top);
    } else Ln(s3, 1, 0.5), Ln(s3, 2, 0.5), Ln(s3, 4, 1), Ln(s3, 3, 1);
    if (n3?.rotationDegrees) {
      if (n3?.rotationDegrees % 90 != 0) throw Error("Expected rotation to be a multiple of 90°.");
      if (Ln(s3, 5, -Math.PI * n3.rotationDegrees / 180), n3?.rotationDegrees % 180 != 0) {
        const [t4, r4] = Go(e3);
        n3 = bn(s3, 3) * r4 / t4, i4 = bn(s3, 4) * t4 / r4, Ln(s3, 4, n3), Ln(s3, 3, i4);
      }
    }
    t3.g.addProtoToStream(s3.g(), "mediapipe.NormalizedRect", t3.V, r3);
  }
  t3.g.ta(e3, t3.da, r3 ?? performance.now()), t3.finishProcessing();
}
function $a(t3, e3, n3) {
  if (t3.baseOptions?.g()) throw Error("Task is not initialized with image mode. 'runningMode' must be set to 'IMAGE'.");
  Ya(t3, e3, n3, t3.B + 1);
}
function qa(t3, e3, n3, r3) {
  if (!t3.baseOptions?.g()) throw Error("Task is not initialized with video mode. 'runningMode' must be set to 'VIDEO'.");
  Ya(t3, e3, n3, r3);
}
function Ja(t3, e3, n3, r3) {
  var i4 = e3.data;
  const s3 = e3.width, o3 = s3 * (e3 = e3.height);
  if ((i4 instanceof Uint8Array || i4 instanceof Float32Array) && i4.length !== o3) throw Error("Unsupported channel count: " + i4.length / o3);
  return t3 = new wa([i4], n3, false, t3.g.i.canvas, t3.R, s3, e3), r3 ? t3.clone() : t3;
}
var Za = class extends Qo {
  constructor(t3, e3, n3, r3) {
    super(t3), this.g = t3, this.da = e3, this.V = n3, this.sa = r3, this.R = new ca();
  }
  l(t3, e3 = true) {
    if ("runningMode" in t3 && Sn(this.baseOptions, 2, !!t3.runningMode && "IMAGE" !== t3.runningMode), void 0 !== t3.canvas && this.g.i.canvas !== t3.canvas) throw Error("You must create a new task to reset the canvas.");
    return super.l(t3, e3);
  }
  close() {
    this.R.close(), super.close();
  }
};
Za.prototype.close = Za.prototype.close;
var Qa = class extends Za {
  constructor(t3, e3) {
    super(new za(t3, e3), "image_in", "norm_rect_in", false), this.j = { detections: [] }, yn(t3 = this.h = new Fs(), 0, 1, e3 = new xs()), Ln(this.h, 2, 0.5), Ln(this.h, 3, 0.3);
  }
  get baseOptions() {
    return pn(this.h, xs, 1);
  }
  set baseOptions(t3) {
    yn(this.h, 0, 1, t3);
  }
  o(t3) {
    return "minDetectionConfidence" in t3 && Ln(this.h, 2, t3.minDetectionConfidence ?? 0.5), "minSuppressionThreshold" in t3 && Ln(this.h, 3, t3.minSuppressionThreshold ?? 0.3), this.l(t3);
  }
  D(t3, e3) {
    return this.j = { detections: [] }, $a(this, t3, e3), this.j;
  }
  F(t3, e3, n3) {
    return this.j = { detections: [] }, qa(this, t3, n3, e3), this.j;
  }
  m() {
    var t3 = new $i();
    Ki(t3, "image_in"), Ki(t3, "norm_rect_in"), Yi(t3, "detections");
    const e3 = new Ci();
    er(e3, Is, this.h);
    const n3 = new Vi();
    Bi(n3, "mediapipe.tasks.vision.face_detector.FaceDetectorGraph"), Gi(n3, "IMAGE:image_in"), Gi(n3, "NORM_RECT:norm_rect_in"), ji(n3, "DETECTIONS:detections"), n3.o(e3), zi(t3, n3), this.g.attachProtoVectorListener("detections", (t4, e4) => {
      for (const e5 of t4) t4 = ss(e5), this.j.detections.push(Lo(t4));
      $o(this, e4);
    }), this.g.attachEmptyPacketListener("detections", (t4) => {
      $o(this, t4);
    }), t3 = t3.g(), this.setGraph(new Uint8Array(t3), true);
  }
};
Qa.prototype.detectForVideo = Qa.prototype.F, Qa.prototype.detect = Qa.prototype.D, Qa.prototype.setOptions = Qa.prototype.o, Qa.createFromModelPath = async function(t3, e3) {
  return Ka(Qa, t3, { baseOptions: { modelAssetPath: e3 } });
}, Qa.createFromModelBuffer = function(t3, e3) {
  return Ka(Qa, t3, { baseOptions: { modelAssetBuffer: e3 } });
}, Qa.createFromOptions = function(t3, e3) {
  return Ka(Qa, t3, e3);
};
var th = Xa([61, 146], [146, 91], [91, 181], [181, 84], [84, 17], [17, 314], [314, 405], [405, 321], [321, 375], [375, 291], [61, 185], [185, 40], [40, 39], [39, 37], [37, 0], [0, 267], [267, 269], [269, 270], [270, 409], [409, 291], [78, 95], [95, 88], [88, 178], [178, 87], [87, 14], [14, 317], [317, 402], [402, 318], [318, 324], [324, 308], [78, 191], [191, 80], [80, 81], [81, 82], [82, 13], [13, 312], [312, 311], [311, 310], [310, 415], [415, 308]);
var eh = Xa([263, 249], [249, 390], [390, 373], [373, 374], [374, 380], [380, 381], [381, 382], [382, 362], [263, 466], [466, 388], [388, 387], [387, 386], [386, 385], [385, 384], [384, 398], [398, 362]);
var nh = Xa([276, 283], [283, 282], [282, 295], [295, 285], [300, 293], [293, 334], [334, 296], [296, 336]);
var rh = Xa([474, 475], [475, 476], [476, 477], [477, 474]);
var ih = Xa([33, 7], [7, 163], [163, 144], [144, 145], [145, 153], [153, 154], [154, 155], [155, 133], [33, 246], [246, 161], [161, 160], [160, 159], [159, 158], [158, 157], [157, 173], [173, 133]);
var sh = Xa([46, 53], [53, 52], [52, 65], [65, 55], [70, 63], [63, 105], [105, 66], [66, 107]);
var oh = Xa([469, 470], [470, 471], [471, 472], [472, 469]);
var ah = Xa([10, 338], [338, 297], [297, 332], [332, 284], [284, 251], [251, 389], [389, 356], [356, 454], [454, 323], [323, 361], [361, 288], [288, 397], [397, 365], [365, 379], [379, 378], [378, 400], [400, 377], [377, 152], [152, 148], [148, 176], [176, 149], [149, 150], [150, 136], [136, 172], [172, 58], [58, 132], [132, 93], [93, 234], [234, 127], [127, 162], [162, 21], [21, 54], [54, 103], [103, 67], [67, 109], [109, 10]);
var hh = [...th, ...eh, ...nh, ...ih, ...sh, ...ah];
var ch = Xa([127, 34], [34, 139], [139, 127], [11, 0], [0, 37], [37, 11], [232, 231], [231, 120], [120, 232], [72, 37], [37, 39], [39, 72], [128, 121], [121, 47], [47, 128], [232, 121], [121, 128], [128, 232], [104, 69], [69, 67], [67, 104], [175, 171], [171, 148], [148, 175], [118, 50], [50, 101], [101, 118], [73, 39], [39, 40], [40, 73], [9, 151], [151, 108], [108, 9], [48, 115], [115, 131], [131, 48], [194, 204], [204, 211], [211, 194], [74, 40], [40, 185], [185, 74], [80, 42], [42, 183], [183, 80], [40, 92], [92, 186], [186, 40], [230, 229], [229, 118], [118, 230], [202, 212], [212, 214], [214, 202], [83, 18], [18, 17], [17, 83], [76, 61], [61, 146], [146, 76], [160, 29], [29, 30], [30, 160], [56, 157], [157, 173], [173, 56], [106, 204], [204, 194], [194, 106], [135, 214], [214, 192], [192, 135], [203, 165], [165, 98], [98, 203], [21, 71], [71, 68], [68, 21], [51, 45], [45, 4], [4, 51], [144, 24], [24, 23], [23, 144], [77, 146], [146, 91], [91, 77], [205, 50], [50, 187], [187, 205], [201, 200], [200, 18], [18, 201], [91, 106], [106, 182], [182, 91], [90, 91], [91, 181], [181, 90], [85, 84], [84, 17], [17, 85], [206, 203], [203, 36], [36, 206], [148, 171], [171, 140], [140, 148], [92, 40], [40, 39], [39, 92], [193, 189], [189, 244], [244, 193], [159, 158], [158, 28], [28, 159], [247, 246], [246, 161], [161, 247], [236, 3], [3, 196], [196, 236], [54, 68], [68, 104], [104, 54], [193, 168], [168, 8], [8, 193], [117, 228], [228, 31], [31, 117], [189, 193], [193, 55], [55, 189], [98, 97], [97, 99], [99, 98], [126, 47], [47, 100], [100, 126], [166, 79], [79, 218], [218, 166], [155, 154], [154, 26], [26, 155], [209, 49], [49, 131], [131, 209], [135, 136], [136, 150], [150, 135], [47, 126], [126, 217], [217, 47], [223, 52], [52, 53], [53, 223], [45, 51], [51, 134], [134, 45], [211, 170], [170, 140], [140, 211], [67, 69], [69, 108], [108, 67], [43, 106], [106, 91], [91, 43], [230, 119], [119, 120], [120, 230], [226, 130], [130, 247], [247, 226], [63, 53], [53, 52], [52, 63], [238, 20], [20, 242], [242, 238], [46, 70], [70, 156], [156, 46], [78, 62], [62, 96], [96, 78], [46, 53], [53, 63], [63, 46], [143, 34], [34, 227], [227, 143], [123, 117], [117, 111], [111, 123], [44, 125], [125, 19], [19, 44], [236, 134], [134, 51], [51, 236], [216, 206], [206, 205], [205, 216], [154, 153], [153, 22], [22, 154], [39, 37], [37, 167], [167, 39], [200, 201], [201, 208], [208, 200], [36, 142], [142, 100], [100, 36], [57, 212], [212, 202], [202, 57], [20, 60], [60, 99], [99, 20], [28, 158], [158, 157], [157, 28], [35, 226], [226, 113], [113, 35], [160, 159], [159, 27], [27, 160], [204, 202], [202, 210], [210, 204], [113, 225], [225, 46], [46, 113], [43, 202], [202, 204], [204, 43], [62, 76], [76, 77], [77, 62], [137, 123], [123, 116], [116, 137], [41, 38], [38, 72], [72, 41], [203, 129], [129, 142], [142, 203], [64, 98], [98, 240], [240, 64], [49, 102], [102, 64], [64, 49], [41, 73], [73, 74], [74, 41], [212, 216], [216, 207], [207, 212], [42, 74], [74, 184], [184, 42], [169, 170], [170, 211], [211, 169], [170, 149], [149, 176], [176, 170], [105, 66], [66, 69], [69, 105], [122, 6], [6, 168], [168, 122], [123, 147], [147, 187], [187, 123], [96, 77], [77, 90], [90, 96], [65, 55], [55, 107], [107, 65], [89, 90], [90, 180], [180, 89], [101, 100], [100, 120], [120, 101], [63, 105], [105, 104], [104, 63], [93, 137], [137, 227], [227, 93], [15, 86], [86, 85], [85, 15], [129, 102], [102, 49], [49, 129], [14, 87], [87, 86], [86, 14], [55, 8], [8, 9], [9, 55], [100, 47], [47, 121], [121, 100], [145, 23], [23, 22], [22, 145], [88, 89], [89, 179], [179, 88], [6, 122], [122, 196], [196, 6], [88, 95], [95, 96], [96, 88], [138, 172], [172, 136], [136, 138], [215, 58], [58, 172], [172, 215], [115, 48], [48, 219], [219, 115], [42, 80], [80, 81], [81, 42], [195, 3], [3, 51], [51, 195], [43, 146], [146, 61], [61, 43], [171, 175], [175, 199], [199, 171], [81, 82], [82, 38], [38, 81], [53, 46], [46, 225], [225, 53], [144, 163], [163, 110], [110, 144], [52, 65], [65, 66], [66, 52], [229, 228], [228, 117], [117, 229], [34, 127], [127, 234], [234, 34], [107, 108], [108, 69], [69, 107], [109, 108], [108, 151], [151, 109], [48, 64], [64, 235], [235, 48], [62, 78], [78, 191], [191, 62], [129, 209], [209, 126], [126, 129], [111, 35], [35, 143], [143, 111], [117, 123], [123, 50], [50, 117], [222, 65], [65, 52], [52, 222], [19, 125], [125, 141], [141, 19], [221, 55], [55, 65], [65, 221], [3, 195], [195, 197], [197, 3], [25, 7], [7, 33], [33, 25], [220, 237], [237, 44], [44, 220], [70, 71], [71, 139], [139, 70], [122, 193], [193, 245], [245, 122], [247, 130], [130, 33], [33, 247], [71, 21], [21, 162], [162, 71], [170, 169], [169, 150], [150, 170], [188, 174], [174, 196], [196, 188], [216, 186], [186, 92], [92, 216], [2, 97], [97, 167], [167, 2], [141, 125], [125, 241], [241, 141], [164, 167], [167, 37], [37, 164], [72, 38], [38, 12], [12, 72], [38, 82], [82, 13], [13, 38], [63, 68], [68, 71], [71, 63], [226, 35], [35, 111], [111, 226], [101, 50], [50, 205], [205, 101], [206, 92], [92, 165], [165, 206], [209, 198], [198, 217], [217, 209], [165, 167], [167, 97], [97, 165], [220, 115], [115, 218], [218, 220], [133, 112], [112, 243], [243, 133], [239, 238], [238, 241], [241, 239], [214, 135], [135, 169], [169, 214], [190, 173], [173, 133], [133, 190], [171, 208], [208, 32], [32, 171], [125, 44], [44, 237], [237, 125], [86, 87], [87, 178], [178, 86], [85, 86], [86, 179], [179, 85], [84, 85], [85, 180], [180, 84], [83, 84], [84, 181], [181, 83], [201, 83], [83, 182], [182, 201], [137, 93], [93, 132], [132, 137], [76, 62], [62, 183], [183, 76], [61, 76], [76, 184], [184, 61], [57, 61], [61, 185], [185, 57], [212, 57], [57, 186], [186, 212], [214, 207], [207, 187], [187, 214], [34, 143], [143, 156], [156, 34], [79, 239], [239, 237], [237, 79], [123, 137], [137, 177], [177, 123], [44, 1], [1, 4], [4, 44], [201, 194], [194, 32], [32, 201], [64, 102], [102, 129], [129, 64], [213, 215], [215, 138], [138, 213], [59, 166], [166, 219], [219, 59], [242, 99], [99, 97], [97, 242], [2, 94], [94, 141], [141, 2], [75, 59], [59, 235], [235, 75], [24, 110], [110, 228], [228, 24], [25, 130], [130, 226], [226, 25], [23, 24], [24, 229], [229, 23], [22, 23], [23, 230], [230, 22], [26, 22], [22, 231], [231, 26], [112, 26], [26, 232], [232, 112], [189, 190], [190, 243], [243, 189], [221, 56], [56, 190], [190, 221], [28, 56], [56, 221], [221, 28], [27, 28], [28, 222], [222, 27], [29, 27], [27, 223], [223, 29], [30, 29], [29, 224], [224, 30], [247, 30], [30, 225], [225, 247], [238, 79], [79, 20], [20, 238], [166, 59], [59, 75], [75, 166], [60, 75], [75, 240], [240, 60], [147, 177], [177, 215], [215, 147], [20, 79], [79, 166], [166, 20], [187, 147], [147, 213], [213, 187], [112, 233], [233, 244], [244, 112], [233, 128], [128, 245], [245, 233], [128, 114], [114, 188], [188, 128], [114, 217], [217, 174], [174, 114], [131, 115], [115, 220], [220, 131], [217, 198], [198, 236], [236, 217], [198, 131], [131, 134], [134, 198], [177, 132], [132, 58], [58, 177], [143, 35], [35, 124], [124, 143], [110, 163], [163, 7], [7, 110], [228, 110], [110, 25], [25, 228], [356, 389], [389, 368], [368, 356], [11, 302], [302, 267], [267, 11], [452, 350], [350, 349], [349, 452], [302, 303], [303, 269], [269, 302], [357, 343], [343, 277], [277, 357], [452, 453], [453, 357], [357, 452], [333, 332], [332, 297], [297, 333], [175, 152], [152, 377], [377, 175], [347, 348], [348, 330], [330, 347], [303, 304], [304, 270], [270, 303], [9, 336], [336, 337], [337, 9], [278, 279], [279, 360], [360, 278], [418, 262], [262, 431], [431, 418], [304, 408], [408, 409], [409, 304], [310, 415], [415, 407], [407, 310], [270, 409], [409, 410], [410, 270], [450, 348], [348, 347], [347, 450], [422, 430], [430, 434], [434, 422], [313, 314], [314, 17], [17, 313], [306, 307], [307, 375], [375, 306], [387, 388], [388, 260], [260, 387], [286, 414], [414, 398], [398, 286], [335, 406], [406, 418], [418, 335], [364, 367], [367, 416], [416, 364], [423, 358], [358, 327], [327, 423], [251, 284], [284, 298], [298, 251], [281, 5], [5, 4], [4, 281], [373, 374], [374, 253], [253, 373], [307, 320], [320, 321], [321, 307], [425, 427], [427, 411], [411, 425], [421, 313], [313, 18], [18, 421], [321, 405], [405, 406], [406, 321], [320, 404], [404, 405], [405, 320], [315, 16], [16, 17], [17, 315], [426, 425], [425, 266], [266, 426], [377, 400], [400, 369], [369, 377], [322, 391], [391, 269], [269, 322], [417, 465], [465, 464], [464, 417], [386, 257], [257, 258], [258, 386], [466, 260], [260, 388], [388, 466], [456, 399], [399, 419], [419, 456], [284, 332], [332, 333], [333, 284], [417, 285], [285, 8], [8, 417], [346, 340], [340, 261], [261, 346], [413, 441], [441, 285], [285, 413], [327, 460], [460, 328], [328, 327], [355, 371], [371, 329], [329, 355], [392, 439], [439, 438], [438, 392], [382, 341], [341, 256], [256, 382], [429, 420], [420, 360], [360, 429], [364, 394], [394, 379], [379, 364], [277, 343], [343, 437], [437, 277], [443, 444], [444, 283], [283, 443], [275, 440], [440, 363], [363, 275], [431, 262], [262, 369], [369, 431], [297, 338], [338, 337], [337, 297], [273, 375], [375, 321], [321, 273], [450, 451], [451, 349], [349, 450], [446, 342], [342, 467], [467, 446], [293, 334], [334, 282], [282, 293], [458, 461], [461, 462], [462, 458], [276, 353], [353, 383], [383, 276], [308, 324], [324, 325], [325, 308], [276, 300], [300, 293], [293, 276], [372, 345], [345, 447], [447, 372], [352, 345], [345, 340], [340, 352], [274, 1], [1, 19], [19, 274], [456, 248], [248, 281], [281, 456], [436, 427], [427, 425], [425, 436], [381, 256], [256, 252], [252, 381], [269, 391], [391, 393], [393, 269], [200, 199], [199, 428], [428, 200], [266, 330], [330, 329], [329, 266], [287, 273], [273, 422], [422, 287], [250, 462], [462, 328], [328, 250], [258, 286], [286, 384], [384, 258], [265, 353], [353, 342], [342, 265], [387, 259], [259, 257], [257, 387], [424, 431], [431, 430], [430, 424], [342, 353], [353, 276], [276, 342], [273, 335], [335, 424], [424, 273], [292, 325], [325, 307], [307, 292], [366, 447], [447, 345], [345, 366], [271, 303], [303, 302], [302, 271], [423, 266], [266, 371], [371, 423], [294, 455], [455, 460], [460, 294], [279, 278], [278, 294], [294, 279], [271, 272], [272, 304], [304, 271], [432, 434], [434, 427], [427, 432], [272, 407], [407, 408], [408, 272], [394, 430], [430, 431], [431, 394], [395, 369], [369, 400], [400, 395], [334, 333], [333, 299], [299, 334], [351, 417], [417, 168], [168, 351], [352, 280], [280, 411], [411, 352], [325, 319], [319, 320], [320, 325], [295, 296], [296, 336], [336, 295], [319, 403], [403, 404], [404, 319], [330, 348], [348, 349], [349, 330], [293, 298], [298, 333], [333, 293], [323, 454], [454, 447], [447, 323], [15, 16], [16, 315], [315, 15], [358, 429], [429, 279], [279, 358], [14, 15], [15, 316], [316, 14], [285, 336], [336, 9], [9, 285], [329, 349], [349, 350], [350, 329], [374, 380], [380, 252], [252, 374], [318, 402], [402, 403], [403, 318], [6, 197], [197, 419], [419, 6], [318, 319], [319, 325], [325, 318], [367, 364], [364, 365], [365, 367], [435, 367], [367, 397], [397, 435], [344, 438], [438, 439], [439, 344], [272, 271], [271, 311], [311, 272], [195, 5], [5, 281], [281, 195], [273, 287], [287, 291], [291, 273], [396, 428], [428, 199], [199, 396], [311, 271], [271, 268], [268, 311], [283, 444], [444, 445], [445, 283], [373, 254], [254, 339], [339, 373], [282, 334], [334, 296], [296, 282], [449, 347], [347, 346], [346, 449], [264, 447], [447, 454], [454, 264], [336, 296], [296, 299], [299, 336], [338, 10], [10, 151], [151, 338], [278, 439], [439, 455], [455, 278], [292, 407], [407, 415], [415, 292], [358, 371], [371, 355], [355, 358], [340, 345], [345, 372], [372, 340], [346, 347], [347, 280], [280, 346], [442, 443], [443, 282], [282, 442], [19, 94], [94, 370], [370, 19], [441, 442], [442, 295], [295, 441], [248, 419], [419, 197], [197, 248], [263, 255], [255, 359], [359, 263], [440, 275], [275, 274], [274, 440], [300, 383], [383, 368], [368, 300], [351, 412], [412, 465], [465, 351], [263, 467], [467, 466], [466, 263], [301, 368], [368, 389], [389, 301], [395, 378], [378, 379], [379, 395], [412, 351], [351, 419], [419, 412], [436, 426], [426, 322], [322, 436], [2, 164], [164, 393], [393, 2], [370, 462], [462, 461], [461, 370], [164, 0], [0, 267], [267, 164], [302, 11], [11, 12], [12, 302], [268, 12], [12, 13], [13, 268], [293, 300], [300, 301], [301, 293], [446, 261], [261, 340], [340, 446], [330, 266], [266, 425], [425, 330], [426, 423], [423, 391], [391, 426], [429, 355], [355, 437], [437, 429], [391, 327], [327, 326], [326, 391], [440, 457], [457, 438], [438, 440], [341, 382], [382, 362], [362, 341], [459, 457], [457, 461], [461, 459], [434, 430], [430, 394], [394, 434], [414, 463], [463, 362], [362, 414], [396, 369], [369, 262], [262, 396], [354, 461], [461, 457], [457, 354], [316, 403], [403, 402], [402, 316], [315, 404], [404, 403], [403, 315], [314, 405], [405, 404], [404, 314], [313, 406], [406, 405], [405, 313], [421, 418], [418, 406], [406, 421], [366, 401], [401, 361], [361, 366], [306, 408], [408, 407], [407, 306], [291, 409], [409, 408], [408, 291], [287, 410], [410, 409], [409, 287], [432, 436], [436, 410], [410, 432], [434, 416], [416, 411], [411, 434], [264, 368], [368, 383], [383, 264], [309, 438], [438, 457], [457, 309], [352, 376], [376, 401], [401, 352], [274, 275], [275, 4], [4, 274], [421, 428], [428, 262], [262, 421], [294, 327], [327, 358], [358, 294], [433, 416], [416, 367], [367, 433], [289, 455], [455, 439], [439, 289], [462, 370], [370, 326], [326, 462], [2, 326], [326, 370], [370, 2], [305, 460], [460, 455], [455, 305], [254, 449], [449, 448], [448, 254], [255, 261], [261, 446], [446, 255], [253, 450], [450, 449], [449, 253], [252, 451], [451, 450], [450, 252], [256, 452], [452, 451], [451, 256], [341, 453], [453, 452], [452, 341], [413, 464], [464, 463], [463, 413], [441, 413], [413, 414], [414, 441], [258, 442], [442, 441], [441, 258], [257, 443], [443, 442], [442, 257], [259, 444], [444, 443], [443, 259], [260, 445], [445, 444], [444, 260], [467, 342], [342, 445], [445, 467], [459, 458], [458, 250], [250, 459], [289, 392], [392, 290], [290, 289], [290, 328], [328, 460], [460, 290], [376, 433], [433, 435], [435, 376], [250, 290], [290, 392], [392, 250], [411, 416], [416, 433], [433, 411], [341, 463], [463, 464], [464, 341], [453, 464], [464, 465], [465, 453], [357, 465], [465, 412], [412, 357], [343, 412], [412, 399], [399, 343], [360, 363], [363, 440], [440, 360], [437, 399], [399, 456], [456, 437], [420, 456], [456, 363], [363, 420], [401, 435], [435, 288], [288, 401], [372, 383], [383, 353], [353, 372], [339, 255], [255, 249], [249, 339], [448, 261], [261, 255], [255, 448], [133, 243], [243, 190], [190, 133], [133, 155], [155, 112], [112, 133], [33, 246], [246, 247], [247, 33], [33, 130], [130, 25], [25, 33], [398, 384], [384, 286], [286, 398], [362, 398], [398, 414], [414, 362], [362, 463], [463, 341], [341, 362], [263, 359], [359, 467], [467, 263], [263, 249], [249, 255], [255, 263], [466, 467], [467, 260], [260, 466], [75, 60], [60, 166], [166, 75], [238, 239], [239, 79], [79, 238], [162, 127], [127, 139], [139, 162], [72, 11], [11, 37], [37, 72], [121, 232], [232, 120], [120, 121], [73, 72], [72, 39], [39, 73], [114, 128], [128, 47], [47, 114], [233, 232], [232, 128], [128, 233], [103, 104], [104, 67], [67, 103], [152, 175], [175, 148], [148, 152], [119, 118], [118, 101], [101, 119], [74, 73], [73, 40], [40, 74], [107, 9], [9, 108], [108, 107], [49, 48], [48, 131], [131, 49], [32, 194], [194, 211], [211, 32], [184, 74], [74, 185], [185, 184], [191, 80], [80, 183], [183, 191], [185, 40], [40, 186], [186, 185], [119, 230], [230, 118], [118, 119], [210, 202], [202, 214], [214, 210], [84, 83], [83, 17], [17, 84], [77, 76], [76, 146], [146, 77], [161, 160], [160, 30], [30, 161], [190, 56], [56, 173], [173, 190], [182, 106], [106, 194], [194, 182], [138, 135], [135, 192], [192, 138], [129, 203], [203, 98], [98, 129], [54, 21], [21, 68], [68, 54], [5, 51], [51, 4], [4, 5], [145, 144], [144, 23], [23, 145], [90, 77], [77, 91], [91, 90], [207, 205], [205, 187], [187, 207], [83, 201], [201, 18], [18, 83], [181, 91], [91, 182], [182, 181], [180, 90], [90, 181], [181, 180], [16, 85], [85, 17], [17, 16], [205, 206], [206, 36], [36, 205], [176, 148], [148, 140], [140, 176], [165, 92], [92, 39], [39, 165], [245, 193], [193, 244], [244, 245], [27, 159], [159, 28], [28, 27], [30, 247], [247, 161], [161, 30], [174, 236], [236, 196], [196, 174], [103, 54], [54, 104], [104, 103], [55, 193], [193, 8], [8, 55], [111, 117], [117, 31], [31, 111], [221, 189], [189, 55], [55, 221], [240, 98], [98, 99], [99, 240], [142, 126], [126, 100], [100, 142], [219, 166], [166, 218], [218, 219], [112, 155], [155, 26], [26, 112], [198, 209], [209, 131], [131, 198], [169, 135], [135, 150], [150, 169], [114, 47], [47, 217], [217, 114], [224, 223], [223, 53], [53, 224], [220, 45], [45, 134], [134, 220], [32, 211], [211, 140], [140, 32], [109, 67], [67, 108], [108, 109], [146, 43], [43, 91], [91, 146], [231, 230], [230, 120], [120, 231], [113, 226], [226, 247], [247, 113], [105, 63], [63, 52], [52, 105], [241, 238], [238, 242], [242, 241], [124, 46], [46, 156], [156, 124], [95, 78], [78, 96], [96, 95], [70, 46], [46, 63], [63, 70], [116, 143], [143, 227], [227, 116], [116, 123], [123, 111], [111, 116], [1, 44], [44, 19], [19, 1], [3, 236], [236, 51], [51, 3], [207, 216], [216, 205], [205, 207], [26, 154], [154, 22], [22, 26], [165, 39], [39, 167], [167, 165], [199, 200], [200, 208], [208, 199], [101, 36], [36, 100], [100, 101], [43, 57], [57, 202], [202, 43], [242, 20], [20, 99], [99, 242], [56, 28], [28, 157], [157, 56], [124, 35], [35, 113], [113, 124], [29, 160], [160, 27], [27, 29], [211, 204], [204, 210], [210, 211], [124, 113], [113, 46], [46, 124], [106, 43], [43, 204], [204, 106], [96, 62], [62, 77], [77, 96], [227, 137], [137, 116], [116, 227], [73, 41], [41, 72], [72, 73], [36, 203], [203, 142], [142, 36], [235, 64], [64, 240], [240, 235], [48, 49], [49, 64], [64, 48], [42, 41], [41, 74], [74, 42], [214, 212], [212, 207], [207, 214], [183, 42], [42, 184], [184, 183], [210, 169], [169, 211], [211, 210], [140, 170], [170, 176], [176, 140], [104, 105], [105, 69], [69, 104], [193, 122], [122, 168], [168, 193], [50, 123], [123, 187], [187, 50], [89, 96], [96, 90], [90, 89], [66, 65], [65, 107], [107, 66], [179, 89], [89, 180], [180, 179], [119, 101], [101, 120], [120, 119], [68, 63], [63, 104], [104, 68], [234, 93], [93, 227], [227, 234], [16, 15], [15, 85], [85, 16], [209, 129], [129, 49], [49, 209], [15, 14], [14, 86], [86, 15], [107, 55], [55, 9], [9, 107], [120, 100], [100, 121], [121, 120], [153, 145], [145, 22], [22, 153], [178, 88], [88, 179], [179, 178], [197, 6], [6, 196], [196, 197], [89, 88], [88, 96], [96, 89], [135, 138], [138, 136], [136, 135], [138, 215], [215, 172], [172, 138], [218, 115], [115, 219], [219, 218], [41, 42], [42, 81], [81, 41], [5, 195], [195, 51], [51, 5], [57, 43], [43, 61], [61, 57], [208, 171], [171, 199], [199, 208], [41, 81], [81, 38], [38, 41], [224, 53], [53, 225], [225, 224], [24, 144], [144, 110], [110, 24], [105, 52], [52, 66], [66, 105], [118, 229], [229, 117], [117, 118], [227, 34], [34, 234], [234, 227], [66, 107], [107, 69], [69, 66], [10, 109], [109, 151], [151, 10], [219, 48], [48, 235], [235, 219], [183, 62], [62, 191], [191, 183], [142, 129], [129, 126], [126, 142], [116, 111], [111, 143], [143, 116], [118, 117], [117, 50], [50, 118], [223, 222], [222, 52], [52, 223], [94, 19], [19, 141], [141, 94], [222, 221], [221, 65], [65, 222], [196, 3], [3, 197], [197, 196], [45, 220], [220, 44], [44, 45], [156, 70], [70, 139], [139, 156], [188, 122], [122, 245], [245, 188], [139, 71], [71, 162], [162, 139], [149, 170], [170, 150], [150, 149], [122, 188], [188, 196], [196, 122], [206, 216], [216, 92], [92, 206], [164, 2], [2, 167], [167, 164], [242, 141], [141, 241], [241, 242], [0, 164], [164, 37], [37, 0], [11, 72], [72, 12], [12, 11], [12, 38], [38, 13], [13, 12], [70, 63], [63, 71], [71, 70], [31, 226], [226, 111], [111, 31], [36, 101], [101, 205], [205, 36], [203, 206], [206, 165], [165, 203], [126, 209], [209, 217], [217, 126], [98, 165], [165, 97], [97, 98], [237, 220], [220, 218], [218, 237], [237, 239], [239, 241], [241, 237], [210, 214], [214, 169], [169, 210], [140, 171], [171, 32], [32, 140], [241, 125], [125, 237], [237, 241], [179, 86], [86, 178], [178, 179], [180, 85], [85, 179], [179, 180], [181, 84], [84, 180], [180, 181], [182, 83], [83, 181], [181, 182], [194, 201], [201, 182], [182, 194], [177, 137], [137, 132], [132, 177], [184, 76], [76, 183], [183, 184], [185, 61], [61, 184], [184, 185], [186, 57], [57, 185], [185, 186], [216, 212], [212, 186], [186, 216], [192, 214], [214, 187], [187, 192], [139, 34], [34, 156], [156, 139], [218, 79], [79, 237], [237, 218], [147, 123], [123, 177], [177, 147], [45, 44], [44, 4], [4, 45], [208, 201], [201, 32], [32, 208], [98, 64], [64, 129], [129, 98], [192, 213], [213, 138], [138, 192], [235, 59], [59, 219], [219, 235], [141, 242], [242, 97], [97, 141], [97, 2], [2, 141], [141, 97], [240, 75], [75, 235], [235, 240], [229, 24], [24, 228], [228, 229], [31, 25], [25, 226], [226, 31], [230, 23], [23, 229], [229, 230], [231, 22], [22, 230], [230, 231], [232, 26], [26, 231], [231, 232], [233, 112], [112, 232], [232, 233], [244, 189], [189, 243], [243, 244], [189, 221], [221, 190], [190, 189], [222, 28], [28, 221], [221, 222], [223, 27], [27, 222], [222, 223], [224, 29], [29, 223], [223, 224], [225, 30], [30, 224], [224, 225], [113, 247], [247, 225], [225, 113], [99, 60], [60, 240], [240, 99], [213, 147], [147, 215], [215, 213], [60, 20], [20, 166], [166, 60], [192, 187], [187, 213], [213, 192], [243, 112], [112, 244], [244, 243], [244, 233], [233, 245], [245, 244], [245, 128], [128, 188], [188, 245], [188, 114], [114, 174], [174, 188], [134, 131], [131, 220], [220, 134], [174, 217], [217, 236], [236, 174], [236, 198], [198, 134], [134, 236], [215, 177], [177, 58], [58, 215], [156, 143], [143, 124], [124, 156], [25, 110], [110, 7], [7, 25], [31, 228], [228, 25], [25, 31], [264, 356], [356, 368], [368, 264], [0, 11], [11, 267], [267, 0], [451, 452], [452, 349], [349, 451], [267, 302], [302, 269], [269, 267], [350, 357], [357, 277], [277, 350], [350, 452], [452, 357], [357, 350], [299, 333], [333, 297], [297, 299], [396, 175], [175, 377], [377, 396], [280, 347], [347, 330], [330, 280], [269, 303], [303, 270], [270, 269], [151, 9], [9, 337], [337, 151], [344, 278], [278, 360], [360, 344], [424, 418], [418, 431], [431, 424], [270, 304], [304, 409], [409, 270], [272, 310], [310, 407], [407, 272], [322, 270], [270, 410], [410, 322], [449, 450], [450, 347], [347, 449], [432, 422], [422, 434], [434, 432], [18, 313], [313, 17], [17, 18], [291, 306], [306, 375], [375, 291], [259, 387], [387, 260], [260, 259], [424, 335], [335, 418], [418, 424], [434, 364], [364, 416], [416, 434], [391, 423], [423, 327], [327, 391], [301, 251], [251, 298], [298, 301], [275, 281], [281, 4], [4, 275], [254, 373], [373, 253], [253, 254], [375, 307], [307, 321], [321, 375], [280, 425], [425, 411], [411, 280], [200, 421], [421, 18], [18, 200], [335, 321], [321, 406], [406, 335], [321, 320], [320, 405], [405, 321], [314, 315], [315, 17], [17, 314], [423, 426], [426, 266], [266, 423], [396, 377], [377, 369], [369, 396], [270, 322], [322, 269], [269, 270], [413, 417], [417, 464], [464, 413], [385, 386], [386, 258], [258, 385], [248, 456], [456, 419], [419, 248], [298, 284], [284, 333], [333, 298], [168, 417], [417, 8], [8, 168], [448, 346], [346, 261], [261, 448], [417, 413], [413, 285], [285, 417], [326, 327], [327, 328], [328, 326], [277, 355], [355, 329], [329, 277], [309, 392], [392, 438], [438, 309], [381, 382], [382, 256], [256, 381], [279, 429], [429, 360], [360, 279], [365, 364], [364, 379], [379, 365], [355, 277], [277, 437], [437, 355], [282, 443], [443, 283], [283, 282], [281, 275], [275, 363], [363, 281], [395, 431], [431, 369], [369, 395], [299, 297], [297, 337], [337, 299], [335, 273], [273, 321], [321, 335], [348, 450], [450, 349], [349, 348], [359, 446], [446, 467], [467, 359], [283, 293], [293, 282], [282, 283], [250, 458], [458, 462], [462, 250], [300, 276], [276, 383], [383, 300], [292, 308], [308, 325], [325, 292], [283, 276], [276, 293], [293, 283], [264, 372], [372, 447], [447, 264], [346, 352], [352, 340], [340, 346], [354, 274], [274, 19], [19, 354], [363, 456], [456, 281], [281, 363], [426, 436], [436, 425], [425, 426], [380, 381], [381, 252], [252, 380], [267, 269], [269, 393], [393, 267], [421, 200], [200, 428], [428, 421], [371, 266], [266, 329], [329, 371], [432, 287], [287, 422], [422, 432], [290, 250], [250, 328], [328, 290], [385, 258], [258, 384], [384, 385], [446, 265], [265, 342], [342, 446], [386, 387], [387, 257], [257, 386], [422, 424], [424, 430], [430, 422], [445, 342], [342, 276], [276, 445], [422, 273], [273, 424], [424, 422], [306, 292], [292, 307], [307, 306], [352, 366], [366, 345], [345, 352], [268, 271], [271, 302], [302, 268], [358, 423], [423, 371], [371, 358], [327, 294], [294, 460], [460, 327], [331, 279], [279, 294], [294, 331], [303, 271], [271, 304], [304, 303], [436, 432], [432, 427], [427, 436], [304, 272], [272, 408], [408, 304], [395, 394], [394, 431], [431, 395], [378, 395], [395, 400], [400, 378], [296, 334], [334, 299], [299, 296], [6, 351], [351, 168], [168, 6], [376, 352], [352, 411], [411, 376], [307, 325], [325, 320], [320, 307], [285, 295], [295, 336], [336, 285], [320, 319], [319, 404], [404, 320], [329, 330], [330, 349], [349, 329], [334, 293], [293, 333], [333, 334], [366, 323], [323, 447], [447, 366], [316, 15], [15, 315], [315, 316], [331, 358], [358, 279], [279, 331], [317, 14], [14, 316], [316, 317], [8, 285], [285, 9], [9, 8], [277, 329], [329, 350], [350, 277], [253, 374], [374, 252], [252, 253], [319, 318], [318, 403], [403, 319], [351, 6], [6, 419], [419, 351], [324, 318], [318, 325], [325, 324], [397, 367], [367, 365], [365, 397], [288, 435], [435, 397], [397, 288], [278, 344], [344, 439], [439, 278], [310, 272], [272, 311], [311, 310], [248, 195], [195, 281], [281, 248], [375, 273], [273, 291], [291, 375], [175, 396], [396, 199], [199, 175], [312, 311], [311, 268], [268, 312], [276, 283], [283, 445], [445, 276], [390, 373], [373, 339], [339, 390], [295, 282], [282, 296], [296, 295], [448, 449], [449, 346], [346, 448], [356, 264], [264, 454], [454, 356], [337, 336], [336, 299], [299, 337], [337, 338], [338, 151], [151, 337], [294, 278], [278, 455], [455, 294], [308, 292], [292, 415], [415, 308], [429, 358], [358, 355], [355, 429], [265, 340], [340, 372], [372, 265], [352, 346], [346, 280], [280, 352], [295, 442], [442, 282], [282, 295], [354, 19], [19, 370], [370, 354], [285, 441], [441, 295], [295, 285], [195, 248], [248, 197], [197, 195], [457, 440], [440, 274], [274, 457], [301, 300], [300, 368], [368, 301], [417, 351], [351, 465], [465, 417], [251, 301], [301, 389], [389, 251], [394, 395], [395, 379], [379, 394], [399, 412], [412, 419], [419, 399], [410, 436], [436, 322], [322, 410], [326, 2], [2, 393], [393, 326], [354, 370], [370, 461], [461, 354], [393, 164], [164, 267], [267, 393], [268, 302], [302, 12], [12, 268], [312, 268], [268, 13], [13, 312], [298, 293], [293, 301], [301, 298], [265, 446], [446, 340], [340, 265], [280, 330], [330, 425], [425, 280], [322, 426], [426, 391], [391, 322], [420, 429], [429, 437], [437, 420], [393, 391], [391, 326], [326, 393], [344, 440], [440, 438], [438, 344], [458, 459], [459, 461], [461, 458], [364, 434], [434, 394], [394, 364], [428, 396], [396, 262], [262, 428], [274, 354], [354, 457], [457, 274], [317, 316], [316, 402], [402, 317], [316, 315], [315, 403], [403, 316], [315, 314], [314, 404], [404, 315], [314, 313], [313, 405], [405, 314], [313, 421], [421, 406], [406, 313], [323, 366], [366, 361], [361, 323], [292, 306], [306, 407], [407, 292], [306, 291], [291, 408], [408, 306], [291, 287], [287, 409], [409, 291], [287, 432], [432, 410], [410, 287], [427, 434], [434, 411], [411, 427], [372, 264], [264, 383], [383, 372], [459, 309], [309, 457], [457, 459], [366, 352], [352, 401], [401, 366], [1, 274], [274, 4], [4, 1], [418, 421], [421, 262], [262, 418], [331, 294], [294, 358], [358, 331], [435, 433], [433, 367], [367, 435], [392, 289], [289, 439], [439, 392], [328, 462], [462, 326], [326, 328], [94, 2], [2, 370], [370, 94], [289, 305], [305, 455], [455, 289], [339, 254], [254, 448], [448, 339], [359, 255], [255, 446], [446, 359], [254, 253], [253, 449], [449, 254], [253, 252], [252, 450], [450, 253], [252, 256], [256, 451], [451, 252], [256, 341], [341, 452], [452, 256], [414, 413], [413, 463], [463, 414], [286, 441], [441, 414], [414, 286], [286, 258], [258, 441], [441, 286], [258, 257], [257, 442], [442, 258], [257, 259], [259, 443], [443, 257], [259, 260], [260, 444], [444, 259], [260, 467], [467, 445], [445, 260], [309, 459], [459, 250], [250, 309], [305, 289], [289, 290], [290, 305], [305, 290], [290, 460], [460, 305], [401, 376], [376, 435], [435, 401], [309, 250], [250, 392], [392, 309], [376, 411], [411, 433], [433, 376], [453, 341], [341, 464], [464, 453], [357, 453], [453, 465], [465, 357], [343, 357], [357, 412], [412, 343], [437, 343], [343, 399], [399, 437], [344, 360], [360, 440], [440, 344], [420, 437], [437, 456], [456, 420], [360, 420], [420, 363], [363, 360], [361, 401], [401, 288], [288, 361], [265, 372], [372, 353], [353, 265], [390, 339], [339, 249], [249, 390], [339, 448], [448, 255], [255, 339]);
function uh(t3) {
  t3.j = { faceLandmarks: [], faceBlendshapes: [], facialTransformationMatrixes: [] };
}
var lh = class extends Za {
  constructor(t3, e3) {
    super(new za(t3, e3), "image_in", "norm_rect", false), this.j = { faceLandmarks: [], faceBlendshapes: [], facialTransformationMatrixes: [] }, this.outputFacialTransformationMatrixes = this.outputFaceBlendshapes = false, yn(t3 = this.h = new Ds(), 0, 1, e3 = new xs()), this.v = new Us(), yn(this.h, 0, 3, this.v), this.s = new Fs(), yn(this.h, 0, 2, this.s), xn(this.s, 4, 1), Ln(this.s, 2, 0.5), Ln(this.v, 2, 0.5), Ln(this.h, 4, 0.5);
  }
  get baseOptions() {
    return pn(this.h, xs, 1);
  }
  set baseOptions(t3) {
    yn(this.h, 0, 1, t3);
  }
  o(t3) {
    return "numFaces" in t3 && xn(this.s, 4, t3.numFaces ?? 1), "minFaceDetectionConfidence" in t3 && Ln(this.s, 2, t3.minFaceDetectionConfidence ?? 0.5), "minTrackingConfidence" in t3 && Ln(this.h, 4, t3.minTrackingConfidence ?? 0.5), "minFacePresenceConfidence" in t3 && Ln(this.v, 2, t3.minFacePresenceConfidence ?? 0.5), "outputFaceBlendshapes" in t3 && (this.outputFaceBlendshapes = !!t3.outputFaceBlendshapes), "outputFacialTransformationMatrixes" in t3 && (this.outputFacialTransformationMatrixes = !!t3.outputFacialTransformationMatrixes), this.l(t3);
  }
  D(t3, e3) {
    return uh(this), $a(this, t3, e3), this.j;
  }
  F(t3, e3, n3) {
    return uh(this), qa(this, t3, n3, e3), this.j;
  }
  m() {
    var t3 = new $i();
    Ki(t3, "image_in"), Ki(t3, "norm_rect"), Yi(t3, "face_landmarks");
    const e3 = new Ci();
    er(e3, js, this.h);
    const n3 = new Vi();
    Bi(n3, "mediapipe.tasks.vision.face_landmarker.FaceLandmarkerGraph"), Gi(n3, "IMAGE:image_in"), Gi(n3, "NORM_RECT:norm_rect"), ji(n3, "NORM_LANDMARKS:face_landmarks"), n3.o(e3), zi(t3, n3), this.g.attachProtoVectorListener("face_landmarks", (t4, e4) => {
      for (const e5 of t4) t4 = cs(e5), this.j.faceLandmarks.push(Ro(t4));
      $o(this, e4);
    }), this.g.attachEmptyPacketListener("face_landmarks", (t4) => {
      $o(this, t4);
    }), this.outputFaceBlendshapes && (Yi(t3, "blendshapes"), ji(n3, "BLENDSHAPES:blendshapes"), this.g.attachProtoVectorListener("blendshapes", (t4, e4) => {
      if (this.outputFaceBlendshapes) for (const e5 of t4) t4 = es(e5), this.j.faceBlendshapes.push(xo(t4.g() ?? []));
      $o(this, e4);
    }), this.g.attachEmptyPacketListener("blendshapes", (t4) => {
      $o(this, t4);
    })), this.outputFacialTransformationMatrixes && (Yi(t3, "face_geometry"), ji(n3, "FACE_GEOMETRY:face_geometry"), this.g.attachProtoVectorListener("face_geometry", (t4, e4) => {
      if (this.outputFacialTransformationMatrixes) for (const e5 of t4) (t4 = pn(Cs(e5), us, 2)) && this.j.facialTransformationMatrixes.push({ rows: Tn(An(t4, 1), 0) ?? 0, columns: Tn(An(t4, 2), 0) ?? 0, data: en(t4, 3, Ht, tn()).slice() ?? [] });
      $o(this, e4);
    }), this.g.attachEmptyPacketListener("face_geometry", (t4) => {
      $o(this, t4);
    })), t3 = t3.g(), this.setGraph(new Uint8Array(t3), true);
  }
};
lh.prototype.detectForVideo = lh.prototype.F, lh.prototype.detect = lh.prototype.D, lh.prototype.setOptions = lh.prototype.o, lh.createFromModelPath = function(t3, e3) {
  return Ka(lh, t3, { baseOptions: { modelAssetPath: e3 } });
}, lh.createFromModelBuffer = function(t3, e3) {
  return Ka(lh, t3, { baseOptions: { modelAssetBuffer: e3 } });
}, lh.createFromOptions = function(t3, e3) {
  return Ka(lh, t3, e3);
}, lh.FACE_LANDMARKS_LIPS = th, lh.FACE_LANDMARKS_LEFT_EYE = eh, lh.FACE_LANDMARKS_LEFT_EYEBROW = nh, lh.FACE_LANDMARKS_LEFT_IRIS = rh, lh.FACE_LANDMARKS_RIGHT_EYE = ih, lh.FACE_LANDMARKS_RIGHT_EYEBROW = sh, lh.FACE_LANDMARKS_RIGHT_IRIS = oh, lh.FACE_LANDMARKS_FACE_OVAL = ah, lh.FACE_LANDMARKS_CONTOURS = hh, lh.FACE_LANDMARKS_TESSELATION = ch;
var fh = class extends Za {
  constructor(t3, e3) {
    super(new za(t3, e3), "image_in", "norm_rect", true), yn(t3 = this.j = new Vs(), 0, 1, e3 = new xs());
  }
  get baseOptions() {
    return pn(this.j, xs, 1);
  }
  set baseOptions(t3) {
    yn(this.j, 0, 1, t3);
  }
  o(t3) {
    return super.l(t3);
  }
  Ra(t3, e3, n3) {
    const r3 = "function" != typeof e3 ? e3 : {};
    if (this.h = "function" == typeof e3 ? e3 : n3, $a(this, t3, r3 ?? {}), !this.h) return this.s;
  }
  m() {
    var t3 = new $i();
    Ki(t3, "image_in"), Ki(t3, "norm_rect"), Yi(t3, "stylized_image");
    const e3 = new Ci();
    er(e3, Xs, this.j);
    const n3 = new Vi();
    Bi(n3, "mediapipe.tasks.vision.face_stylizer.FaceStylizerGraph"), Gi(n3, "IMAGE:image_in"), Gi(n3, "NORM_RECT:norm_rect"), ji(n3, "STYLIZED_IMAGE:stylized_image"), n3.o(e3), zi(t3, n3), this.g.W("stylized_image", (t4, e4) => {
      var n4 = !this.h, r3 = t4.data, i4 = t4.width;
      const s3 = i4 * (t4 = t4.height);
      if (r3 instanceof Uint8Array) if (r3.length === 3 * s3) {
        const e5 = new Uint8ClampedArray(4 * s3);
        for (let t5 = 0; t5 < s3; ++t5) e5[4 * t5] = r3[3 * t5], e5[4 * t5 + 1] = r3[3 * t5 + 1], e5[4 * t5 + 2] = r3[3 * t5 + 2], e5[4 * t5 + 3] = 255;
        r3 = new ImageData(e5, i4, t4);
      } else {
        if (r3.length !== 4 * s3) throw Error("Unsupported channel count: " + r3.length / s3);
        r3 = new ImageData(new Uint8ClampedArray(r3.buffer, r3.byteOffset, r3.length), i4, t4);
      }
      else if (!(r3 instanceof WebGLTexture)) throw Error(`Unsupported format: ${r3.constructor.name}`);
      i4 = new ja([r3], false, false, this.g.i.canvas, this.R, i4, t4), this.s = n4 = n4 ? i4.clone() : i4, this.h && this.h(n4), $o(this, e4);
    }), this.g.attachEmptyPacketListener("stylized_image", (t4) => {
      this.s = null, this.h && this.h(null), $o(this, t4);
    }), t3 = t3.g(), this.setGraph(new Uint8Array(t3), true);
  }
};
fh.prototype.stylize = fh.prototype.Ra, fh.prototype.setOptions = fh.prototype.o, fh.createFromModelPath = function(t3, e3) {
  return Ka(fh, t3, { baseOptions: { modelAssetPath: e3 } });
}, fh.createFromModelBuffer = function(t3, e3) {
  return Ka(fh, t3, { baseOptions: { modelAssetBuffer: e3 } });
}, fh.createFromOptions = function(t3, e3) {
  return Ka(fh, t3, e3);
};
var dh = Xa([0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [5, 6], [6, 7], [7, 8], [5, 9], [9, 10], [10, 11], [11, 12], [9, 13], [13, 14], [14, 15], [15, 16], [13, 17], [0, 17], [17, 18], [18, 19], [19, 20]);
function ph(t3) {
  t3.gestures = [], t3.landmarks = [], t3.worldLandmarks = [], t3.handedness = [];
}
function gh(t3) {
  return 0 === t3.gestures.length ? { gestures: [], landmarks: [], worldLandmarks: [], handedness: [], handednesses: [] } : { gestures: t3.gestures, landmarks: t3.landmarks, worldLandmarks: t3.worldLandmarks, handedness: t3.handedness, handednesses: t3.handedness };
}
function mh(t3, e3 = true) {
  const n3 = [];
  for (const i4 of t3) {
    var r3 = es(i4);
    t3 = [];
    for (const n4 of r3.g()) r3 = e3 && null != An(n4, 1) ? Tn(An(n4, 1), 0) : -1, t3.push({ score: bn(n4, 2) ?? 0, index: r3, categoryName: kn(n4, 3) ?? "", displayName: kn(n4, 4) ?? "" });
    n3.push(t3);
  }
  return n3;
}
var yh = class extends Za {
  constructor(t3, e3) {
    super(new za(t3, e3), "image_in", "norm_rect", false), this.gestures = [], this.landmarks = [], this.worldLandmarks = [], this.handedness = [], yn(t3 = this.j = new Js(), 0, 1, e3 = new xs()), this.s = new qs(), yn(this.j, 0, 2, this.s), this.C = new $s(), yn(this.s, 0, 3, this.C), this.v = new Ys(), yn(this.s, 0, 2, this.v), this.h = new Ks(), yn(this.j, 0, 3, this.h), Ln(this.v, 2, 0.5), Ln(this.s, 4, 0.5), Ln(this.C, 2, 0.5);
  }
  get baseOptions() {
    return pn(this.j, xs, 1);
  }
  set baseOptions(t3) {
    yn(this.j, 0, 1, t3);
  }
  o(t3) {
    if (xn(this.v, 3, t3.numHands ?? 1), "minHandDetectionConfidence" in t3 && Ln(this.v, 2, t3.minHandDetectionConfidence ?? 0.5), "minTrackingConfidence" in t3 && Ln(this.s, 4, t3.minTrackingConfidence ?? 0.5), "minHandPresenceConfidence" in t3 && Ln(this.C, 2, t3.minHandPresenceConfidence ?? 0.5), t3.cannedGesturesClassifierOptions) {
      var e3 = new Hs(), n3 = e3, r3 = So(t3.cannedGesturesClassifierOptions, pn(this.h, Hs, 3)?.h());
      yn(n3, 0, 2, r3), yn(this.h, 0, 3, e3);
    } else void 0 === t3.cannedGesturesClassifierOptions && pn(this.h, Hs, 3)?.g();
    return t3.customGesturesClassifierOptions ? (yn(n3 = e3 = new Hs(), 0, 2, r3 = So(t3.customGesturesClassifierOptions, pn(this.h, Hs, 4)?.h())), yn(this.h, 0, 4, e3)) : void 0 === t3.customGesturesClassifierOptions && pn(this.h, Hs, 4)?.g(), this.l(t3);
  }
  Ma(t3, e3) {
    return ph(this), $a(this, t3, e3), gh(this);
  }
  Na(t3, e3, n3) {
    return ph(this), qa(this, t3, n3, e3), gh(this);
  }
  m() {
    var t3 = new $i();
    Ki(t3, "image_in"), Ki(t3, "norm_rect"), Yi(t3, "hand_gestures"), Yi(t3, "hand_landmarks"), Yi(t3, "world_hand_landmarks"), Yi(t3, "handedness");
    const e3 = new Ci();
    er(e3, io, this.j);
    const n3 = new Vi();
    Bi(n3, "mediapipe.tasks.vision.gesture_recognizer.GestureRecognizerGraph"), Gi(n3, "IMAGE:image_in"), Gi(n3, "NORM_RECT:norm_rect"), ji(n3, "HAND_GESTURES:hand_gestures"), ji(n3, "LANDMARKS:hand_landmarks"), ji(n3, "WORLD_LANDMARKS:world_hand_landmarks"), ji(n3, "HANDEDNESS:handedness"), n3.o(e3), zi(t3, n3), this.g.attachProtoVectorListener("hand_landmarks", (t4, e4) => {
      for (const e5 of t4) {
        t4 = cs(e5);
        const n4 = [];
        for (const e6 of mn(t4, hs, 1)) n4.push({ x: bn(e6, 1) ?? 0, y: bn(e6, 2) ?? 0, z: bn(e6, 3) ?? 0, visibility: bn(e6, 4) ?? 0 });
        this.landmarks.push(n4);
      }
      $o(this, e4);
    }), this.g.attachEmptyPacketListener("hand_landmarks", (t4) => {
      $o(this, t4);
    }), this.g.attachProtoVectorListener("world_hand_landmarks", (t4, e4) => {
      for (const e5 of t4) {
        t4 = as(e5);
        const n4 = [];
        for (const e6 of mn(t4, os, 1)) n4.push({ x: bn(e6, 1) ?? 0, y: bn(e6, 2) ?? 0, z: bn(e6, 3) ?? 0, visibility: bn(e6, 4) ?? 0 });
        this.worldLandmarks.push(n4);
      }
      $o(this, e4);
    }), this.g.attachEmptyPacketListener("world_hand_landmarks", (t4) => {
      $o(this, t4);
    }), this.g.attachProtoVectorListener("hand_gestures", (t4, e4) => {
      this.gestures.push(...mh(t4, false)), $o(this, e4);
    }), this.g.attachEmptyPacketListener("hand_gestures", (t4) => {
      $o(this, t4);
    }), this.g.attachProtoVectorListener("handedness", (t4, e4) => {
      this.handedness.push(...mh(t4)), $o(this, e4);
    }), this.g.attachEmptyPacketListener("handedness", (t4) => {
      $o(this, t4);
    }), t3 = t3.g(), this.setGraph(new Uint8Array(t3), true);
  }
};
function _h(t3) {
  return { landmarks: t3.landmarks, worldLandmarks: t3.worldLandmarks, handednesses: t3.handedness, handedness: t3.handedness };
}
yh.prototype.recognizeForVideo = yh.prototype.Na, yh.prototype.recognize = yh.prototype.Ma, yh.prototype.setOptions = yh.prototype.o, yh.createFromModelPath = function(t3, e3) {
  return Ka(yh, t3, { baseOptions: { modelAssetPath: e3 } });
}, yh.createFromModelBuffer = function(t3, e3) {
  return Ka(yh, t3, { baseOptions: { modelAssetBuffer: e3 } });
}, yh.createFromOptions = function(t3, e3) {
  return Ka(yh, t3, e3);
}, yh.HAND_CONNECTIONS = dh;
var vh = class extends Za {
  constructor(t3, e3) {
    super(new za(t3, e3), "image_in", "norm_rect", false), this.landmarks = [], this.worldLandmarks = [], this.handedness = [], yn(t3 = this.h = new qs(), 0, 1, e3 = new xs()), this.s = new $s(), yn(this.h, 0, 3, this.s), this.j = new Ys(), yn(this.h, 0, 2, this.j), xn(this.j, 3, 1), Ln(this.j, 2, 0.5), Ln(this.s, 2, 0.5), Ln(this.h, 4, 0.5);
  }
  get baseOptions() {
    return pn(this.h, xs, 1);
  }
  set baseOptions(t3) {
    yn(this.h, 0, 1, t3);
  }
  o(t3) {
    return "numHands" in t3 && xn(this.j, 3, t3.numHands ?? 1), "minHandDetectionConfidence" in t3 && Ln(this.j, 2, t3.minHandDetectionConfidence ?? 0.5), "minTrackingConfidence" in t3 && Ln(this.h, 4, t3.minTrackingConfidence ?? 0.5), "minHandPresenceConfidence" in t3 && Ln(this.s, 2, t3.minHandPresenceConfidence ?? 0.5), this.l(t3);
  }
  D(t3, e3) {
    return this.landmarks = [], this.worldLandmarks = [], this.handedness = [], $a(this, t3, e3), _h(this);
  }
  F(t3, e3, n3) {
    return this.landmarks = [], this.worldLandmarks = [], this.handedness = [], qa(this, t3, n3, e3), _h(this);
  }
  m() {
    var t3 = new $i();
    Ki(t3, "image_in"), Ki(t3, "norm_rect"), Yi(t3, "hand_landmarks"), Yi(t3, "world_hand_landmarks"), Yi(t3, "handedness");
    const e3 = new Ci();
    er(e3, ro, this.h);
    const n3 = new Vi();
    Bi(n3, "mediapipe.tasks.vision.hand_landmarker.HandLandmarkerGraph"), Gi(n3, "IMAGE:image_in"), Gi(n3, "NORM_RECT:norm_rect"), ji(n3, "LANDMARKS:hand_landmarks"), ji(n3, "WORLD_LANDMARKS:world_hand_landmarks"), ji(n3, "HANDEDNESS:handedness"), n3.o(e3), zi(t3, n3), this.g.attachProtoVectorListener("hand_landmarks", (t4, e4) => {
      for (const e5 of t4) t4 = cs(e5), this.landmarks.push(Ro(t4));
      $o(this, e4);
    }), this.g.attachEmptyPacketListener("hand_landmarks", (t4) => {
      $o(this, t4);
    }), this.g.attachProtoVectorListener("world_hand_landmarks", (t4, e4) => {
      for (const e5 of t4) t4 = as(e5), this.worldLandmarks.push(Fo(t4));
      $o(this, e4);
    }), this.g.attachEmptyPacketListener("world_hand_landmarks", (t4) => {
      $o(this, t4);
    }), this.g.attachProtoVectorListener("handedness", (t4, e4) => {
      var n4 = this.handedness, r3 = n4.push;
      const i4 = [];
      for (const e5 of t4) {
        t4 = es(e5);
        const n5 = [];
        for (const e6 of t4.g()) n5.push({ score: bn(e6, 2) ?? 0, index: Tn(An(e6, 1), 0) ?? -1, categoryName: kn(e6, 3) ?? "", displayName: kn(e6, 4) ?? "" });
        i4.push(n5);
      }
      r3.call(n4, ...i4), $o(this, e4);
    }), this.g.attachEmptyPacketListener("handedness", (t4) => {
      $o(this, t4);
    }), t3 = t3.g(), this.setGraph(new Uint8Array(t3), true);
  }
};
vh.prototype.detectForVideo = vh.prototype.F, vh.prototype.detect = vh.prototype.D, vh.prototype.setOptions = vh.prototype.o, vh.createFromModelPath = function(t3, e3) {
  return Ka(vh, t3, { baseOptions: { modelAssetPath: e3 } });
}, vh.createFromModelBuffer = function(t3, e3) {
  return Ka(vh, t3, { baseOptions: { modelAssetBuffer: e3 } });
}, vh.createFromOptions = function(t3, e3) {
  return Ka(vh, t3, e3);
}, vh.HAND_CONNECTIONS = dh;
var Eh = Xa([0, 1], [1, 2], [2, 3], [3, 7], [0, 4], [4, 5], [5, 6], [6, 8], [9, 10], [11, 12], [11, 13], [13, 15], [15, 17], [15, 19], [15, 21], [17, 19], [12, 14], [14, 16], [16, 18], [16, 20], [16, 22], [18, 20], [11, 23], [12, 24], [23, 24], [23, 25], [24, 26], [25, 27], [26, 28], [27, 29], [28, 30], [29, 31], [30, 32], [27, 31], [28, 32]);
function wh(t3) {
  t3.h = { faceLandmarks: [], faceBlendshapes: [], poseLandmarks: [], poseWorldLandmarks: [], poseSegmentationMasks: [], leftHandLandmarks: [], leftHandWorldLandmarks: [], rightHandLandmarks: [], rightHandWorldLandmarks: [] };
}
function Th(t3) {
  try {
    if (!t3.C) return t3.h;
    t3.C(t3.h);
  } finally {
    Zo(t3);
  }
}
function Ah(t3, e3) {
  t3 = cs(t3), e3.push(Ro(t3));
}
var bh = class extends Za {
  constructor(t3, e3) {
    super(new za(t3, e3), "input_frames_image", null, false), this.h = { faceLandmarks: [], faceBlendshapes: [], poseLandmarks: [], poseWorldLandmarks: [], poseSegmentationMasks: [], leftHandLandmarks: [], leftHandWorldLandmarks: [], rightHandLandmarks: [], rightHandWorldLandmarks: [] }, this.outputPoseSegmentationMasks = this.outputFaceBlendshapes = false, yn(t3 = this.j = new ho(), 0, 1, e3 = new xs()), this.K = new $s(), yn(this.j, 0, 2, this.K), this.ca = new so(), yn(this.j, 0, 3, this.ca), this.s = new Fs(), yn(this.j, 0, 4, this.s), this.I = new Us(), yn(this.j, 0, 5, this.I), this.v = new oo(), yn(this.j, 0, 6, this.v), this.L = new ao(), yn(this.j, 0, 7, this.L), Ln(this.s, 2, 0.5), Ln(this.s, 3, 0.3), Ln(this.I, 2, 0.5), Ln(this.v, 2, 0.5), Ln(this.v, 3, 0.3), Ln(this.L, 2, 0.5), Ln(this.K, 2, 0.5);
  }
  get baseOptions() {
    return pn(this.j, xs, 1);
  }
  set baseOptions(t3) {
    yn(this.j, 0, 1, t3);
  }
  o(t3) {
    return "minFaceDetectionConfidence" in t3 && Ln(this.s, 2, t3.minFaceDetectionConfidence ?? 0.5), "minFaceSuppressionThreshold" in t3 && Ln(this.s, 3, t3.minFaceSuppressionThreshold ?? 0.3), "minFacePresenceConfidence" in t3 && Ln(this.I, 2, t3.minFacePresenceConfidence ?? 0.5), "outputFaceBlendshapes" in t3 && (this.outputFaceBlendshapes = !!t3.outputFaceBlendshapes), "minPoseDetectionConfidence" in t3 && Ln(this.v, 2, t3.minPoseDetectionConfidence ?? 0.5), "minPoseSuppressionThreshold" in t3 && Ln(this.v, 3, t3.minPoseSuppressionThreshold ?? 0.3), "minPosePresenceConfidence" in t3 && Ln(this.L, 2, t3.minPosePresenceConfidence ?? 0.5), "outputPoseSegmentationMasks" in t3 && (this.outputPoseSegmentationMasks = !!t3.outputPoseSegmentationMasks), "minHandLandmarksConfidence" in t3 && Ln(this.K, 2, t3.minHandLandmarksConfidence ?? 0.5), this.l(t3);
  }
  D(t3, e3, n3) {
    const r3 = "function" != typeof e3 ? e3 : {};
    return this.C = "function" == typeof e3 ? e3 : n3, wh(this), $a(this, t3, r3), Th(this);
  }
  F(t3, e3, n3, r3) {
    const i4 = "function" != typeof n3 ? n3 : {};
    return this.C = "function" == typeof n3 ? n3 : r3, wh(this), qa(this, t3, i4, e3), Th(this);
  }
  m() {
    var t3 = new $i();
    Ki(t3, "input_frames_image"), Yi(t3, "pose_landmarks"), Yi(t3, "pose_world_landmarks"), Yi(t3, "face_landmarks"), Yi(t3, "left_hand_landmarks"), Yi(t3, "left_hand_world_landmarks"), Yi(t3, "right_hand_landmarks"), Yi(t3, "right_hand_world_landmarks");
    const e3 = new Ci(), n3 = new ki();
    an(n3, 1, ne("type.googleapis.com/mediapipe.tasks.vision.holistic_landmarker.proto.HolisticLandmarkerGraphOptions"), ""), function(t4, e4) {
      if (null != e4) if (Array.isArray(e4)) $e(t4, 2, De(e4, Ge, void 0, void 0, false));
      else {
        if (!("string" == typeof e4 || e4 instanceof D || I(e4))) throw Error("invalid value in Any.value field: " + e4 + " expected a ByteString, a base64 encoded string, a Uint8Array or a jspb array");
        an(t4, 2, lt(e4, false, false), N());
      }
    }(n3, this.j.g());
    const r3 = new Vi();
    Bi(r3, "mediapipe.tasks.vision.holistic_landmarker.HolisticLandmarkerGraph"), wn(r3, 8, ki, n3), Gi(r3, "IMAGE:input_frames_image"), ji(r3, "POSE_LANDMARKS:pose_landmarks"), ji(r3, "POSE_WORLD_LANDMARKS:pose_world_landmarks"), ji(r3, "FACE_LANDMARKS:face_landmarks"), ji(r3, "LEFT_HAND_LANDMARKS:left_hand_landmarks"), ji(r3, "LEFT_HAND_WORLD_LANDMARKS:left_hand_world_landmarks"), ji(r3, "RIGHT_HAND_LANDMARKS:right_hand_landmarks"), ji(r3, "RIGHT_HAND_WORLD_LANDMARKS:right_hand_world_landmarks"), r3.o(e3), zi(t3, r3), qo(this, t3), this.g.attachProtoListener("pose_landmarks", (t4, e4) => {
      Ah(t4, this.h.poseLandmarks), $o(this, e4);
    }), this.g.attachEmptyPacketListener("pose_landmarks", (t4) => {
      $o(this, t4);
    }), this.g.attachProtoListener("pose_world_landmarks", (t4, e4) => {
      var n4 = this.h.poseWorldLandmarks;
      t4 = as(t4), n4.push(Fo(t4)), $o(this, e4);
    }), this.g.attachEmptyPacketListener("pose_world_landmarks", (t4) => {
      $o(this, t4);
    }), this.outputPoseSegmentationMasks && (ji(r3, "POSE_SEGMENTATION_MASK:pose_segmentation_mask"), Jo(this, "pose_segmentation_mask"), this.g.W("pose_segmentation_mask", (t4, e4) => {
      this.h.poseSegmentationMasks = [Ja(this, t4, true, !this.C)], $o(this, e4);
    }), this.g.attachEmptyPacketListener("pose_segmentation_mask", (t4) => {
      this.h.poseSegmentationMasks = [], $o(this, t4);
    })), this.g.attachProtoListener("face_landmarks", (t4, e4) => {
      Ah(t4, this.h.faceLandmarks), $o(this, e4);
    }), this.g.attachEmptyPacketListener("face_landmarks", (t4) => {
      $o(this, t4);
    }), this.outputFaceBlendshapes && (Yi(t3, "extra_blendshapes"), ji(r3, "FACE_BLENDSHAPES:extra_blendshapes"), this.g.attachProtoListener("extra_blendshapes", (t4, e4) => {
      var n4 = this.h.faceBlendshapes;
      this.outputFaceBlendshapes && (t4 = es(t4), n4.push(xo(t4.g() ?? []))), $o(this, e4);
    }), this.g.attachEmptyPacketListener("extra_blendshapes", (t4) => {
      $o(this, t4);
    })), this.g.attachProtoListener("left_hand_landmarks", (t4, e4) => {
      Ah(t4, this.h.leftHandLandmarks), $o(this, e4);
    }), this.g.attachEmptyPacketListener("left_hand_landmarks", (t4) => {
      $o(this, t4);
    }), this.g.attachProtoListener("left_hand_world_landmarks", (t4, e4) => {
      var n4 = this.h.leftHandWorldLandmarks;
      t4 = as(t4), n4.push(Fo(t4)), $o(this, e4);
    }), this.g.attachEmptyPacketListener("left_hand_world_landmarks", (t4) => {
      $o(this, t4);
    }), this.g.attachProtoListener("right_hand_landmarks", (t4, e4) => {
      Ah(t4, this.h.rightHandLandmarks), $o(this, e4);
    }), this.g.attachEmptyPacketListener("right_hand_landmarks", (t4) => {
      $o(this, t4);
    }), this.g.attachProtoListener("right_hand_world_landmarks", (t4, e4) => {
      var n4 = this.h.rightHandWorldLandmarks;
      t4 = as(t4), n4.push(Fo(t4)), $o(this, e4);
    }), this.g.attachEmptyPacketListener("right_hand_world_landmarks", (t4) => {
      $o(this, t4);
    }), t3 = t3.g(), this.setGraph(new Uint8Array(t3), true);
  }
};
bh.prototype.detectForVideo = bh.prototype.F, bh.prototype.detect = bh.prototype.D, bh.prototype.setOptions = bh.prototype.o, bh.createFromModelPath = function(t3, e3) {
  return Ka(bh, t3, { baseOptions: { modelAssetPath: e3 } });
}, bh.createFromModelBuffer = function(t3, e3) {
  return Ka(bh, t3, { baseOptions: { modelAssetBuffer: e3 } });
}, bh.createFromOptions = function(t3, e3) {
  return Ka(bh, t3, e3);
}, bh.HAND_CONNECTIONS = dh, bh.POSE_CONNECTIONS = Eh, bh.FACE_LANDMARKS_LIPS = th, bh.FACE_LANDMARKS_LEFT_EYE = eh, bh.FACE_LANDMARKS_LEFT_EYEBROW = nh, bh.FACE_LANDMARKS_LEFT_IRIS = rh, bh.FACE_LANDMARKS_RIGHT_EYE = ih, bh.FACE_LANDMARKS_RIGHT_EYEBROW = sh, bh.FACE_LANDMARKS_RIGHT_IRIS = oh, bh.FACE_LANDMARKS_FACE_OVAL = ah, bh.FACE_LANDMARKS_CONTOURS = hh, bh.FACE_LANDMARKS_TESSELATION = ch;
var kh = class extends Za {
  constructor(t3, e3) {
    super(new za(t3, e3), "input_image", "norm_rect", true), this.j = { classifications: [] }, yn(t3 = this.h = new lo(), 0, 1, e3 = new xs());
  }
  get baseOptions() {
    return pn(this.h, xs, 1);
  }
  set baseOptions(t3) {
    yn(this.h, 0, 1, t3);
  }
  o(t3) {
    return yn(this.h, 0, 2, So(t3, pn(this.h, Es, 2))), this.l(t3);
  }
  wa(t3, e3) {
    return this.j = { classifications: [] }, $a(this, t3, e3), this.j;
  }
  xa(t3, e3, n3) {
    return this.j = { classifications: [] }, qa(this, t3, n3, e3), this.j;
  }
  m() {
    var t3 = new $i();
    Ki(t3, "input_image"), Ki(t3, "norm_rect"), Yi(t3, "classifications");
    const e3 = new Ci();
    er(e3, fo, this.h);
    const n3 = new Vi();
    Bi(n3, "mediapipe.tasks.vision.image_classifier.ImageClassifierGraph"), Gi(n3, "IMAGE:input_image"), Gi(n3, "NORM_RECT:norm_rect"), ji(n3, "CLASSIFICATIONS:classifications"), n3.o(e3), zi(t3, n3), this.g.attachProtoListener("classifications", (t4, e4) => {
      this.j = function(t5) {
        const e5 = { classifications: mn(t5, ds, 1).map((t6) => xo(pn(t6, Qi, 4)?.g() ?? [], Tn(An(t6, 2), 0), kn(t6, 3))) };
        return null != Qt(ze(t5, 2)) && (e5.timestampMs = Tn(Qt(ze(t5, 2)), 0)), e5;
      }(ps(t4)), $o(this, e4);
    }), this.g.attachEmptyPacketListener("classifications", (t4) => {
      $o(this, t4);
    }), t3 = t3.g(), this.setGraph(new Uint8Array(t3), true);
  }
};
kh.prototype.classifyForVideo = kh.prototype.xa, kh.prototype.classify = kh.prototype.wa, kh.prototype.setOptions = kh.prototype.o, kh.createFromModelPath = function(t3, e3) {
  return Ka(kh, t3, { baseOptions: { modelAssetPath: e3 } });
}, kh.createFromModelBuffer = function(t3, e3) {
  return Ka(kh, t3, { baseOptions: { modelAssetBuffer: e3 } });
}, kh.createFromOptions = function(t3, e3) {
  return Ka(kh, t3, e3);
};
var Sh = class extends Za {
  constructor(t3, e3) {
    super(new za(t3, e3), "image_in", "norm_rect", true), this.h = new po(), this.embeddings = { embeddings: [] }, yn(t3 = this.h, 0, 1, e3 = new xs());
  }
  get baseOptions() {
    return pn(this.h, xs, 1);
  }
  set baseOptions(t3) {
    yn(this.h, 0, 1, t3);
  }
  o(t3) {
    var e3 = this.h, n3 = pn(this.h, Ts, 2);
    return n3 = n3 ? n3.clone() : new Ts(), void 0 !== t3.l2Normalize ? Sn(n3, 1, t3.l2Normalize) : "l2Normalize" in t3 && $e(n3, 1), void 0 !== t3.quantize ? Sn(n3, 2, t3.quantize) : "quantize" in t3 && $e(n3, 2), yn(e3, 0, 2, n3), this.l(t3);
  }
  Da(t3, e3) {
    return $a(this, t3, e3), this.embeddings;
  }
  Ea(t3, e3, n3) {
    return qa(this, t3, n3, e3), this.embeddings;
  }
  m() {
    var t3 = new $i();
    Ki(t3, "image_in"), Ki(t3, "norm_rect"), Yi(t3, "embeddings_out");
    const e3 = new Ci();
    er(e3, go, this.h);
    const n3 = new Vi();
    Bi(n3, "mediapipe.tasks.vision.image_embedder.ImageEmbedderGraph"), Gi(n3, "IMAGE:image_in"), Gi(n3, "NORM_RECT:norm_rect"), ji(n3, "EMBEDDINGS:embeddings_out"), n3.o(e3), zi(t3, n3), this.g.attachProtoListener("embeddings_out", (t4, e4) => {
      t4 = vs(t4), this.embeddings = function(t5) {
        return { embeddings: mn(t5, ys, 1).map((t6) => {
          const e5 = { headIndex: Tn(An(t6, 3), 0) ?? -1, headName: kn(t6, 4) ?? "" };
          if (void 0 !== dn(t6, gs, hn(t6, 1))) t6 = en(t6 = pn(t6, gs, hn(t6, 1)), 1, Ht, tn()), e5.floatEmbedding = t6.slice();
          else {
            const n4 = new Uint8Array(0);
            e5.quantizedEmbedding = pn(t6, ms, hn(t6, 2))?.ra()?.ua() ?? n4;
          }
          return e5;
        }), timestampMs: Tn(Qt(ze(t5, 2)), 0) };
      }(t4), $o(this, e4);
    }), this.g.attachEmptyPacketListener("embeddings_out", (t4) => {
      $o(this, t4);
    }), t3 = t3.g(), this.setGraph(new Uint8Array(t3), true);
  }
};
Sh.cosineSimilarity = function(t3, e3) {
  if (t3.floatEmbedding && e3.floatEmbedding) t3 = Io(t3.floatEmbedding, e3.floatEmbedding);
  else {
    if (!t3.quantizedEmbedding || !e3.quantizedEmbedding) throw Error("Cannot compute cosine similarity between quantized and float embeddings.");
    t3 = Io(Mo(t3.quantizedEmbedding), Mo(e3.quantizedEmbedding));
  }
  return t3;
}, Sh.prototype.embedForVideo = Sh.prototype.Ea, Sh.prototype.embed = Sh.prototype.Da, Sh.prototype.setOptions = Sh.prototype.o, Sh.createFromModelPath = function(t3, e3) {
  return Ka(Sh, t3, { baseOptions: { modelAssetPath: e3 } });
}, Sh.createFromModelBuffer = function(t3, e3) {
  return Ka(Sh, t3, { baseOptions: { modelAssetBuffer: e3 } });
}, Sh.createFromOptions = function(t3, e3) {
  return Ka(Sh, t3, e3);
};
var xh = class {
  constructor(t3, e3, n3) {
    this.confidenceMasks = t3, this.categoryMask = e3, this.qualityScores = n3;
  }
  close() {
    this.confidenceMasks?.forEach((t3) => {
      t3.close();
    }), this.categoryMask?.close();
  }
};
function Lh(t3) {
  t3.categoryMask = void 0, t3.confidenceMasks = void 0, t3.qualityScores = void 0;
}
function Rh(t3) {
  try {
    const e3 = new xh(t3.confidenceMasks, t3.categoryMask, t3.qualityScores);
    if (!t3.j) return e3;
    t3.j(e3);
  } finally {
    Zo(t3);
  }
}
xh.prototype.close = xh.prototype.close;
var Fh = class extends Za {
  constructor(t3, e3) {
    super(new za(t3, e3), "image_in", "norm_rect", false), this.s = [], this.outputCategoryMask = false, this.outputConfidenceMasks = true, this.h = new Eo(), this.v = new mo(), yn(this.h, 0, 3, this.v), yn(t3 = this.h, 0, 1, e3 = new xs());
  }
  get baseOptions() {
    return pn(this.h, xs, 1);
  }
  set baseOptions(t3) {
    yn(this.h, 0, 1, t3);
  }
  o(t3) {
    return void 0 !== t3.displayNamesLocale ? $e(this.h, 2, ne(t3.displayNamesLocale)) : "displayNamesLocale" in t3 && $e(this.h, 2), "outputCategoryMask" in t3 && (this.outputCategoryMask = t3.outputCategoryMask ?? false), "outputConfidenceMasks" in t3 && (this.outputConfidenceMasks = t3.outputConfidenceMasks ?? true), super.l(t3);
  }
  J() {
    !function(t3) {
      const e3 = mn(t3.ga(), Vi, 1).filter((t4) => kn(t4, 1).includes("mediapipe.tasks.TensorsToSegmentationCalculator"));
      if (t3.s = [], e3.length > 1) throw Error("The graph has more than one mediapipe.tasks.TensorsToSegmentationCalculator.");
      1 === e3.length && (pn(e3[0], Ci, 7)?.l()?.g() ?? /* @__PURE__ */ new Map()).forEach((e4, n3) => {
        t3.s[Number(n3)] = kn(e4, 1);
      });
    }(this);
  }
  ha(t3, e3, n3) {
    const r3 = "function" != typeof e3 ? e3 : {};
    return this.j = "function" == typeof e3 ? e3 : n3, Lh(this), $a(this, t3, r3), Rh(this);
  }
  Pa(t3, e3, n3, r3) {
    const i4 = "function" != typeof n3 ? n3 : {};
    return this.j = "function" == typeof n3 ? n3 : r3, Lh(this), qa(this, t3, i4, e3), Rh(this);
  }
  Ha() {
    return this.s;
  }
  m() {
    var t3 = new $i();
    Ki(t3, "image_in"), Ki(t3, "norm_rect");
    const e3 = new Ci();
    er(e3, wo, this.h);
    const n3 = new Vi();
    Bi(n3, "mediapipe.tasks.vision.image_segmenter.ImageSegmenterGraph"), Gi(n3, "IMAGE:image_in"), Gi(n3, "NORM_RECT:norm_rect"), n3.o(e3), zi(t3, n3), qo(this, t3), this.outputConfidenceMasks && (Yi(t3, "confidence_masks"), ji(n3, "CONFIDENCE_MASKS:confidence_masks"), Jo(this, "confidence_masks"), this.g.fa("confidence_masks", (t4, e4) => {
      this.confidenceMasks = t4.map((t5) => Ja(this, t5, true, !this.j)), $o(this, e4);
    }), this.g.attachEmptyPacketListener("confidence_masks", (t4) => {
      this.confidenceMasks = [], $o(this, t4);
    })), this.outputCategoryMask && (Yi(t3, "category_mask"), ji(n3, "CATEGORY_MASK:category_mask"), Jo(this, "category_mask"), this.g.W("category_mask", (t4, e4) => {
      this.categoryMask = Ja(this, t4, false, !this.j), $o(this, e4);
    }), this.g.attachEmptyPacketListener("category_mask", (t4) => {
      this.categoryMask = void 0, $o(this, t4);
    })), Yi(t3, "quality_scores"), ji(n3, "QUALITY_SCORES:quality_scores"), this.g.attachFloatVectorListener("quality_scores", (t4, e4) => {
      this.qualityScores = t4, $o(this, e4);
    }), this.g.attachEmptyPacketListener("quality_scores", (t4) => {
      this.categoryMask = void 0, $o(this, t4);
    }), t3 = t3.g(), this.setGraph(new Uint8Array(t3), true);
  }
};
Fh.prototype.getLabels = Fh.prototype.Ha, Fh.prototype.segmentForVideo = Fh.prototype.Pa, Fh.prototype.segment = Fh.prototype.ha, Fh.prototype.setOptions = Fh.prototype.o, Fh.createFromModelPath = function(t3, e3) {
  return Ka(Fh, t3, { baseOptions: { modelAssetPath: e3 } });
}, Fh.createFromModelBuffer = function(t3, e3) {
  return Ka(Fh, t3, { baseOptions: { modelAssetBuffer: e3 } });
}, Fh.createFromOptions = function(t3, e3) {
  return Ka(Fh, t3, e3);
};
var Mh = class {
  constructor(t3, e3, n3) {
    this.confidenceMasks = t3, this.categoryMask = e3, this.qualityScores = n3;
  }
  close() {
    this.confidenceMasks?.forEach((t3) => {
      t3.close();
    }), this.categoryMask?.close();
  }
};
Mh.prototype.close = Mh.prototype.close;
var Ih = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var Ph = [0, ai, -2];
var Oh = [0, ti, -3, ui, ti, -1];
var Ch = [0, Oh];
var Nh = [0, Oh, ai, -1];
var Uh = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var Dh = [0, ti, -1, ui];
var Bh = class extends nr {
  constructor() {
    super();
  }
};
var Gh = class extends nr {
  constructor(t3) {
    super(t3);
  }
};
var jh = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15];
var Vh = class extends nr {
  constructor() {
    super();
  }
};
Vh.prototype.g = bi([0, Qr, [0, jh, yi, Oh, yi, [0, Oh, Ph], yi, Ch, yi, [0, Ch, Ph], yi, Dh, yi, [0, ti, -3, ui, Ei], yi, [0, ti, -3, ui], yi, [0, pi, ti, -2, ui, ai, ui, -1, 2, ti, Ph], yi, Nh, yi, [0, Nh, Ph], ti, Ph, pi, yi, [0, ti, -3, ui, Ph, -1], yi, [0, Qr, Dh]], pi, [0, pi, ai, -1, ui]]);
var Xh = class extends Za {
  constructor(t3, e3) {
    super(new za(t3, e3), "image_in", "norm_rect_in", false), this.outputCategoryMask = false, this.outputConfidenceMasks = true, this.h = new Eo(), this.s = new mo(), yn(this.h, 0, 3, this.s), yn(t3 = this.h, 0, 1, e3 = new xs());
  }
  get baseOptions() {
    return pn(this.h, xs, 1);
  }
  set baseOptions(t3) {
    yn(this.h, 0, 1, t3);
  }
  o(t3) {
    return "outputCategoryMask" in t3 && (this.outputCategoryMask = t3.outputCategoryMask ?? false), "outputConfidenceMasks" in t3 && (this.outputConfidenceMasks = t3.outputConfidenceMasks ?? true), super.l(t3);
  }
  ha(t3, e3, n3, r3) {
    const i4 = "function" != typeof n3 ? n3 : {};
    this.j = "function" == typeof n3 ? n3 : r3, this.qualityScores = this.categoryMask = this.confidenceMasks = void 0, n3 = this.B + 1, r3 = new Vh();
    const s3 = new Gh();
    var o3 = new Ih();
    if (xn(o3, 1, 255), yn(s3, 0, 12, o3), e3.keypoint && e3.scribble) throw Error("Cannot provide both keypoint and scribble.");
    if (e3.keypoint) {
      var a6 = new Uh();
      Sn(a6, 3, true), Ln(a6, 1, e3.keypoint.x), Ln(a6, 2, e3.keypoint.y), _n(s3, 5, jh, a6);
    } else {
      if (!e3.scribble) throw Error("Must provide either a keypoint or a scribble.");
      for (a6 of (o3 = new Bh(), e3.scribble)) Sn(e3 = new Uh(), 3, true), Ln(e3, 1, a6.x), Ln(e3, 2, a6.y), wn(o3, 1, Uh, e3);
      _n(s3, 15, jh, o3);
    }
    wn(r3, 1, Gh, s3), this.g.addProtoToStream(r3.g(), "drishti.RenderData", "roi_in", n3), $a(this, t3, i4);
    t: {
      try {
        const t4 = new Mh(this.confidenceMasks, this.categoryMask, this.qualityScores);
        if (!this.j) {
          var h2 = t4;
          break t;
        }
        this.j(t4);
      } finally {
        Zo(this);
      }
      h2 = void 0;
    }
    return h2;
  }
  m() {
    var t3 = new $i();
    Ki(t3, "image_in"), Ki(t3, "roi_in"), Ki(t3, "norm_rect_in");
    const e3 = new Ci();
    er(e3, wo, this.h);
    const n3 = new Vi();
    Bi(n3, "mediapipe.tasks.vision.interactive_segmenter.InteractiveSegmenterGraph"), Gi(n3, "IMAGE:image_in"), Gi(n3, "ROI:roi_in"), Gi(n3, "NORM_RECT:norm_rect_in"), n3.o(e3), zi(t3, n3), qo(this, t3), this.outputConfidenceMasks && (Yi(t3, "confidence_masks"), ji(n3, "CONFIDENCE_MASKS:confidence_masks"), Jo(this, "confidence_masks"), this.g.fa("confidence_masks", (t4, e4) => {
      this.confidenceMasks = t4.map((t5) => Ja(this, t5, true, !this.j)), $o(this, e4);
    }), this.g.attachEmptyPacketListener("confidence_masks", (t4) => {
      this.confidenceMasks = [], $o(this, t4);
    })), this.outputCategoryMask && (Yi(t3, "category_mask"), ji(n3, "CATEGORY_MASK:category_mask"), Jo(this, "category_mask"), this.g.W("category_mask", (t4, e4) => {
      this.categoryMask = Ja(this, t4, false, !this.j), $o(this, e4);
    }), this.g.attachEmptyPacketListener("category_mask", (t4) => {
      this.categoryMask = void 0, $o(this, t4);
    })), Yi(t3, "quality_scores"), ji(n3, "QUALITY_SCORES:quality_scores"), this.g.attachFloatVectorListener("quality_scores", (t4, e4) => {
      this.qualityScores = t4, $o(this, e4);
    }), this.g.attachEmptyPacketListener("quality_scores", (t4) => {
      this.categoryMask = void 0, $o(this, t4);
    }), t3 = t3.g(), this.setGraph(new Uint8Array(t3), true);
  }
};
Xh.prototype.segment = Xh.prototype.ha, Xh.prototype.setOptions = Xh.prototype.o, Xh.createFromModelPath = function(t3, e3) {
  return Ka(Xh, t3, { baseOptions: { modelAssetPath: e3 } });
}, Xh.createFromModelBuffer = function(t3, e3) {
  return Ka(Xh, t3, { baseOptions: { modelAssetBuffer: e3 } });
}, Xh.createFromOptions = function(t3, e3) {
  return Ka(Xh, t3, e3);
};
var Hh = class extends Za {
  constructor(t3, e3) {
    super(new za(t3, e3), "input_frame_gpu", "norm_rect", false), this.j = { detections: [] }, yn(t3 = this.h = new To(), 0, 1, e3 = new xs());
  }
  get baseOptions() {
    return pn(this.h, xs, 1);
  }
  set baseOptions(t3) {
    yn(this.h, 0, 1, t3);
  }
  o(t3) {
    return void 0 !== t3.displayNamesLocale ? $e(this.h, 2, ne(t3.displayNamesLocale)) : "displayNamesLocale" in t3 && $e(this.h, 2), void 0 !== t3.maxResults ? xn(this.h, 3, t3.maxResults) : "maxResults" in t3 && $e(this.h, 3), void 0 !== t3.scoreThreshold ? Ln(this.h, 4, t3.scoreThreshold) : "scoreThreshold" in t3 && $e(this.h, 4), void 0 !== t3.categoryAllowlist ? Rn(this.h, 5, t3.categoryAllowlist) : "categoryAllowlist" in t3 && $e(this.h, 5), void 0 !== t3.categoryDenylist ? Rn(this.h, 6, t3.categoryDenylist) : "categoryDenylist" in t3 && $e(this.h, 6), this.l(t3);
  }
  D(t3, e3) {
    return this.j = { detections: [] }, $a(this, t3, e3), this.j;
  }
  F(t3, e3, n3) {
    return this.j = { detections: [] }, qa(this, t3, n3, e3), this.j;
  }
  m() {
    var t3 = new $i();
    Ki(t3, "input_frame_gpu"), Ki(t3, "norm_rect"), Yi(t3, "detections");
    const e3 = new Ci();
    er(e3, Ao, this.h);
    const n3 = new Vi();
    Bi(n3, "mediapipe.tasks.vision.ObjectDetectorGraph"), Gi(n3, "IMAGE:input_frame_gpu"), Gi(n3, "NORM_RECT:norm_rect"), ji(n3, "DETECTIONS:detections"), n3.o(e3), zi(t3, n3), this.g.attachProtoVectorListener("detections", (t4, e4) => {
      for (const e5 of t4) t4 = ss(e5), this.j.detections.push(Lo(t4));
      $o(this, e4);
    }), this.g.attachEmptyPacketListener("detections", (t4) => {
      $o(this, t4);
    }), t3 = t3.g(), this.setGraph(new Uint8Array(t3), true);
  }
};
Hh.prototype.detectForVideo = Hh.prototype.F, Hh.prototype.detect = Hh.prototype.D, Hh.prototype.setOptions = Hh.prototype.o, Hh.createFromModelPath = async function(t3, e3) {
  return Ka(Hh, t3, { baseOptions: { modelAssetPath: e3 } });
}, Hh.createFromModelBuffer = function(t3, e3) {
  return Ka(Hh, t3, { baseOptions: { modelAssetBuffer: e3 } });
}, Hh.createFromOptions = function(t3, e3) {
  return Ka(Hh, t3, e3);
};
var Wh = class {
  constructor(t3, e3, n3) {
    this.landmarks = t3, this.worldLandmarks = e3, this.segmentationMasks = n3;
  }
  close() {
    this.segmentationMasks?.forEach((t3) => {
      t3.close();
    });
  }
};
function zh(t3) {
  t3.landmarks = [], t3.worldLandmarks = [], t3.segmentationMasks = void 0;
}
function Kh(t3) {
  try {
    const e3 = new Wh(t3.landmarks, t3.worldLandmarks, t3.segmentationMasks);
    if (!t3.s) return e3;
    t3.s(e3);
  } finally {
    Zo(t3);
  }
}
Wh.prototype.close = Wh.prototype.close;
var Yh = class extends Za {
  constructor(t3, e3) {
    super(new za(t3, e3), "image_in", "norm_rect", false), this.landmarks = [], this.worldLandmarks = [], this.outputSegmentationMasks = false, yn(t3 = this.h = new bo(), 0, 1, e3 = new xs()), this.v = new ao(), yn(this.h, 0, 3, this.v), this.j = new oo(), yn(this.h, 0, 2, this.j), xn(this.j, 4, 1), Ln(this.j, 2, 0.5), Ln(this.v, 2, 0.5), Ln(this.h, 4, 0.5);
  }
  get baseOptions() {
    return pn(this.h, xs, 1);
  }
  set baseOptions(t3) {
    yn(this.h, 0, 1, t3);
  }
  o(t3) {
    return "numPoses" in t3 && xn(this.j, 4, t3.numPoses ?? 1), "minPoseDetectionConfidence" in t3 && Ln(this.j, 2, t3.minPoseDetectionConfidence ?? 0.5), "minTrackingConfidence" in t3 && Ln(this.h, 4, t3.minTrackingConfidence ?? 0.5), "minPosePresenceConfidence" in t3 && Ln(this.v, 2, t3.minPosePresenceConfidence ?? 0.5), "outputSegmentationMasks" in t3 && (this.outputSegmentationMasks = t3.outputSegmentationMasks ?? false), this.l(t3);
  }
  D(t3, e3, n3) {
    const r3 = "function" != typeof e3 ? e3 : {};
    return this.s = "function" == typeof e3 ? e3 : n3, zh(this), $a(this, t3, r3), Kh(this);
  }
  F(t3, e3, n3, r3) {
    const i4 = "function" != typeof n3 ? n3 : {};
    return this.s = "function" == typeof n3 ? n3 : r3, zh(this), qa(this, t3, i4, e3), Kh(this);
  }
  m() {
    var t3 = new $i();
    Ki(t3, "image_in"), Ki(t3, "norm_rect"), Yi(t3, "normalized_landmarks"), Yi(t3, "world_landmarks"), Yi(t3, "segmentation_masks");
    const e3 = new Ci();
    er(e3, ko, this.h);
    const n3 = new Vi();
    Bi(n3, "mediapipe.tasks.vision.pose_landmarker.PoseLandmarkerGraph"), Gi(n3, "IMAGE:image_in"), Gi(n3, "NORM_RECT:norm_rect"), ji(n3, "NORM_LANDMARKS:normalized_landmarks"), ji(n3, "WORLD_LANDMARKS:world_landmarks"), n3.o(e3), zi(t3, n3), qo(this, t3), this.g.attachProtoVectorListener("normalized_landmarks", (t4, e4) => {
      this.landmarks = [];
      for (const e5 of t4) t4 = cs(e5), this.landmarks.push(Ro(t4));
      $o(this, e4);
    }), this.g.attachEmptyPacketListener("normalized_landmarks", (t4) => {
      this.landmarks = [], $o(this, t4);
    }), this.g.attachProtoVectorListener("world_landmarks", (t4, e4) => {
      this.worldLandmarks = [];
      for (const e5 of t4) t4 = as(e5), this.worldLandmarks.push(Fo(t4));
      $o(this, e4);
    }), this.g.attachEmptyPacketListener("world_landmarks", (t4) => {
      this.worldLandmarks = [], $o(this, t4);
    }), this.outputSegmentationMasks && (ji(n3, "SEGMENTATION_MASK:segmentation_masks"), Jo(this, "segmentation_masks"), this.g.fa("segmentation_masks", (t4, e4) => {
      this.segmentationMasks = t4.map((t5) => Ja(this, t5, true, !this.s)), $o(this, e4);
    }), this.g.attachEmptyPacketListener("segmentation_masks", (t4) => {
      this.segmentationMasks = [], $o(this, t4);
    })), t3 = t3.g(), this.setGraph(new Uint8Array(t3), true);
  }
};
Yh.prototype.detectForVideo = Yh.prototype.F, Yh.prototype.detect = Yh.prototype.D, Yh.prototype.setOptions = Yh.prototype.o, Yh.createFromModelPath = function(t3, e3) {
  return Ka(Yh, t3, { baseOptions: { modelAssetPath: e3 } });
}, Yh.createFromModelBuffer = function(t3, e3) {
  return Ka(Yh, t3, { baseOptions: { modelAssetBuffer: e3 } });
}, Yh.createFromOptions = function(t3, e3) {
  return Ka(Yh, t3, e3);
}, Yh.POSE_CONNECTIONS = Eh;

// node_modules/@react-three/drei/core/FaceLandmarker.js
var FaceLandmarkerContext = (0, import_react9.createContext)({});
var FaceLandmarkerDefaults = {
  basePath: "https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.0/wasm",
  options: {
    baseOptions: {
      modelAssetPath: "https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task",
      delegate: "GPU"
    },
    runningMode: "VIDEO",
    outputFaceBlendshapes: true,
    outputFacialTransformationMatrixes: true
  }
};
function FaceLandmarker({
  basePath = FaceLandmarkerDefaults.basePath,
  options = FaceLandmarkerDefaults.options,
  children
}) {
  const opts = JSON.stringify(options);
  const faceLandmarker = suspend(async () => {
    return await Uo.forVisionTasks(basePath).then((vision) => lh.createFromOptions(vision, options));
  }, [basePath, opts]);
  (0, import_react9.useEffect)(() => {
    return () => {
      faceLandmarker == null ? void 0 : faceLandmarker.close();
      clear([basePath, opts]);
    };
  }, [faceLandmarker, basePath, opts]);
  return React47.createElement(FaceLandmarkerContext.Provider, {
    value: faceLandmarker
  }, children);
}
function useFaceLandmarker() {
  return (0, import_react9.useContext)(FaceLandmarkerContext);
}

// node_modules/@react-three/drei/core/FaceControls.js
function mean2(v12, v22) {
  return v12.clone().add(v22).multiplyScalar(0.5);
}
function localToLocal(objSrc, v5, objDst) {
  const v_world = objSrc.localToWorld(v5);
  return objDst.worldToLocal(v_world);
}
var FaceControlsContext = (0, import_react10.createContext)({});
var FaceControls = (0, import_react10.forwardRef)(({
  camera,
  autostart = true,
  webcam = true,
  webcamVideoTextureSrc,
  manualUpdate = false,
  manualDetect = false,
  onVideoFrame,
  smoothTime = 0.25,
  offset = true,
  offsetScalar = 80,
  eyes = false,
  eyesAsOrigin = true,
  depth = 0.15,
  debug = false,
  facemesh,
  makeDefault
}, fref) => {
  var _faces$facialTransfor, _faces$faceBlendshape;
  const scene = useThree((state) => state.scene);
  const defaultCamera = useThree((state) => state.camera);
  const set = useThree((state) => state.set);
  const get = useThree((state) => state.get);
  const explCamera = camera || defaultCamera;
  const webcamApiRef = (0, import_react10.useRef)(null);
  const facemeshApiRef = (0, import_react10.useRef)(null);
  const [target2] = (0, import_react10.useState)(() => new Object3D());
  const [irisRightDirPos] = (0, import_react10.useState)(() => new Vector3());
  const [irisLeftDirPos] = (0, import_react10.useState)(() => new Vector3());
  const [irisRightLookAt] = (0, import_react10.useState)(() => new Vector3());
  const [irisLeftLookAt] = (0, import_react10.useState)(() => new Vector3());
  const computeTarget = (0, import_react10.useCallback)(() => {
    target2.parent = explCamera.parent;
    const facemeshApi = facemeshApiRef.current;
    if (facemeshApi) {
      const {
        outerRef,
        eyeRightRef,
        eyeLeftRef
      } = facemeshApi;
      if (eyeRightRef.current && eyeLeftRef.current) {
        const {
          irisDirRef: irisRightDirRef
        } = eyeRightRef.current;
        const {
          irisDirRef: irisLeftDirRef
        } = eyeLeftRef.current;
        if (irisRightDirRef.current && irisLeftDirRef.current && outerRef.current) {
          irisRightDirPos.copy(localToLocal(irisRightDirRef.current, new Vector3(0, 0, 0), outerRef.current));
          irisLeftDirPos.copy(localToLocal(irisLeftDirRef.current, new Vector3(0, 0, 0), outerRef.current));
          target2.position.copy(localToLocal(outerRef.current, mean2(irisRightDirPos, irisLeftDirPos), explCamera.parent || scene));
          irisRightLookAt.copy(localToLocal(irisRightDirRef.current, new Vector3(0, 0, 1), outerRef.current));
          irisLeftLookAt.copy(localToLocal(irisLeftDirRef.current, new Vector3(0, 0, 1), outerRef.current));
          target2.lookAt(outerRef.current.localToWorld(mean2(irisRightLookAt, irisLeftLookAt)));
        }
      } else {
        if (outerRef.current) {
          target2.position.copy(localToLocal(outerRef.current, new Vector3(0, 0, 0), explCamera.parent || scene));
          target2.lookAt(outerRef.current.localToWorld(new Vector3(0, 0, 1)));
        }
      }
    }
    return target2;
  }, [explCamera, irisLeftDirPos, irisLeftLookAt, irisRightDirPos, irisRightLookAt, scene, target2]);
  const [current] = (0, import_react10.useState)(() => new Object3D());
  const update = (0, import_react10.useCallback)(function(delta, target3) {
    if (explCamera) {
      var _target;
      (_target = target3) !== null && _target !== void 0 ? _target : target3 = computeTarget();
      if (smoothTime > 0) {
        const eps2 = 1e-9;
        easing.damp3(current.position, target3.position, smoothTime, delta, void 0, void 0, eps2);
        easing.dampE(current.rotation, target3.rotation, smoothTime, delta, void 0, void 0, eps2);
      } else {
        current.position.copy(target3.position);
        current.rotation.copy(target3.rotation);
      }
      explCamera.position.copy(current.position);
      explCamera.rotation.copy(current.rotation);
    }
  }, [explCamera, computeTarget, smoothTime, current.position, current.rotation]);
  const [faces, setFaces] = (0, import_react10.useState)();
  const faceLandmarker = useFaceLandmarker();
  const detect = (0, import_react10.useCallback)((video, time) => {
    const faces2 = faceLandmarker == null ? void 0 : faceLandmarker.detectForVideo(video, time);
    setFaces(faces2);
  }, [faceLandmarker]);
  useFrame((_2, delta) => {
    if (!manualUpdate) {
      update(delta);
    }
  });
  const api = (0, import_react10.useMemo)(() => Object.assign(Object.create(EventDispatcher.prototype), {
    detect,
    computeTarget,
    update,
    facemeshApiRef,
    webcamApiRef,
    // shorthands
    play: () => {
      var _webcamApiRef$current, _webcamApiRef$current2;
      (_webcamApiRef$current = webcamApiRef.current) == null ? void 0 : (_webcamApiRef$current2 = _webcamApiRef$current.videoTextureApiRef.current) == null ? void 0 : _webcamApiRef$current2.texture.source.data.play();
    },
    pause: () => {
      var _webcamApiRef$current3, _webcamApiRef$current4;
      (_webcamApiRef$current3 = webcamApiRef.current) == null ? void 0 : (_webcamApiRef$current4 = _webcamApiRef$current3.videoTextureApiRef.current) == null ? void 0 : _webcamApiRef$current4.texture.source.data.pause();
    }
  }), [detect, computeTarget, update]);
  (0, import_react10.useImperativeHandle)(fref, () => api, [api]);
  (0, import_react10.useEffect)(() => {
    const onVideoFrameCb = (e3) => {
      if (!manualDetect) detect(e3.texture.source.data, e3.time);
      if (onVideoFrame) onVideoFrame(e3);
    };
    api.addEventListener("videoFrame", onVideoFrameCb);
    return () => {
      api.removeEventListener("videoFrame", onVideoFrameCb);
    };
  }, [api, detect, faceLandmarker, manualDetect, onVideoFrame]);
  (0, import_react10.useEffect)(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls: api
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, api, get, set]);
  const points = faces == null ? void 0 : faces.faceLandmarks[0];
  const facialTransformationMatrix = faces == null ? void 0 : (_faces$facialTransfor = faces.facialTransformationMatrixes) == null ? void 0 : _faces$facialTransfor[0];
  const faceBlendshapes = faces == null ? void 0 : (_faces$faceBlendshape = faces.faceBlendshapes) == null ? void 0 : _faces$faceBlendshape[0];
  return React48.createElement(FaceControlsContext.Provider, {
    value: api
  }, webcam && React48.createElement(import_react10.Suspense, {
    fallback: null
  }, React48.createElement(Webcam, {
    ref: webcamApiRef,
    autostart,
    videoTextureSrc: webcamVideoTextureSrc
  })), React48.createElement(Facemesh, _extends({
    ref: facemeshApiRef
  }, facemesh, {
    points,
    depth,
    facialTransformationMatrix,
    faceBlendshapes,
    eyes,
    eyesAsOrigin,
    offset,
    offsetScalar,
    debug,
    "rotation-z": Math.PI,
    visible: debug
  }), React48.createElement("meshBasicMaterial", {
    side: DoubleSide
  })));
});
var useFaceControls = () => (0, import_react10.useContext)(FaceControlsContext);
var Webcam = (0, import_react10.forwardRef)(({
  videoTextureSrc,
  autostart = true
}, fref) => {
  const videoTextureApiRef = (0, import_react10.useRef)(null);
  const faceControls = useFaceControls();
  const stream = suspend(async () => {
    return !videoTextureSrc ? await navigator.mediaDevices.getUserMedia({
      audio: false,
      video: {
        facingMode: "user"
      }
    }) : Promise.resolve(null);
  }, [videoTextureSrc]);
  (0, import_react10.useEffect)(() => {
    faceControls.dispatchEvent({
      type: "stream",
      stream
    });
    return () => {
      stream == null ? void 0 : stream.getTracks().forEach((track) => track.stop());
      clear([videoTextureSrc]);
    };
  }, [stream, faceControls, videoTextureSrc]);
  const api = (0, import_react10.useMemo)(() => ({
    videoTextureApiRef
  }), []);
  (0, import_react10.useImperativeHandle)(fref, () => api, [api]);
  return React48.createElement(import_react10.Suspense, {
    fallback: null
  }, React48.createElement(VideoTexture2, {
    ref: videoTextureApiRef,
    src: videoTextureSrc || stream,
    start: autostart
  }));
});
var VideoTexture2 = (0, import_react10.forwardRef)(({
  src,
  start
}, fref) => {
  const texture = useVideoTexture(src, {
    start
  });
  const video = texture.source.data;
  const faceControls = useFaceControls();
  const onVideoFrame = (0, import_react10.useCallback)((time) => {
    faceControls.dispatchEvent({
      type: "videoFrame",
      texture,
      time
    });
  }, [texture, faceControls]);
  useVideoFrame(video, onVideoFrame);
  const api = (0, import_react10.useMemo)(() => ({
    texture
  }), [texture]);
  (0, import_react10.useImperativeHandle)(fref, () => api, [api]);
  return React48.createElement(React48.Fragment, null);
});
var useVideoFrame = (video, f3) => {
  (0, import_react10.useEffect)(() => {
    if (!video || !video.requestVideoFrameCallback) return;
    let handle;
    function callback(...args) {
      f3(...args);
      handle = video.requestVideoFrameCallback(callback);
    }
    video.requestVideoFrameCallback(callback);
    return () => video.cancelVideoFrameCallback(handle);
  }, [video, f3]);
};

// node_modules/@react-three/drei/core/GizmoHelper.js
var React50 = __toESM(require_react());

// node_modules/@react-three/drei/core/Hud.js
var React49 = __toESM(require_react());
function RenderHud({
  defaultScene,
  defaultCamera,
  renderPriority = 1
}) {
  const {
    gl,
    scene,
    camera
  } = useThree();
  let oldCLear;
  useFrame(() => {
    oldCLear = gl.autoClear;
    if (renderPriority === 1) {
      gl.autoClear = true;
      gl.render(defaultScene, defaultCamera);
    }
    gl.autoClear = false;
    gl.clearDepth();
    gl.render(scene, camera);
    gl.autoClear = oldCLear;
  }, renderPriority);
  return React49.createElement(React49.Fragment, null);
}
function Hud({
  children,
  renderPriority = 1
}) {
  const {
    scene: defaultScene,
    camera: defaultCamera
  } = useThree();
  const [hudScene] = React49.useState(() => new Scene());
  return React49.createElement(React49.Fragment, null, createPortal(React49.createElement(React49.Fragment, null, children, React49.createElement(RenderHud, {
    defaultScene,
    defaultCamera,
    renderPriority
  })), hudScene, {
    events: {
      priority: renderPriority + 1
    }
  }));
}

// node_modules/@react-three/drei/core/GizmoHelper.js
var Context = React50.createContext({});
var useGizmoContext = () => {
  return React50.useContext(Context);
};
var turnRate = 2 * Math.PI;
var dummy = new Object3D();
var matrix2 = new Matrix4();
var [q1, q2] = [new Quaternion(), new Quaternion()];
var target = new Vector3();
var targetPosition = new Vector3();
var isOrbitControls = (controls) => {
  return "minPolarAngle" in controls;
};
var GizmoHelper = ({
  alignment = "bottom-right",
  margin = [80, 80],
  renderPriority = 1,
  onUpdate,
  onTarget,
  children
}) => {
  const size = useThree((state) => state.size);
  const mainCamera = useThree((state) => state.camera);
  const defaultControls = useThree((state) => state.controls);
  const invalidate = useThree((state) => state.invalidate);
  const gizmoRef = React50.useRef();
  const virtualCam = React50.useRef(null);
  const animating = React50.useRef(false);
  const radius = React50.useRef(0);
  const focusPoint = React50.useRef(new Vector3(0, 0, 0));
  const defaultUp = React50.useRef(new Vector3(0, 0, 0));
  React50.useEffect(() => {
    defaultUp.current.copy(mainCamera.up);
  }, [mainCamera]);
  const tweenCamera = React50.useCallback((direction) => {
    animating.current = true;
    if (defaultControls || onTarget) focusPoint.current = (defaultControls == null ? void 0 : defaultControls.target) || (onTarget == null ? void 0 : onTarget());
    radius.current = mainCamera.position.distanceTo(target);
    q1.copy(mainCamera.quaternion);
    targetPosition.copy(direction).multiplyScalar(radius.current).add(target);
    dummy.lookAt(targetPosition);
    dummy.up.copy(mainCamera.up);
    q2.copy(dummy.quaternion);
    invalidate();
  }, [defaultControls, mainCamera, onTarget, invalidate]);
  useFrame((_2, delta) => {
    if (virtualCam.current && gizmoRef.current) {
      var _gizmoRef$current;
      if (animating.current) {
        if (q1.angleTo(q2) < 0.01) {
          animating.current = false;
          if (isOrbitControls(defaultControls)) {
            mainCamera.up.copy(defaultUp.current);
          }
        } else {
          const step = delta * turnRate;
          q1.rotateTowards(q2, step);
          mainCamera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius.current).add(focusPoint.current);
          mainCamera.up.set(0, 1, 0).applyQuaternion(q1).normalize();
          mainCamera.quaternion.copy(q1);
          if (onUpdate) onUpdate();
          else if (defaultControls) defaultControls.update();
          invalidate();
        }
      }
      matrix2.copy(mainCamera.matrix).invert();
      (_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.quaternion.setFromRotationMatrix(matrix2);
    }
  });
  const gizmoHelperContext = React50.useMemo(() => ({
    tweenCamera
  }), [tweenCamera]);
  const [marginX, marginY] = margin;
  const x2 = alignment.endsWith("-center") ? 0 : alignment.endsWith("-left") ? -size.width / 2 + marginX : size.width / 2 - marginX;
  const y2 = alignment.startsWith("center-") ? 0 : alignment.startsWith("top-") ? size.height / 2 - marginY : -size.height / 2 + marginY;
  return React50.createElement(Hud, {
    renderPriority
  }, React50.createElement(Context.Provider, {
    value: gizmoHelperContext
  }, React50.createElement(OrthographicCamera2, {
    makeDefault: true,
    ref: virtualCam,
    position: [0, 0, 200]
  }), React50.createElement("group", {
    ref: gizmoRef,
    position: [x2, y2, 0]
  }, children)));
};

// node_modules/@react-three/drei/core/GizmoViewcube.js
var React51 = __toESM(require_react());
var colors = {
  bg: "#f0f0f0",
  hover: "#999",
  text: "black",
  stroke: "black"
};
var defaultFaces = ["Right", "Left", "Top", "Bottom", "Front", "Back"];
var makePositionVector = (xyz) => new Vector3(...xyz).multiplyScalar(0.38);
var corners = [[1, 1, 1], [1, 1, -1], [1, -1, 1], [1, -1, -1], [-1, 1, 1], [-1, 1, -1], [-1, -1, 1], [-1, -1, -1]].map(makePositionVector);
var cornerDimensions = [0.25, 0.25, 0.25];
var edges = [[1, 1, 0], [1, 0, 1], [1, 0, -1], [1, -1, 0], [0, 1, 1], [0, 1, -1], [0, -1, 1], [0, -1, -1], [-1, 1, 0], [-1, 0, 1], [-1, 0, -1], [-1, -1, 0]].map(makePositionVector);
var edgeDimensions = edges.map((edge) => edge.toArray().map((axis) => axis == 0 ? 0.5 : 0.25));
var FaceMaterial = ({
  hover,
  index: index2,
  font = "20px Inter var, Arial, sans-serif",
  faces = defaultFaces,
  color = colors.bg,
  hoverColor = colors.hover,
  textColor = colors.text,
  strokeColor = colors.stroke,
  opacity = 1
}) => {
  const gl = useThree((state) => state.gl);
  const texture = React51.useMemo(() => {
    const canvas = document.createElement("canvas");
    canvas.width = 128;
    canvas.height = 128;
    const context10 = canvas.getContext("2d");
    context10.fillStyle = color;
    context10.fillRect(0, 0, canvas.width, canvas.height);
    context10.strokeStyle = strokeColor;
    context10.strokeRect(0, 0, canvas.width, canvas.height);
    context10.font = font;
    context10.textAlign = "center";
    context10.fillStyle = textColor;
    context10.fillText(faces[index2].toUpperCase(), 64, 76);
    return new CanvasTexture(canvas);
  }, [index2, faces, font, color, textColor, strokeColor]);
  return React51.createElement("meshLambertMaterial", {
    map: texture,
    "map-anisotropy": gl.capabilities.getMaxAnisotropy() || 1,
    attach: `material-${index2}`,
    color: hover ? hoverColor : "white",
    transparent: true,
    opacity
  });
};
var FaceCube = (props) => {
  const {
    tweenCamera
  } = useGizmoContext();
  const [hover, setHover] = React51.useState(null);
  const handlePointerOut = (e3) => {
    e3.stopPropagation();
    setHover(null);
  };
  const handleClick = (e3) => {
    e3.stopPropagation();
    tweenCamera(e3.face.normal);
  };
  const handlePointerMove = (e3) => {
    e3.stopPropagation();
    setHover(Math.floor(e3.faceIndex / 2));
  };
  return React51.createElement("mesh", {
    onPointerOut: handlePointerOut,
    onPointerMove: handlePointerMove,
    onClick: props.onClick || handleClick
  }, [...Array(6)].map((_2, index2) => React51.createElement(FaceMaterial, _extends({
    key: index2,
    index: index2,
    hover: hover === index2
  }, props))), React51.createElement("boxGeometry", null));
};
var EdgeCube = ({
  onClick,
  dimensions,
  position: position2,
  hoverColor = colors.hover
}) => {
  const {
    tweenCamera
  } = useGizmoContext();
  const [hover, setHover] = React51.useState(false);
  const handlePointerOut = (e3) => {
    e3.stopPropagation();
    setHover(false);
  };
  const handlePointerOver = (e3) => {
    e3.stopPropagation();
    setHover(true);
  };
  const handleClick = (e3) => {
    e3.stopPropagation();
    tweenCamera(position2);
  };
  return React51.createElement("mesh", {
    scale: 1.01,
    position: position2,
    onPointerOver: handlePointerOver,
    onPointerOut: handlePointerOut,
    onClick: onClick || handleClick
  }, React51.createElement("meshBasicMaterial", {
    color: hover ? hoverColor : "white",
    transparent: true,
    opacity: 0.6,
    visible: hover
  }), React51.createElement("boxGeometry", {
    args: dimensions
  }));
};
var GizmoViewcube = (props) => {
  return React51.createElement("group", {
    scale: [60, 60, 60]
  }, React51.createElement(FaceCube, props), edges.map((edge, index2) => React51.createElement(EdgeCube, _extends({
    key: index2,
    position: edge,
    dimensions: edgeDimensions[index2]
  }, props))), corners.map((corner, index2) => React51.createElement(EdgeCube, _extends({
    key: index2,
    position: corner,
    dimensions: cornerDimensions
  }, props))), React51.createElement("ambientLight", {
    intensity: 0.5
  }), React51.createElement("pointLight", {
    position: [10, 10, 10],
    intensity: 0.5
  }));
};

// node_modules/@react-three/drei/core/GizmoViewport.js
var React52 = __toESM(require_react());
function Axis({
  scale: scale4 = [0.8, 0.05, 0.05],
  color,
  rotation: rotation2
}) {
  return React52.createElement("group", {
    rotation: rotation2
  }, React52.createElement("mesh", {
    position: [0.4, 0, 0]
  }, React52.createElement("boxGeometry", {
    args: scale4
  }), React52.createElement("meshBasicMaterial", {
    color,
    toneMapped: false
  })));
}
function AxisHead({
  onClick,
  font,
  disabled,
  arcStyle,
  label,
  labelColor,
  axisHeadScale = 1,
  ...props
}) {
  const gl = useThree((state) => state.gl);
  const texture = React52.useMemo(() => {
    const canvas = document.createElement("canvas");
    canvas.width = 64;
    canvas.height = 64;
    const context10 = canvas.getContext("2d");
    context10.beginPath();
    context10.arc(32, 32, 16, 0, 2 * Math.PI);
    context10.closePath();
    context10.fillStyle = arcStyle;
    context10.fill();
    if (label) {
      context10.font = font;
      context10.textAlign = "center";
      context10.fillStyle = labelColor;
      context10.fillText(label, 32, 41);
    }
    return new CanvasTexture(canvas);
  }, [arcStyle, label, labelColor, font]);
  const [active, setActive] = React52.useState(false);
  const scale4 = (label ? 1 : 0.75) * (active ? 1.2 : 1) * axisHeadScale;
  const handlePointerOver = (e3) => {
    e3.stopPropagation();
    setActive(true);
  };
  const handlePointerOut = (e3) => {
    e3.stopPropagation();
    setActive(false);
  };
  return React52.createElement("sprite", _extends({
    scale: scale4,
    onPointerOver: !disabled ? handlePointerOver : void 0,
    onPointerOut: !disabled ? onClick || handlePointerOut : void 0
  }, props), React52.createElement("spriteMaterial", {
    map: texture,
    "map-anisotropy": gl.capabilities.getMaxAnisotropy() || 1,
    alphaTest: 0.3,
    opacity: label ? 1 : 0.75,
    toneMapped: false
  }));
}
var GizmoViewport = ({
  hideNegativeAxes,
  hideAxisHeads,
  disabled,
  font = "18px Inter var, Arial, sans-serif",
  axisColors = ["#ff2060", "#20df80", "#2080ff"],
  axisHeadScale = 1,
  axisScale,
  labels = ["X", "Y", "Z"],
  labelColor = "#000",
  onClick,
  ...props
}) => {
  const [colorX, colorY, colorZ] = axisColors;
  const {
    tweenCamera
  } = useGizmoContext();
  const axisHeadProps = {
    font,
    disabled,
    labelColor,
    onClick,
    axisHeadScale,
    onPointerDown: !disabled ? (e3) => {
      tweenCamera(e3.object.position);
      e3.stopPropagation();
    } : void 0
  };
  return React52.createElement("group", _extends({
    scale: 40
  }, props), React52.createElement(Axis, {
    color: colorX,
    rotation: [0, 0, 0],
    scale: axisScale
  }), React52.createElement(Axis, {
    color: colorY,
    rotation: [0, 0, Math.PI / 2],
    scale: axisScale
  }), React52.createElement(Axis, {
    color: colorZ,
    rotation: [0, -Math.PI / 2, 0],
    scale: axisScale
  }), !hideAxisHeads && React52.createElement(React52.Fragment, null, React52.createElement(AxisHead, _extends({
    arcStyle: colorX,
    position: [1, 0, 0],
    label: labels[0]
  }, axisHeadProps)), React52.createElement(AxisHead, _extends({
    arcStyle: colorY,
    position: [0, 1, 0],
    label: labels[1]
  }, axisHeadProps)), React52.createElement(AxisHead, _extends({
    arcStyle: colorZ,
    position: [0, 0, 1],
    label: labels[2]
  }, axisHeadProps)), !hideNegativeAxes && React52.createElement(React52.Fragment, null, React52.createElement(AxisHead, _extends({
    arcStyle: colorX,
    position: [-1, 0, 0]
  }, axisHeadProps)), React52.createElement(AxisHead, _extends({
    arcStyle: colorY,
    position: [0, -1, 0]
  }, axisHeadProps)), React52.createElement(AxisHead, _extends({
    arcStyle: colorZ,
    position: [0, 0, -1]
  }, axisHeadProps)))), React52.createElement("ambientLight", {
    intensity: 0.5
  }), React52.createElement("pointLight", {
    position: [10, 10, 10],
    intensity: 0.5
  }));
};

// node_modules/@react-three/drei/core/Grid.js
var React53 = __toESM(require_react());
var GridMaterial = shaderMaterial(
  {
    cellSize: 0.5,
    sectionSize: 1,
    fadeDistance: 100,
    fadeStrength: 1,
    cellThickness: 0.5,
    sectionThickness: 1,
    cellColor: new Color(),
    sectionColor: new Color(),
    infiniteGrid: false,
    followCamera: false
  },
  /* glsl */
  `
    varying vec3 worldPosition;
    uniform float fadeDistance;
    uniform bool infiniteGrid;
    uniform bool followCamera;

    void main() {
      worldPosition = position.xzy;
      if (infiniteGrid) worldPosition *= 1.0 + fadeDistance;
      if (followCamera) worldPosition.xz +=cameraPosition.xz;

      gl_Position = projectionMatrix * modelViewMatrix * vec4(worldPosition, 1.0);
    }
  `,
  /* glsl */
  `
    varying vec3 worldPosition;
    uniform float cellSize;
    uniform float sectionSize;
    uniform vec3 cellColor;
    uniform vec3 sectionColor;
    uniform float fadeDistance;
    uniform float fadeStrength;
    uniform float cellThickness;
    uniform float sectionThickness;

    float getGrid(float size, float thickness) {
      vec2 r = worldPosition.xz / size;
      vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);
      float line = min(grid.x, grid.y) + 1. - thickness;
      return 1.0 - min(line, 1.);
    }

    void main() {
      float g1 = getGrid(cellSize, cellThickness);
      float g2 = getGrid(sectionSize, sectionThickness);

      float d = 1.0 - min(distance(cameraPosition.xz, worldPosition.xz) / fadeDistance, 1.);
      vec3 color = mix(cellColor, sectionColor, min(1.,sectionThickness * g2));

      gl_FragColor = vec4(color, (g1 + g2) * pow(d,fadeStrength));
      gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);
      if (gl_FragColor.a <= 0.0) discard;

      #include <tonemapping_fragment>
      #include <encodings_fragment>
    }
  `
);
var Grid = React53.forwardRef(({
  args,
  cellColor = "#000000",
  sectionColor = "#2080ff",
  cellSize = 0.5,
  sectionSize = 1,
  followCamera = false,
  infiniteGrid = false,
  fadeDistance = 100,
  fadeStrength = 1,
  cellThickness = 0.5,
  sectionThickness = 1,
  side = BackSide,
  ...props
}, fRef) => {
  extend({
    GridMaterial
  });
  const uniforms1 = {
    cellSize,
    sectionSize,
    cellColor,
    sectionColor,
    cellThickness,
    sectionThickness
  };
  const uniforms2 = {
    fadeDistance,
    fadeStrength,
    infiniteGrid,
    followCamera
  };
  return React53.createElement("mesh", _extends({
    ref: fRef,
    frustumCulled: false
  }, props), React53.createElement("gridMaterial", _extends({
    transparent: true,
    "extensions-derivatives": true,
    side
  }, uniforms1, uniforms2)), React53.createElement("planeGeometry", {
    args
  }));
});

// node_modules/@react-three/drei/core/useCubeTexture.js
function useCubeTexture(files, {
  path
}) {
  const [cubeTexture] = useLoader(
    // @ts-ignore
    CubeTextureLoader,
    [files],
    (loader2) => loader2.setPath(path)
  );
  return cubeTexture;
}
useCubeTexture.preload = (files, {
  path
}) => useLoader.preload(
  // @ts-ignore
  CubeTextureLoader,
  [files],
  (loader2) => loader2.setPath(path)
);

// node_modules/@react-three/drei/core/useFBX.js
function useFBX(path) {
  return useLoader(FBXLoader, path);
}
useFBX.preload = (path) => useLoader.preload(FBXLoader, path);
useFBX.clear = (input) => useLoader.clear(FBXLoader, input);

// node_modules/@react-three/drei/core/useKTX2.js
var import_react11 = __toESM(require_react());
var cdn = "https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master";
function useKTX2(input, basisPath = `${cdn}/basis/`) {
  const gl = useThree((state) => state.gl);
  const textures = useLoader(KTX2Loader, IsObject(input) ? Object.values(input) : input, (loader2) => {
    loader2.detectSupport(gl);
    loader2.setTranscoderPath(basisPath);
  });
  (0, import_react11.useEffect)(() => {
    const array = Array.isArray(textures) ? textures : [textures];
    array.forEach(gl.initTexture);
  }, [gl, textures]);
  if (IsObject(input)) {
    const keys = Object.keys(input);
    const keyed = {};
    keys.forEach((key) => Object.assign(keyed, {
      [key]: textures[keys.indexOf(key)]
    }));
    return keyed;
  } else {
    return textures;
  }
}
useKTX2.preload = (url, basisPath = `${cdn}/basis/`) => useLoader.preload(KTX2Loader, url, (loader2) => {
  loader2.setTranscoderPath(basisPath);
});
useKTX2.clear = (input) => useLoader.clear(KTX2Loader, input);

// node_modules/@react-three/drei/core/Stats.js
var React55 = __toESM(require_react());
var import_stats = __toESM(require_stats_min());

// node_modules/@react-three/drei/helpers/useEffectfulState.js
var React54 = __toESM(require_react());
function call(ref, value) {
  if (typeof ref === "function") ref(value);
  else if (ref != null) ref.current = value;
}
function useEffectfulState(fn2, deps = [], cb) {
  const [state, set] = React54.useState();
  React54.useLayoutEffect(() => {
    const value = fn2();
    set(value);
    call(cb, value);
    return () => call(cb, null);
  }, deps);
  return state;
}

// node_modules/@react-three/drei/core/Stats.js
function Stats({
  showPanel = 0,
  className,
  parent
}) {
  const stats = useEffectfulState(() => new import_stats.default(), []);
  React55.useEffect(() => {
    if (stats) {
      const node = parent && parent.current || document.body;
      stats.showPanel(showPanel);
      node == null ? void 0 : node.appendChild(stats.dom);
      if (className) stats.dom.classList.add(...className.split(" ").filter((cls) => cls));
      const begin = addEffect(() => stats.begin());
      const end = addAfterEffect(() => stats.end());
      return () => {
        node == null ? void 0 : node.removeChild(stats.dom);
        begin();
        end();
      };
    }
  }, [parent, stats, className, showPanel]);
  return null;
}

// node_modules/@react-three/drei/core/useDepthBuffer.js
var React56 = __toESM(require_react());
function useDepthBuffer({
  size = 256,
  frames = Infinity
} = {}) {
  const dpr = useThree((state) => state.viewport.dpr);
  const {
    width,
    height
  } = useThree((state) => state.size);
  const w2 = size || width * dpr;
  const h2 = size || height * dpr;
  const depthConfig = React56.useMemo(() => {
    const depthTexture = new DepthTexture(w2, h2);
    depthTexture.format = DepthFormat;
    depthTexture.type = UnsignedShortType;
    return {
      depthTexture
    };
  }, [w2, h2]);
  let count = 0;
  const depthFBO = useFBO(w2, h2, depthConfig);
  useFrame((state) => {
    if (frames === Infinity || count < frames) {
      state.gl.setRenderTarget(depthFBO);
      state.gl.render(state.scene, state.camera);
      state.gl.setRenderTarget(null);
      count++;
    }
  });
  return depthFBO.depthTexture;
}

// node_modules/@react-three/drei/core/useAspect.js
function useAspect(width, height, factor = 1) {
  const v5 = useThree((state) => state.viewport);
  const adaptedHeight = height * (v5.aspect > width / height ? v5.width / width : v5.height / height);
  const adaptedWidth = width * (v5.aspect > width / height ? v5.width / width : v5.height / height);
  return [adaptedWidth * factor, adaptedHeight * factor, 1];
}

// node_modules/@react-three/drei/core/useCamera.js
var React57 = __toESM(require_react());
function useCamera(camera, props) {
  const pointer = useThree((state) => state.pointer);
  const [raycast2] = React57.useState(() => {
    const raycaster = new Raycaster();
    if (props) applyProps(raycaster, props, {});
    return function(_2, intersects) {
      raycaster.setFromCamera(pointer, camera instanceof Camera ? camera : camera.current);
      const rc = this.constructor.prototype.raycast.bind(this);
      if (rc) rc(raycaster, intersects);
    };
  });
  return raycast2;
}

// node_modules/detect-gpu/dist/detect-gpu.esm.js
function e2(e3, t3, r3, n3) {
  return new (r3 || (r3 = Promise))(function(o3, a6) {
    function i4(e4) {
      try {
        d3(n3.next(e4));
      } catch (e5) {
        a6(e5);
      }
    }
    function c5(e4) {
      try {
        d3(n3.throw(e4));
      } catch (e5) {
        a6(e5);
      }
    }
    function d3(e4) {
      var t4;
      e4.done ? o3(e4.value) : (t4 = e4.value, t4 instanceof r3 ? t4 : new r3(function(e5) {
        e5(t4);
      })).then(i4, c5);
    }
    d3((n3 = n3.apply(e3, t3 || [])).next());
  });
}
var t2 = ["geforce 320m", "geforce 8600", "geforce 8600m gt", "geforce 8800 gs", "geforce 8800 gt", "geforce 9400", "geforce 9400m g", "geforce 9400m", "geforce 9600m gt", "geforce 9600m", "geforce fx go5200", "geforce gt 120", "geforce gt 130", "geforce gt 330m", "geforce gtx 285", "google swiftshader", "intel g41", "intel g45", "intel gma 4500mhd", "intel gma x3100", "intel hd 3000", "intel q45", "legacy", "mali-2", "mali-3", "mali-4", "quadro fx 1500", "quadro fx 4", "quadro fx 5", "radeon hd 2400", "radeon hd 2600", "radeon hd 4670", "radeon hd 4850", "radeon hd 4870", "radeon hd 5670", "radeon hd 5750", "radeon hd 6290", "radeon hd 6300", "radeon hd 6310", "radeon hd 6320", "radeon hd 6490m", "radeon hd 6630m", "radeon hd 6750m", "radeon hd 6770m", "radeon hd 6970m", "sgx 543", "sgx543"];
function r2(e3) {
  return e3 = e3.toLowerCase().replace(/.*angle ?\((.+)\)(?: on vulkan [0-9.]+)?$/i, "$1").replace(/\s(\d{1,2}gb|direct3d.+$)|\(r\)| \([^)]+\)$/g, "").replace(/(?:vulkan|opengl) \d+\.\d+(?:\.\d+)?(?: \((.*)\))?/, "$1");
}
var n2 = "undefined" == typeof window;
var o2 = (() => {
  if (n2) return;
  const { userAgent: e3, platform: t3, maxTouchPoints: r3 } = window.navigator, o3 = /(iphone|ipod|ipad)/i.test(e3), a6 = "iPad" === t3 || "MacIntel" === t3 && r3 > 0 && !window.MSStream;
  return { isIpad: a6, isMobile: /android/i.test(e3) || o3 || a6, isSafari12: /Version\/12.+Safari/.test(e3), isFirefox: /Firefox/.test(e3) };
})();
function a5(e3, t3, r3) {
  if (!r3) return [t3];
  const n3 = function(e4) {
    const t4 = "\n    precision highp float;\n    attribute vec3 aPosition;\n    varying float vvv;\n    void main() {\n      vvv = 0.31622776601683794;\n      gl_Position = vec4(aPosition, 1.0);\n    }\n  ", r4 = "\n    precision highp float;\n    varying float vvv;\n    void main() {\n      vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * vvv;\n      enc = fract(enc);\n      enc -= enc.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n      gl_FragColor = enc;\n    }\n  ", n4 = e4.createShader(35633), o3 = e4.createShader(35632), a7 = e4.createProgram();
    if (!(o3 && n4 && a7)) return;
    e4.shaderSource(n4, t4), e4.shaderSource(o3, r4), e4.compileShader(n4), e4.compileShader(o3), e4.attachShader(a7, n4), e4.attachShader(a7, o3), e4.linkProgram(a7), e4.detachShader(a7, n4), e4.detachShader(a7, o3), e4.deleteShader(n4), e4.deleteShader(o3), e4.useProgram(a7);
    const i5 = e4.createBuffer();
    e4.bindBuffer(34962, i5), e4.bufferData(34962, new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]), 35044);
    const c6 = e4.getAttribLocation(a7, "aPosition");
    e4.vertexAttribPointer(c6, 3, 5126, false, 0, 0), e4.enableVertexAttribArray(c6), e4.clearColor(1, 1, 1, 1), e4.clear(16384), e4.viewport(0, 0, 1, 1), e4.drawArrays(4, 0, 3);
    const d5 = new Uint8Array(4);
    return e4.readPixels(0, 0, 1, 1, 6408, 5121, d5), e4.deleteProgram(a7), e4.deleteBuffer(i5), d5.join("");
  }(e3), a6 = "801621810", i4 = "8016218135", c5 = "80162181161", d3 = (null == o2 ? void 0 : o2.isIpad) ? [["a7", c5, 12], ["a8", i4, 15], ["a8x", i4, 15], ["a9", i4, 15], ["a9x", i4, 15], ["a10", i4, 15], ["a10x", i4, 15], ["a12", a6, 15], ["a12x", a6, 15], ["a12z", a6, 15], ["a14", a6, 15], ["a15", a6, 15], ["m1", a6, 15], ["m2", a6, 15]] : [["a7", c5, 12], ["a8", i4, 12], ["a9", i4, 15], ["a10", i4, 15], ["a11", a6, 15], ["a12", a6, 15], ["a13", a6, 15], ["a14", a6, 15], ["a15", a6, 15], ["a16", a6, 15], ["a17", a6, 15]];
  let l3;
  "80162181255" === n3 ? l3 = d3.filter(([, , e4]) => e4 >= 14) : (l3 = d3.filter(([, e4]) => e4 === n3), l3.length || (l3 = d3));
  return l3.map(([e4]) => `apple ${e4} gpu`);
}
var i2 = class extends Error {
  constructor(e3) {
    super(e3), Object.setPrototypeOf(this, new.target.prototype);
  }
};
var c2 = [];
var d2 = [];
function l2(e3, t3) {
  if (e3 === t3) return 0;
  const r3 = e3;
  e3.length > t3.length && (e3 = t3, t3 = r3);
  let n3 = e3.length, o3 = t3.length;
  for (; n3 > 0 && e3.charCodeAt(~-n3) === t3.charCodeAt(~-o3); ) n3--, o3--;
  let a6, i4 = 0;
  for (; i4 < n3 && e3.charCodeAt(i4) === t3.charCodeAt(i4); ) i4++;
  if (n3 -= i4, o3 -= i4, 0 === n3) return o3;
  let l3, s3, f3 = 0, u2 = 0, g2 = 0;
  for (; u2 < n3; ) d2[u2] = e3.charCodeAt(i4 + u2), c2[u2] = ++u2;
  for (; g2 < o3; ) for (a6 = t3.charCodeAt(i4 + g2), l3 = g2++, f3 = g2, u2 = 0; u2 < n3; u2++) s3 = a6 === d2[u2] ? l3 : l3 + 1, l3 = c2[u2], f3 = c2[u2] = l3 > f3 ? s3 > f3 ? f3 + 1 : s3 : s3 > l3 ? l3 + 1 : s3;
  return f3;
}
function s2(e3) {
  return null != e3;
}
var f2 = ({ mobileTiers: c5 = [0, 15, 30, 60], desktopTiers: d3 = [0, 15, 30, 60], override: f3 = {}, glContext: u2, failIfMajorPerformanceCaveat: g2 = false, benchmarksURL: h2 = "https://unpkg.com/detect-gpu@5.0.70/dist/benchmarks" } = {}) => e2(void 0, void 0, void 0, function* () {
  const p3 = {};
  if (n2) return { tier: 0, type: "SSR" };
  const { isIpad: m2 = !!(null == o2 ? void 0 : o2.isIpad), isMobile: v5 = !!(null == o2 ? void 0 : o2.isMobile), screenSize: w2 = window.screen, loadBenchmarks: x2 = (t3) => e2(void 0, void 0, void 0, function* () {
    const e3 = yield fetch(`${h2}/${t3}`).then((e4) => e4.json());
    if (parseInt(e3.shift().split(".")[0], 10) < 4) throw new i2("Detect GPU benchmark data is out of date. Please update to version 4x");
    return e3;
  }) } = f3;
  let { renderer: A2 } = f3;
  const P2 = (e3, t3, r3, n3, o3) => ({ device: o3, fps: n3, gpu: r3, isMobile: v5, tier: e3, type: t3 });
  let S2, b5 = "";
  if (A2) A2 = r2(A2), S2 = [A2];
  else {
    const e3 = u2 || function(e4, t4 = false) {
      const r3 = { alpha: false, antialias: false, depth: false, failIfMajorPerformanceCaveat: t4, powerPreference: "high-performance", stencil: false };
      e4 && delete r3.powerPreference;
      const n3 = window.document.createElement("canvas"), o3 = n3.getContext("webgl", r3) || n3.getContext("experimental-webgl", r3);
      return null != o3 ? o3 : void 0;
    }(null == o2 ? void 0 : o2.isSafari12, g2);
    if (!e3) return P2(0, "WEBGL_UNSUPPORTED");
    const t3 = (null == o2 ? void 0 : o2.isFirefox) ? null : e3.getExtension("WEBGL_debug_renderer_info");
    if (A2 = t3 ? e3.getParameter(t3.UNMASKED_RENDERER_WEBGL) : e3.getParameter(e3.RENDERER), !A2) return P2(1, "FALLBACK");
    b5 = A2, A2 = r2(A2), S2 = function(e4, t4, r3) {
      return "apple gpu" === t4 ? a5(e4, t4, r3) : [t4];
    }(e3, A2, v5);
  }
  const E2 = (yield Promise.all(S2.map(function(t3) {
    var r3;
    return e2(this, void 0, void 0, function* () {
      const e3 = ((e4) => {
        const t4 = v5 ? ["adreno", "apple", "mali-t", "mali", "nvidia", "powervr", "samsung"] : ["intel", "apple", "amd", "radeon", "nvidia", "geforce", "adreno"];
        for (const r4 of t4) if (e4.includes(r4)) return r4;
      })(t3);
      if (!e3) return;
      const n3 = `${v5 ? "m" : "d"}-${e3}${m2 ? "-ipad" : ""}.json`, o3 = p3[n3] = null !== (r3 = p3[n3]) && void 0 !== r3 ? r3 : x2(n3);
      let a6;
      try {
        a6 = yield o3;
      } catch (e4) {
        if (e4 instanceof i2) throw e4;
        return;
      }
      const c6 = function(e4) {
        var t4;
        const r4 = (e4 = e4.replace(/\([^)]+\)/, "")).match(/\d+/) || e4.match(/(\W|^)([A-Za-z]{1,3})(\W|$)/g);
        return null !== (t4 = null == r4 ? void 0 : r4.join("").replace(/\W|amd/g, "")) && void 0 !== t4 ? t4 : "";
      }(t3);
      let d5 = a6.filter(([, e4]) => e4 === c6);
      d5.length || (d5 = a6.filter(([e4]) => e4.includes(t3)));
      const s3 = d5.length;
      if (0 === s3) return;
      const f4 = t3.split(/[.,()\[\]/\s]/g).sort().filter((e4, t4, r4) => 0 === t4 || e4 !== r4[t4 - 1]).join(" ");
      let u3, [g3, , , , h3] = s3 > 1 ? d5.map((e4) => [e4, l2(f4, e4[2])]).sort(([, e4], [, t4]) => e4 - t4)[0][0] : d5[0], A3 = Number.MAX_VALUE;
      const { devicePixelRatio: P3 } = window, S3 = w2.width * P3 * w2.height * P3;
      for (const e4 of h3) {
        const [t4, r4] = e4, n4 = t4 * r4, o4 = Math.abs(S3 - n4);
        o4 < A3 && (A3 = o4, u3 = e4);
      }
      if (!u3) return;
      const [, , b6, E3] = u3;
      return [A3, b6, g3, E3];
    });
  }))).filter(s2).sort(([e3 = Number.MAX_VALUE, t3], [r3 = Number.MAX_VALUE, n3]) => e3 === r3 ? t3 - n3 : e3 - r3);
  if (!E2.length) {
    const e3 = t2.find((e4) => A2.includes(e4));
    return e3 ? P2(0, "BLOCKLISTED", e3) : P2(1, "FALLBACK", `${A2} (${b5})`);
  }
  const [, y2, C2, L2] = E2[0];
  if (-1 === y2) return P2(0, "BLOCKLISTED", C2, y2, L2);
  const M2 = v5 ? c5 : d3;
  let $2 = 0;
  for (let e3 = 0; e3 < M2.length; e3++) y2 >= M2[e3] && ($2 = e3);
  return P2($2, "BENCHMARK", C2, y2, L2);
});

// node_modules/@react-three/drei/core/useDetectGPU.js
var useDetectGPU = (props) => suspend(() => f2(props), ["useDetectGPU"]);

// node_modules/@react-three/drei/core/useHelper.js
var React58 = __toESM(require_react());
function useHelper(object3D, helperConstructor, ...args) {
  const helper = React58.useRef();
  const scene = useThree((state) => state.scene);
  React58.useLayoutEffect(() => {
    let currentHelper = void 0;
    if (object3D && object3D != null && object3D.current && helperConstructor) {
      helper.current = currentHelper = new helperConstructor(object3D.current, ...args);
    }
    if (currentHelper) {
      scene.add(currentHelper);
      return () => {
        helper.current = void 0;
        scene.remove(currentHelper);
        currentHelper.dispose == null ? void 0 : currentHelper.dispose();
      };
    }
  }, [scene, helperConstructor, object3D, ...args]);
  useFrame(() => {
    var _helper$current;
    return void ((_helper$current = helper.current) == null ? void 0 : _helper$current.update == null ? void 0 : _helper$current.update());
  });
  return helper;
}

// node_modules/@react-three/drei/core/useBVH.js
var React59 = __toESM(require_react());

// node_modules/three-mesh-bvh/src/core/Constants.js
var CENTER = 0;
var AVERAGE = 1;
var SAH = 2;
var CONTAINED = 2;
var TRIANGLE_INTERSECT_COST = 1.25;
var TRAVERSAL_COST = 1;
var BYTES_PER_NODE = 6 * 4 + 4 + 4;
var IS_LEAFNODE_FLAG = 65535;
var FLOAT32_EPSILON = Math.pow(2, -24);

// node_modules/three-mesh-bvh/src/core/MeshBVHNode.js
var MeshBVHNode = class {
  constructor() {
  }
};

// node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js
function arrayToBox(nodeIndex32, array, target2) {
  target2.min.x = array[nodeIndex32];
  target2.min.y = array[nodeIndex32 + 1];
  target2.min.z = array[nodeIndex32 + 2];
  target2.max.x = array[nodeIndex32 + 3];
  target2.max.y = array[nodeIndex32 + 4];
  target2.max.z = array[nodeIndex32 + 5];
  return target2;
}
function getLongestEdgeIndex(bounds) {
  let splitDimIdx = -1;
  let splitDist = -Infinity;
  for (let i4 = 0; i4 < 3; i4++) {
    const dist = bounds[i4 + 3] - bounds[i4];
    if (dist > splitDist) {
      splitDist = dist;
      splitDimIdx = i4;
    }
  }
  return splitDimIdx;
}
function copyBounds(source, target2) {
  target2.set(source);
}
function unionBounds(a6, b5, target2) {
  let aVal, bVal;
  for (let d3 = 0; d3 < 3; d3++) {
    const d32 = d3 + 3;
    aVal = a6[d3];
    bVal = b5[d3];
    target2[d3] = aVal < bVal ? aVal : bVal;
    aVal = a6[d32];
    bVal = b5[d32];
    target2[d32] = aVal > bVal ? aVal : bVal;
  }
}
function expandByTriangleBounds(startIndex, triangleBounds, bounds) {
  for (let d3 = 0; d3 < 3; d3++) {
    const tCenter = triangleBounds[startIndex + 2 * d3];
    const tHalf = triangleBounds[startIndex + 2 * d3 + 1];
    const tMin = tCenter - tHalf;
    const tMax = tCenter + tHalf;
    if (tMin < bounds[d3]) {
      bounds[d3] = tMin;
    }
    if (tMax > bounds[d3 + 3]) {
      bounds[d3 + 3] = tMax;
    }
  }
}
function computeSurfaceArea(bounds) {
  const d0 = bounds[3] - bounds[0];
  const d1 = bounds[4] - bounds[1];
  const d22 = bounds[5] - bounds[2];
  return 2 * (d0 * d1 + d1 * d22 + d22 * d0);
}

// node_modules/three-mesh-bvh/src/core/buildFunctions.js
function ensureIndex(geo, options) {
  if (!geo.index) {
    const vertexCount = geo.attributes.position.count;
    const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;
    let index2;
    if (vertexCount > 65535) {
      index2 = new Uint32Array(new BufferConstructor(4 * vertexCount));
    } else {
      index2 = new Uint16Array(new BufferConstructor(2 * vertexCount));
    }
    geo.setIndex(new BufferAttribute(index2, 1));
    for (let i4 = 0; i4 < vertexCount; i4++) {
      index2[i4] = i4;
    }
  }
}
function getRootIndexRanges(geo) {
  if (!geo.groups || !geo.groups.length) {
    return [{ offset: 0, count: geo.index.count / 3 }];
  }
  const ranges = [];
  const rangeBoundaries = /* @__PURE__ */ new Set();
  for (const group of geo.groups) {
    rangeBoundaries.add(group.start);
    rangeBoundaries.add(group.start + group.count);
  }
  const sortedBoundaries = Array.from(rangeBoundaries.values()).sort((a6, b5) => a6 - b5);
  for (let i4 = 0; i4 < sortedBoundaries.length - 1; i4++) {
    const start = sortedBoundaries[i4], end = sortedBoundaries[i4 + 1];
    ranges.push({ offset: start / 3, count: (end - start) / 3 });
  }
  return ranges;
}
function getBounds(triangleBounds, offset, count, target2, centroidTarget = null) {
  let minx = Infinity;
  let miny = Infinity;
  let minz = Infinity;
  let maxx = -Infinity;
  let maxy = -Infinity;
  let maxz = -Infinity;
  let cminx = Infinity;
  let cminy = Infinity;
  let cminz = Infinity;
  let cmaxx = -Infinity;
  let cmaxy = -Infinity;
  let cmaxz = -Infinity;
  const includeCentroid = centroidTarget !== null;
  for (let i4 = offset * 6, end = (offset + count) * 6; i4 < end; i4 += 6) {
    const cx = triangleBounds[i4 + 0];
    const hx = triangleBounds[i4 + 1];
    const lx = cx - hx;
    const rx = cx + hx;
    if (lx < minx) minx = lx;
    if (rx > maxx) maxx = rx;
    if (includeCentroid && cx < cminx) cminx = cx;
    if (includeCentroid && cx > cmaxx) cmaxx = cx;
    const cy = triangleBounds[i4 + 2];
    const hy = triangleBounds[i4 + 3];
    const ly = cy - hy;
    const ry = cy + hy;
    if (ly < miny) miny = ly;
    if (ry > maxy) maxy = ry;
    if (includeCentroid && cy < cminy) cminy = cy;
    if (includeCentroid && cy > cmaxy) cmaxy = cy;
    const cz = triangleBounds[i4 + 4];
    const hz = triangleBounds[i4 + 5];
    const lz = cz - hz;
    const rz = cz + hz;
    if (lz < minz) minz = lz;
    if (rz > maxz) maxz = rz;
    if (includeCentroid && cz < cminz) cminz = cz;
    if (includeCentroid && cz > cmaxz) cmaxz = cz;
  }
  target2[0] = minx;
  target2[1] = miny;
  target2[2] = minz;
  target2[3] = maxx;
  target2[4] = maxy;
  target2[5] = maxz;
  if (includeCentroid) {
    centroidTarget[0] = cminx;
    centroidTarget[1] = cminy;
    centroidTarget[2] = cminz;
    centroidTarget[3] = cmaxx;
    centroidTarget[4] = cmaxy;
    centroidTarget[5] = cmaxz;
  }
}
function getCentroidBounds(triangleBounds, offset, count, centroidTarget) {
  let cminx = Infinity;
  let cminy = Infinity;
  let cminz = Infinity;
  let cmaxx = -Infinity;
  let cmaxy = -Infinity;
  let cmaxz = -Infinity;
  for (let i4 = offset * 6, end = (offset + count) * 6; i4 < end; i4 += 6) {
    const cx = triangleBounds[i4 + 0];
    if (cx < cminx) cminx = cx;
    if (cx > cmaxx) cmaxx = cx;
    const cy = triangleBounds[i4 + 2];
    if (cy < cminy) cminy = cy;
    if (cy > cmaxy) cmaxy = cy;
    const cz = triangleBounds[i4 + 4];
    if (cz < cminz) cminz = cz;
    if (cz > cmaxz) cmaxz = cz;
  }
  centroidTarget[0] = cminx;
  centroidTarget[1] = cminy;
  centroidTarget[2] = cminz;
  centroidTarget[3] = cmaxx;
  centroidTarget[4] = cmaxy;
  centroidTarget[5] = cmaxz;
}
function partition(index2, triangleBounds, offset, count, split) {
  let left = offset;
  let right = offset + count - 1;
  const pos = split.pos;
  const axisOffset = split.axis * 2;
  while (true) {
    while (left <= right && triangleBounds[left * 6 + axisOffset] < pos) {
      left++;
    }
    while (left <= right && triangleBounds[right * 6 + axisOffset] >= pos) {
      right--;
    }
    if (left < right) {
      for (let i4 = 0; i4 < 3; i4++) {
        let t0 = index2[left * 3 + i4];
        index2[left * 3 + i4] = index2[right * 3 + i4];
        index2[right * 3 + i4] = t0;
        let t1 = triangleBounds[left * 6 + i4 * 2 + 0];
        triangleBounds[left * 6 + i4 * 2 + 0] = triangleBounds[right * 6 + i4 * 2 + 0];
        triangleBounds[right * 6 + i4 * 2 + 0] = t1;
        let t22 = triangleBounds[left * 6 + i4 * 2 + 1];
        triangleBounds[left * 6 + i4 * 2 + 1] = triangleBounds[right * 6 + i4 * 2 + 1];
        triangleBounds[right * 6 + i4 * 2 + 1] = t22;
      }
      left++;
      right--;
    } else {
      return left;
    }
  }
}
var BIN_COUNT = 32;
var binsSort = (a6, b5) => a6.candidate - b5.candidate;
var sahBins = new Array(BIN_COUNT).fill().map(() => {
  return {
    count: 0,
    bounds: new Float32Array(6),
    rightCacheBounds: new Float32Array(6),
    leftCacheBounds: new Float32Array(6),
    candidate: 0
  };
});
var leftBounds = new Float32Array(6);
function getOptimalSplit(nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy) {
  let axis = -1;
  let pos = 0;
  if (strategy === CENTER) {
    axis = getLongestEdgeIndex(centroidBoundingData);
    if (axis !== -1) {
      pos = (centroidBoundingData[axis] + centroidBoundingData[axis + 3]) / 2;
    }
  } else if (strategy === AVERAGE) {
    axis = getLongestEdgeIndex(nodeBoundingData);
    if (axis !== -1) {
      pos = getAverage(triangleBounds, offset, count, axis);
    }
  } else if (strategy === SAH) {
    const rootSurfaceArea = computeSurfaceArea(nodeBoundingData);
    let bestCost = TRIANGLE_INTERSECT_COST * count;
    const cStart = offset * 6;
    const cEnd = (offset + count) * 6;
    for (let a6 = 0; a6 < 3; a6++) {
      const axisLeft = centroidBoundingData[a6];
      const axisRight = centroidBoundingData[a6 + 3];
      const axisLength = axisRight - axisLeft;
      const binWidth = axisLength / BIN_COUNT;
      if (count < BIN_COUNT / 4) {
        const truncatedBins = [...sahBins];
        truncatedBins.length = count;
        let b5 = 0;
        for (let c5 = cStart; c5 < cEnd; c5 += 6, b5++) {
          const bin = truncatedBins[b5];
          bin.candidate = triangleBounds[c5 + 2 * a6];
          bin.count = 0;
          const {
            bounds,
            leftCacheBounds,
            rightCacheBounds
          } = bin;
          for (let d3 = 0; d3 < 3; d3++) {
            rightCacheBounds[d3] = Infinity;
            rightCacheBounds[d3 + 3] = -Infinity;
            leftCacheBounds[d3] = Infinity;
            leftCacheBounds[d3 + 3] = -Infinity;
            bounds[d3] = Infinity;
            bounds[d3 + 3] = -Infinity;
          }
          expandByTriangleBounds(c5, triangleBounds, bounds);
        }
        truncatedBins.sort(binsSort);
        let splitCount = count;
        for (let bi2 = 0; bi2 < splitCount; bi2++) {
          const bin = truncatedBins[bi2];
          while (bi2 + 1 < splitCount && truncatedBins[bi2 + 1].candidate === bin.candidate) {
            truncatedBins.splice(bi2 + 1, 1);
            splitCount--;
          }
        }
        for (let c5 = cStart; c5 < cEnd; c5 += 6) {
          const center2 = triangleBounds[c5 + 2 * a6];
          for (let bi2 = 0; bi2 < splitCount; bi2++) {
            const bin = truncatedBins[bi2];
            if (center2 >= bin.candidate) {
              expandByTriangleBounds(c5, triangleBounds, bin.rightCacheBounds);
            } else {
              expandByTriangleBounds(c5, triangleBounds, bin.leftCacheBounds);
              bin.count++;
            }
          }
        }
        for (let bi2 = 0; bi2 < splitCount; bi2++) {
          const bin = truncatedBins[bi2];
          const leftCount = bin.count;
          const rightCount = count - bin.count;
          const leftBounds2 = bin.leftCacheBounds;
          const rightBounds = bin.rightCacheBounds;
          let leftProb = 0;
          if (leftCount !== 0) {
            leftProb = computeSurfaceArea(leftBounds2) / rootSurfaceArea;
          }
          let rightProb = 0;
          if (rightCount !== 0) {
            rightProb = computeSurfaceArea(rightBounds) / rootSurfaceArea;
          }
          const cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);
          if (cost < bestCost) {
            axis = a6;
            bestCost = cost;
            pos = bin.candidate;
          }
        }
      } else {
        for (let i4 = 0; i4 < BIN_COUNT; i4++) {
          const bin = sahBins[i4];
          bin.count = 0;
          bin.candidate = axisLeft + binWidth + i4 * binWidth;
          const bounds = bin.bounds;
          for (let d3 = 0; d3 < 3; d3++) {
            bounds[d3] = Infinity;
            bounds[d3 + 3] = -Infinity;
          }
        }
        for (let c5 = cStart; c5 < cEnd; c5 += 6) {
          const triCenter = triangleBounds[c5 + 2 * a6];
          const relativeCenter = triCenter - axisLeft;
          let binIndex = ~~(relativeCenter / binWidth);
          if (binIndex >= BIN_COUNT) binIndex = BIN_COUNT - 1;
          const bin = sahBins[binIndex];
          bin.count++;
          expandByTriangleBounds(c5, triangleBounds, bin.bounds);
        }
        const lastBin = sahBins[BIN_COUNT - 1];
        copyBounds(lastBin.bounds, lastBin.rightCacheBounds);
        for (let i4 = BIN_COUNT - 2; i4 >= 0; i4--) {
          const bin = sahBins[i4];
          const nextBin = sahBins[i4 + 1];
          unionBounds(bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds);
        }
        let leftCount = 0;
        for (let i4 = 0; i4 < BIN_COUNT - 1; i4++) {
          const bin = sahBins[i4];
          const binCount = bin.count;
          const bounds = bin.bounds;
          const nextBin = sahBins[i4 + 1];
          const rightBounds = nextBin.rightCacheBounds;
          if (binCount !== 0) {
            if (leftCount === 0) {
              copyBounds(bounds, leftBounds);
            } else {
              unionBounds(bounds, leftBounds, leftBounds);
            }
          }
          leftCount += binCount;
          let leftProb = 0;
          let rightProb = 0;
          if (leftCount !== 0) {
            leftProb = computeSurfaceArea(leftBounds) / rootSurfaceArea;
          }
          const rightCount = count - leftCount;
          if (rightCount !== 0) {
            rightProb = computeSurfaceArea(rightBounds) / rootSurfaceArea;
          }
          const cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);
          if (cost < bestCost) {
            axis = a6;
            bestCost = cost;
            pos = bin.candidate;
          }
        }
      }
    }
  } else {
    console.warn(`MeshBVH: Invalid build strategy value ${strategy} used.`);
  }
  return { axis, pos };
}
function getAverage(triangleBounds, offset, count, axis) {
  let avg = 0;
  for (let i4 = offset, end = offset + count; i4 < end; i4++) {
    avg += triangleBounds[i4 * 6 + axis * 2];
  }
  return avg / count;
}
function computeTriangleBounds(geo, fullBounds) {
  const posAttr = geo.attributes.position;
  const index2 = geo.index.array;
  const triCount = index2.length / 3;
  const triangleBounds = new Float32Array(triCount * 6);
  const normalized = posAttr.normalized;
  const posArr = posAttr.array;
  const bufferOffset = posAttr.offset || 0;
  let stride = 3;
  if (posAttr.isInterleavedBufferAttribute) {
    stride = posAttr.data.stride;
  }
  const getters = ["getX", "getY", "getZ"];
  for (let tri = 0; tri < triCount; tri++) {
    const tri3 = tri * 3;
    const tri6 = tri * 6;
    let ai2, bi2, ci2;
    if (normalized) {
      ai2 = index2[tri3 + 0];
      bi2 = index2[tri3 + 1];
      ci2 = index2[tri3 + 2];
    } else {
      ai2 = index2[tri3 + 0] * stride + bufferOffset;
      bi2 = index2[tri3 + 1] * stride + bufferOffset;
      ci2 = index2[tri3 + 2] * stride + bufferOffset;
    }
    for (let el = 0; el < 3; el++) {
      let a6, b5, c5;
      if (normalized) {
        a6 = posAttr[getters[el]](ai2);
        b5 = posAttr[getters[el]](bi2);
        c5 = posAttr[getters[el]](ci2);
      } else {
        a6 = posArr[ai2 + el];
        b5 = posArr[bi2 + el];
        c5 = posArr[ci2 + el];
      }
      let min = a6;
      if (b5 < min) min = b5;
      if (c5 < min) min = c5;
      let max = a6;
      if (b5 > max) max = b5;
      if (c5 > max) max = c5;
      const halfExtents = (max - min) / 2;
      const el2 = el * 2;
      triangleBounds[tri6 + el2 + 0] = min + halfExtents;
      triangleBounds[tri6 + el2 + 1] = halfExtents + (Math.abs(min) + halfExtents) * FLOAT32_EPSILON;
      if (min < fullBounds[el]) fullBounds[el] = min;
      if (max > fullBounds[el + 3]) fullBounds[el + 3] = max;
    }
  }
  return triangleBounds;
}
function buildTree(geo, options) {
  function triggerProgress(trianglesProcessed) {
    if (onProgress) {
      onProgress(trianglesProcessed / totalTriangles);
    }
  }
  function splitNode(node, offset, count, centroidBoundingData = null, depth = 0) {
    if (!reachedMaxDepth && depth >= maxDepth) {
      reachedMaxDepth = true;
      if (verbose) {
        console.warn(`MeshBVH: Max depth of ${maxDepth} reached when generating BVH. Consider increasing maxDepth.`);
        console.warn(geo);
      }
    }
    if (count <= maxLeafTris || depth >= maxDepth) {
      triggerProgress(offset + count);
      node.offset = offset;
      node.count = count;
      return node;
    }
    const split = getOptimalSplit(node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy);
    if (split.axis === -1) {
      triggerProgress(offset + count);
      node.offset = offset;
      node.count = count;
      return node;
    }
    const splitOffset = partition(indexArray, triangleBounds, offset, count, split);
    if (splitOffset === offset || splitOffset === offset + count) {
      triggerProgress(offset + count);
      node.offset = offset;
      node.count = count;
    } else {
      node.splitAxis = split.axis;
      const left = new MeshBVHNode();
      const lstart = offset;
      const lcount = splitOffset - offset;
      node.left = left;
      left.boundingData = new Float32Array(6);
      getBounds(triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData);
      splitNode(left, lstart, lcount, cacheCentroidBoundingData, depth + 1);
      const right = new MeshBVHNode();
      const rstart = splitOffset;
      const rcount = count - lcount;
      node.right = right;
      right.boundingData = new Float32Array(6);
      getBounds(triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData);
      splitNode(right, rstart, rcount, cacheCentroidBoundingData, depth + 1);
    }
    return node;
  }
  ensureIndex(geo, options);
  const fullBounds = new Float32Array(6);
  const cacheCentroidBoundingData = new Float32Array(6);
  const triangleBounds = computeTriangleBounds(geo, fullBounds);
  const indexArray = geo.index.array;
  const maxDepth = options.maxDepth;
  const verbose = options.verbose;
  const maxLeafTris = options.maxLeafTris;
  const strategy = options.strategy;
  const onProgress = options.onProgress;
  const totalTriangles = geo.index.count / 3;
  let reachedMaxDepth = false;
  const roots = [];
  const ranges = getRootIndexRanges(geo);
  if (ranges.length === 1) {
    const range = ranges[0];
    const root = new MeshBVHNode();
    root.boundingData = fullBounds;
    getCentroidBounds(triangleBounds, range.offset, range.count, cacheCentroidBoundingData);
    splitNode(root, range.offset, range.count, cacheCentroidBoundingData);
    roots.push(root);
  } else {
    for (let range of ranges) {
      const root = new MeshBVHNode();
      root.boundingData = new Float32Array(6);
      getBounds(triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData);
      splitNode(root, range.offset, range.count, cacheCentroidBoundingData);
      roots.push(root);
    }
  }
  return roots;
}
function buildPackedTree(geo, options) {
  const roots = buildTree(geo, options);
  let float32Array;
  let uint32Array;
  let uint16Array;
  const packedRoots = [];
  const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;
  for (let i4 = 0; i4 < roots.length; i4++) {
    const root = roots[i4];
    let nodeCount = countNodes(root);
    const buffer2 = new BufferConstructor(BYTES_PER_NODE * nodeCount);
    float32Array = new Float32Array(buffer2);
    uint32Array = new Uint32Array(buffer2);
    uint16Array = new Uint16Array(buffer2);
    populateBuffer(0, root);
    packedRoots.push(buffer2);
  }
  return packedRoots;
  function countNodes(node) {
    if (node.count) {
      return 1;
    } else {
      return 1 + countNodes(node.left) + countNodes(node.right);
    }
  }
  function populateBuffer(byteOffset, node) {
    const stride4Offset = byteOffset / 4;
    const stride2Offset = byteOffset / 2;
    const isLeaf = !!node.count;
    const boundingData = node.boundingData;
    for (let i4 = 0; i4 < 6; i4++) {
      float32Array[stride4Offset + i4] = boundingData[i4];
    }
    if (isLeaf) {
      const offset = node.offset;
      const count = node.count;
      uint32Array[stride4Offset + 6] = offset;
      uint16Array[stride2Offset + 14] = count;
      uint16Array[stride2Offset + 15] = IS_LEAFNODE_FLAG;
      return byteOffset + BYTES_PER_NODE;
    } else {
      const left = node.left;
      const right = node.right;
      const splitAxis = node.splitAxis;
      let nextUnusedPointer;
      nextUnusedPointer = populateBuffer(byteOffset + BYTES_PER_NODE, left);
      if (nextUnusedPointer / 4 > Math.pow(2, 32)) {
        throw new Error("MeshBVH: Cannot store child pointer greater than 32 bits.");
      }
      uint32Array[stride4Offset + 6] = nextUnusedPointer / 4;
      nextUnusedPointer = populateBuffer(nextUnusedPointer, right);
      uint32Array[stride4Offset + 7] = splitAxis;
      return nextUnusedPointer;
    }
  }
}

// node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js
var SeparatingAxisBounds = class {
  constructor() {
    this.min = Infinity;
    this.max = -Infinity;
  }
  setFromPointsField(points, field) {
    let min = Infinity;
    let max = -Infinity;
    for (let i4 = 0, l3 = points.length; i4 < l3; i4++) {
      const p3 = points[i4];
      const val = p3[field];
      min = val < min ? val : min;
      max = val > max ? val : max;
    }
    this.min = min;
    this.max = max;
  }
  setFromPoints(axis, points) {
    let min = Infinity;
    let max = -Infinity;
    for (let i4 = 0, l3 = points.length; i4 < l3; i4++) {
      const p3 = points[i4];
      const val = axis.dot(p3);
      min = val < min ? val : min;
      max = val > max ? val : max;
    }
    this.min = min;
    this.max = max;
  }
  isSeparated(other) {
    return this.min > other.max || other.min > this.max;
  }
};
SeparatingAxisBounds.prototype.setFromBox = function() {
  const p3 = new Vector3();
  return function setFromBox(axis, box) {
    const boxMin = box.min;
    const boxMax = box.max;
    let min = Infinity;
    let max = -Infinity;
    for (let x2 = 0; x2 <= 1; x2++) {
      for (let y2 = 0; y2 <= 1; y2++) {
        for (let z2 = 0; z2 <= 1; z2++) {
          p3.x = boxMin.x * x2 + boxMax.x * (1 - x2);
          p3.y = boxMin.y * y2 + boxMax.y * (1 - y2);
          p3.z = boxMin.z * z2 + boxMax.z * (1 - z2);
          const val = axis.dot(p3);
          min = Math.min(val, min);
          max = Math.max(val, max);
        }
      }
    }
    this.min = min;
    this.max = max;
  };
}();
var areIntersecting = function() {
  const cacheSatBounds = new SeparatingAxisBounds();
  return function areIntersecting2(shape1, shape2) {
    const points1 = shape1.points;
    const satAxes1 = shape1.satAxes;
    const satBounds1 = shape1.satBounds;
    const points2 = shape2.points;
    const satAxes2 = shape2.satAxes;
    const satBounds2 = shape2.satBounds;
    for (let i4 = 0; i4 < 3; i4++) {
      const sb = satBounds1[i4];
      const sa2 = satAxes1[i4];
      cacheSatBounds.setFromPoints(sa2, points2);
      if (sb.isSeparated(cacheSatBounds)) return false;
    }
    for (let i4 = 0; i4 < 3; i4++) {
      const sb = satBounds2[i4];
      const sa2 = satAxes2[i4];
      cacheSatBounds.setFromPoints(sa2, points1);
      if (sb.isSeparated(cacheSatBounds)) return false;
    }
  };
}();

// node_modules/three-mesh-bvh/src/math/MathUtilities.js
var closestPointLineToLine = function() {
  const dir1 = new Vector3();
  const dir2 = new Vector3();
  const v02 = new Vector3();
  return function closestPointLineToLine2(l1, l22, result) {
    const v0 = l1.start;
    const v10 = dir1;
    const v22 = l22.start;
    const v32 = dir2;
    v02.subVectors(v0, v22);
    dir1.subVectors(l1.end, l1.start);
    dir2.subVectors(l22.end, l22.start);
    const d0232 = v02.dot(v32);
    const d3210 = v32.dot(v10);
    const d3232 = v32.dot(v32);
    const d0210 = v02.dot(v10);
    const d1010 = v10.dot(v10);
    const denom = d1010 * d3232 - d3210 * d3210;
    let d3, d22;
    if (denom !== 0) {
      d3 = (d0232 * d3210 - d0210 * d3232) / denom;
    } else {
      d3 = 0;
    }
    d22 = (d0232 + d3 * d3210) / d3232;
    result.x = d3;
    result.y = d22;
  };
}();
var closestPointsSegmentToSegment = function() {
  const paramResult = new Vector2();
  const temp12 = new Vector3();
  const temp22 = new Vector3();
  return function closestPointsSegmentToSegment2(l1, l22, target1, target2) {
    closestPointLineToLine(l1, l22, paramResult);
    let d3 = paramResult.x;
    let d22 = paramResult.y;
    if (d3 >= 0 && d3 <= 1 && d22 >= 0 && d22 <= 1) {
      l1.at(d3, target1);
      l22.at(d22, target2);
      return;
    } else if (d3 >= 0 && d3 <= 1) {
      if (d22 < 0) {
        l22.at(0, target2);
      } else {
        l22.at(1, target2);
      }
      l1.closestPointToPoint(target2, true, target1);
      return;
    } else if (d22 >= 0 && d22 <= 1) {
      if (d3 < 0) {
        l1.at(0, target1);
      } else {
        l1.at(1, target1);
      }
      l22.closestPointToPoint(target1, true, target2);
      return;
    } else {
      let p3;
      if (d3 < 0) {
        p3 = l1.start;
      } else {
        p3 = l1.end;
      }
      let p22;
      if (d22 < 0) {
        p22 = l22.start;
      } else {
        p22 = l22.end;
      }
      const closestPoint = temp12;
      const closestPoint2 = temp22;
      l1.closestPointToPoint(p22, true, temp12);
      l22.closestPointToPoint(p3, true, temp22);
      if (closestPoint.distanceToSquared(p22) <= closestPoint2.distanceToSquared(p3)) {
        target1.copy(closestPoint);
        target2.copy(p22);
        return;
      } else {
        target1.copy(p3);
        target2.copy(closestPoint2);
        return;
      }
    }
  };
}();
var sphereIntersectTriangle = function() {
  const closestPointTemp = new Vector3();
  const projectedPointTemp = new Vector3();
  const planeTemp = new Plane();
  const lineTemp = new Line3();
  return function sphereIntersectTriangle2(sphere, triangle2) {
    const { radius, center: center2 } = sphere;
    const { a: a6, b: b5, c: c5 } = triangle2;
    lineTemp.start = a6;
    lineTemp.end = b5;
    const closestPoint1 = lineTemp.closestPointToPoint(center2, true, closestPointTemp);
    if (closestPoint1.distanceTo(center2) <= radius) return true;
    lineTemp.start = a6;
    lineTemp.end = c5;
    const closestPoint2 = lineTemp.closestPointToPoint(center2, true, closestPointTemp);
    if (closestPoint2.distanceTo(center2) <= radius) return true;
    lineTemp.start = b5;
    lineTemp.end = c5;
    const closestPoint3 = lineTemp.closestPointToPoint(center2, true, closestPointTemp);
    if (closestPoint3.distanceTo(center2) <= radius) return true;
    const plane = triangle2.getPlane(planeTemp);
    const dp = Math.abs(plane.distanceToPoint(center2));
    if (dp <= radius) {
      const pp = plane.projectPoint(center2, projectedPointTemp);
      const cp = triangle2.containsPoint(pp);
      if (cp) return true;
    }
    return false;
  };
}();

// node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js
var DIST_EPSILON = 1e-15;
function isNearZero(value) {
  return Math.abs(value) < DIST_EPSILON;
}
var ExtendedTriangle = class extends Triangle {
  constructor(...args) {
    super(...args);
    this.isExtendedTriangle = true;
    this.satAxes = new Array(4).fill().map(() => new Vector3());
    this.satBounds = new Array(4).fill().map(() => new SeparatingAxisBounds());
    this.points = [this.a, this.b, this.c];
    this.sphere = new Sphere();
    this.plane = new Plane();
    this.needsUpdate = true;
  }
  intersectsSphere(sphere) {
    return sphereIntersectTriangle(sphere, this);
  }
  update() {
    const a6 = this.a;
    const b5 = this.b;
    const c5 = this.c;
    const points = this.points;
    const satAxes = this.satAxes;
    const satBounds = this.satBounds;
    const axis0 = satAxes[0];
    const sab0 = satBounds[0];
    this.getNormal(axis0);
    sab0.setFromPoints(axis0, points);
    const axis1 = satAxes[1];
    const sab1 = satBounds[1];
    axis1.subVectors(a6, b5);
    sab1.setFromPoints(axis1, points);
    const axis2 = satAxes[2];
    const sab2 = satBounds[2];
    axis2.subVectors(b5, c5);
    sab2.setFromPoints(axis2, points);
    const axis3 = satAxes[3];
    const sab3 = satBounds[3];
    axis3.subVectors(c5, a6);
    sab3.setFromPoints(axis3, points);
    this.sphere.setFromPoints(this.points);
    this.plane.setFromNormalAndCoplanarPoint(axis0, a6);
    this.needsUpdate = false;
  }
};
ExtendedTriangle.prototype.closestPointToSegment = function() {
  const point1 = new Vector3();
  const point2 = new Vector3();
  const edge = new Line3();
  return function distanceToSegment(segment, target1 = null, target2 = null) {
    const { start, end } = segment;
    const points = this.points;
    let distSq;
    let closestDistanceSq = Infinity;
    for (let i4 = 0; i4 < 3; i4++) {
      const nexti = (i4 + 1) % 3;
      edge.start.copy(points[i4]);
      edge.end.copy(points[nexti]);
      closestPointsSegmentToSegment(edge, segment, point1, point2);
      distSq = point1.distanceToSquared(point2);
      if (distSq < closestDistanceSq) {
        closestDistanceSq = distSq;
        if (target1) target1.copy(point1);
        if (target2) target2.copy(point2);
      }
    }
    this.closestPointToPoint(start, point1);
    distSq = start.distanceToSquared(point1);
    if (distSq < closestDistanceSq) {
      closestDistanceSq = distSq;
      if (target1) target1.copy(point1);
      if (target2) target2.copy(start);
    }
    this.closestPointToPoint(end, point1);
    distSq = end.distanceToSquared(point1);
    if (distSq < closestDistanceSq) {
      closestDistanceSq = distSq;
      if (target1) target1.copy(point1);
      if (target2) target2.copy(end);
    }
    return Math.sqrt(closestDistanceSq);
  };
}();
ExtendedTriangle.prototype.intersectsTriangle = function() {
  const saTri2 = new ExtendedTriangle();
  const arr1 = new Array(3);
  const arr2 = new Array(3);
  const cachedSatBounds = new SeparatingAxisBounds();
  const cachedSatBounds2 = new SeparatingAxisBounds();
  const cachedAxis = new Vector3();
  const dir1 = new Vector3();
  const dir2 = new Vector3();
  const tempDir = new Vector3();
  const edge = new Line3();
  const edge1 = new Line3();
  const edge2 = new Line3();
  return function intersectsTriangle(other, target2 = null, suppressLog = false) {
    if (this.needsUpdate) {
      this.update();
    }
    if (!other.isExtendedTriangle) {
      saTri2.copy(other);
      saTri2.update();
      other = saTri2;
    } else if (other.needsUpdate) {
      other.update();
    }
    const plane1 = this.plane;
    const plane2 = other.plane;
    if (Math.abs(plane1.normal.dot(plane2.normal)) > 1 - 1e-10) {
      const satBounds1 = this.satBounds;
      const satAxes1 = this.satAxes;
      arr2[0] = other.a;
      arr2[1] = other.b;
      arr2[2] = other.c;
      for (let i4 = 0; i4 < 4; i4++) {
        const sb = satBounds1[i4];
        const sa2 = satAxes1[i4];
        cachedSatBounds.setFromPoints(sa2, arr2);
        if (sb.isSeparated(cachedSatBounds)) return false;
      }
      const satBounds2 = other.satBounds;
      const satAxes2 = other.satAxes;
      arr1[0] = this.a;
      arr1[1] = this.b;
      arr1[2] = this.c;
      for (let i4 = 0; i4 < 4; i4++) {
        const sb = satBounds2[i4];
        const sa2 = satAxes2[i4];
        cachedSatBounds.setFromPoints(sa2, arr1);
        if (sb.isSeparated(cachedSatBounds)) return false;
      }
      for (let i4 = 0; i4 < 4; i4++) {
        const sa1 = satAxes1[i4];
        for (let i22 = 0; i22 < 4; i22++) {
          const sa2 = satAxes2[i22];
          cachedAxis.crossVectors(sa1, sa2);
          cachedSatBounds.setFromPoints(cachedAxis, arr1);
          cachedSatBounds2.setFromPoints(cachedAxis, arr2);
          if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;
        }
      }
      if (target2) {
        if (!suppressLog) {
          console.warn("ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.");
        }
        target2.start.set(0, 0, 0);
        target2.end.set(0, 0, 0);
      }
      return true;
    } else {
      const points1 = this.points;
      let found1 = false;
      let count1 = 0;
      for (let i4 = 0; i4 < 3; i4++) {
        const p3 = points1[i4];
        const pNext = points1[(i4 + 1) % 3];
        edge.start.copy(p3);
        edge.end.copy(pNext);
        edge.delta(dir1);
        const targetPoint = found1 ? edge1.start : edge1.end;
        const startIntersects = isNearZero(plane2.distanceToPoint(p3));
        if (isNearZero(plane2.normal.dot(dir1)) && startIntersects) {
          edge1.copy(edge);
          count1 = 2;
          break;
        }
        const doesIntersect = plane2.intersectLine(edge, targetPoint) || startIntersects;
        if (doesIntersect && !isNearZero(targetPoint.distanceTo(pNext))) {
          count1++;
          if (found1) {
            break;
          }
          found1 = true;
        }
      }
      if (count1 === 1 && other.containsPoint(edge1.end)) {
        if (target2) {
          target2.start.copy(edge1.end);
          target2.end.copy(edge1.end);
        }
        return true;
      } else if (count1 !== 2) {
        return false;
      }
      const points2 = other.points;
      let found2 = false;
      let count2 = 0;
      for (let i4 = 0; i4 < 3; i4++) {
        const p3 = points2[i4];
        const pNext = points2[(i4 + 1) % 3];
        edge.start.copy(p3);
        edge.end.copy(pNext);
        edge.delta(dir2);
        const targetPoint = found2 ? edge2.start : edge2.end;
        const startIntersects = isNearZero(plane1.distanceToPoint(p3));
        if (isNearZero(plane1.normal.dot(dir2)) && startIntersects) {
          edge2.copy(edge);
          count2 = 2;
          break;
        }
        const doesIntersect = plane1.intersectLine(edge, targetPoint) || startIntersects;
        if (doesIntersect && !isNearZero(targetPoint.distanceTo(pNext))) {
          count2++;
          if (found2) {
            break;
          }
          found2 = true;
        }
      }
      if (count2 === 1 && this.containsPoint(edge2.end)) {
        if (target2) {
          target2.start.copy(edge2.end);
          target2.end.copy(edge2.end);
        }
        return true;
      } else if (count2 !== 2) {
        return false;
      }
      edge1.delta(dir1);
      edge2.delta(dir2);
      if (dir1.dot(dir2) < 0) {
        let tmp = edge2.start;
        edge2.start = edge2.end;
        edge2.end = tmp;
      }
      const s1 = edge1.start.dot(dir1);
      const e1 = edge1.end.dot(dir1);
      const s22 = edge2.start.dot(dir1);
      const e22 = edge2.end.dot(dir1);
      const separated1 = e1 < s22;
      const separated2 = s1 < e22;
      if (s1 !== e22 && s22 !== e1 && separated1 === separated2) {
        return false;
      }
      if (target2) {
        tempDir.subVectors(edge1.start, edge2.start);
        if (tempDir.dot(dir1) > 0) {
          target2.start.copy(edge1.start);
        } else {
          target2.start.copy(edge2.start);
        }
        tempDir.subVectors(edge1.end, edge2.end);
        if (tempDir.dot(dir1) < 0) {
          target2.end.copy(edge1.end);
        } else {
          target2.end.copy(edge2.end);
        }
      }
      return true;
    }
  };
}();
ExtendedTriangle.prototype.distanceToPoint = function() {
  const target2 = new Vector3();
  return function distanceToPoint(point) {
    this.closestPointToPoint(point, target2);
    return point.distanceTo(target2);
  };
}();
ExtendedTriangle.prototype.distanceToTriangle = function() {
  const point = new Vector3();
  const point2 = new Vector3();
  const cornerFields = ["a", "b", "c"];
  const line1 = new Line3();
  const line2 = new Line3();
  return function distanceToTriangle(other, target1 = null, target2 = null) {
    const lineTarget = target1 || target2 ? line1 : null;
    if (this.intersectsTriangle(other, lineTarget)) {
      if (target1 || target2) {
        if (target1) lineTarget.getCenter(target1);
        if (target2) lineTarget.getCenter(target2);
      }
      return 0;
    }
    let closestDistanceSq = Infinity;
    for (let i4 = 0; i4 < 3; i4++) {
      let dist;
      const field = cornerFields[i4];
      const otherVec = other[field];
      this.closestPointToPoint(otherVec, point);
      dist = otherVec.distanceToSquared(point);
      if (dist < closestDistanceSq) {
        closestDistanceSq = dist;
        if (target1) target1.copy(point);
        if (target2) target2.copy(otherVec);
      }
      const thisVec = this[field];
      other.closestPointToPoint(thisVec, point);
      dist = thisVec.distanceToSquared(point);
      if (dist < closestDistanceSq) {
        closestDistanceSq = dist;
        if (target1) target1.copy(thisVec);
        if (target2) target2.copy(point);
      }
    }
    for (let i4 = 0; i4 < 3; i4++) {
      const f11 = cornerFields[i4];
      const f12 = cornerFields[(i4 + 1) % 3];
      line1.set(this[f11], this[f12]);
      for (let i22 = 0; i22 < 3; i22++) {
        const f21 = cornerFields[i22];
        const f22 = cornerFields[(i22 + 1) % 3];
        line2.set(other[f21], other[f22]);
        closestPointsSegmentToSegment(line1, line2, point, point2);
        const dist = point.distanceToSquared(point2);
        if (dist < closestDistanceSq) {
          closestDistanceSq = dist;
          if (target1) target1.copy(point);
          if (target2) target2.copy(point2);
        }
      }
    }
    return Math.sqrt(closestDistanceSq);
  };
}();

// node_modules/three-mesh-bvh/src/math/OrientedBox.js
var OrientedBox = class {
  constructor(min, max, matrix3) {
    this.isOrientedBox = true;
    this.min = new Vector3();
    this.max = new Vector3();
    this.matrix = new Matrix4();
    this.invMatrix = new Matrix4();
    this.points = new Array(8).fill().map(() => new Vector3());
    this.satAxes = new Array(3).fill().map(() => new Vector3());
    this.satBounds = new Array(3).fill().map(() => new SeparatingAxisBounds());
    this.alignedSatBounds = new Array(3).fill().map(() => new SeparatingAxisBounds());
    this.needsUpdate = false;
    if (min) this.min.copy(min);
    if (max) this.max.copy(max);
    if (matrix3) this.matrix.copy(matrix3);
  }
  set(min, max, matrix3) {
    this.min.copy(min);
    this.max.copy(max);
    this.matrix.copy(matrix3);
    this.needsUpdate = true;
  }
  copy(other) {
    this.min.copy(other.min);
    this.max.copy(other.max);
    this.matrix.copy(other.matrix);
    this.needsUpdate = true;
  }
};
OrientedBox.prototype.update = /* @__PURE__ */ function() {
  return function update() {
    const matrix3 = this.matrix;
    const min = this.min;
    const max = this.max;
    const points = this.points;
    for (let x2 = 0; x2 <= 1; x2++) {
      for (let y2 = 0; y2 <= 1; y2++) {
        for (let z2 = 0; z2 <= 1; z2++) {
          const i4 = (1 << 0) * x2 | (1 << 1) * y2 | (1 << 2) * z2;
          const v5 = points[i4];
          v5.x = x2 ? max.x : min.x;
          v5.y = y2 ? max.y : min.y;
          v5.z = z2 ? max.z : min.z;
          v5.applyMatrix4(matrix3);
        }
      }
    }
    const satBounds = this.satBounds;
    const satAxes = this.satAxes;
    const minVec = points[0];
    for (let i4 = 0; i4 < 3; i4++) {
      const axis = satAxes[i4];
      const sb = satBounds[i4];
      const index2 = 1 << i4;
      const pi2 = points[index2];
      axis.subVectors(minVec, pi2);
      sb.setFromPoints(axis, points);
    }
    const alignedSatBounds = this.alignedSatBounds;
    alignedSatBounds[0].setFromPointsField(points, "x");
    alignedSatBounds[1].setFromPointsField(points, "y");
    alignedSatBounds[2].setFromPointsField(points, "z");
    this.invMatrix.copy(this.matrix).invert();
    this.needsUpdate = false;
  };
}();
OrientedBox.prototype.intersectsBox = function() {
  const aabbBounds = new SeparatingAxisBounds();
  return function intersectsBox(box) {
    if (this.needsUpdate) {
      this.update();
    }
    const min = box.min;
    const max = box.max;
    const satBounds = this.satBounds;
    const satAxes = this.satAxes;
    const alignedSatBounds = this.alignedSatBounds;
    aabbBounds.min = min.x;
    aabbBounds.max = max.x;
    if (alignedSatBounds[0].isSeparated(aabbBounds)) return false;
    aabbBounds.min = min.y;
    aabbBounds.max = max.y;
    if (alignedSatBounds[1].isSeparated(aabbBounds)) return false;
    aabbBounds.min = min.z;
    aabbBounds.max = max.z;
    if (alignedSatBounds[2].isSeparated(aabbBounds)) return false;
    for (let i4 = 0; i4 < 3; i4++) {
      const axis = satAxes[i4];
      const sb = satBounds[i4];
      aabbBounds.setFromBox(axis, box);
      if (sb.isSeparated(aabbBounds)) return false;
    }
    return true;
  };
}();
OrientedBox.prototype.intersectsTriangle = function() {
  const saTri = new ExtendedTriangle();
  const pointsArr = new Array(3);
  const cachedSatBounds = new SeparatingAxisBounds();
  const cachedSatBounds2 = new SeparatingAxisBounds();
  const cachedAxis = new Vector3();
  return function intersectsTriangle(triangle2) {
    if (this.needsUpdate) {
      this.update();
    }
    if (!triangle2.isExtendedTriangle) {
      saTri.copy(triangle2);
      saTri.update();
      triangle2 = saTri;
    } else if (triangle2.needsUpdate) {
      triangle2.update();
    }
    const satBounds = this.satBounds;
    const satAxes = this.satAxes;
    pointsArr[0] = triangle2.a;
    pointsArr[1] = triangle2.b;
    pointsArr[2] = triangle2.c;
    for (let i4 = 0; i4 < 3; i4++) {
      const sb = satBounds[i4];
      const sa2 = satAxes[i4];
      cachedSatBounds.setFromPoints(sa2, pointsArr);
      if (sb.isSeparated(cachedSatBounds)) return false;
    }
    const triSatBounds = triangle2.satBounds;
    const triSatAxes = triangle2.satAxes;
    const points = this.points;
    for (let i4 = 0; i4 < 3; i4++) {
      const sb = triSatBounds[i4];
      const sa2 = triSatAxes[i4];
      cachedSatBounds.setFromPoints(sa2, points);
      if (sb.isSeparated(cachedSatBounds)) return false;
    }
    for (let i4 = 0; i4 < 3; i4++) {
      const sa1 = satAxes[i4];
      for (let i22 = 0; i22 < 4; i22++) {
        const sa2 = triSatAxes[i22];
        cachedAxis.crossVectors(sa1, sa2);
        cachedSatBounds.setFromPoints(cachedAxis, pointsArr);
        cachedSatBounds2.setFromPoints(cachedAxis, points);
        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;
      }
    }
    return true;
  };
}();
OrientedBox.prototype.closestPointToPoint = /* @__PURE__ */ function() {
  return function closestPointToPoint(point, target1) {
    if (this.needsUpdate) {
      this.update();
    }
    target1.copy(point).applyMatrix4(this.invMatrix).clamp(this.min, this.max).applyMatrix4(this.matrix);
    return target1;
  };
}();
OrientedBox.prototype.distanceToPoint = function() {
  const target2 = new Vector3();
  return function distanceToPoint(point) {
    this.closestPointToPoint(point, target2);
    return point.distanceTo(target2);
  };
}();
OrientedBox.prototype.distanceToBox = function() {
  const xyzFields2 = ["x", "y", "z"];
  const segments1 = new Array(12).fill().map(() => new Line3());
  const segments2 = new Array(12).fill().map(() => new Line3());
  const point1 = new Vector3();
  const point2 = new Vector3();
  return function distanceToBox(box, threshold = 0, target1 = null, target2 = null) {
    if (this.needsUpdate) {
      this.update();
    }
    if (this.intersectsBox(box)) {
      if (target1 || target2) {
        box.getCenter(point2);
        this.closestPointToPoint(point2, point1);
        box.closestPointToPoint(point1, point2);
        if (target1) target1.copy(point1);
        if (target2) target2.copy(point2);
      }
      return 0;
    }
    const threshold2 = threshold * threshold;
    const min = box.min;
    const max = box.max;
    const points = this.points;
    let closestDistanceSq = Infinity;
    for (let i4 = 0; i4 < 8; i4++) {
      const p3 = points[i4];
      point2.copy(p3).clamp(min, max);
      const dist = p3.distanceToSquared(point2);
      if (dist < closestDistanceSq) {
        closestDistanceSq = dist;
        if (target1) target1.copy(p3);
        if (target2) target2.copy(point2);
        if (dist < threshold2) return Math.sqrt(dist);
      }
    }
    let count = 0;
    for (let i4 = 0; i4 < 3; i4++) {
      for (let i1 = 0; i1 <= 1; i1++) {
        for (let i22 = 0; i22 <= 1; i22++) {
          const nextIndex = (i4 + 1) % 3;
          const nextIndex2 = (i4 + 2) % 3;
          const index2 = i1 << nextIndex | i22 << nextIndex2;
          const index22 = 1 << i4 | i1 << nextIndex | i22 << nextIndex2;
          const p1 = points[index2];
          const p22 = points[index22];
          const line1 = segments1[count];
          line1.set(p1, p22);
          const f1 = xyzFields2[i4];
          const f22 = xyzFields2[nextIndex];
          const f3 = xyzFields2[nextIndex2];
          const line2 = segments2[count];
          const start = line2.start;
          const end = line2.end;
          start[f1] = min[f1];
          start[f22] = i1 ? min[f22] : max[f22];
          start[f3] = i22 ? min[f3] : max[f22];
          end[f1] = max[f1];
          end[f22] = i1 ? min[f22] : max[f22];
          end[f3] = i22 ? min[f3] : max[f22];
          count++;
        }
      }
    }
    for (let x2 = 0; x2 <= 1; x2++) {
      for (let y2 = 0; y2 <= 1; y2++) {
        for (let z2 = 0; z2 <= 1; z2++) {
          point2.x = x2 ? max.x : min.x;
          point2.y = y2 ? max.y : min.y;
          point2.z = z2 ? max.z : min.z;
          this.closestPointToPoint(point2, point1);
          const dist = point2.distanceToSquared(point1);
          if (dist < closestDistanceSq) {
            closestDistanceSq = dist;
            if (target1) target1.copy(point1);
            if (target2) target2.copy(point2);
            if (dist < threshold2) return Math.sqrt(dist);
          }
        }
      }
    }
    for (let i4 = 0; i4 < 12; i4++) {
      const l1 = segments1[i4];
      for (let i22 = 0; i22 < 12; i22++) {
        const l22 = segments2[i22];
        closestPointsSegmentToSegment(l1, l22, point1, point2);
        const dist = point1.distanceToSquared(point2);
        if (dist < closestDistanceSq) {
          closestDistanceSq = dist;
          if (target1) target1.copy(point1);
          if (target2) target2.copy(point2);
          if (dist < threshold2) return Math.sqrt(dist);
        }
      }
    }
    return Math.sqrt(closestDistanceSq);
  };
}();

// node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js
var vA = new Vector3();
var vB = new Vector3();
var vC = new Vector3();
var uvA = new Vector2();
var uvB = new Vector2();
var uvC = new Vector2();
var intersectionPoint = new Vector3();
function checkIntersection(ray4, pA, pB, pC, point, side) {
  let intersect;
  if (side === BackSide) {
    intersect = ray4.intersectTriangle(pC, pB, pA, true, point);
  } else {
    intersect = ray4.intersectTriangle(pA, pB, pC, side !== DoubleSide, point);
  }
  if (intersect === null) return null;
  const distance3 = ray4.origin.distanceTo(point);
  return {
    distance: distance3,
    point: point.clone()
  };
}
function checkBufferGeometryIntersection(ray4, position2, uv, a6, b5, c5, side) {
  vA.fromBufferAttribute(position2, a6);
  vB.fromBufferAttribute(position2, b5);
  vC.fromBufferAttribute(position2, c5);
  const intersection3 = checkIntersection(ray4, vA, vB, vC, intersectionPoint, side);
  if (intersection3) {
    if (uv) {
      uvA.fromBufferAttribute(uv, a6);
      uvB.fromBufferAttribute(uv, b5);
      uvC.fromBufferAttribute(uv, c5);
      intersection3.uv = Triangle.getUV(intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2());
    }
    const face = {
      a: a6,
      b: b5,
      c: c5,
      normal: new Vector3(),
      materialIndex: 0
    };
    Triangle.getNormal(vA, vB, vC, face.normal);
    intersection3.face = face;
    intersection3.faceIndex = a6;
  }
  return intersection3;
}
function intersectTri(geo, side, ray4, tri, intersections) {
  const triOffset = tri * 3;
  const a6 = geo.index.getX(triOffset);
  const b5 = geo.index.getX(triOffset + 1);
  const c5 = geo.index.getX(triOffset + 2);
  const intersection3 = checkBufferGeometryIntersection(ray4, geo.attributes.position, geo.attributes.uv, a6, b5, c5, side);
  if (intersection3) {
    intersection3.faceIndex = tri;
    if (intersections) intersections.push(intersection3);
    return intersection3;
  }
  return null;
}

// node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js
function intersectTris(geo, side, ray4, offset, count, intersections) {
  for (let i4 = offset, end = offset + count; i4 < end; i4++) {
    intersectTri(geo, side, ray4, i4, intersections);
  }
}
function intersectClosestTri(geo, side, ray4, offset, count) {
  let dist = Infinity;
  let res = null;
  for (let i4 = offset, end = offset + count; i4 < end; i4++) {
    const intersection3 = intersectTri(geo, side, ray4, i4);
    if (intersection3 && intersection3.distance < dist) {
      res = intersection3;
      dist = intersection3.distance;
    }
  }
  return res;
}
function convertRaycastIntersect(hit, object, raycaster) {
  if (hit === null) {
    return null;
  }
  hit.point.applyMatrix4(object.matrixWorld);
  hit.distance = hit.point.distanceTo(raycaster.ray.origin);
  hit.object = object;
  if (hit.distance < raycaster.near || hit.distance > raycaster.far) {
    return null;
  } else {
    return hit;
  }
}

// node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js
function setTriangle(tri, i4, index2, pos) {
  const ta2 = tri.a;
  const tb = tri.b;
  const tc = tri.c;
  let i0 = i4;
  let i1 = i4 + 1;
  let i22 = i4 + 2;
  if (index2) {
    i0 = index2.getX(i4);
    i1 = index2.getX(i4 + 1);
    i22 = index2.getX(i4 + 2);
  }
  ta2.x = pos.getX(i0);
  ta2.y = pos.getY(i0);
  ta2.z = pos.getZ(i0);
  tb.x = pos.getX(i1);
  tb.y = pos.getY(i1);
  tb.z = pos.getZ(i1);
  tc.x = pos.getX(i22);
  tc.y = pos.getY(i22);
  tc.z = pos.getZ(i22);
}
function iterateOverTriangles(offset, count, geometry2, intersectsTriangleFunc, contained, depth, triangle2) {
  const index2 = geometry2.index;
  const pos = geometry2.attributes.position;
  for (let i4 = offset, l3 = count + offset; i4 < l3; i4++) {
    setTriangle(triangle2, i4 * 3, index2, pos);
    triangle2.needsUpdate = true;
    if (intersectsTriangleFunc(triangle2, i4, contained, depth)) {
      return true;
    }
  }
  return false;
}
var tempV1 = new Vector3();
var tempV2 = new Vector3();
var tempV3 = new Vector3();
var tempUV1 = new Vector2();
var tempUV2 = new Vector2();
var tempUV3 = new Vector2();

// node_modules/three-mesh-bvh/src/utils/PrimitivePool.js
var PrimitivePool = class {
  constructor(getNewPrimitive) {
    this._getNewPrimitive = getNewPrimitive;
    this._primitives = [];
  }
  getPrimitive() {
    const primitives = this._primitives;
    if (primitives.length === 0) {
      return this._getNewPrimitive();
    } else {
      return primitives.pop();
    }
  }
  releasePrimitive(primitive) {
    this._primitives.push(primitive);
  }
};

// node_modules/three-mesh-bvh/src/core/nodeBufferFunctions.js
function IS_LEAF(n16, uint16Array) {
  return uint16Array[n16 + 15] === 65535;
}
function OFFSET(n32, uint32Array) {
  return uint32Array[n32 + 6];
}
function COUNT(n16, uint16Array) {
  return uint16Array[n16 + 14];
}
function LEFT_NODE(n32) {
  return n32 + 8;
}
function RIGHT_NODE(n32, uint32Array) {
  return uint32Array[n32 + 6];
}
function SPLIT_AXIS(n32, uint32Array) {
  return uint32Array[n32 + 7];
}
function BOUNDING_DATA_INDEX(n32) {
  return n32;
}

// node_modules/three-mesh-bvh/src/core/castFunctions.js
var boundingBox = new Box3();
var boxIntersection = new Vector3();
var xyzFields = ["x", "y", "z"];
function raycast(nodeIndex32, geometry2, side, ray4, intersects) {
  let nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;
  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);
  if (isLeaf) {
    const offset = OFFSET(nodeIndex32, uint32Array);
    const count = COUNT(nodeIndex16, uint16Array);
    intersectTris(geometry2, side, ray4, offset, count, intersects);
  } else {
    const leftIndex = LEFT_NODE(nodeIndex32);
    if (intersectRay(leftIndex, float32Array, ray4, boxIntersection)) {
      raycast(leftIndex, geometry2, side, ray4, intersects);
    }
    const rightIndex = RIGHT_NODE(nodeIndex32, uint32Array);
    if (intersectRay(rightIndex, float32Array, ray4, boxIntersection)) {
      raycast(rightIndex, geometry2, side, ray4, intersects);
    }
  }
}
function raycastFirst(nodeIndex32, geometry2, side, ray4) {
  let nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;
  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);
  if (isLeaf) {
    const offset = OFFSET(nodeIndex32, uint32Array);
    const count = COUNT(nodeIndex16, uint16Array);
    return intersectClosestTri(geometry2, side, ray4, offset, count);
  } else {
    const splitAxis = SPLIT_AXIS(nodeIndex32, uint32Array);
    const xyzAxis = xyzFields[splitAxis];
    const rayDir = ray4.direction[xyzAxis];
    const leftToRight = rayDir >= 0;
    let c1, c22;
    if (leftToRight) {
      c1 = LEFT_NODE(nodeIndex32);
      c22 = RIGHT_NODE(nodeIndex32, uint32Array);
    } else {
      c1 = RIGHT_NODE(nodeIndex32, uint32Array);
      c22 = LEFT_NODE(nodeIndex32);
    }
    const c1Intersection = intersectRay(c1, float32Array, ray4, boxIntersection);
    const c1Result = c1Intersection ? raycastFirst(c1, geometry2, side, ray4) : null;
    if (c1Result) {
      const point = c1Result.point[xyzAxis];
      const isOutside = leftToRight ? point <= float32Array[c22 + splitAxis] : (
        // min bounding data
        point >= float32Array[c22 + splitAxis + 3]
      );
      if (isOutside) {
        return c1Result;
      }
    }
    const c2Intersection = intersectRay(c22, float32Array, ray4, boxIntersection);
    const c2Result = c2Intersection ? raycastFirst(c22, geometry2, side, ray4) : null;
    if (c1Result && c2Result) {
      return c1Result.distance <= c2Result.distance ? c1Result : c2Result;
    } else {
      return c1Result || c2Result || null;
    }
  }
}
var shapecast = function() {
  let _box12, _box22;
  const boxStack = [];
  const boxPool = new PrimitivePool(() => new Box3());
  return function shapecast2(...args) {
    _box12 = boxPool.getPrimitive();
    _box22 = boxPool.getPrimitive();
    boxStack.push(_box12, _box22);
    const result = shapecastTraverse(...args);
    boxPool.releasePrimitive(_box12);
    boxPool.releasePrimitive(_box22);
    boxStack.pop();
    boxStack.pop();
    const length3 = boxStack.length;
    if (length3 > 0) {
      _box22 = boxStack[length3 - 1];
      _box12 = boxStack[length3 - 2];
    }
    return result;
  };
  function shapecastTraverse(nodeIndex32, geometry2, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc = null, nodeIndexByteOffset = 0, depth = 0) {
    function getLeftOffset(nodeIndex322) {
      let nodeIndex162 = nodeIndex322 * 2, uint16Array2 = _uint16Array, uint32Array2 = _uint32Array;
      while (!IS_LEAF(nodeIndex162, uint16Array2)) {
        nodeIndex322 = LEFT_NODE(nodeIndex322);
        nodeIndex162 = nodeIndex322 * 2;
      }
      return OFFSET(nodeIndex322, uint32Array2);
    }
    function getRightEndOffset(nodeIndex322) {
      let nodeIndex162 = nodeIndex322 * 2, uint16Array2 = _uint16Array, uint32Array2 = _uint32Array;
      while (!IS_LEAF(nodeIndex162, uint16Array2)) {
        nodeIndex322 = RIGHT_NODE(nodeIndex322, uint32Array2);
        nodeIndex162 = nodeIndex322 * 2;
      }
      return OFFSET(nodeIndex322, uint32Array2) + COUNT(nodeIndex162, uint16Array2);
    }
    let nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;
    const isLeaf = IS_LEAF(nodeIndex16, uint16Array);
    if (isLeaf) {
      const offset = OFFSET(nodeIndex32, uint32Array);
      const count = COUNT(nodeIndex16, uint16Array);
      arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, _box12);
      return intersectsRangeFunc(offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box12);
    } else {
      const left = LEFT_NODE(nodeIndex32);
      const right = RIGHT_NODE(nodeIndex32, uint32Array);
      let c1 = left;
      let c22 = right;
      let score1, score2;
      let box1, box2;
      if (nodeScoreFunc) {
        box1 = _box12;
        box2 = _box22;
        arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);
        arrayToBox(BOUNDING_DATA_INDEX(c22), float32Array, box2);
        score1 = nodeScoreFunc(box1);
        score2 = nodeScoreFunc(box2);
        if (score2 < score1) {
          c1 = right;
          c22 = left;
          const temp5 = score1;
          score1 = score2;
          score2 = temp5;
          box1 = box2;
        }
      }
      if (!box1) {
        box1 = _box12;
        arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);
      }
      const isC1Leaf = IS_LEAF(c1 * 2, uint16Array);
      const c1Intersection = intersectsBoundsFunc(box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1);
      let c1StopTraversal;
      if (c1Intersection === CONTAINED) {
        const offset = getLeftOffset(c1);
        const end = getRightEndOffset(c1);
        const count = end - offset;
        c1StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1);
      } else {
        c1StopTraversal = c1Intersection && shapecastTraverse(
          c1,
          geometry2,
          intersectsBoundsFunc,
          intersectsRangeFunc,
          nodeScoreFunc,
          nodeIndexByteOffset,
          depth + 1
        );
      }
      if (c1StopTraversal) return true;
      box2 = _box22;
      arrayToBox(BOUNDING_DATA_INDEX(c22), float32Array, box2);
      const isC2Leaf = IS_LEAF(c22 * 2, uint16Array);
      const c2Intersection = intersectsBoundsFunc(box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c22);
      let c2StopTraversal;
      if (c2Intersection === CONTAINED) {
        const offset = getLeftOffset(c22);
        const end = getRightEndOffset(c22);
        const count = end - offset;
        c2StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c22, box2);
      } else {
        c2StopTraversal = c2Intersection && shapecastTraverse(
          c22,
          geometry2,
          intersectsBoundsFunc,
          intersectsRangeFunc,
          nodeScoreFunc,
          nodeIndexByteOffset,
          depth + 1
        );
      }
      if (c2StopTraversal) return true;
      return false;
    }
  }
}();
var intersectsGeometry = function() {
  const triangle2 = new ExtendedTriangle();
  const triangle22 = new ExtendedTriangle();
  const invertedMat = new Matrix4();
  const obb3 = new OrientedBox();
  const obb22 = new OrientedBox();
  return function intersectsGeometry2(nodeIndex32, geometry2, otherGeometry, geometryToBvh, cachedObb = null) {
    let nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;
    if (cachedObb === null) {
      if (!otherGeometry.boundingBox) {
        otherGeometry.computeBoundingBox();
      }
      obb3.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);
      cachedObb = obb3;
    }
    const isLeaf = IS_LEAF(nodeIndex16, uint16Array);
    if (isLeaf) {
      const thisGeometry = geometry2;
      const thisIndex = thisGeometry.index;
      const thisPos = thisGeometry.attributes.position;
      const index2 = otherGeometry.index;
      const pos = otherGeometry.attributes.position;
      const offset = OFFSET(nodeIndex32, uint32Array);
      const count = COUNT(nodeIndex16, uint16Array);
      invertedMat.copy(geometryToBvh).invert();
      if (otherGeometry.boundsTree) {
        arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, obb22);
        obb22.matrix.copy(invertedMat);
        obb22.needsUpdate = true;
        const res = otherGeometry.boundsTree.shapecast({
          intersectsBounds: (box) => obb22.intersectsBox(box),
          intersectsTriangle: (tri) => {
            tri.a.applyMatrix4(geometryToBvh);
            tri.b.applyMatrix4(geometryToBvh);
            tri.c.applyMatrix4(geometryToBvh);
            tri.needsUpdate = true;
            for (let i4 = offset * 3, l3 = (count + offset) * 3; i4 < l3; i4 += 3) {
              setTriangle(triangle22, i4, thisIndex, thisPos);
              triangle22.needsUpdate = true;
              if (tri.intersectsTriangle(triangle22)) {
                return true;
              }
            }
            return false;
          }
        });
        return res;
      } else {
        for (let i4 = offset * 3, l3 = count + offset * 3; i4 < l3; i4 += 3) {
          setTriangle(triangle2, i4, thisIndex, thisPos);
          triangle2.a.applyMatrix4(invertedMat);
          triangle2.b.applyMatrix4(invertedMat);
          triangle2.c.applyMatrix4(invertedMat);
          triangle2.needsUpdate = true;
          for (let i22 = 0, l22 = index2.count; i22 < l22; i22 += 3) {
            setTriangle(triangle22, i22, index2, pos);
            triangle22.needsUpdate = true;
            if (triangle2.intersectsTriangle(triangle22)) {
              return true;
            }
          }
        }
      }
    } else {
      const left = nodeIndex32 + 8;
      const right = uint32Array[nodeIndex32 + 6];
      arrayToBox(BOUNDING_DATA_INDEX(left), float32Array, boundingBox);
      const leftIntersection = cachedObb.intersectsBox(boundingBox) && intersectsGeometry2(left, geometry2, otherGeometry, geometryToBvh, cachedObb);
      if (leftIntersection) return true;
      arrayToBox(BOUNDING_DATA_INDEX(right), float32Array, boundingBox);
      const rightIntersection = cachedObb.intersectsBox(boundingBox) && intersectsGeometry2(right, geometry2, otherGeometry, geometryToBvh, cachedObb);
      if (rightIntersection) return true;
      return false;
    }
  };
}();
function intersectRay(nodeIndex32, array, ray4, target2) {
  arrayToBox(nodeIndex32, array, boundingBox);
  return ray4.intersectBox(boundingBox, target2);
}
var bufferStack = [];
var _prevBuffer;
var _float32Array;
var _uint16Array;
var _uint32Array;
function setBuffer(buffer2) {
  if (_prevBuffer) {
    bufferStack.push(_prevBuffer);
  }
  _prevBuffer = buffer2;
  _float32Array = new Float32Array(buffer2);
  _uint16Array = new Uint16Array(buffer2);
  _uint32Array = new Uint32Array(buffer2);
}
function clearBuffer() {
  _prevBuffer = null;
  _float32Array = null;
  _uint16Array = null;
  _uint32Array = null;
  if (bufferStack.length) {
    setBuffer(bufferStack.pop());
  }
}

// node_modules/three-mesh-bvh/src/core/MeshBVH.js
var SKIP_GENERATION = Symbol("skip tree generation");
var aabb = new Box3();
var aabb2 = new Box3();
var tempMatrix = new Matrix4();
var obb = new OrientedBox();
var obb2 = new OrientedBox();
var temp = new Vector3();
var temp1 = new Vector3();
var temp2 = new Vector3();
var temp3 = new Vector3();
var temp4 = new Vector3();
var tempBox = new Box3();
var trianglePool = new PrimitivePool(() => new ExtendedTriangle());
var MeshBVH = class _MeshBVH {
  static serialize(bvh, options = {}) {
    if (options.isBufferGeometry) {
      console.warn("MeshBVH.serialize: The arguments for the function have changed. See documentation for new signature.");
      return _MeshBVH.serialize(
        arguments[0],
        {
          cloneBuffers: arguments[2] === void 0 ? true : arguments[2]
        }
      );
    }
    options = {
      cloneBuffers: true,
      ...options
    };
    const geometry2 = bvh.geometry;
    const rootData = bvh._roots;
    const indexAttribute = geometry2.getIndex();
    let result;
    if (options.cloneBuffers) {
      result = {
        roots: rootData.map((root) => root.slice()),
        index: indexAttribute.array.slice()
      };
    } else {
      result = {
        roots: rootData,
        index: indexAttribute.array
      };
    }
    return result;
  }
  static deserialize(data, geometry2, options = {}) {
    if (typeof options === "boolean") {
      console.warn("MeshBVH.deserialize: The arguments for the function have changed. See documentation for new signature.");
      return _MeshBVH.deserialize(
        arguments[0],
        arguments[1],
        {
          setIndex: arguments[2] === void 0 ? true : arguments[2]
        }
      );
    }
    options = {
      setIndex: true,
      ...options
    };
    const { index: index2, roots } = data;
    const bvh = new _MeshBVH(geometry2, { ...options, [SKIP_GENERATION]: true });
    bvh._roots = roots;
    if (options.setIndex) {
      const indexAttribute = geometry2.getIndex();
      if (indexAttribute === null) {
        const newIndex = new BufferAttribute(data.index, 1, false);
        geometry2.setIndex(newIndex);
      } else if (indexAttribute.array !== index2) {
        indexAttribute.array.set(index2);
        indexAttribute.needsUpdate = true;
      }
    }
    return bvh;
  }
  constructor(geometry2, options = {}) {
    if (!geometry2.isBufferGeometry) {
      throw new Error("MeshBVH: Only BufferGeometries are supported.");
    } else if (geometry2.index && geometry2.index.isInterleavedBufferAttribute) {
      throw new Error("MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.");
    }
    options = Object.assign({
      strategy: CENTER,
      maxDepth: 40,
      maxLeafTris: 10,
      verbose: true,
      useSharedArrayBuffer: false,
      setBoundingBox: true,
      onProgress: null,
      // undocumented options
      // Whether to skip generating the tree. Used for deserialization.
      [SKIP_GENERATION]: false
    }, options);
    if (options.useSharedArrayBuffer && typeof SharedArrayBuffer === "undefined") {
      throw new Error("MeshBVH: SharedArrayBuffer is not available.");
    }
    this._roots = null;
    if (!options[SKIP_GENERATION]) {
      this._roots = buildPackedTree(geometry2, options);
      if (!geometry2.boundingBox && options.setBoundingBox) {
        geometry2.boundingBox = this.getBoundingBox(new Box3());
      }
    }
    this.geometry = geometry2;
  }
  refit(nodeIndices = null) {
    if (nodeIndices && Array.isArray(nodeIndices)) {
      nodeIndices = new Set(nodeIndices);
    }
    const geometry2 = this.geometry;
    const indexArr = geometry2.index.array;
    const posAttr = geometry2.attributes.position;
    let buffer2, uint32Array, uint16Array, float32Array;
    let byteOffset = 0;
    const roots = this._roots;
    for (let i4 = 0, l3 = roots.length; i4 < l3; i4++) {
      buffer2 = roots[i4];
      uint32Array = new Uint32Array(buffer2);
      uint16Array = new Uint16Array(buffer2);
      float32Array = new Float32Array(buffer2);
      _traverse(0, byteOffset);
      byteOffset += buffer2.byteLength;
    }
    function _traverse(node32Index, byteOffset2, force = false) {
      const node16Index = node32Index * 2;
      const isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;
      if (isLeaf) {
        const offset = uint32Array[node32Index + 6];
        const count = uint16Array[node16Index + 14];
        let minx = Infinity;
        let miny = Infinity;
        let minz = Infinity;
        let maxx = -Infinity;
        let maxy = -Infinity;
        let maxz = -Infinity;
        for (let i4 = 3 * offset, l3 = 3 * (offset + count); i4 < l3; i4++) {
          const index2 = indexArr[i4];
          const x2 = posAttr.getX(index2);
          const y2 = posAttr.getY(index2);
          const z2 = posAttr.getZ(index2);
          if (x2 < minx) minx = x2;
          if (x2 > maxx) maxx = x2;
          if (y2 < miny) miny = y2;
          if (y2 > maxy) maxy = y2;
          if (z2 < minz) minz = z2;
          if (z2 > maxz) maxz = z2;
        }
        if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {
          float32Array[node32Index + 0] = minx;
          float32Array[node32Index + 1] = miny;
          float32Array[node32Index + 2] = minz;
          float32Array[node32Index + 3] = maxx;
          float32Array[node32Index + 4] = maxy;
          float32Array[node32Index + 5] = maxz;
          return true;
        } else {
          return false;
        }
      } else {
        const left = node32Index + 8;
        const right = uint32Array[node32Index + 6];
        const offsetLeft = left + byteOffset2;
        const offsetRight = right + byteOffset2;
        let forceChildren = force;
        let includesLeft = false;
        let includesRight = false;
        if (nodeIndices) {
          if (!forceChildren) {
            includesLeft = nodeIndices.has(offsetLeft);
            includesRight = nodeIndices.has(offsetRight);
            forceChildren = !includesLeft && !includesRight;
          }
        } else {
          includesLeft = true;
          includesRight = true;
        }
        const traverseLeft = forceChildren || includesLeft;
        const traverseRight = forceChildren || includesRight;
        let leftChange = false;
        if (traverseLeft) {
          leftChange = _traverse(left, byteOffset2, forceChildren);
        }
        let rightChange = false;
        if (traverseRight) {
          rightChange = _traverse(right, byteOffset2, forceChildren);
        }
        const didChange = leftChange || rightChange;
        if (didChange) {
          for (let i4 = 0; i4 < 3; i4++) {
            const lefti = left + i4;
            const righti = right + i4;
            const minLeftValue = float32Array[lefti];
            const maxLeftValue = float32Array[lefti + 3];
            const minRightValue = float32Array[righti];
            const maxRightValue = float32Array[righti + 3];
            float32Array[node32Index + i4] = minLeftValue < minRightValue ? minLeftValue : minRightValue;
            float32Array[node32Index + i4 + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;
          }
        }
        return didChange;
      }
    }
  }
  traverse(callback, rootIndex = 0) {
    const buffer2 = this._roots[rootIndex];
    const uint32Array = new Uint32Array(buffer2);
    const uint16Array = new Uint16Array(buffer2);
    _traverse(0);
    function _traverse(node32Index, depth = 0) {
      const node16Index = node32Index * 2;
      const isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;
      if (isLeaf) {
        const offset = uint32Array[node32Index + 6];
        const count = uint16Array[node16Index + 14];
        callback(depth, isLeaf, new Float32Array(buffer2, node32Index * 4, 6), offset, count);
      } else {
        const left = node32Index + BYTES_PER_NODE / 4;
        const right = uint32Array[node32Index + 6];
        const splitAxis = uint32Array[node32Index + 7];
        const stopTraversal = callback(depth, isLeaf, new Float32Array(buffer2, node32Index * 4, 6), splitAxis);
        if (!stopTraversal) {
          _traverse(left, depth + 1);
          _traverse(right, depth + 1);
        }
      }
    }
  }
  /* Core Cast Functions */
  raycast(ray4, materialOrSide = FrontSide) {
    const roots = this._roots;
    const geometry2 = this.geometry;
    const intersects = [];
    const isMaterial = materialOrSide.isMaterial;
    const isArrayMaterial = Array.isArray(materialOrSide);
    const groups = geometry2.groups;
    const side = isMaterial ? materialOrSide.side : materialOrSide;
    for (let i4 = 0, l3 = roots.length; i4 < l3; i4++) {
      const materialSide = isArrayMaterial ? materialOrSide[groups[i4].materialIndex].side : side;
      const startCount = intersects.length;
      setBuffer(roots[i4]);
      raycast(0, geometry2, materialSide, ray4, intersects);
      clearBuffer();
      if (isArrayMaterial) {
        const materialIndex = groups[i4].materialIndex;
        for (let j2 = startCount, jl = intersects.length; j2 < jl; j2++) {
          intersects[j2].face.materialIndex = materialIndex;
        }
      }
    }
    return intersects;
  }
  raycastFirst(ray4, materialOrSide = FrontSide) {
    const roots = this._roots;
    const geometry2 = this.geometry;
    const isMaterial = materialOrSide.isMaterial;
    const isArrayMaterial = Array.isArray(materialOrSide);
    let closestResult = null;
    const groups = geometry2.groups;
    const side = isMaterial ? materialOrSide.side : materialOrSide;
    for (let i4 = 0, l3 = roots.length; i4 < l3; i4++) {
      const materialSide = isArrayMaterial ? materialOrSide[groups[i4].materialIndex].side : side;
      setBuffer(roots[i4]);
      const result = raycastFirst(0, geometry2, materialSide, ray4);
      clearBuffer();
      if (result != null && (closestResult == null || result.distance < closestResult.distance)) {
        closestResult = result;
        if (isArrayMaterial) {
          result.face.materialIndex = groups[i4].materialIndex;
        }
      }
    }
    return closestResult;
  }
  intersectsGeometry(otherGeometry, geomToMesh) {
    const geometry2 = this.geometry;
    let result = false;
    for (const root of this._roots) {
      setBuffer(root);
      result = intersectsGeometry(0, geometry2, otherGeometry, geomToMesh);
      clearBuffer();
      if (result) {
        break;
      }
    }
    return result;
  }
  shapecast(callbacks, _intersectsTriangleFunc, _orderNodesFunc) {
    const geometry2 = this.geometry;
    if (callbacks instanceof Function) {
      if (_intersectsTriangleFunc) {
        const originalTriangleFunc = _intersectsTriangleFunc;
        _intersectsTriangleFunc = (tri, index2, contained, depth) => {
          const i32 = index2 * 3;
          return originalTriangleFunc(tri, i32, i32 + 1, i32 + 2, contained, depth);
        };
      }
      callbacks = {
        boundsTraverseOrder: _orderNodesFunc,
        intersectsBounds: callbacks,
        intersectsTriangle: _intersectsTriangleFunc,
        intersectsRange: null
      };
      console.warn("MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.");
    }
    const triangle2 = trianglePool.getPrimitive();
    let {
      boundsTraverseOrder,
      intersectsBounds,
      intersectsRange,
      intersectsTriangle
    } = callbacks;
    if (intersectsRange && intersectsTriangle) {
      const originalIntersectsRange = intersectsRange;
      intersectsRange = (offset, count, contained, depth, nodeIndex) => {
        if (!originalIntersectsRange(offset, count, contained, depth, nodeIndex)) {
          return iterateOverTriangles(offset, count, geometry2, intersectsTriangle, contained, depth, triangle2);
        }
        return true;
      };
    } else if (!intersectsRange) {
      if (intersectsTriangle) {
        intersectsRange = (offset, count, contained, depth) => {
          return iterateOverTriangles(offset, count, geometry2, intersectsTriangle, contained, depth, triangle2);
        };
      } else {
        intersectsRange = (offset, count, contained) => {
          return contained;
        };
      }
    }
    let result = false;
    let byteOffset = 0;
    for (const root of this._roots) {
      setBuffer(root);
      result = shapecast(0, geometry2, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);
      clearBuffer();
      if (result) {
        break;
      }
      byteOffset += root.byteLength;
    }
    trianglePool.releasePrimitive(triangle2);
    return result;
  }
  bvhcast(otherBvh, matrixToLocal, callbacks) {
    let {
      intersectsRanges,
      intersectsTriangles
    } = callbacks;
    const indexAttr = this.geometry.index;
    const positionAttr = this.geometry.attributes.position;
    const otherIndexAttr = otherBvh.geometry.index;
    const otherPositionAttr = otherBvh.geometry.attributes.position;
    tempMatrix.copy(matrixToLocal).invert();
    const triangle2 = trianglePool.getPrimitive();
    const triangle22 = trianglePool.getPrimitive();
    if (intersectsTriangles) {
      let iterateOverDoubleTriangles = function(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {
        for (let i22 = offset2, l22 = offset2 + count2; i22 < l22; i22++) {
          setTriangle(triangle22, i22 * 3, otherIndexAttr, otherPositionAttr);
          triangle22.a.applyMatrix4(matrixToLocal);
          triangle22.b.applyMatrix4(matrixToLocal);
          triangle22.c.applyMatrix4(matrixToLocal);
          triangle22.needsUpdate = true;
          for (let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1++) {
            setTriangle(triangle2, i1 * 3, indexAttr, positionAttr);
            triangle2.needsUpdate = true;
            if (intersectsTriangles(triangle2, triangle22, i1, i22, depth1, index1, depth2, index2)) {
              return true;
            }
          }
        }
        return false;
      };
      if (intersectsRanges) {
        const originalIntersectsRanges = intersectsRanges;
        intersectsRanges = function(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {
          if (!originalIntersectsRanges(offset1, count1, offset2, count2, depth1, index1, depth2, index2)) {
            return iterateOverDoubleTriangles(offset1, count1, offset2, count2, depth1, index1, depth2, index2);
          }
          return true;
        };
      } else {
        intersectsRanges = iterateOverDoubleTriangles;
      }
    }
    otherBvh.getBoundingBox(aabb2);
    aabb2.applyMatrix4(matrixToLocal);
    const result = this.shapecast({
      intersectsBounds: (box) => aabb2.intersectsBox(box),
      intersectsRange: (offset1, count1, contained, depth1, nodeIndex1, box) => {
        aabb.copy(box);
        aabb.applyMatrix4(tempMatrix);
        return otherBvh.shapecast({
          intersectsBounds: (box2) => aabb.intersectsBox(box2),
          intersectsRange: (offset2, count2, contained2, depth2, nodeIndex2) => {
            return intersectsRanges(offset1, count1, offset2, count2, depth1, nodeIndex1, depth2, nodeIndex2);
          }
        });
      }
    });
    trianglePool.releasePrimitive(triangle2);
    trianglePool.releasePrimitive(triangle22);
    return result;
  }
  /* Derived Cast Functions */
  intersectsBox(box, boxToMesh) {
    obb.set(box.min, box.max, boxToMesh);
    obb.needsUpdate = true;
    return this.shapecast(
      {
        intersectsBounds: (box2) => obb.intersectsBox(box2),
        intersectsTriangle: (tri) => obb.intersectsTriangle(tri)
      }
    );
  }
  intersectsSphere(sphere) {
    return this.shapecast(
      {
        intersectsBounds: (box) => sphere.intersectsBox(box),
        intersectsTriangle: (tri) => tri.intersectsSphere(sphere)
      }
    );
  }
  closestPointToGeometry(otherGeometry, geometryToBvh, target1 = {}, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {
    if (!otherGeometry.boundingBox) {
      otherGeometry.computeBoundingBox();
    }
    obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);
    obb.needsUpdate = true;
    const geometry2 = this.geometry;
    const pos = geometry2.attributes.position;
    const index2 = geometry2.index;
    const otherPos = otherGeometry.attributes.position;
    const otherIndex = otherGeometry.index;
    const triangle2 = trianglePool.getPrimitive();
    const triangle22 = trianglePool.getPrimitive();
    let tempTarget1 = temp1;
    let tempTargetDest1 = temp2;
    let tempTarget2 = null;
    let tempTargetDest2 = null;
    if (target2) {
      tempTarget2 = temp3;
      tempTargetDest2 = temp4;
    }
    let closestDistance = Infinity;
    let closestDistanceTriIndex = null;
    let closestDistanceOtherTriIndex = null;
    tempMatrix.copy(geometryToBvh).invert();
    obb2.matrix.copy(tempMatrix);
    this.shapecast(
      {
        boundsTraverseOrder: (box) => {
          return obb.distanceToBox(box);
        },
        intersectsBounds: (box, isLeaf, score) => {
          if (score < closestDistance && score < maxThreshold) {
            if (isLeaf) {
              obb2.min.copy(box.min);
              obb2.max.copy(box.max);
              obb2.needsUpdate = true;
            }
            return true;
          }
          return false;
        },
        intersectsRange: (offset, count) => {
          if (otherGeometry.boundsTree) {
            return otherGeometry.boundsTree.shapecast({
              boundsTraverseOrder: (box) => {
                return obb2.distanceToBox(box);
              },
              intersectsBounds: (box, isLeaf, score) => {
                return score < closestDistance && score < maxThreshold;
              },
              intersectsRange: (otherOffset, otherCount) => {
                for (let i22 = otherOffset * 3, l22 = (otherOffset + otherCount) * 3; i22 < l22; i22 += 3) {
                  setTriangle(triangle22, i22, otherIndex, otherPos);
                  triangle22.a.applyMatrix4(geometryToBvh);
                  triangle22.b.applyMatrix4(geometryToBvh);
                  triangle22.c.applyMatrix4(geometryToBvh);
                  triangle22.needsUpdate = true;
                  for (let i4 = offset * 3, l3 = (offset + count) * 3; i4 < l3; i4 += 3) {
                    setTriangle(triangle2, i4, index2, pos);
                    triangle2.needsUpdate = true;
                    const dist = triangle2.distanceToTriangle(triangle22, tempTarget1, tempTarget2);
                    if (dist < closestDistance) {
                      tempTargetDest1.copy(tempTarget1);
                      if (tempTargetDest2) {
                        tempTargetDest2.copy(tempTarget2);
                      }
                      closestDistance = dist;
                      closestDistanceTriIndex = i4 / 3;
                      closestDistanceOtherTriIndex = i22 / 3;
                    }
                    if (dist < minThreshold) {
                      return true;
                    }
                  }
                }
              }
            });
          } else {
            const triCount = otherIndex ? otherIndex.count : otherPos.count;
            for (let i22 = 0, l22 = triCount; i22 < l22; i22 += 3) {
              setTriangle(triangle22, i22, otherIndex, otherPos);
              triangle22.a.applyMatrix4(geometryToBvh);
              triangle22.b.applyMatrix4(geometryToBvh);
              triangle22.c.applyMatrix4(geometryToBvh);
              triangle22.needsUpdate = true;
              for (let i4 = offset * 3, l3 = (offset + count) * 3; i4 < l3; i4 += 3) {
                setTriangle(triangle2, i4, index2, pos);
                triangle2.needsUpdate = true;
                const dist = triangle2.distanceToTriangle(triangle22, tempTarget1, tempTarget2);
                if (dist < closestDistance) {
                  tempTargetDest1.copy(tempTarget1);
                  if (tempTargetDest2) {
                    tempTargetDest2.copy(tempTarget2);
                  }
                  closestDistance = dist;
                  closestDistanceTriIndex = i4 / 3;
                  closestDistanceOtherTriIndex = i22 / 3;
                }
                if (dist < minThreshold) {
                  return true;
                }
              }
            }
          }
        }
      }
    );
    trianglePool.releasePrimitive(triangle2);
    trianglePool.releasePrimitive(triangle22);
    if (closestDistance === Infinity) return null;
    if (!target1.point) target1.point = tempTargetDest1.clone();
    else target1.point.copy(tempTargetDest1);
    target1.distance = closestDistance, target1.faceIndex = closestDistanceTriIndex;
    if (target2) {
      if (!target2.point) target2.point = tempTargetDest2.clone();
      else target2.point.copy(tempTargetDest2);
      target2.point.applyMatrix4(tempMatrix);
      tempTargetDest1.applyMatrix4(tempMatrix);
      target2.distance = tempTargetDest1.sub(target2.point).length();
      target2.faceIndex = closestDistanceOtherTriIndex;
    }
    return target1;
  }
  closestPointToPoint(point, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {
    const minThresholdSq = minThreshold * minThreshold;
    const maxThresholdSq = maxThreshold * maxThreshold;
    let closestDistanceSq = Infinity;
    let closestDistanceTriIndex = null;
    this.shapecast(
      {
        boundsTraverseOrder: (box) => {
          temp.copy(point).clamp(box.min, box.max);
          return temp.distanceToSquared(point);
        },
        intersectsBounds: (box, isLeaf, score) => {
          return score < closestDistanceSq && score < maxThresholdSq;
        },
        intersectsTriangle: (tri, triIndex) => {
          tri.closestPointToPoint(point, temp);
          const distSq = point.distanceToSquared(temp);
          if (distSq < closestDistanceSq) {
            temp1.copy(temp);
            closestDistanceSq = distSq;
            closestDistanceTriIndex = triIndex;
          }
          if (distSq < minThresholdSq) {
            return true;
          } else {
            return false;
          }
        }
      }
    );
    if (closestDistanceSq === Infinity) return null;
    const closestDistance = Math.sqrt(closestDistanceSq);
    if (!target2.point) target2.point = temp1.clone();
    else target2.point.copy(temp1);
    target2.distance = closestDistance, target2.faceIndex = closestDistanceTriIndex;
    return target2;
  }
  getBoundingBox(target2) {
    target2.makeEmpty();
    const roots = this._roots;
    roots.forEach((buffer2) => {
      arrayToBox(0, new Float32Array(buffer2), tempBox);
      target2.union(tempBox);
    });
    return target2;
  }
};

// node_modules/three-mesh-bvh/src/objects/MeshBVHVisualizer.js
var boundingBox2 = new Box3();

// node_modules/three-mesh-bvh/src/debug/Debug.js
var _box1 = new Box3();
var _box2 = new Box3();
var _vec = new Vector3();

// node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js
var ray = new Ray();
var tmpInverseMatrix = new Matrix4();
var origMeshRaycastFunc = Mesh.prototype.raycast;
function acceleratedRaycast(raycaster, intersects) {
  if (this.geometry.boundsTree) {
    if (this.material === void 0) return;
    tmpInverseMatrix.copy(this.matrixWorld).invert();
    ray.copy(raycaster.ray).applyMatrix4(tmpInverseMatrix);
    const bvh = this.geometry.boundsTree;
    if (raycaster.firstHitOnly === true) {
      const hit = convertRaycastIntersect(bvh.raycastFirst(ray, this.material), this, raycaster);
      if (hit) {
        intersects.push(hit);
      }
    } else {
      const hits = bvh.raycast(ray, this.material);
      for (let i4 = 0, l3 = hits.length; i4 < l3; i4++) {
        const hit = convertRaycastIntersect(hits[i4], this, raycaster);
        if (hit) {
          intersects.push(hit);
        }
      }
    }
  } else {
    origMeshRaycastFunc.call(this, raycaster, intersects);
  }
}
function computeBoundsTree(options) {
  this.boundsTree = new MeshBVH(this, options);
  return this.boundsTree;
}
function disposeBoundsTree() {
  this.boundsTree = null;
}

// node_modules/three-mesh-bvh/src/gpu/VertexAttributeTexture.js
function countToStringFormat(count) {
  switch (count) {
    case 1:
      return "R";
    case 2:
      return "RG";
    case 3:
      return "RGBA";
    case 4:
      return "RGBA";
  }
  throw new Error();
}
function countToFormat(count) {
  switch (count) {
    case 1:
      return RedFormat;
    case 2:
      return RGFormat;
    case 3:
      return RGBAFormat;
    case 4:
      return RGBAFormat;
  }
}
function countToIntFormat(count) {
  switch (count) {
    case 1:
      return RedIntegerFormat;
    case 2:
      return RGIntegerFormat;
    case 3:
      return RGBAIntegerFormat;
    case 4:
      return RGBAIntegerFormat;
  }
}
var VertexAttributeTexture = class extends DataTexture {
  constructor() {
    super();
    this.minFilter = NearestFilter;
    this.magFilter = NearestFilter;
    this.generateMipmaps = false;
    this.overrideItemSize = null;
    this._forcedType = null;
  }
  updateFrom(attr) {
    const overrideItemSize = this.overrideItemSize;
    const originalItemSize = attr.itemSize;
    const originalCount = attr.count;
    if (overrideItemSize !== null) {
      if (originalItemSize * originalCount % overrideItemSize !== 0) {
        throw new Error("VertexAttributeTexture: overrideItemSize must divide evenly into buffer length.");
      }
      attr.itemSize = overrideItemSize;
      attr.count = originalCount * originalItemSize / overrideItemSize;
    }
    const itemSize = attr.itemSize;
    const count = attr.count;
    const normalized = attr.normalized;
    const originalBufferCons = attr.array.constructor;
    const byteCount = originalBufferCons.BYTES_PER_ELEMENT;
    let targetType = this._forcedType;
    let finalStride = itemSize;
    if (targetType === null) {
      switch (originalBufferCons) {
        case Float32Array:
          targetType = FloatType;
          break;
        case Uint8Array:
        case Uint16Array:
        case Uint32Array:
          targetType = UnsignedIntType;
          break;
        case Int8Array:
        case Int16Array:
        case Int32Array:
          targetType = IntType;
          break;
      }
    }
    let type, format, normalizeValue, targetBufferCons;
    let internalFormat = countToStringFormat(itemSize);
    switch (targetType) {
      case FloatType:
        normalizeValue = 1;
        format = countToFormat(itemSize);
        if (normalized && byteCount === 1) {
          targetBufferCons = originalBufferCons;
          internalFormat += "8";
          if (originalBufferCons === Uint8Array) {
            type = UnsignedByteType;
          } else {
            type = ByteType;
            internalFormat += "_SNORM";
          }
        } else {
          targetBufferCons = Float32Array;
          internalFormat += "32F";
          type = FloatType;
        }
        break;
      case IntType:
        internalFormat += byteCount * 8 + "I";
        normalizeValue = normalized ? Math.pow(2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1) : 1;
        format = countToIntFormat(itemSize);
        if (byteCount === 1) {
          targetBufferCons = Int8Array;
          type = ByteType;
        } else if (byteCount === 2) {
          targetBufferCons = Int16Array;
          type = ShortType;
        } else {
          targetBufferCons = Int32Array;
          type = IntType;
        }
        break;
      case UnsignedIntType:
        internalFormat += byteCount * 8 + "UI";
        normalizeValue = normalized ? Math.pow(2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1) : 1;
        format = countToIntFormat(itemSize);
        if (byteCount === 1) {
          targetBufferCons = Uint8Array;
          type = UnsignedByteType;
        } else if (byteCount === 2) {
          targetBufferCons = Uint16Array;
          type = UnsignedShortType;
        } else {
          targetBufferCons = Uint32Array;
          type = UnsignedIntType;
        }
        break;
    }
    if (finalStride === 3 && (format === RGBAFormat || format === RGBAIntegerFormat)) {
      finalStride = 4;
    }
    const dimension = Math.ceil(Math.sqrt(count));
    const length3 = finalStride * dimension * dimension;
    const dataArray = new targetBufferCons(length3);
    const originalNormalized = attr.normalized;
    attr.normalized = false;
    for (let i4 = 0; i4 < count; i4++) {
      const ii2 = finalStride * i4;
      dataArray[ii2] = attr.getX(i4) / normalizeValue;
      if (itemSize >= 2) {
        dataArray[ii2 + 1] = attr.getY(i4) / normalizeValue;
      }
      if (itemSize >= 3) {
        dataArray[ii2 + 2] = attr.getZ(i4) / normalizeValue;
        if (finalStride === 4) {
          dataArray[ii2 + 3] = 1;
        }
      }
      if (itemSize >= 4) {
        dataArray[ii2 + 3] = attr.getW(i4) / normalizeValue;
      }
    }
    attr.normalized = originalNormalized;
    this.internalFormat = internalFormat;
    this.format = format;
    this.type = type;
    this.image.width = dimension;
    this.image.height = dimension;
    this.image.data = dataArray;
    this.needsUpdate = true;
    this.dispose();
    attr.itemSize = originalItemSize;
    attr.count = originalCount;
  }
};
var UIntVertexAttributeTexture = class extends VertexAttributeTexture {
  constructor() {
    super();
    this._forcedType = UnsignedIntType;
  }
};
var FloatVertexAttributeTexture = class extends VertexAttributeTexture {
  constructor() {
    super();
    this._forcedType = FloatType;
  }
};

// node_modules/three-mesh-bvh/src/gpu/MeshBVHUniformStruct.js
function bvhToTextures(bvh, boundsTexture, contentsTexture) {
  const roots = bvh._roots;
  if (roots.length !== 1) {
    throw new Error("MeshBVHUniformStruct: Multi-root BVHs not supported.");
  }
  const root = roots[0];
  const uint16Array = new Uint16Array(root);
  const uint32Array = new Uint32Array(root);
  const float32Array = new Float32Array(root);
  const nodeCount = root.byteLength / BYTES_PER_NODE;
  const boundsDimension = 2 * Math.ceil(Math.sqrt(nodeCount / 2));
  const boundsArray = new Float32Array(4 * boundsDimension * boundsDimension);
  const contentsDimension = Math.ceil(Math.sqrt(nodeCount));
  const contentsArray = new Uint32Array(2 * contentsDimension * contentsDimension);
  for (let i4 = 0; i4 < nodeCount; i4++) {
    const nodeIndex32 = i4 * BYTES_PER_NODE / 4;
    const nodeIndex16 = nodeIndex32 * 2;
    const boundsIndex = BOUNDING_DATA_INDEX(nodeIndex32);
    for (let b5 = 0; b5 < 3; b5++) {
      boundsArray[8 * i4 + 0 + b5] = float32Array[boundsIndex + 0 + b5];
      boundsArray[8 * i4 + 4 + b5] = float32Array[boundsIndex + 3 + b5];
    }
    if (IS_LEAF(nodeIndex16, uint16Array)) {
      const count = COUNT(nodeIndex16, uint16Array);
      const offset = OFFSET(nodeIndex32, uint32Array);
      const mergedLeafCount = 4294901760 | count;
      contentsArray[i4 * 2 + 0] = mergedLeafCount;
      contentsArray[i4 * 2 + 1] = offset;
    } else {
      const rightIndex = 4 * RIGHT_NODE(nodeIndex32, uint32Array) / BYTES_PER_NODE;
      const splitAxis = SPLIT_AXIS(nodeIndex32, uint32Array);
      contentsArray[i4 * 2 + 0] = splitAxis;
      contentsArray[i4 * 2 + 1] = rightIndex;
    }
  }
  boundsTexture.image.data = boundsArray;
  boundsTexture.image.width = boundsDimension;
  boundsTexture.image.height = boundsDimension;
  boundsTexture.format = RGBAFormat;
  boundsTexture.type = FloatType;
  boundsTexture.internalFormat = "RGBA32F";
  boundsTexture.minFilter = NearestFilter;
  boundsTexture.magFilter = NearestFilter;
  boundsTexture.generateMipmaps = false;
  boundsTexture.needsUpdate = true;
  boundsTexture.dispose();
  contentsTexture.image.data = contentsArray;
  contentsTexture.image.width = contentsDimension;
  contentsTexture.image.height = contentsDimension;
  contentsTexture.format = RGIntegerFormat;
  contentsTexture.type = UnsignedIntType;
  contentsTexture.internalFormat = "RG32UI";
  contentsTexture.minFilter = NearestFilter;
  contentsTexture.magFilter = NearestFilter;
  contentsTexture.generateMipmaps = false;
  contentsTexture.needsUpdate = true;
  contentsTexture.dispose();
}
var MeshBVHUniformStruct = class {
  constructor() {
    this.autoDispose = true;
    this.index = new UIntVertexAttributeTexture();
    this.position = new FloatVertexAttributeTexture();
    this.bvhBounds = new DataTexture();
    this.bvhContents = new DataTexture();
    this.index.overrideItemSize = 3;
  }
  updateFrom(bvh) {
    const { geometry: geometry2 } = bvh;
    bvhToTextures(bvh, this.bvhBounds, this.bvhContents);
    this.index.updateFrom(geometry2.index);
    this.position.updateFrom(geometry2.attributes.position);
  }
  dispose() {
    const { index: index2, position: position2, bvhBounds, bvhContents } = this;
    if (index2) index2.dispose();
    if (position2) position2.dispose();
    if (bvhBounds) bvhBounds.dispose();
    if (bvhContents) bvhContents.dispose();
  }
};

// node_modules/three-mesh-bvh/src/gpu/shaderFunctions.js
var shaderStructs = (
  /* glsl */
  `
#ifndef TRI_INTERSECT_EPSILON
#define TRI_INTERSECT_EPSILON 1e-5
#endif

#ifndef INFINITY
#define INFINITY 1e20
#endif

struct BVH {

	usampler2D index;
	sampler2D position;

	sampler2D bvhBounds;
	usampler2D bvhContents;

};
`
);
var shaderIntersectFunction = (
  /* glsl */
  `

// Utilities
uvec4 uTexelFetch1D( usampler2D tex, uint index ) {

	uint width = uint( textureSize( tex, 0 ).x );
	uvec2 uv;
	uv.x = index % width;
	uv.y = index / width;

	return texelFetch( tex, ivec2( uv ), 0 );

}

ivec4 iTexelFetch1D( isampler2D tex, uint index ) {

	uint width = uint( textureSize( tex, 0 ).x );
	uvec2 uv;
	uv.x = index % width;
	uv.y = index / width;

	return texelFetch( tex, ivec2( uv ), 0 );

}

vec4 texelFetch1D( sampler2D tex, uint index ) {

	uint width = uint( textureSize( tex, 0 ).x );
	uvec2 uv;
	uv.x = index % width;
	uv.y = index / width;

	return texelFetch( tex, ivec2( uv ), 0 );

}

vec4 textureSampleBarycoord( sampler2D tex, vec3 barycoord, uvec3 faceIndices ) {

	return
		barycoord.x * texelFetch1D( tex, faceIndices.x ) +
		barycoord.y * texelFetch1D( tex, faceIndices.y ) +
		barycoord.z * texelFetch1D( tex, faceIndices.z );

}

void ndcToCameraRay(
	vec2 coord, mat4 cameraWorld, mat4 invProjectionMatrix,
	out vec3 rayOrigin, out vec3 rayDirection
) {

	// get camera look direction and near plane for camera clipping
	vec4 lookDirection = cameraWorld * vec4( 0.0, 0.0, - 1.0, 0.0 );
	vec4 nearVector = invProjectionMatrix * vec4( 0.0, 0.0, - 1.0, 1.0 );
	float near = abs( nearVector.z / nearVector.w );

	// get the camera direction and position from camera matrices
	vec4 origin = cameraWorld * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec4 direction = invProjectionMatrix * vec4( coord, 0.5, 1.0 );
	direction /= direction.w;
	direction = cameraWorld * direction - origin;

	// slide the origin along the ray until it sits at the near clip plane position
	origin.xyz += direction.xyz * near / dot( direction, lookDirection );

	rayOrigin = origin.xyz;
	rayDirection = direction.xyz;

}

// Raycasting
float intersectsBounds( vec3 rayOrigin, vec3 rayDirection, vec3 boundsMin, vec3 boundsMax ) {

	// https://www.reddit.com/r/opengl/comments/8ntzz5/fast_glsl_ray_box_intersection/
	// https://tavianator.com/2011/ray_box.html
	vec3 invDir = 1.0 / rayDirection;

	// find intersection distances for each plane
	vec3 tMinPlane = invDir * ( boundsMin - rayOrigin );
	vec3 tMaxPlane = invDir * ( boundsMax - rayOrigin );

	// get the min and max distances from each intersection
	vec3 tMinHit = min( tMaxPlane, tMinPlane );
	vec3 tMaxHit = max( tMaxPlane, tMinPlane );

	// get the furthest hit distance
	vec2 t = max( tMinHit.xx, tMinHit.yz );
	float t0 = max( t.x, t.y );

	// get the minimum hit distance
	t = min( tMaxHit.xx, tMaxHit.yz );
	float t1 = min( t.x, t.y );

	// set distance to 0.0 if the ray starts inside the box
	float dist = max( t0, 0.0 );

	return t1 >= dist ? dist : INFINITY;

}

bool intersectsTriangle(
	vec3 rayOrigin, vec3 rayDirection, vec3 a, vec3 b, vec3 c,
	out vec3 barycoord, out vec3 norm, out float dist, out float side
) {

	// https://stackoverflow.com/questions/42740765/intersection-between-line-and-triangle-in-3d
	vec3 edge1 = b - a;
	vec3 edge2 = c - a;
	norm = cross( edge1, edge2 );

	float det = - dot( rayDirection, norm );
	float invdet = 1.0 / det;

	vec3 AO = rayOrigin - a;
	vec3 DAO = cross( AO, rayDirection );

	vec4 uvt;
	uvt.x = dot( edge2, DAO ) * invdet;
	uvt.y = - dot( edge1, DAO ) * invdet;
	uvt.z = dot( AO, norm ) * invdet;
	uvt.w = 1.0 - uvt.x - uvt.y;

	// set the hit information
	barycoord = uvt.wxy; // arranged in A, B, C order
	dist = uvt.z;
	side = sign( det );
	norm = side * normalize( norm );

	// add an epsilon to avoid misses between triangles
	uvt += vec4( TRI_INTERSECT_EPSILON );

	return all( greaterThanEqual( uvt, vec4( 0.0 ) ) );

}

bool intersectTriangles(
	BVH bvh, vec3 rayOrigin, vec3 rayDirection, uint offset, uint count,
	inout float minDistance,

	// output variables
	out uvec4 faceIndices, out vec3 faceNormal, out vec3 barycoord,
	out float side, out float dist
) {

	bool found = false;
	vec3 localBarycoord, localNormal;
	float localDist, localSide;
	for ( uint i = offset, l = offset + count; i < l; i ++ ) {

		uvec3 indices = uTexelFetch1D( bvh.index, i ).xyz;
		vec3 a = texelFetch1D( bvh.position, indices.x ).rgb;
		vec3 b = texelFetch1D( bvh.position, indices.y ).rgb;
		vec3 c = texelFetch1D( bvh.position, indices.z ).rgb;

		if (
			intersectsTriangle( rayOrigin, rayDirection, a, b, c, localBarycoord, localNormal, localDist, localSide )
			&& localDist < minDistance
		) {

			found = true;
			minDistance = localDist;

			faceIndices = uvec4( indices.xyz, i );
			faceNormal = localNormal;

			side = localSide;
			barycoord = localBarycoord;
			dist = localDist;

		}

	}

	return found;

}

float intersectsBVHNodeBounds( vec3 rayOrigin, vec3 rayDirection, BVH bvh, uint currNodeIndex ) {

	vec3 boundsMin = texelFetch1D( bvh.bvhBounds, currNodeIndex * 2u + 0u ).xyz;
	vec3 boundsMax = texelFetch1D( bvh.bvhBounds, currNodeIndex * 2u + 1u ).xyz;
	return intersectsBounds( rayOrigin, rayDirection, boundsMin, boundsMax );

}

bool bvhIntersectFirstHit(
	BVH bvh, vec3 rayOrigin, vec3 rayDirection,

	// output variables
	out uvec4 faceIndices, out vec3 faceNormal, out vec3 barycoord,
	out float side, out float dist
) {

	// stack needs to be twice as long as the deepest tree we expect because
	// we push both the left and right child onto the stack every traversal
	int ptr = 0;
	uint stack[ 60 ];
	stack[ 0 ] = 0u;

	float triangleDistance = 1e20;
	bool found = false;
	while ( ptr > - 1 && ptr < 60 ) {

		uint currNodeIndex = stack[ ptr ];
		ptr --;

		// check if we intersect the current bounds
		float boundsHitDistance = intersectsBVHNodeBounds( rayOrigin, rayDirection, bvh, currNodeIndex );
		if ( boundsHitDistance == INFINITY || boundsHitDistance > triangleDistance ) {

			continue;

		}

		uvec2 boundsInfo = uTexelFetch1D( bvh.bvhContents, currNodeIndex ).xy;
		bool isLeaf = bool( boundsInfo.x & 0xffff0000u );

		if ( isLeaf ) {

			uint count = boundsInfo.x & 0x0000ffffu;
			uint offset = boundsInfo.y;

			found = intersectTriangles(
				bvh, rayOrigin, rayDirection, offset, count, triangleDistance,
				faceIndices, faceNormal, barycoord, side, dist
			) || found;

		} else {

			uint leftIndex = currNodeIndex + 1u;
			uint splitAxis = boundsInfo.x & 0x0000ffffu;
			uint rightIndex = boundsInfo.y;

			bool leftToRight = rayDirection[ splitAxis ] >= 0.0;
			uint c1 = leftToRight ? leftIndex : rightIndex;
			uint c2 = leftToRight ? rightIndex : leftIndex;

			// set c2 in the stack so we traverse it later. We need to keep track of a pointer in
			// the stack while we traverse. The second pointer added is the one that will be
			// traversed first
			ptr ++;
			stack[ ptr ] = c2;

			ptr ++;
			stack[ ptr ] = c1;

		}

	}

	return found;

}
`
);

// node_modules/three-mesh-bvh/src/utils/StaticGeometryGenerator.js
var _positionVector = new Vector3();
var _normalVector = new Vector3();
var _tangentVector = new Vector3();
var _tangentVector4 = new Vector4();
var _morphVector = new Vector3();
var _temp = new Vector3();
var _skinIndex = new Vector4();
var _skinWeight = new Vector4();
var _matrix = new Matrix4();
var _boneMatrix = new Matrix4();

// node_modules/@react-three/drei/core/useBVH.js
var isMesh = (child) => child.isMesh;
function useBVH(mesh, options) {
  options = {
    strategy: SAH,
    verbose: false,
    setBoundingBox: true,
    maxDepth: 40,
    maxLeafTris: 10,
    ...options
  };
  React59.useEffect(() => {
    if (mesh.current) {
      mesh.current.raycast = acceleratedRaycast;
      const geometry2 = mesh.current.geometry;
      geometry2.computeBoundsTree = computeBoundsTree;
      geometry2.disposeBoundsTree = disposeBoundsTree;
      geometry2.computeBoundsTree(options);
      return () => {
        if (geometry2.boundsTree) {
          geometry2.disposeBoundsTree();
        }
      };
    }
  }, [mesh, JSON.stringify(options)]);
}
var Bvh = React59.forwardRef(({
  enabled = true,
  firstHitOnly = false,
  children,
  strategy = SAH,
  verbose = false,
  setBoundingBox = true,
  maxDepth = 40,
  maxLeafTris = 10,
  ...props
}, fref) => {
  const ref = React59.useRef(null);
  const raycaster = useThree((state) => state.raycaster);
  React59.useImperativeHandle(fref, () => ref.current, []);
  React59.useEffect(() => {
    if (enabled) {
      const options = {
        strategy,
        verbose,
        setBoundingBox,
        maxDepth,
        maxLeafTris
      };
      const group = ref.current;
      raycaster.firstHitOnly = firstHitOnly;
      group.traverse((child) => {
        if (isMesh(child) && !child.geometry.boundsTree && child.raycast === Mesh.prototype.raycast) {
          child.raycast = acceleratedRaycast;
          child.geometry.computeBoundsTree = computeBoundsTree;
          child.geometry.disposeBoundsTree = disposeBoundsTree;
          child.geometry.computeBoundsTree(options);
        }
      });
      return () => {
        delete raycaster.firstHitOnly;
        group.traverse((child) => {
          if (isMesh(child) && child.geometry.boundsTree) {
            child.geometry.disposeBoundsTree();
            child.raycast = Mesh.prototype.raycast;
          }
        });
      };
    }
  });
  return React59.createElement("group", _extends({
    ref
  }, props), children);
});

// node_modules/@react-three/drei/core/useContextBridge.js
var React60 = __toESM(require_react());
function useContextBridge(...contexts) {
  const cRef = React60.useRef([]);
  cRef.current = contexts.map((context10) => React60.useContext(context10));
  return React60.useMemo(() => ({
    children
  }) => contexts.reduceRight(
    (acc, Context2, i4) => React60.createElement(Context2.Provider, {
      value: cRef.current[i4],
      children: acc
    }),
    children
    /*
     * done this way in reference to:
     * https://github.com/DefinitelyTyped/DefinitelyTyped/issues/44572#issuecomment-625878049
     * https://github.com/microsoft/TypeScript/issues/14729
     */
  ), []);
}

// node_modules/@react-three/drei/core/useAnimations.js
var React61 = __toESM(require_react());
function useAnimations(clips, root) {
  const ref = React61.useRef();
  const [actualRef] = React61.useState(() => root ? root instanceof Object3D ? {
    current: root
  } : root : ref);
  const [mixer] = React61.useState(() => new AnimationMixer(void 0));
  React61.useLayoutEffect(() => void (mixer._root = actualRef.current), [mixer, root]);
  const lazyActions = React61.useRef({});
  const [api] = React61.useState(() => {
    const actions = {};
    clips.forEach((clip) => Object.defineProperty(actions, clip.name, {
      enumerable: true,
      get() {
        if (actualRef.current) {
          return lazyActions.current[clip.name] || (lazyActions.current[clip.name] = mixer.clipAction(clip, actualRef.current));
        }
      },
      configurable: true
    }));
    return {
      ref: actualRef,
      clips,
      actions,
      names: clips.map((c5) => c5.name),
      mixer
    };
  });
  useFrame((state, delta) => mixer.update(delta));
  React61.useEffect(() => {
    const currentRoot = actualRef.current;
    return () => {
      lazyActions.current = {};
      Object.values(api.actions).forEach((action) => {
        if (currentRoot) {
          mixer.uncacheAction(action, currentRoot);
        }
      });
    };
  }, [clips]);
  React61.useEffect(() => {
    return () => {
      mixer.stopAllAction();
    };
  }, [mixer]);
  return api;
}

// node_modules/@react-three/drei/core/useIntersect.js
var React62 = __toESM(require_react());
function useIntersect(onChange) {
  const ref = React62.useRef(null);
  const check = React62.useRef(false);
  const temp5 = React62.useRef(false);
  const callback = React62.useRef(onChange);
  React62.useLayoutEffect(() => void (callback.current = onChange), [onChange]);
  React62.useEffect(() => {
    const obj = ref.current;
    if (obj) {
      const unsub1 = addEffect(() => {
        check.current = false;
        return true;
      });
      const oldOnRender = obj.onBeforeRender;
      obj.onBeforeRender = () => check.current = true;
      const unsub2 = addAfterEffect(() => {
        if (check.current !== temp5.current) callback.current == null ? void 0 : callback.current(temp5.current = check.current);
        return true;
      });
      return () => {
        obj.onBeforeRender = oldOnRender;
        unsub1();
        unsub2();
      };
    }
  }, []);
  return ref;
}

// node_modules/@react-three/drei/core/useBoxProjectedEnv.js
var React63 = __toESM(require_react());
var worldposReplace = (
  /* glsl */
  `
#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )
  vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );
  #ifdef BOX_PROJECTED_ENV_MAP
    vWorldPosition = worldPosition.xyz;
  #endif
#endif
`
);
var boxProjectDefinitions = (
  /*glsl */
  `
#ifdef BOX_PROJECTED_ENV_MAP
  uniform vec3 envMapSize;
  uniform vec3 envMapPosition;
  varying vec3 vWorldPosition;
    
  vec3 parallaxCorrectNormal( vec3 v, vec3 cubeSize, vec3 cubePos ) {
    vec3 nDir = normalize( v );
    vec3 rbmax = ( .5 * cubeSize + cubePos - vWorldPosition ) / nDir;
    vec3 rbmin = ( -.5 * cubeSize + cubePos - vWorldPosition ) / nDir;
    vec3 rbminmax;
    rbminmax.x = ( nDir.x > 0. ) ? rbmax.x : rbmin.x;
    rbminmax.y = ( nDir.y > 0. ) ? rbmax.y : rbmin.y;
    rbminmax.z = ( nDir.z > 0. ) ? rbmax.z : rbmin.z;
    float correction = min( min( rbminmax.x, rbminmax.y ), rbminmax.z );
    vec3 boxIntersection = vWorldPosition + nDir * correction;    
    return boxIntersection - cubePos;
  }
#endif
`
);
var getIBLIrradiance_patch = (
  /* glsl */
  `
#ifdef BOX_PROJECTED_ENV_MAP
  worldNormal = parallaxCorrectNormal( worldNormal, envMapSize, envMapPosition );
#endif
`
);
var getIBLRadiance_patch = (
  /* glsl */
  `
#ifdef BOX_PROJECTED_ENV_MAP
  reflectVec = parallaxCorrectNormal( reflectVec, envMapSize, envMapPosition );
#endif
`
);
function boxProjectedEnvMap(shader, envMapPosition, envMapSize) {
  shader.defines.BOX_PROJECTED_ENV_MAP = true;
  shader.uniforms.envMapPosition = {
    value: envMapPosition
  };
  shader.uniforms.envMapSize = {
    value: envMapSize
  };
  shader.vertexShader = `
  varying vec3 vWorldPosition;
  ${shader.vertexShader.replace("#include <worldpos_vertex>", worldposReplace)}`;
  shader.fragmentShader = `
    ${boxProjectDefinitions}
    ${shader.fragmentShader.replace("#include <envmap_physical_pars_fragment>", ShaderChunk.envmap_physical_pars_fragment).replace("vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );", `vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
         ${getIBLIrradiance_patch}
         `).replace("reflectVec = inverseTransformDirection( reflectVec, viewMatrix );", `reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
         ${getIBLRadiance_patch}
        `)}`;
}
function useBoxProjectedEnv(position2 = new Vector3(), size = new Vector3()) {
  const [config] = React63.useState(() => ({
    position: new Vector3(),
    size: new Vector3()
  }));
  applyProps(config, {
    position: position2,
    size
  });
  const ref = React63.useRef(null);
  const spread = React63.useMemo(() => ({
    ref,
    onBeforeCompile: (shader) => boxProjectedEnvMap(shader, config.position, config.size),
    customProgramCacheKey: () => JSON.stringify(config.position.toArray()) + JSON.stringify(config.size.toArray())
  }), [...config.position.toArray(), ...config.size.toArray()]);
  React63.useLayoutEffect(() => void (ref.current.needsUpdate = true), [config]);
  return spread;
}

// node_modules/@react-three/drei/core/BBAnchor.js
var React64 = __toESM(require_react());
var boundingBox3 = new Box3();
var boundingBoxSize = new Vector3();
var BBAnchor = ({
  anchor,
  ...props
}) => {
  const ref = React64.useRef(null);
  const parentRef = React64.useRef(null);
  React64.useEffect(() => {
    var _ref$current, _ref$current$parent;
    if ((_ref$current = ref.current) != null && (_ref$current$parent = _ref$current.parent) != null && _ref$current$parent.parent) {
      parentRef.current = ref.current.parent;
      ref.current.parent.parent.add(ref.current);
    }
  }, []);
  useFrame(() => {
    if (parentRef.current) {
      boundingBox3.setFromObject(parentRef.current);
      boundingBox3.getSize(boundingBoxSize);
      ref.current.position.set(parentRef.current.position.x + boundingBoxSize.x * anchor[0] / 2, parentRef.current.position.y + boundingBoxSize.y * anchor[1] / 2, parentRef.current.position.z + boundingBoxSize.z * anchor[2] / 2);
    }
  });
  return React64.createElement("group", _extends({
    ref
  }, props));
};

// node_modules/@react-three/drei/core/useTrailTexture.js
var import_react12 = __toESM(require_react());
function smoothAverage(current, measurement, smoothing = 0.9) {
  return measurement * smoothing + current * (1 - smoothing);
}
var easeCircleOut = (x2) => Math.sqrt(1 - Math.pow(x2 - 1, 2));
var TrailTexture = class {
  constructor({
    size = 256,
    maxAge = 750,
    radius = 0.3,
    intensity = 0.2,
    interpolate = 0,
    smoothing = 0,
    minForce = 0.3,
    blend = "screen",
    // source-over is canvas default. Others are slower
    ease = easeCircleOut
  } = {}) {
    this.size = size;
    this.maxAge = maxAge;
    this.radius = radius;
    this.intensity = intensity;
    this.ease = ease;
    this.interpolate = interpolate;
    this.smoothing = smoothing;
    this.minForce = minForce;
    this.blend = blend;
    this.trail = [];
    this.force = 0;
    this.initTexture();
  }
  initTexture() {
    this.canvas = document.createElement("canvas");
    this.canvas.width = this.canvas.height = this.size;
    this.ctx = this.canvas.getContext("2d");
    this.ctx.fillStyle = "black";
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    this.texture = new Texture(this.canvas);
    this.canvas.id = "touchTexture";
    this.canvas.style.width = this.canvas.style.height = `${this.canvas.width}px`;
  }
  update(delta) {
    this.clear();
    this.trail.forEach((point, i4) => {
      point.age += delta * 1e3;
      if (point.age > this.maxAge) {
        this.trail.splice(i4, 1);
      }
    });
    if (!this.trail.length) this.force = 0;
    this.trail.forEach((point) => {
      this.drawTouch(point);
    });
    this.texture.needsUpdate = true;
  }
  clear() {
    this.ctx.globalCompositeOperation = "source-over";
    this.ctx.fillStyle = "black";
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
  }
  addTouch(point) {
    const last = this.trail[this.trail.length - 1];
    if (last) {
      const dx = last.x - point.x;
      const dy = last.y - point.y;
      const dd = dx * dx + dy * dy;
      const force = Math.max(this.minForce, Math.min(dd * 1e4, 1));
      this.force = smoothAverage(force, this.force, this.smoothing);
      if (!!this.interpolate) {
        const lines = Math.ceil(dd / Math.pow(this.radius * 0.5 / this.interpolate, 2));
        if (lines > 1) {
          for (let i4 = 1; i4 < lines; i4++) {
            this.trail.push({
              x: last.x - dx / lines * i4,
              y: last.y - dy / lines * i4,
              age: 0,
              force
            });
          }
        }
      }
    }
    this.trail.push({
      x: point.x,
      y: point.y,
      age: 0,
      force: this.force
    });
  }
  drawTouch(point) {
    const pos = {
      x: point.x * this.size,
      y: (1 - point.y) * this.size
    };
    let intensity = 1;
    if (point.age < this.maxAge * 0.3) {
      intensity = this.ease(point.age / (this.maxAge * 0.3));
    } else {
      intensity = this.ease(1 - (point.age - this.maxAge * 0.3) / (this.maxAge * 0.7));
    }
    intensity *= point.force;
    this.ctx.globalCompositeOperation = this.blend;
    const radius = this.size * this.radius * intensity;
    const grd = this.ctx.createRadialGradient(pos.x, pos.y, Math.max(0, radius * 0.25), pos.x, pos.y, Math.max(0, radius));
    grd.addColorStop(0, `rgba(255, 255, 255, ${this.intensity})`);
    grd.addColorStop(1, `rgba(0, 0, 0, 0.0)`);
    this.ctx.beginPath();
    this.ctx.fillStyle = grd;
    this.ctx.arc(pos.x, pos.y, Math.max(0, radius), 0, Math.PI * 2);
    this.ctx.fill();
  }
};
function useTrailTexture(config = {}) {
  const {
    size,
    maxAge,
    radius,
    intensity,
    interpolate,
    smoothing,
    minForce,
    blend,
    ease
  } = config;
  const trail = (0, import_react12.useMemo)(() => new TrailTexture(config), [size, maxAge, radius, intensity, interpolate, smoothing, minForce, blend, ease]);
  useFrame((_2, delta) => void trail.update(delta));
  const onMove = (0, import_react12.useCallback)((e3) => trail.addTouch(e3.uv), [trail]);
  return [trail.texture, onMove];
}

// node_modules/@react-three/drei/core/Example.js
var React66 = __toESM(require_react());

// node_modules/@react-three/drei/core/Center.js
var React65 = __toESM(require_react());
var Center = React65.forwardRef(function Center2({
  children,
  disable,
  disableX,
  disableY,
  disableZ,
  left,
  right,
  top,
  bottom,
  front,
  back,
  onCentered,
  precise = true,
  cacheKey = 0,
  ...props
}, fRef) {
  const ref = React65.useRef(null);
  const outer = React65.useRef(null);
  const inner = React65.useRef(null);
  React65.useLayoutEffect(() => {
    outer.current.matrixWorld.identity();
    const box3 = new Box3().setFromObject(inner.current, precise);
    const center2 = new Vector3();
    const sphere = new Sphere();
    const width = box3.max.x - box3.min.x;
    const height = box3.max.y - box3.min.y;
    const depth = box3.max.z - box3.min.z;
    box3.getCenter(center2);
    box3.getBoundingSphere(sphere);
    const vAlign = top ? height / 2 : bottom ? -height / 2 : 0;
    const hAlign = left ? -width / 2 : right ? width / 2 : 0;
    const dAlign = front ? depth / 2 : back ? -depth / 2 : 0;
    outer.current.position.set(disable || disableX ? 0 : -center2.x + hAlign, disable || disableY ? 0 : -center2.y + vAlign, disable || disableZ ? 0 : -center2.z + dAlign);
    if (typeof onCentered !== "undefined") {
      onCentered({
        parent: ref.current.parent,
        container: ref.current,
        width,
        height,
        depth,
        boundingBox: box3,
        boundingSphere: sphere,
        center: center2,
        verticalAlignment: vAlign,
        horizontalAlignment: hAlign,
        depthAlignment: dAlign
      });
    }
  }, [cacheKey, onCentered, top, left, front, disable, disableX, disableY, disableZ, precise, right, bottom, back]);
  React65.useImperativeHandle(fRef, () => ref.current, []);
  return React65.createElement("group", _extends({
    ref
  }, props), React65.createElement("group", {
    ref: outer
  }, React65.createElement("group", {
    ref: inner
  }, children)));
});

// node_modules/@react-three/drei/core/Example.js
var Example = React66.forwardRef(({
  font,
  color = "#cbcbcb",
  bevelSize = 0.04,
  debug = false,
  children,
  ...props
}, fref) => {
  const [counter, setCounter] = React66.useState(0);
  const incr = React66.useCallback((x2 = 1) => setCounter(counter + x2), [counter]);
  const decr = React66.useCallback((x2 = 1) => setCounter(counter - x2), [counter]);
  const api = React66.useMemo(() => ({
    incr,
    decr
  }), [incr, decr]);
  React66.useImperativeHandle(fref, () => api, [api]);
  return React66.createElement("group", props, React66.createElement(React66.Suspense, {
    fallback: null
  }, React66.createElement(Center, {
    top: true,
    cacheKey: JSON.stringify({
      counter,
      font
    })
  }, React66.createElement(Text3D, {
    bevelEnabled: true,
    bevelSize,
    font
  }, debug ? React66.createElement("meshNormalMaterial", {
    wireframe: true
  }) : React66.createElement("meshStandardMaterial", {
    color
  }), counter))), children);
});

// node_modules/@react-three/drei/core/SpriteAnimator.js
var React67 = __toESM(require_react());
var SpriteAnimator = ({
  startFrame,
  endFrame,
  fps,
  frameName,
  textureDataURL,
  textureImageURL,
  loop,
  numberOfFrames,
  autoPlay,
  animationNames,
  onStart,
  onEnd,
  onLoopEnd,
  onFrame,
  play,
  pause,
  flipX,
  alphaTest,
  children,
  ...props
}, fref) => {
  useThree((state) => state.viewport);
  const spriteData = React67.useRef(null);
  const [isJsonReady, setJsonReady] = React67.useState(false);
  const matRef = React67.useRef();
  const spriteRef = React67.useRef();
  const timerOffset = React67.useRef(window.performance.now());
  const textureData = React67.useRef();
  const currentFrame = React67.useRef(startFrame || 0);
  const currentFrameName = React67.useRef(frameName || "");
  const fpsInterval = 1e3 / (fps || 30);
  const [spriteTexture, setSpriteTexture] = React67.useState(new Texture());
  const totalFrames = React67.useRef(0);
  const [aspect, setAspect] = React67.useState([1, 1, 1]);
  const flipOffset = flipX ? -1 : 1;
  function loadJsonAndTextureAndExecuteCallback(jsonUrl, textureUrl, callback) {
    const textureLoader = new TextureLoader();
    const jsonPromise = fetch(jsonUrl).then((response) => response.json());
    const texturePromise = new Promise((resolve) => {
      textureLoader.load(textureUrl, resolve);
    });
    Promise.all([jsonPromise, texturePromise]).then((response) => {
      callback(response[0], response[1]);
    });
  }
  const calculateAspectRatio = (width, height) => {
    const aspectRatio = height / width;
    spriteRef.current.scale.set(1, aspectRatio, 1);
    return [1, aspectRatio, 1];
  };
  React67.useEffect(() => {
    if (textureDataURL && textureImageURL) {
      loadJsonAndTextureAndExecuteCallback(textureDataURL, textureImageURL, parseSpriteData);
    } else if (textureImageURL) {
      const textureLoader = new TextureLoader();
      new Promise((resolve) => {
        textureLoader.load(textureImageURL, resolve);
      }).then((texture) => {
        parseSpriteData(null, texture);
      });
    }
  }, []);
  React67.useLayoutEffect(() => {
    modifySpritePosition();
  }, [spriteTexture]);
  React67.useEffect(() => {
  }, [pause]);
  React67.useEffect(() => {
    if (currentFrameName.current !== frameName && frameName) {
      currentFrame.current = 0;
      currentFrameName.current = frameName;
    }
  }, [frameName]);
  const parseSpriteData = (json, _spriteTexture) => {
    if (json === null) {
      if (_spriteTexture && numberOfFrames) {
        const width = _spriteTexture.image.width;
        const height = _spriteTexture.image.height;
        const frameWidth = width / numberOfFrames;
        const frameHeight = height;
        textureData.current = _spriteTexture;
        totalFrames.current = numberOfFrames;
        spriteData.current = {
          frames: [],
          meta: {
            version: "1.0",
            size: {
              w: width,
              h: height
            },
            scale: "1"
          }
        };
        if (parseInt(frameWidth.toString(), 10) === frameWidth) {
          for (let i4 = 0; i4 < numberOfFrames; i4++) {
            spriteData.current.frames.push({
              frame: {
                x: i4 * frameWidth,
                y: 0,
                w: frameWidth,
                h: frameHeight
              },
              rotated: false,
              trimmed: false,
              spriteSourceSize: {
                x: 0,
                y: 0,
                w: frameWidth,
                h: frameHeight
              },
              sourceSize: {
                w: frameWidth,
                h: height
              }
            });
          }
        }
      }
    } else if (_spriteTexture) {
      spriteData.current = json;
      spriteData.current.frames = Array.isArray(json.frames) ? json.frames : parseFrames();
      totalFrames.current = Array.isArray(json.frames) ? json.frames.length : Object.keys(json.frames).length;
      textureData.current = _spriteTexture;
      const {
        w: w2,
        h: h2
      } = getFirstItem(json.frames).sourceSize;
      const aspect2 = calculateAspectRatio(w2, h2);
      setAspect(aspect2);
      if (matRef.current) {
        matRef.current.map = _spriteTexture;
      }
    }
    _spriteTexture.premultiplyAlpha = false;
    setSpriteTexture(_spriteTexture);
  };
  const parseFrames = () => {
    const sprites = {};
    const data = spriteData.current;
    const delimiters = animationNames;
    if (delimiters) {
      for (let i4 = 0; i4 < delimiters.length; i4++) {
        sprites[delimiters[i4]] = [];
        for (let innerKey in data["frames"]) {
          const value = data["frames"][innerKey];
          const frameData = value["frame"];
          const x2 = frameData["x"];
          const y2 = frameData["y"];
          const width = frameData["w"];
          const height = frameData["h"];
          const sourceWidth = value["sourceSize"]["w"];
          const sourceHeight = value["sourceSize"]["h"];
          if (typeof innerKey === "string" && innerKey.toLowerCase().indexOf(delimiters[i4].toLowerCase()) !== -1) {
            sprites[delimiters[i4]].push({
              x: x2,
              y: y2,
              w: width,
              h: height,
              frame: frameData,
              sourceSize: {
                w: sourceWidth,
                h: sourceHeight
              }
            });
          }
        }
      }
    }
    return sprites;
  };
  const modifySpritePosition = () => {
    if (!spriteData.current) return;
    const {
      meta: {
        size: metaInfo
      },
      frames
    } = spriteData.current;
    const {
      w: frameW,
      h: frameH
    } = Array.isArray(frames) ? frames[0].sourceSize : frameName ? frames[frameName] ? frames[frameName][0].sourceSize : {
      w: 0,
      h: 0
    } : {
      w: 0,
      h: 0
    };
    matRef.current.map.wrapS = matRef.current.map.wrapT = RepeatWrapping;
    matRef.current.map.center.set(0, 0);
    matRef.current.map.repeat.set(1 * flipOffset / (metaInfo.w / frameW), 1 / (metaInfo.h / frameH));
    const framesV = (metaInfo.h - 1) / frameH;
    const frameOffsetY = 1 / framesV;
    matRef.current.map.offset.x = 0;
    matRef.current.map.offset.y = 1 - frameOffsetY;
    setJsonReady(true);
    if (onStart) onStart({
      currentFrameName: frameName,
      currentFrame: currentFrame.current
    });
  };
  const runAnimation = () => {
    const now2 = window.performance.now();
    const diff = now2 - timerOffset.current;
    const {
      meta: {
        size: metaInfo
      },
      frames
    } = spriteData.current;
    const {
      w: frameW,
      h: frameH
    } = getFirstItem(frames).sourceSize;
    const spriteFrames = Array.isArray(frames) ? frames : frameName ? frames[frameName] : [];
    let finalValX = 0;
    let finalValY = 0;
    const _endFrame = endFrame || spriteFrames.length - 1;
    if (currentFrame.current > _endFrame) {
      currentFrame.current = loop ? startFrame !== null && startFrame !== void 0 ? startFrame : 0 : 0;
      if (loop) {
        onLoopEnd == null ? void 0 : onLoopEnd({
          currentFrameName: frameName,
          currentFrame: currentFrame.current
        });
      } else {
        onEnd == null ? void 0 : onEnd({
          currentFrameName: frameName,
          currentFrame: currentFrame.current
        });
      }
      if (!loop) return;
    }
    if (diff <= fpsInterval) return;
    timerOffset.current = now2 - diff % fpsInterval;
    calculateAspectRatio(frameW, frameH);
    const framesH = (metaInfo.w - 1) / frameW;
    const framesV = (metaInfo.h - 1) / frameH;
    const {
      frame: {
        x: frameX,
        y: frameY
      },
      sourceSize: {
        w: originalSizeX,
        h: originalSizeY
      }
    } = spriteFrames[currentFrame.current];
    const frameOffsetX = 1 / framesH;
    const frameOffsetY = 1 / framesV;
    finalValX = flipOffset > 0 ? frameOffsetX * (frameX / originalSizeX) : frameOffsetX * (frameX / originalSizeX) - matRef.current.map.repeat.x;
    finalValY = Math.abs(1 - frameOffsetY) - frameOffsetY * (frameY / originalSizeY);
    matRef.current.map.offset.x = finalValX;
    matRef.current.map.offset.y = finalValY;
    currentFrame.current += 1;
  };
  useFrame((state, delta) => {
    var _spriteData$current, _matRef$current;
    if (!((_spriteData$current = spriteData.current) != null && _spriteData$current.frames) || !((_matRef$current = matRef.current) != null && _matRef$current.map)) {
      return;
    }
    if (pause) {
      return;
    }
    if (autoPlay || play) {
      runAnimation();
      onFrame && onFrame({
        currentFrameName: currentFrameName.current,
        currentFrame: currentFrame.current
      });
    }
  });
  const getFirstItem = (param) => {
    if (Array.isArray(param)) {
      return param[0];
    } else if (typeof param === "object" && param !== null) {
      const keys = Object.keys(param);
      return param[keys[0]][0];
    } else {
      return {
        w: 0,
        h: 0
      };
    }
  };
  return React67.createElement("group", props, React67.createElement(React67.Suspense, {
    fallback: null
  }, React67.createElement("sprite", {
    ref: spriteRef,
    scale: aspect
  }, React67.createElement("spriteMaterial", {
    toneMapped: false,
    ref: matRef,
    map: spriteTexture,
    transparent: true,
    alphaTest: alphaTest !== null && alphaTest !== void 0 ? alphaTest : 0
  }))), children);
};

// node_modules/@react-three/drei/core/CurveModifier.js
var React68 = __toESM(require_react());
var CurveModifier = React68.forwardRef(({
  children,
  curve
}, ref) => {
  const [scene] = React68.useState(() => new Scene());
  const [obj, set] = React68.useState();
  const modifier = React68.useRef();
  React68.useEffect(() => {
    modifier.current = new Flow(scene.children[0]);
    set(modifier.current.object3D);
  }, [children]);
  React68.useEffect(() => {
    var _modifier$current;
    if (curve) (_modifier$current = modifier.current) == null ? void 0 : _modifier$current.updateCurve(0, curve);
  }, [curve]);
  React68.useImperativeHandle(ref, () => ({
    moveAlongCurve: (val) => {
      var _modifier$current2;
      (_modifier$current2 = modifier.current) == null ? void 0 : _modifier$current2.moveAlongCurve(val);
    }
  }));
  return React68.createElement(React68.Fragment, null, createPortal(children, scene), obj && React68.createElement("primitive", {
    object: obj
  }));
});

// node_modules/@react-three/drei/core/MeshDistortMaterial.js
var React69 = __toESM(require_react());

// node_modules/@react-three/drei/helpers/glsl/distort.vert.glsl.js
var distort = "#define GLSLIFY 1\nvec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}float snoise(vec3 v){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);m=m*m;return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));}";

// node_modules/@react-three/drei/core/MeshDistortMaterial.js
var DistortMaterialImpl = class extends MeshPhysicalMaterial {
  constructor(parameters = {}) {
    super(parameters);
    this.setValues(parameters);
    this._time = {
      value: 0
    };
    this._distort = {
      value: 0.4
    };
    this._radius = {
      value: 1
    };
  }
  onBeforeCompile(shader) {
    shader.uniforms.time = this._time;
    shader.uniforms.radius = this._radius;
    shader.uniforms.distort = this._distort;
    shader.vertexShader = `
      uniform float time;
      uniform float radius;
      uniform float distort;
      ${distort}
      ${shader.vertexShader}
    `;
    shader.vertexShader = shader.vertexShader.replace("#include <begin_vertex>", `
        float updateTime = time / 50.0;
        float noise = snoise(vec3(position / 2.0 + updateTime * 5.0));
        vec3 transformed = vec3(position * (noise * pow(distort, 2.0) + radius));
        `);
  }
  get time() {
    return this._time.value;
  }
  set time(v5) {
    this._time.value = v5;
  }
  get distort() {
    return this._distort.value;
  }
  set distort(v5) {
    this._distort.value = v5;
  }
  get radius() {
    return this._radius.value;
  }
  set radius(v5) {
    this._radius.value = v5;
  }
};
var MeshDistortMaterial = React69.forwardRef(({
  speed = 1,
  ...props
}, ref) => {
  const [material] = React69.useState(() => new DistortMaterialImpl());
  useFrame((state) => material && (material.time = state.clock.getElapsedTime() * speed));
  return React69.createElement("primitive", _extends({
    object: material,
    ref,
    attach: "material"
  }, props));
});

// node_modules/@react-three/drei/core/MeshWobbleMaterial.js
var React70 = __toESM(require_react());
var WobbleMaterialImpl = class extends MeshStandardMaterial {
  constructor(parameters = {}) {
    super(parameters);
    this.setValues(parameters);
    this._time = {
      value: 0
    };
    this._factor = {
      value: 1
    };
  }
  onBeforeCompile(shader) {
    shader.uniforms.time = this._time;
    shader.uniforms.factor = this._factor;
    shader.vertexShader = `
      uniform float time;
      uniform float factor;
      ${shader.vertexShader}
    `;
    shader.vertexShader = shader.vertexShader.replace("#include <begin_vertex>", `float theta = sin( time + position.y ) / 2.0 * factor;
        float c = cos( theta );
        float s = sin( theta );
        mat3 m = mat3( c, 0, s, 0, 1, 0, -s, 0, c );
        vec3 transformed = vec3( position ) * m;
        vNormal = vNormal * m;`);
  }
  get time() {
    return this._time.value;
  }
  set time(v5) {
    this._time.value = v5;
  }
  get factor() {
    return this._factor.value;
  }
  set factor(v5) {
    this._factor.value = v5;
  }
};
var MeshWobbleMaterial = React70.forwardRef(({
  speed = 1,
  ...props
}, ref) => {
  const [material] = React70.useState(() => new WobbleMaterialImpl());
  useFrame((state) => material && (material.time = state.clock.getElapsedTime() * speed));
  return React70.createElement("primitive", _extends({
    object: material,
    ref,
    attach: "material"
  }, props));
});

// node_modules/@react-three/drei/core/MeshReflectorMaterial.js
var React71 = __toESM(require_react());

// node_modules/@react-three/drei/materials/ConvolutionMaterial.js
var ConvolutionMaterial = class extends ShaderMaterial {
  constructor(texelSize = new Vector2()) {
    super({
      uniforms: {
        inputBuffer: new Uniform(null),
        depthBuffer: new Uniform(null),
        resolution: new Uniform(new Vector2()),
        texelSize: new Uniform(new Vector2()),
        halfTexelSize: new Uniform(new Vector2()),
        kernel: new Uniform(0),
        scale: new Uniform(1),
        cameraNear: new Uniform(0),
        cameraFar: new Uniform(1),
        minDepthThreshold: new Uniform(0),
        maxDepthThreshold: new Uniform(1),
        depthScale: new Uniform(0),
        depthToBlurRatioBias: new Uniform(0.25)
      },
      fragmentShader: `#include <common>
        #include <dithering_pars_fragment>      
        uniform sampler2D inputBuffer;
        uniform sampler2D depthBuffer;
        uniform float cameraNear;
        uniform float cameraFar;
        uniform float minDepthThreshold;
        uniform float maxDepthThreshold;
        uniform float depthScale;
        uniform float depthToBlurRatioBias;
        varying vec2 vUv;
        varying vec2 vUv0;
        varying vec2 vUv1;
        varying vec2 vUv2;
        varying vec2 vUv3;

        void main() {
          float depthFactor = 0.0;
          
          #ifdef USE_DEPTH
            vec4 depth = texture2D(depthBuffer, vUv);
            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));
            depthFactor *= depthScale;
            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));
          #endif
          
          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));
          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));
          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));
          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));
          gl_FragColor = sum * 0.25 ;

          #include <dithering_fragment>
          #include <tonemapping_fragment>
          #include <encodings_fragment>
        }`,
      vertexShader: `uniform vec2 texelSize;
        uniform vec2 halfTexelSize;
        uniform float kernel;
        uniform float scale;
        varying vec2 vUv;
        varying vec2 vUv0;
        varying vec2 vUv1;
        varying vec2 vUv2;
        varying vec2 vUv3;

        void main() {
          vec2 uv = position.xy * 0.5 + 0.5;
          vUv = uv;

          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;
          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);
          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);
          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);
          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);

          gl_Position = vec4(position.xy, 1.0, 1.0);
        }`,
      blending: NoBlending,
      depthWrite: false,
      depthTest: false
    });
    this.toneMapped = false;
    this.setTexelSize(texelSize.x, texelSize.y);
    this.kernel = new Float32Array([0, 1, 2, 2, 3]);
  }
  setTexelSize(x2, y2) {
    this.uniforms.texelSize.value.set(x2, y2);
    this.uniforms.halfTexelSize.value.set(x2, y2).multiplyScalar(0.5);
  }
  setResolution(resolution) {
    this.uniforms.resolution.value.copy(resolution);
  }
};

// node_modules/@react-three/drei/materials/BlurPass.js
var BlurPass = class {
  constructor({
    gl,
    resolution,
    width = 500,
    height = 500,
    minDepthThreshold = 0,
    maxDepthThreshold = 1,
    depthScale = 0,
    depthToBlurRatioBias = 0.25
  }) {
    this.renderToScreen = false;
    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {
      minFilter: LinearFilter,
      magFilter: LinearFilter,
      stencilBuffer: false,
      depthBuffer: false,
      type: HalfFloatType
    });
    this.renderTargetB = this.renderTargetA.clone();
    this.convolutionMaterial = new ConvolutionMaterial();
    this.convolutionMaterial.setTexelSize(1 / width, 1 / height);
    this.convolutionMaterial.setResolution(new Vector2(width, height));
    this.scene = new Scene();
    this.camera = new Camera();
    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;
    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;
    this.convolutionMaterial.uniforms.depthScale.value = depthScale;
    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;
    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;
    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);
    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);
    const geometry2 = new BufferGeometry();
    geometry2.setAttribute("position", new BufferAttribute(vertices, 3));
    geometry2.setAttribute("uv", new BufferAttribute(uvs, 2));
    this.screen = new Mesh(geometry2, this.convolutionMaterial);
    this.screen.frustumCulled = false;
    this.scene.add(this.screen);
  }
  render(renderer, inputBuffer, outputBuffer) {
    const scene = this.scene;
    const camera = this.camera;
    const renderTargetA = this.renderTargetA;
    const renderTargetB = this.renderTargetB;
    let material = this.convolutionMaterial;
    let uniforms = material.uniforms;
    uniforms.depthBuffer.value = inputBuffer.depthTexture;
    const kernel = material.kernel;
    let lastRT = inputBuffer;
    let destRT;
    let i4, l3;
    for (i4 = 0, l3 = kernel.length - 1; i4 < l3; ++i4) {
      destRT = (i4 & 1) === 0 ? renderTargetA : renderTargetB;
      uniforms.kernel.value = kernel[i4];
      uniforms.inputBuffer.value = lastRT.texture;
      renderer.setRenderTarget(destRT);
      renderer.render(scene, camera);
      lastRT = destRT;
    }
    uniforms.kernel.value = kernel[i4];
    uniforms.inputBuffer.value = lastRT.texture;
    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);
    renderer.render(scene, camera);
  }
};

// node_modules/@react-three/drei/materials/MeshReflectorMaterial.js
var MeshReflectorMaterial = class extends MeshStandardMaterial {
  constructor(parameters = {}) {
    super(parameters);
    this._tDepth = {
      value: null
    };
    this._distortionMap = {
      value: null
    };
    this._tDiffuse = {
      value: null
    };
    this._tDiffuseBlur = {
      value: null
    };
    this._textureMatrix = {
      value: null
    };
    this._hasBlur = {
      value: false
    };
    this._mirror = {
      value: 0
    };
    this._mixBlur = {
      value: 0
    };
    this._blurStrength = {
      value: 0.5
    };
    this._minDepthThreshold = {
      value: 0.9
    };
    this._maxDepthThreshold = {
      value: 1
    };
    this._depthScale = {
      value: 0
    };
    this._depthToBlurRatioBias = {
      value: 0.25
    };
    this._distortion = {
      value: 1
    };
    this._mixContrast = {
      value: 1
    };
    this.setValues(parameters);
  }
  onBeforeCompile(shader) {
    var _shader$defines;
    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {
      shader.defines.USE_UV = "";
    }
    shader.uniforms.hasBlur = this._hasBlur;
    shader.uniforms.tDiffuse = this._tDiffuse;
    shader.uniforms.tDepth = this._tDepth;
    shader.uniforms.distortionMap = this._distortionMap;
    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;
    shader.uniforms.textureMatrix = this._textureMatrix;
    shader.uniforms.mirror = this._mirror;
    shader.uniforms.mixBlur = this._mixBlur;
    shader.uniforms.mixStrength = this._blurStrength;
    shader.uniforms.minDepthThreshold = this._minDepthThreshold;
    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;
    shader.uniforms.depthScale = this._depthScale;
    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;
    shader.uniforms.distortion = this._distortion;
    shader.uniforms.mixContrast = this._mixContrast;
    shader.vertexShader = `
        uniform mat4 textureMatrix;
        varying vec4 my_vUv;
      ${shader.vertexShader}`;
    shader.vertexShader = shader.vertexShader.replace("#include <project_vertex>", `#include <project_vertex>
        my_vUv = textureMatrix * vec4( position, 1.0 );
        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);
    shader.fragmentShader = `
        uniform sampler2D tDiffuse;
        uniform sampler2D tDiffuseBlur;
        uniform sampler2D tDepth;
        uniform sampler2D distortionMap;
        uniform float distortion;
        uniform float cameraNear;
			  uniform float cameraFar;
        uniform bool hasBlur;
        uniform float mixBlur;
        uniform float mirror;
        uniform float mixStrength;
        uniform float minDepthThreshold;
        uniform float maxDepthThreshold;
        uniform float mixContrast;
        uniform float depthScale;
        uniform float depthToBlurRatioBias;
        varying vec4 my_vUv;
        ${shader.fragmentShader}`;
    shader.fragmentShader = shader.fragmentShader.replace("#include <emissivemap_fragment>", `#include <emissivemap_fragment>

      float distortionFactor = 0.0;
      #ifdef USE_DISTORTION
        distortionFactor = texture2D(distortionMap, vUv).r * distortion;
      #endif

      vec4 new_vUv = my_vUv;
      new_vUv.x += distortionFactor;
      new_vUv.y += distortionFactor;

      vec4 base = texture2DProj(tDiffuse, new_vUv);
      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);

      vec4 merge = base;

      #ifdef USE_NORMALMAP
        vec2 normal_uv = vec2(0.0);
        vec4 normalColor = texture2D(normalMap, vUv * normalScale);
        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );
        vec3 coord = new_vUv.xyz / new_vUv.w;
        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;
        vec4 base_normal = texture2D(tDiffuse, normal_uv);
        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);
        merge = base_normal;
        blur = blur_normal;
      #endif

      float depthFactor = 0.0001;
      float blurFactor = 0.0;

      #ifdef USE_DEPTH
        vec4 depth = texture2DProj(tDepth, new_vUv);
        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));
        depthFactor *= depthScale;
        depthFactor = max(0.0001, min(1.0, depthFactor));

        #ifdef USE_BLUR
          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);
          merge = merge * min(1.0, depthFactor + 0.5);
        #else
          merge = merge * depthFactor;
        #endif

      #endif

      float reflectorRoughnessFactor = roughness;
      #ifdef USE_ROUGHNESSMAP
        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );
        reflectorRoughnessFactor *= reflectorTexelRoughness.g;
      #endif

      #ifdef USE_BLUR
        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);
        merge = mix(merge, blur, blurFactor);
      #endif

      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);
      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;
      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;
      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;

      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);
      `);
  }
  get tDiffuse() {
    return this._tDiffuse.value;
  }
  set tDiffuse(v5) {
    this._tDiffuse.value = v5;
  }
  get tDepth() {
    return this._tDepth.value;
  }
  set tDepth(v5) {
    this._tDepth.value = v5;
  }
  get distortionMap() {
    return this._distortionMap.value;
  }
  set distortionMap(v5) {
    this._distortionMap.value = v5;
  }
  get tDiffuseBlur() {
    return this._tDiffuseBlur.value;
  }
  set tDiffuseBlur(v5) {
    this._tDiffuseBlur.value = v5;
  }
  get textureMatrix() {
    return this._textureMatrix.value;
  }
  set textureMatrix(v5) {
    this._textureMatrix.value = v5;
  }
  get hasBlur() {
    return this._hasBlur.value;
  }
  set hasBlur(v5) {
    this._hasBlur.value = v5;
  }
  get mirror() {
    return this._mirror.value;
  }
  set mirror(v5) {
    this._mirror.value = v5;
  }
  get mixBlur() {
    return this._mixBlur.value;
  }
  set mixBlur(v5) {
    this._mixBlur.value = v5;
  }
  get mixStrength() {
    return this._blurStrength.value;
  }
  set mixStrength(v5) {
    this._blurStrength.value = v5;
  }
  get minDepthThreshold() {
    return this._minDepthThreshold.value;
  }
  set minDepthThreshold(v5) {
    this._minDepthThreshold.value = v5;
  }
  get maxDepthThreshold() {
    return this._maxDepthThreshold.value;
  }
  set maxDepthThreshold(v5) {
    this._maxDepthThreshold.value = v5;
  }
  get depthScale() {
    return this._depthScale.value;
  }
  set depthScale(v5) {
    this._depthScale.value = v5;
  }
  get depthToBlurRatioBias() {
    return this._depthToBlurRatioBias.value;
  }
  set depthToBlurRatioBias(v5) {
    this._depthToBlurRatioBias.value = v5;
  }
  get distortion() {
    return this._distortion.value;
  }
  set distortion(v5) {
    this._distortion.value = v5;
  }
  get mixContrast() {
    return this._mixContrast.value;
  }
  set mixContrast(v5) {
    this._mixContrast.value = v5;
  }
};

// node_modules/@react-three/drei/core/MeshReflectorMaterial.js
extend({
  MeshReflectorMaterialImpl: MeshReflectorMaterial
});
var MeshReflectorMaterial2 = React71.forwardRef(({
  mixBlur = 0,
  mixStrength = 1,
  resolution = 256,
  blur = [0, 0],
  minDepthThreshold = 0.9,
  maxDepthThreshold = 1,
  depthScale = 0,
  depthToBlurRatioBias = 0.25,
  mirror = 0,
  distortion = 1,
  mixContrast = 1,
  distortionMap,
  reflectorOffset = 0,
  ...props
}, ref) => {
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const scene = useThree(({
    scene: scene2
  }) => scene2);
  blur = Array.isArray(blur) ? blur : [blur, blur];
  const hasBlur = blur[0] + blur[1] > 0;
  const materialRef = React71.useRef(null);
  const [reflectorPlane] = React71.useState(() => new Plane());
  const [normal2] = React71.useState(() => new Vector3());
  const [reflectorWorldPosition] = React71.useState(() => new Vector3());
  const [cameraWorldPosition] = React71.useState(() => new Vector3());
  const [rotationMatrix] = React71.useState(() => new Matrix4());
  const [lookAtPosition] = React71.useState(() => new Vector3(0, 0, -1));
  const [clipPlane] = React71.useState(() => new Vector4());
  const [view] = React71.useState(() => new Vector3());
  const [target2] = React71.useState(() => new Vector3());
  const [q3] = React71.useState(() => new Vector4());
  const [textureMatrix] = React71.useState(() => new Matrix4());
  const [virtualCamera] = React71.useState(() => new PerspectiveCamera());
  const beforeRender = React71.useCallback(() => {
    var _materialRef$current;
    const parent = materialRef.current.parent || ((_materialRef$current = materialRef.current) == null ? void 0 : _materialRef$current.__r3f.parent);
    if (!parent) return;
    reflectorWorldPosition.setFromMatrixPosition(parent.matrixWorld);
    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);
    rotationMatrix.extractRotation(parent.matrixWorld);
    normal2.set(0, 0, 1);
    normal2.applyMatrix4(rotationMatrix);
    reflectorWorldPosition.addScaledVector(normal2, reflectorOffset);
    view.subVectors(reflectorWorldPosition, cameraWorldPosition);
    if (view.dot(normal2) > 0) return;
    view.reflect(normal2).negate();
    view.add(reflectorWorldPosition);
    rotationMatrix.extractRotation(camera.matrixWorld);
    lookAtPosition.set(0, 0, -1);
    lookAtPosition.applyMatrix4(rotationMatrix);
    lookAtPosition.add(cameraWorldPosition);
    target2.subVectors(reflectorWorldPosition, lookAtPosition);
    target2.reflect(normal2).negate();
    target2.add(reflectorWorldPosition);
    virtualCamera.position.copy(view);
    virtualCamera.up.set(0, 1, 0);
    virtualCamera.up.applyMatrix4(rotationMatrix);
    virtualCamera.up.reflect(normal2);
    virtualCamera.lookAt(target2);
    virtualCamera.far = camera.far;
    virtualCamera.updateMatrixWorld();
    virtualCamera.projectionMatrix.copy(camera.projectionMatrix);
    textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
    textureMatrix.multiply(virtualCamera.projectionMatrix);
    textureMatrix.multiply(virtualCamera.matrixWorldInverse);
    textureMatrix.multiply(parent.matrixWorld);
    reflectorPlane.setFromNormalAndCoplanarPoint(normal2, reflectorWorldPosition);
    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);
    const projectionMatrix = virtualCamera.projectionMatrix;
    q3.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
    q3.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
    q3.z = -1;
    q3.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
    clipPlane.multiplyScalar(2 / clipPlane.dot(q3));
    projectionMatrix.elements[2] = clipPlane.x;
    projectionMatrix.elements[6] = clipPlane.y;
    projectionMatrix.elements[10] = clipPlane.z + 1;
    projectionMatrix.elements[14] = clipPlane.w;
  }, [camera, reflectorOffset]);
  const [fbo1, fbo2, blurpass, reflectorProps] = React71.useMemo(() => {
    const parameters = {
      minFilter: LinearFilter,
      magFilter: LinearFilter,
      type: HalfFloatType
    };
    const fbo12 = new WebGLRenderTarget(resolution, resolution, parameters);
    fbo12.depthBuffer = true;
    fbo12.depthTexture = new DepthTexture(resolution, resolution);
    fbo12.depthTexture.format = DepthFormat;
    fbo12.depthTexture.type = UnsignedShortType;
    const fbo22 = new WebGLRenderTarget(resolution, resolution, parameters);
    const blurpass2 = new BlurPass({
      gl,
      resolution,
      width: blur[0],
      height: blur[1],
      minDepthThreshold,
      maxDepthThreshold,
      depthScale,
      depthToBlurRatioBias
    });
    const reflectorProps2 = {
      mirror,
      textureMatrix,
      mixBlur,
      tDiffuse: fbo12.texture,
      tDepth: fbo12.depthTexture,
      tDiffuseBlur: fbo22.texture,
      hasBlur,
      mixStrength,
      minDepthThreshold,
      maxDepthThreshold,
      depthScale,
      depthToBlurRatioBias,
      distortion,
      distortionMap,
      mixContrast,
      "defines-USE_BLUR": hasBlur ? "" : void 0,
      "defines-USE_DEPTH": depthScale > 0 ? "" : void 0,
      "defines-USE_DISTORTION": distortionMap ? "" : void 0
    };
    return [fbo12, fbo22, blurpass2, reflectorProps2];
  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, distortion, distortionMap, mixContrast]);
  useFrame(() => {
    var _materialRef$current2;
    const parent = materialRef.current.parent || ((_materialRef$current2 = materialRef.current) == null ? void 0 : _materialRef$current2.__r3f.parent);
    if (!parent) return;
    parent.visible = false;
    const currentXrEnabled = gl.xr.enabled;
    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;
    beforeRender();
    gl.xr.enabled = false;
    gl.shadowMap.autoUpdate = false;
    gl.setRenderTarget(fbo1);
    gl.state.buffers.depth.setMask(true);
    if (!gl.autoClear) gl.clear();
    gl.render(scene, virtualCamera);
    if (hasBlur) blurpass.render(gl, fbo1, fbo2);
    gl.xr.enabled = currentXrEnabled;
    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;
    parent.visible = true;
    gl.setRenderTarget(null);
  });
  return React71.createElement("meshReflectorMaterialImpl", _extends({
    attach: "material",
    key: "key" + reflectorProps["defines-USE_BLUR"] + reflectorProps["defines-USE_DEPTH"] + reflectorProps["defines-USE_DISTORTION"],
    ref: react_merge_refs_esm_default([materialRef, ref])
  }, reflectorProps, props));
});

// node_modules/@react-three/drei/core/MeshRefractionMaterial.js
var React72 = __toESM(require_react());
var import_react13 = __toESM(require_react());

// node_modules/@react-three/drei/materials/MeshRefractionMaterial.js
var MeshRefractionMaterial = shaderMaterial(
  {
    envMap: null,
    bounces: 3,
    ior: 2.4,
    correctMips: true,
    aberrationStrength: 0.01,
    fresnel: 0,
    bvh: new MeshBVHUniformStruct(),
    color: new Color("white"),
    resolution: new Vector2(),
    viewMatrixInverse: new Matrix4(),
    projectionMatrixInverse: new Matrix4()
  },
  /*glsl*/
  `
  uniform mat4 viewMatrixInverse;

  varying vec3 vWorldPosition;  
  varying vec3 vNormal;
  varying mat4 vModelMatrixInverse;

  #ifdef USE_INSTANCING_COLOR
    varying vec3 vInstanceColor;
  #endif

  void main() {        
    vec4 transformedNormal = vec4(normal, 0.0);
    vec4 transformedPosition = vec4(position, 1.0);
    #ifdef USE_INSTANCING
      transformedNormal = instanceMatrix * transformedNormal;
      transformedPosition = instanceMatrix * transformedPosition;
    #endif

    #ifdef USE_INSTANCING
      vModelMatrixInverse = inverse(modelMatrix * instanceMatrix);
    #else
      vModelMatrixInverse = inverse(modelMatrix);
    #endif

    #ifdef USE_INSTANCING_COLOR
      vInstanceColor = instanceColor.rgb;
    #endif

    vWorldPosition = (modelMatrix * transformedPosition).xyz;
    vNormal = normalize((viewMatrixInverse * vec4(normalMatrix * transformedNormal.xyz, 0.0)).xyz);
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * transformedPosition;
  }`,
  /*glsl*/
  `
  #define ENVMAP_TYPE_CUBE_UV
  precision highp isampler2D;
  precision highp usampler2D;
  varying vec3 vWorldPosition;
  varying vec3 vNormal;
  varying mat4 vModelMatrixInverse;

  #ifdef USE_INSTANCING_COLOR
    varying vec3 vInstanceColor;
  #endif
    
  #ifdef ENVMAP_TYPE_CUBEM
    uniform samplerCube envMap;
  #else
    uniform sampler2D envMap;
  #endif
    
  uniform float bounces;
  ${shaderStructs}
  ${shaderIntersectFunction}
  uniform BVH bvh;
  uniform float ior;
  uniform bool correctMips;
  uniform vec2 resolution;
  uniform float fresnel;
  uniform mat4 modelMatrix;
  uniform mat4 projectionMatrixInverse;
  uniform mat4 viewMatrixInverse;
  uniform float aberrationStrength;
  uniform vec3 color;
  
  float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {
    return pow( 1.0 + dot( viewDirection, worldNormal), 10.0 );
  }
    
  vec3 totalInternalReflection(vec3 ro, vec3 rd, vec3 normal, float ior, mat4 modelMatrixInverse) {
    vec3 rayOrigin = ro;
    vec3 rayDirection = rd;
    rayDirection = refract(rayDirection, normal, 1.0 / ior);
    rayOrigin = vWorldPosition + rayDirection * 0.001;
    rayOrigin = (modelMatrixInverse * vec4(rayOrigin, 1.0)).xyz;
    rayDirection = normalize((modelMatrixInverse * vec4(rayDirection, 0.0)).xyz);
    for(float i = 0.0; i < bounces; i++) {
      uvec4 faceIndices = uvec4( 0u );
      vec3 faceNormal = vec3( 0.0, 0.0, 1.0 );
      vec3 barycoord = vec3( 0.0 );
      float side = 1.0;
      float dist = 0.0;
      bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );
      vec3 hitPos = rayOrigin + rayDirection * max(dist - 0.001, 0.0);      
      vec3 tempDir = refract(rayDirection, faceNormal, ior);
      if (length(tempDir) != 0.0) {
        rayDirection = tempDir;
        break;
      }
      rayDirection = reflect(rayDirection, faceNormal);
      rayOrigin = hitPos + rayDirection * 0.01;
    }
    rayDirection = normalize((modelMatrix * vec4(rayDirection, 0.0)).xyz);
    return rayDirection;
  }
    
  #include <common>
  #include <cube_uv_reflection_fragment>
    
  #ifdef ENVMAP_TYPE_CUBEM
    vec4 textureGradient(samplerCube envMap, vec3 rayDirection, vec3 directionCamPerfect) {
      return textureGrad(envMap, rayDirection, dFdx(correctMips ? directionCamPerfect: rayDirection), dFdy(correctMips ? directionCamPerfect: rayDirection));
    }
  #else
    vec4 textureGradient(sampler2D envMap, vec3 rayDirection, vec3 directionCamPerfect) {
      vec2 uvv = equirectUv( rayDirection );
      vec2 smoothUv = equirectUv( directionCamPerfect );
      return textureGrad(envMap, uvv, dFdx(correctMips ? smoothUv : uvv), dFdy(correctMips ? smoothUv : uvv));
    }
  #endif
  
  void main() {
    vec2 uv = gl_FragCoord.xy / resolution;
    vec3 directionCamPerfect = (projectionMatrixInverse * vec4(uv * 2.0 - 1.0, 0.0, 1.0)).xyz;
    directionCamPerfect = (viewMatrixInverse * vec4(directionCamPerfect, 0.0)).xyz;
    directionCamPerfect = normalize(directionCamPerfect);
    vec3 normal = vNormal;
    vec3 rayOrigin = cameraPosition;
    vec3 rayDirection = normalize(vWorldPosition - cameraPosition);
    vec3 finalColor;
    #ifdef CHROMATIC_ABERRATIONS
      vec3 rayDirectionG = totalInternalReflection(rayOrigin, rayDirection, normal, max(ior, 1.0), vModelMatrixInverse);
      #ifdef FAST_CHROMA 
        vec3 rayDirectionR = normalize(rayDirectionG + 1.0 * vec3(aberrationStrength / 2.0));
        vec3 rayDirectionB = normalize(rayDirectionG - 1.0 * vec3(aberrationStrength / 2.0));
      #else
        vec3 rayDirectionR = totalInternalReflection(rayOrigin, rayDirection, normal, max(ior * (1.0 - aberrationStrength), 1.0), vModelMatrixInverse);
        vec3 rayDirectionB = totalInternalReflection(rayOrigin, rayDirection, normal, max(ior * (1.0 + aberrationStrength), 1.0), vModelMatrixInverse);
      #endif
      float finalColorR = textureGradient(envMap, rayDirectionR, directionCamPerfect).r;
      float finalColorG = textureGradient(envMap, rayDirectionG, directionCamPerfect).g;
      float finalColorB = textureGradient(envMap, rayDirectionB, directionCamPerfect).b;
      finalColor = vec3(finalColorR, finalColorG, finalColorB);
    #else
      rayDirection = totalInternalReflection(rayOrigin, rayDirection, normal, max(ior, 1.0), vModelMatrixInverse);
      finalColor = textureGradient(envMap, rayDirection, directionCamPerfect).rgb;    
    #endif

    finalColor *= color;
    #ifdef USE_INSTANCING_COLOR
      finalColor *= vInstanceColor;
    #endif

    vec3 viewDirection = normalize(vWorldPosition - cameraPosition);
    float nFresnel = fresnelFunc(viewDirection, normal) * fresnel;
    gl_FragColor = vec4(mix(finalColor, vec3(1.0), nFresnel), 1.0);      
    #include <tonemapping_fragment>
    #include <encodings_fragment>
  }`
);

// node_modules/@react-three/drei/core/MeshRefractionMaterial.js
var isCubeTexture = (def) => def && def.isCubeTexture;
function MeshRefractionMaterial2({
  aberrationStrength = 0,
  fastChroma = true,
  envMap,
  ...props
}) {
  extend({
    MeshRefractionMaterial
  });
  const material = (0, import_react13.useRef)();
  const {
    size
  } = useThree();
  const defines = (0, import_react13.useMemo)(() => {
    var _ref, _envMap$image$;
    const temp5 = {};
    const isCubeMap = isCubeTexture(envMap);
    const w2 = (_ref = isCubeMap ? (_envMap$image$ = envMap.image[0]) == null ? void 0 : _envMap$image$.width : envMap.image.width) !== null && _ref !== void 0 ? _ref : 1024;
    const cubeSize = w2 / 4;
    const _lodMax = Math.floor(Math.log2(cubeSize));
    const _cubeSize = Math.pow(2, _lodMax);
    const width = 3 * Math.max(_cubeSize, 16 * 7);
    const height = 4 * _cubeSize;
    if (isCubeMap) temp5.ENVMAP_TYPE_CUBEM = "";
    temp5.CUBEUV_TEXEL_WIDTH = `${1 / width}`;
    temp5.CUBEUV_TEXEL_HEIGHT = `${1 / height}`;
    temp5.CUBEUV_MAX_MIP = `${_lodMax}.0`;
    if (aberrationStrength > 0) temp5.CHROMATIC_ABERRATIONS = "";
    if (fastChroma) temp5.FAST_CHROMA = "";
    return temp5;
  }, [aberrationStrength, fastChroma]);
  (0, import_react13.useLayoutEffect)(() => {
    var _material$current, _material$current$__r, _material$current$__r2;
    const geometry2 = (_material$current = material.current) == null ? void 0 : (_material$current$__r = _material$current.__r3f) == null ? void 0 : (_material$current$__r2 = _material$current$__r.parent) == null ? void 0 : _material$current$__r2.geometry;
    if (geometry2) {
      material.current.bvh = new MeshBVHUniformStruct();
      material.current.bvh.updateFrom(new MeshBVH(geometry2.clone().toNonIndexed(), {
        lazyGeneration: false,
        strategy: SAH
      }));
    }
  }, []);
  useFrame(({
    camera
  }) => {
    material.current.viewMatrixInverse = camera.matrixWorld;
    material.current.projectionMatrixInverse = camera.projectionMatrixInverse;
  });
  return React72.createElement("meshRefractionMaterial", _extends({
    // @ts-ignore
    key: JSON.stringify(defines),
    defines,
    ref: material,
    resolution: [size.width, size.height],
    aberrationStrength,
    envMap
  }, props));
}

// node_modules/@react-three/drei/core/MeshTransmissionMaterial.js
var React73 = __toESM(require_react());

// node_modules/@react-three/drei/materials/DiscardMaterial.js
var DiscardMaterial = shaderMaterial({}, "void main() { }", "void main() { gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0); discard;  }");

// node_modules/@react-three/drei/core/MeshTransmissionMaterial.js
var MeshTransmissionMaterialImpl = class extends MeshPhysicalMaterial {
  constructor(samples = 6, transmissionSampler = false) {
    super();
    this.uniforms = {
      chromaticAberration: {
        value: 0.05
      },
      // Transmission must always be 0, unless transmissionSampler is being used
      transmission: {
        value: 0
      },
      // Instead a workaround is used, see below for reasons why
      _transmission: {
        value: 1
      },
      transmissionMap: {
        value: null
      },
      // Roughness is 1 in THREE.MeshPhysicalMaterial but it makes little sense in a transmission material
      roughness: {
        value: 0
      },
      thickness: {
        value: 0
      },
      thicknessMap: {
        value: null
      },
      attenuationDistance: {
        value: Infinity
      },
      attenuationColor: {
        value: new Color("white")
      },
      anisotropicBlur: {
        value: 0.1
      },
      time: {
        value: 0
      },
      distortion: {
        value: 0
      },
      distortionScale: {
        value: 0.5
      },
      temporalDistortion: {
        value: 0
      },
      buffer: {
        value: null
      }
    };
    this.onBeforeCompile = (shader) => {
      shader.uniforms = {
        ...shader.uniforms,
        ...this.uniforms
      };
      if (transmissionSampler) shader.defines.USE_SAMPLER = "";
      else shader.defines.USE_TRANSMISSION = "";
      shader.fragmentShader = /*glsl*/
      `
      uniform float chromaticAberration;         
      uniform float anisotropicBlur;      
      uniform float time;
      uniform float distortion;
      uniform float distortionScale;
      uniform float temporalDistortion;
      uniform sampler2D buffer;

      vec3 random3(vec3 c) {
        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
        vec3 r;
        r.z = fract(512.0*j);
        j *= .125;
        r.x = fract(512.0*j);
        j *= .125;
        r.y = fract(512.0*j);
        return r-0.5;
      }

      float seed = 0.0;
      uint hash( uint x ) {
        x += ( x << 10u );
        x ^= ( x >>  6u );
        x += ( x <<  3u );
        x ^= ( x >> 11u );
        x += ( x << 15u );
        return x;
      }

      // Compound versions of the hashing algorithm I whipped together.
      uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
      uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
      uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }

      // Construct a float with half-open range [0:1] using low 23 bits.
      // All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
      float floatConstruct( uint m ) {
        const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
        const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32
        m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
        m |= ieeeOne;                          // Add fractional part to 1.0
        float  f = uintBitsToFloat( m );       // Range [1:2]
        return f - 1.0;                        // Range [0:1]
      }

      // Pseudo-random value in half-open range [0:1].
      float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
      float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
      float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
      float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }

      float rand() {
        float result = random(vec3(gl_FragCoord.xy, seed));
        seed += 1.0;
        return result;
      }

      const float F3 =  0.3333333;
      const float G3 =  0.1666667;

      float snoise(vec3 p) {
        vec3 s = floor(p + dot(p, vec3(F3)));
        vec3 x = p - s + dot(s, vec3(G3));
        vec3 e = step(vec3(0.0), x - x.yzx);
        vec3 i1 = e*(1.0 - e.zxy);
        vec3 i2 = 1.0 - e.zxy*(1.0 - e);
        vec3 x1 = x - i1 + G3;
        vec3 x2 = x - i2 + 2.0*G3;
        vec3 x3 = x - 1.0 + 3.0*G3;
        vec4 w, d;
        w.x = dot(x, x);
        w.y = dot(x1, x1);
        w.z = dot(x2, x2);
        w.w = dot(x3, x3);
        w = max(0.6 - w, 0.0);
        d.x = dot(random3(s), x);
        d.y = dot(random3(s + i1), x1);
        d.z = dot(random3(s + i2), x2);
        d.w = dot(random3(s + 1.0), x3);
        w *= w;
        w *= w;
        d *= w;
        return dot(d, vec4(52.0));
      }

      float snoiseFractal(vec3 m) {
        return 0.5333333* snoise(m)
              +0.2666667* snoise(2.0*m)
              +0.1333333* snoise(4.0*m)
              +0.0666667* snoise(8.0*m);
      }
` + shader.fragmentShader;
      shader.fragmentShader = shader.fragmentShader.replace(
        "#include <transmission_pars_fragment>",
        /*glsl*/
        `
        #ifdef USE_TRANSMISSION
          // Transmission code is based on glTF-Sampler-Viewer
          // https://github.com/KhronosGroup/glTF-Sample-Viewer
          uniform float _transmission;
          uniform float thickness;
          uniform float attenuationDistance;
          uniform vec3 attenuationColor;
          #ifdef USE_TRANSMISSIONMAP
            uniform sampler2D transmissionMap;
          #endif
          #ifdef USE_THICKNESSMAP
            uniform sampler2D thicknessMap;
          #endif
          uniform vec2 transmissionSamplerSize;
          uniform sampler2D transmissionSamplerMap;
          uniform mat4 modelMatrix;
          uniform mat4 projectionMatrix;
          varying vec3 vWorldPosition;
          vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
            // Direction of refracted light.
            vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
            // Compute rotation-independant scaling of the model matrix.
            vec3 modelScale;
            modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
            modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
            modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
            // The thickness is specified in local space.
            return normalize( refractionVector ) * thickness * modelScale;
          }
          float applyIorToRoughness( const in float roughness, const in float ior ) {
            // Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and
            // an IOR of 1.5 results in the default amount of microfacet refraction.
            return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
          }
          vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
            float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );            
            #ifdef USE_SAMPLER
              #ifdef texture2DLodEXT
                return texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod);
              #else
                return texture2D(transmissionSamplerMap, fragCoord.xy, framebufferLod);
              #endif
            #else
              return texture2D(buffer, fragCoord.xy);
            #endif
          }
          vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
            if ( isinf( attenuationDistance ) ) {
              // Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.
              return radiance;
            } else {
              // Compute light attenuation using Beer's law.
              vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
              vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance ); // Beer's law
              return transmittance * radiance;
            }
          }
          vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
            const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
            const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
            const in vec3 attenuationColor, const in float attenuationDistance ) {
            vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
            vec3 refractedRayExit = position + transmissionRay;
            // Project refracted vector on the framebuffer, while mapping to normalized device coordinates.
            vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
            vec2 refractionCoords = ndcPos.xy / ndcPos.w;
            refractionCoords += 1.0;
            refractionCoords /= 2.0;
            // Sample framebuffer to get pixel the refracted ray hits.
            vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
            vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
            // Get the specular component.
            vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
            return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
          }
        #endif
`
      );
      shader.fragmentShader = shader.fragmentShader.replace(
        "#include <transmission_fragment>",
        /*glsl*/
        `  
        // Improve the refraction to use the world pos
        material.transmission = _transmission;
        material.transmissionAlpha = 1.0;
        material.thickness = thickness;
        material.attenuationDistance = attenuationDistance;
        material.attenuationColor = attenuationColor;
        #ifdef USE_TRANSMISSIONMAP
          material.transmission *= texture2D( transmissionMap, vUv ).r;
        #endif
        #ifdef USE_THICKNESSMAP
          material.thickness *= texture2D( thicknessMap, vUv ).g;
        #endif
        
        vec3 pos = vWorldPosition;
        vec3 v = normalize( cameraPosition - pos );
        vec3 n = inverseTransformDirection( normal, viewMatrix );
        vec3 transmission = vec3(0.0);
        float transmissionR, transmissionB, transmissionG;
        float randomCoords = rand();
        float thickness_smear = thickness * max(pow(roughnessFactor, 0.33), anisotropicBlur);
        vec3 distortionNormal = vec3(0.0);
        vec3 temporalOffset = vec3(time, -time, -time) * temporalDistortion;
        if (distortion > 0.0) {
          distortionNormal = distortion * vec3(snoiseFractal(vec3((pos * distortionScale + temporalOffset))), snoiseFractal(vec3(pos.zxy * distortionScale - temporalOffset)), snoiseFractal(vec3(pos.yxz * distortionScale + temporalOffset)));
        }
        for (float i = 0.0; i < ${samples}.0; i ++) {
          vec3 sampleNorm = normalize(n + roughnessFactor * roughnessFactor * 2.0 * normalize(vec3(rand() - 0.5, rand() - 0.5, rand() - 0.5)) * pow(rand(), 0.33) + distortionNormal);
          transmissionR = getIBLVolumeRefraction(
            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness  + thickness_smear * (i + randomCoords) / float(${samples}),
            material.attenuationColor, material.attenuationDistance
          ).r;
          transmissionG = getIBLVolumeRefraction(
            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior  * (1.0 + chromaticAberration * (i + randomCoords) / float(${samples})) , material.thickness + thickness_smear * (i + randomCoords) / float(${samples}),
            material.attenuationColor, material.attenuationDistance
          ).g;
          transmissionB = getIBLVolumeRefraction(
            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior * (1.0 + 2.0 * chromaticAberration * (i + randomCoords) / float(${samples})), material.thickness + thickness_smear * (i + randomCoords) / float(${samples}),
            material.attenuationColor, material.attenuationDistance
          ).b;
          transmission.r += transmissionR;
          transmission.g += transmissionG;
          transmission.b += transmissionB;
        }
        transmission /= ${samples}.0;
        totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
`
      );
    };
    Object.keys(this.uniforms).forEach((name) => Object.defineProperty(this, name, {
      get: () => this.uniforms[name].value,
      set: (v5) => this.uniforms[name].value = v5
    }));
  }
};
var MeshTransmissionMaterial = React73.forwardRef(({
  buffer: buffer2,
  transmissionSampler = false,
  backside = false,
  side = FrontSide,
  transmission = 1,
  thickness = 0,
  backsideThickness = 0,
  samples = 10,
  resolution,
  backsideResolution,
  background,
  anisotropy,
  anisotropicBlur,
  ...props
}, fref) => {
  extend({
    MeshTransmissionMaterial: MeshTransmissionMaterialImpl
  });
  const ref = React73.useRef(null);
  const [discardMaterial] = React73.useState(() => new DiscardMaterial());
  const fboBack = useFBO(backsideResolution || resolution);
  const fboMain = useFBO(resolution);
  let oldBg;
  let oldTone;
  let parent;
  useFrame((state) => {
    ref.current.time = state.clock.getElapsedTime();
    if (ref.current.buffer === fboMain.texture && !transmissionSampler) {
      parent = ref.current.__r3f.parent;
      if (parent) {
        oldTone = state.gl.toneMapping;
        oldBg = state.scene.background;
        state.gl.toneMapping = NoToneMapping;
        if (background) state.scene.background = background;
        parent.material = discardMaterial;
        if (backside) {
          state.gl.setRenderTarget(fboBack);
          state.gl.render(state.scene, state.camera);
          parent.material = ref.current;
          parent.material.buffer = fboBack.texture;
          parent.material.thickness = backsideThickness;
          parent.material.side = BackSide;
        }
        state.gl.setRenderTarget(fboMain);
        state.gl.render(state.scene, state.camera);
        parent.material.thickness = thickness;
        parent.material.side = side;
        parent.material.buffer = fboMain.texture;
        state.scene.background = oldBg;
        state.gl.setRenderTarget(null);
        parent.material = ref.current;
        state.gl.toneMapping = oldTone;
      }
    }
  });
  React73.useImperativeHandle(fref, () => ref.current, []);
  return React73.createElement("meshTransmissionMaterial", _extends({
    // Samples must re-compile the shader so we memoize it
    args: [samples, transmissionSampler],
    ref
  }, props, {
    buffer: buffer2 || fboMain.texture,
    _transmission: transmission,
    anisotropicBlur: anisotropicBlur !== null && anisotropicBlur !== void 0 ? anisotropicBlur : anisotropy,
    transmission: transmissionSampler ? transmission : 0,
    thickness,
    side
  }));
});

// node_modules/@react-three/drei/core/MeshDiscardMaterial.js
var React74 = __toESM(require_react());
var MeshDiscardMaterial = React74.forwardRef((props, fref) => {
  extend({
    DiscardMaterialImpl: DiscardMaterial
  });
  return React74.createElement("discardMaterialImpl", _extends({
    ref: fref
  }, props));
});

// node_modules/@react-three/drei/core/PointMaterial.js
var React75 = __toESM(require_react());
var PointMaterialImpl = class extends PointsMaterial {
  constructor(props) {
    super(props);
    this.onBeforeCompile = (shader, renderer) => {
      const {
        isWebGL2
      } = renderer.capabilities;
      shader.fragmentShader = shader.fragmentShader.replace("#include <output_fragment>", `
        ${!isWebGL2 ? "#extension GL_OES_standard_derivatives : enable\n#include <output_fragment>" : "#include <output_fragment>"}
      vec2 cxy = 2.0 * gl_PointCoord - 1.0;
      float r = dot(cxy, cxy);
      float delta = fwidth(r);     
      float mask = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);
      gl_FragColor = vec4(gl_FragColor.rgb, mask * gl_FragColor.a );
      #include <tonemapping_fragment>
      #include <encodings_fragment>
      `);
    };
  }
};
var PointMaterial = React75.forwardRef((props, ref) => {
  const [material] = React75.useState(() => new PointMaterialImpl(null));
  return React75.createElement("primitive", _extends({}, props, {
    object: material,
    ref,
    attach: "material"
  }));
});

// node_modules/@react-three/drei/core/softShadows.js
var React76 = __toESM(require_react());
var pcss = ({
  focus = 0,
  size = 25,
  samples = 10
} = {}) => `
#define PENUMBRA_FILTER_SIZE float(${size})
#define RGB_NOISE_FUNCTION(uv) (randRGB(uv))
vec3 randRGB(vec2 uv) {
  return vec3(
    fract(sin(dot(uv, vec2(12.75613, 38.12123))) * 13234.76575),
    fract(sin(dot(uv, vec2(19.45531, 58.46547))) * 43678.23431),
    fract(sin(dot(uv, vec2(23.67817, 78.23121))) * 93567.23423)
  );
}

vec3 lowPassRandRGB(vec2 uv) {
  // 3x3 convolution (average)
  // can be implemented as separable with an extra buffer for a total of 6 samples instead of 9
  vec3 result = vec3(0);
  result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, -1.0));
  result += RGB_NOISE_FUNCTION(uv + vec2(-1.0,  0.0));
  result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, +1.0));
  result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, -1.0));
  result += RGB_NOISE_FUNCTION(uv + vec2( 0.0,  0.0));
  result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, +1.0));
  result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, -1.0));
  result += RGB_NOISE_FUNCTION(uv + vec2(+1.0,  0.0));
  result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, +1.0));
  result *= 0.111111111; // 1.0 / 9.0
  return result;
}
vec3 highPassRandRGB(vec2 uv) {
  // by subtracting the low-pass signal from the original signal, we're being left with the high-pass signal
  // hp(x) = x - lp(x)
  return RGB_NOISE_FUNCTION(uv) - lowPassRandRGB(uv) + 0.5;
}


vec2 vogelDiskSample(int sampleIndex, int sampleCount, float angle) {
  const float goldenAngle = 2.399963f; // radians
  float r = sqrt(float(sampleIndex) + 0.5f) / sqrt(float(sampleCount));
  float theta = float(sampleIndex) * goldenAngle + angle;
  float sine = sin(theta);
  float cosine = cos(theta);
  return vec2(cosine, sine) * r;
}
float penumbraSize( const in float zReceiver, const in float zBlocker ) { // Parallel plane estimation
  return (zReceiver - zBlocker) / zBlocker;
}
float findBlocker(sampler2D shadowMap, vec2 uv, float compare, float angle) {
  float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);
  float blockerDepthSum = float(${focus});
  float blockers = 0.0;

  int j = 0;
  vec2 offset = vec2(0.);
  float depth = 0.;

  #pragma unroll_loop_start
  for(int i = 0; i < ${samples}; i ++) {
    offset = (vogelDiskSample(j, ${samples}, angle) * texelSize) * 2.0 * PENUMBRA_FILTER_SIZE;
    depth = unpackRGBAToDepth( texture2D( shadowMap, uv + offset));
    if (depth < compare) {
      blockerDepthSum += depth;
      blockers++;
    }
    j++;
  }
  #pragma unroll_loop_end

  if (blockers > 0.0) {
    return blockerDepthSum / blockers;
  }
  return -1.0;
}

        
float vogelFilter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius, float angle) {
  float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);
  float shadow = 0.0f;
  int j = 0;
  vec2 vogelSample = vec2(0.0);
  vec2 offset = vec2(0.0);
  #pragma unroll_loop_start
  for (int i = 0; i < ${samples}; i++) {
    vogelSample = vogelDiskSample(j, ${samples}, angle) * texelSize;
    offset = vogelSample * (1.0 + filterRadius * float(${size}));
    shadow += step( zReceiver, unpackRGBAToDepth( texture2D( shadowMap, uv + offset ) ) );
    j++;
  }
  #pragma unroll_loop_end
  return shadow * 1.0 / ${samples}.0;
}

float PCSS (sampler2D shadowMap, vec4 coords) {
  vec2 uv = coords.xy;
  float zReceiver = coords.z; // Assumed to be eye-space z in this code
  float angle = highPassRandRGB(gl_FragCoord.xy).r * PI2;
  float avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver, angle);
  if (avgBlockerDepth == -1.0) {
    return 1.0;
  }
  float penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);
  return vogelFilter(shadowMap, uv, zReceiver, 1.25 * penumbraRatio, angle);
}`;
function reset(gl, scene, camera) {
  scene.traverse((object) => {
    if (object.material) {
      gl.properties.remove(object.material);
      object.material.dispose == null ? void 0 : object.material.dispose();
    }
  });
  gl.info.programs.length = 0;
  gl.compile(scene, camera);
}
function SoftShadows({
  focus = 0,
  samples = 10,
  size = 25
}) {
  const gl = useThree((state) => state.gl);
  const scene = useThree((state) => state.scene);
  const camera = useThree((state) => state.camera);
  React76.useEffect(() => {
    const original = ShaderChunk.shadowmap_pars_fragment;
    ShaderChunk.shadowmap_pars_fragment = ShaderChunk.shadowmap_pars_fragment.replace("#ifdef USE_SHADOWMAP", "#ifdef USE_SHADOWMAP\n" + pcss({
      size,
      samples,
      focus
    })).replace("#if defined( SHADOWMAP_TYPE_PCF )", "\nreturn PCSS(shadowMap, shadowCoord);\n#if defined( SHADOWMAP_TYPE_PCF )");
    reset(gl, scene, camera);
    return () => {
      ShaderChunk.shadowmap_pars_fragment = original;
      reset(gl, scene, camera);
    };
  }, [focus, size, samples]);
  return null;
}

// node_modules/@react-three/drei/core/shapes.js
var React77 = __toESM(require_react());
function create2(type, effect) {
  const El = type + "Geometry";
  return React77.forwardRef(({
    args,
    children,
    ...props
  }, fref) => {
    const ref = React77.useRef(null);
    React77.useImperativeHandle(fref, () => ref.current);
    React77.useLayoutEffect(() => void (effect == null ? void 0 : effect(ref.current)));
    return React77.createElement("mesh", _extends({
      ref
    }, props), React77.createElement(El, {
      attach: "geometry",
      args
    }), children);
  });
}
var Box = create2("box");
var Circle = create2("circle");
var Cone = create2("cone");
var Cylinder = create2("cylinder");
var Sphere2 = create2("sphere");
var Plane2 = create2("plane");
var Tube = create2("tube");
var Torus = create2("torus");
var TorusKnot = create2("torusKnot");
var Tetrahedron = create2("tetrahedron");
var Ring = create2("ring");
var Polyhedron = create2("polyhedron");
var Icosahedron = create2("icosahedron");
var Octahedron = create2("octahedron");
var Dodecahedron = create2("dodecahedron");
var Extrude = create2("extrude");
var Lathe = create2("lathe");
var Capsule = create2("capsule");
var Shape2 = create2("shape", ({
  geometry: geometry2
}) => {
  const pos = geometry2.attributes.position;
  const b32 = new Box3().setFromBufferAttribute(pos);
  const b3size = new Vector3();
  b32.getSize(b3size);
  const uv = [];
  let x2 = 0, y2 = 0, u2 = 0, v5 = 0;
  for (let i4 = 0; i4 < pos.count; i4++) {
    x2 = pos.getX(i4);
    y2 = pos.getY(i4);
    u2 = (x2 - b32.min.x) / b3size.x;
    v5 = (y2 - b32.min.y) / b3size.y;
    uv.push(u2, v5);
  }
  geometry2.setAttribute("uv", new Float32BufferAttribute(uv, 2));
});

// node_modules/@react-three/drei/core/RoundedBox.js
var React78 = __toESM(require_react());
var eps = 1e-5;
function createShape(width, height, radius0) {
  const shape = new Shape();
  const radius = radius0 - eps;
  shape.absarc(eps, eps, eps, -Math.PI / 2, -Math.PI, true);
  shape.absarc(eps, height - radius * 2, eps, Math.PI, Math.PI / 2, true);
  shape.absarc(width - radius * 2, height - radius * 2, eps, Math.PI / 2, 0, true);
  shape.absarc(width - radius * 2, eps, eps, 0, -Math.PI / 2, true);
  return shape;
}
var RoundedBox = React78.forwardRef(function RoundedBox2({
  args: [width = 1, height = 1, depth = 1] = [],
  radius = 0.05,
  steps = 1,
  smoothness = 4,
  creaseAngle = 0.4,
  children,
  ...rest
}, ref) {
  const shape = React78.useMemo(() => createShape(width, height, radius), [width, height, radius]);
  const params = React78.useMemo(() => ({
    depth: depth - radius * 2,
    bevelEnabled: true,
    bevelSegments: smoothness * 2,
    steps,
    bevelSize: radius - eps,
    bevelThickness: radius,
    curveSegments: smoothness
  }), [depth, radius, smoothness]);
  const geomRef = React78.useRef();
  React78.useLayoutEffect(() => {
    if (geomRef.current) {
      geomRef.current.center();
      toCreasedNormals(geomRef.current, creaseAngle);
    }
  }, [shape, params]);
  return React78.createElement("mesh", _extends({
    ref
  }, rest), React78.createElement("extrudeGeometry", {
    ref: geomRef,
    args: [shape, params]
  }), children);
});

// node_modules/@react-three/drei/core/ScreenQuad.js
var React79 = __toESM(require_react());
function createScreenQuadGeometry() {
  const geometry2 = new BufferGeometry();
  const vertices = new Float32Array([-1, -1, 3, -1, -1, 3]);
  geometry2.setAttribute("position", new BufferAttribute(vertices, 2));
  return geometry2;
}
var ScreenQuad = React79.forwardRef(function ScreenQuad2({
  children,
  ...restProps
}, ref) {
  const geometry2 = React79.useMemo(createScreenQuadGeometry, []);
  return React79.createElement("mesh", _extends({
    ref,
    geometry: geometry2,
    frustumCulled: false
  }, restProps), children);
});

// node_modules/@react-three/drei/core/Resize.js
var React80 = __toESM(require_react());
var Resize = React80.forwardRef(({
  children,
  width,
  height,
  depth,
  box3,
  precise = true,
  ...props
}, fRef) => {
  const ref = React80.useRef(null);
  const outer = React80.useRef(null);
  const inner = React80.useRef(null);
  React80.useLayoutEffect(() => {
    outer.current.matrixWorld.identity();
    let box = box3 || new Box3().setFromObject(inner.current, precise);
    const w2 = box.max.x - box.min.x;
    const h2 = box.max.y - box.min.y;
    const d3 = box.max.z - box.min.z;
    let dimension = Math.max(w2, h2, d3);
    if (width) dimension = w2;
    if (height) dimension = h2;
    if (depth) dimension = d3;
    outer.current.scale.setScalar(1 / dimension);
  }, [width, height, depth, box3, precise]);
  React80.useImperativeHandle(fRef, () => ref.current, []);
  return React80.createElement("group", _extends({
    ref
  }, props), React80.createElement("group", {
    ref: outer
  }, React80.createElement("group", {
    ref: inner
  }, children)));
});

// node_modules/@react-three/drei/core/Bounds.js
var React81 = __toESM(require_react());
var isOrthographic = (def) => def && def.isOrthographicCamera;
var isBox3 = (def) => def && def.isBox3;
var context5 = React81.createContext(null);
function Bounds({
  children,
  damping = 6,
  fit,
  clip,
  observe,
  margin = 1.2,
  eps: eps2 = 0.01,
  onFit
}) {
  const ref = React81.useRef(null);
  const {
    camera,
    invalidate,
    size,
    controls: controlsImpl
  } = useThree();
  const controls = controlsImpl;
  const onFitRef = React81.useRef(onFit);
  onFitRef.current = onFit;
  function equals(a6, b5) {
    return Math.abs(a6.x - b5.x) < eps2 && Math.abs(a6.y - b5.y) < eps2 && Math.abs(a6.z - b5.z) < eps2;
  }
  function damp5(v5, t3, lambda, delta) {
    v5.x = MathUtils.damp(v5.x, t3.x, lambda, delta);
    v5.y = MathUtils.damp(v5.y, t3.y, lambda, delta);
    v5.z = MathUtils.damp(v5.z, t3.z, lambda, delta);
  }
  const [current] = React81.useState(() => ({
    animating: false,
    focus: new Vector3(),
    camera: new Vector3(),
    zoom: 1
  }));
  const [goal] = React81.useState(() => ({
    focus: new Vector3(),
    camera: new Vector3(),
    zoom: 1
  }));
  const [box] = React81.useState(() => new Box3());
  const api = React81.useMemo(() => {
    function getSize() {
      const size2 = box.getSize(new Vector3());
      const center2 = box.getCenter(new Vector3());
      const maxSize = Math.max(size2.x, size2.y, size2.z);
      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));
      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;
      const distance3 = margin * Math.max(fitHeightDistance, fitWidthDistance);
      return {
        box,
        size: size2,
        center: center2,
        distance: distance3
      };
    }
    return {
      getSize,
      refresh(object) {
        if (isBox3(object)) box.copy(object);
        else {
          const target2 = object || ref.current;
          target2.updateWorldMatrix(true, true);
          box.setFromObject(target2);
        }
        if (box.isEmpty()) {
          const max = camera.position.length() || 10;
          box.setFromCenterAndSize(new Vector3(), new Vector3(max, max, max));
        }
        if ((controls == null ? void 0 : controls.constructor.name) === "OrthographicTrackballControls") {
          const {
            distance: distance3
          } = getSize();
          const direction = camera.position.clone().sub(controls.target).normalize().multiplyScalar(distance3);
          const newPos = controls.target.clone().add(direction);
          camera.position.copy(newPos);
        }
        return this;
      },
      clip() {
        const {
          distance: distance3
        } = getSize();
        if (controls) controls.maxDistance = distance3 * 10;
        camera.near = distance3 / 100;
        camera.far = distance3 * 100;
        camera.updateProjectionMatrix();
        if (controls) controls.update();
        invalidate();
        return this;
      },
      to({
        position: position2,
        target: target2
      }) {
        current.camera.copy(camera.position);
        const {
          center: center2
        } = getSize();
        goal.camera.set(...position2);
        if (target2) {
          goal.focus.set(...target2);
        } else {
          goal.focus.copy(center2);
        }
        if (damping) {
          current.animating = true;
        } else {
          camera.position.set(...position2);
        }
        return this;
      },
      fit() {
        current.camera.copy(camera.position);
        if (controls) current.focus.copy(controls.target);
        const {
          center: center2,
          distance: distance3
        } = getSize();
        const direction = center2.clone().sub(camera.position).normalize().multiplyScalar(distance3);
        goal.camera.copy(center2).sub(direction);
        goal.focus.copy(center2);
        if (isOrthographic(camera)) {
          current.zoom = camera.zoom;
          let maxHeight = 0, maxWidth = 0;
          const vertices = [new Vector3(box.min.x, box.min.y, box.min.z), new Vector3(box.min.x, box.max.y, box.min.z), new Vector3(box.min.x, box.min.y, box.max.z), new Vector3(box.min.x, box.max.y, box.max.z), new Vector3(box.max.x, box.max.y, box.max.z), new Vector3(box.max.x, box.max.y, box.min.z), new Vector3(box.max.x, box.min.y, box.max.z), new Vector3(box.max.x, box.min.y, box.min.z)];
          center2.applyMatrix4(camera.matrixWorldInverse);
          for (const v5 of vertices) {
            v5.applyMatrix4(camera.matrixWorldInverse);
            maxHeight = Math.max(maxHeight, Math.abs(v5.y - center2.y));
            maxWidth = Math.max(maxWidth, Math.abs(v5.x - center2.x));
          }
          maxHeight *= 2;
          maxWidth *= 2;
          const zoomForHeight = (camera.top - camera.bottom) / maxHeight;
          const zoomForWidth = (camera.right - camera.left) / maxWidth;
          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;
          if (!damping) {
            camera.zoom = goal.zoom;
            camera.updateProjectionMatrix();
          }
        }
        if (damping) {
          current.animating = true;
        } else {
          camera.position.copy(goal.camera);
          camera.lookAt(goal.focus);
          if (controls) {
            controls.target.copy(goal.focus);
            controls.update();
          }
        }
        if (onFitRef.current) onFitRef.current(this.getSize());
        invalidate();
        return this;
      }
    };
  }, [box, camera, controls, margin, damping, invalidate]);
  React81.useLayoutEffect(() => {
    if (controls) {
      const callback = () => current.animating = false;
      controls.addEventListener("start", callback);
      return () => controls.removeEventListener("start", callback);
    }
  }, [controls]);
  const count = React81.useRef(0);
  React81.useLayoutEffect(() => {
    if (observe || count.current++ === 0) {
      api.refresh();
      if (fit) api.fit();
      if (clip) api.clip();
    }
  }, [size, clip, fit, observe, camera, controls]);
  useFrame((state, delta) => {
    if (current.animating) {
      damp5(current.focus, goal.focus, damping, delta);
      damp5(current.camera, goal.camera, damping, delta);
      current.zoom = MathUtils.damp(current.zoom, goal.zoom, damping, delta);
      camera.position.copy(current.camera);
      if (isOrthographic(camera)) {
        camera.zoom = current.zoom;
        camera.updateProjectionMatrix();
      }
      if (!controls) {
        camera.lookAt(current.focus);
      } else {
        controls.target.copy(current.focus);
        controls.update();
      }
      invalidate();
      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps2)) return;
      if (!isOrthographic(camera) && !equals(current.camera, goal.camera)) return;
      if (controls && !equals(current.focus, goal.focus)) return;
      current.animating = false;
    }
  });
  return React81.createElement("group", {
    ref
  }, React81.createElement(context5.Provider, {
    value: api
  }, children));
}
function useBounds() {
  return React81.useContext(context5);
}

// node_modules/@react-three/drei/core/CameraShake.js
var React82 = __toESM(require_react());
var CameraShake = React82.forwardRef(({
  intensity = 1,
  decay,
  decayRate = 0.65,
  maxYaw = 0.1,
  maxPitch = 0.1,
  maxRoll = 0.1,
  yawFrequency = 0.1,
  pitchFrequency = 0.1,
  rollFrequency = 0.1
}, ref) => {
  const camera = useThree((state) => state.camera);
  const defaultControls = useThree((state) => state.controls);
  const intensityRef = React82.useRef(intensity);
  const initialRotation = React82.useRef(camera.rotation.clone());
  const [yawNoise] = React82.useState(() => new SimplexNoise());
  const [pitchNoise] = React82.useState(() => new SimplexNoise());
  const [rollNoise] = React82.useState(() => new SimplexNoise());
  const constrainIntensity = () => {
    if (intensityRef.current < 0 || intensityRef.current > 1) {
      intensityRef.current = intensityRef.current < 0 ? 0 : 1;
    }
  };
  React82.useImperativeHandle(ref, () => ({
    getIntensity: () => intensityRef.current,
    setIntensity: (val) => {
      intensityRef.current = val;
      constrainIntensity();
    }
  }), []);
  React82.useEffect(() => {
    if (defaultControls) {
      const callback = () => void (initialRotation.current = camera.rotation.clone());
      defaultControls.addEventListener("change", callback);
      callback();
      return () => void defaultControls.removeEventListener("change", callback);
    }
  }, [camera, defaultControls]);
  useFrame((state, delta) => {
    const shake = Math.pow(intensityRef.current, 2);
    const yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);
    const pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);
    const roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);
    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);
    if (decay && intensityRef.current > 0) {
      intensityRef.current -= decayRate * delta;
      constrainIntensity();
    }
  });
  return null;
});

// node_modules/@react-three/drei/core/Float.js
var React83 = __toESM(require_react());
var Float = React83.forwardRef(({
  children,
  enabled = true,
  speed = 1,
  rotationIntensity = 1,
  floatIntensity = 1,
  floatingRange = [-0.1, 0.1],
  ...props
}, forwardRef70) => {
  const ref = React83.useRef(null);
  const offset = React83.useRef(Math.random() * 1e4);
  useFrame((state) => {
    var _floatingRange$, _floatingRange$2;
    if (!enabled || speed === 0) return;
    const t3 = offset.current + state.clock.getElapsedTime();
    ref.current.rotation.x = Math.cos(t3 / 4 * speed) / 8 * rotationIntensity;
    ref.current.rotation.y = Math.sin(t3 / 4 * speed) / 8 * rotationIntensity;
    ref.current.rotation.z = Math.sin(t3 / 4 * speed) / 20 * rotationIntensity;
    let yPosition = Math.sin(t3 / 4 * speed) / 10;
    yPosition = MathUtils.mapLinear(yPosition, -0.1, 0.1, (_floatingRange$ = floatingRange == null ? void 0 : floatingRange[0]) !== null && _floatingRange$ !== void 0 ? _floatingRange$ : -0.1, (_floatingRange$2 = floatingRange == null ? void 0 : floatingRange[1]) !== null && _floatingRange$2 !== void 0 ? _floatingRange$2 : 0.1);
    ref.current.position.y = yPosition * floatIntensity;
    ref.current.updateMatrix();
  });
  return React83.createElement("group", props, React83.createElement("group", {
    ref: react_merge_refs_esm_default([ref, forwardRef70]),
    matrixAutoUpdate: false
  }, children));
});

// node_modules/@react-three/drei/core/Stage.js
var React87 = __toESM(require_react());

// node_modules/@react-three/drei/core/Environment.js
var React84 = __toESM(require_react());

// node_modules/@react-three/drei/helpers/environment-assets.js
var presetsObj = {
  apartment: "lebombo_1k.hdr",
  city: "potsdamer_platz_1k.hdr",
  dawn: "kiara_1_dawn_1k.hdr",
  forest: "forest_slope_1k.hdr",
  lobby: "st_fagans_interior_1k.hdr",
  night: "dikhololo_night_1k.hdr",
  park: "rooitou_park_1k.hdr",
  studio: "studio_small_03_1k.hdr",
  sunset: "venice_sunset_1k.hdr",
  warehouse: "empty_warehouse_01_1k.hdr"
};

// node_modules/@react-three/drei/core/useEnvironment.js
var CUBEMAP_ROOT = "https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/";
var isPromise = (promise) => typeof promise === "object" && typeof promise.then === "function";
var isArray2 = (arr) => Array.isArray(arr);
function useEnvironment({
  files = ["/px.png", "/nx.png", "/py.png", "/ny.png", "/pz.png", "/nz.png"],
  path = "",
  preset = void 0,
  encoding = void 0,
  extensions: extensions2
} = {}) {
  let loader2 = null;
  let isCubeMap = false;
  let extension;
  if (preset) {
    if (!(preset in presetsObj)) throw new Error("Preset must be one of: " + Object.keys(presetsObj).join(", "));
    files = presetsObj[preset];
    path = CUBEMAP_ROOT;
  }
  if (isPromise(files)) {
    files = suspend(async (promise) => {
      const result = await promise;
      return result.default;
    }, [files]);
    loader2 = EXRLoader;
  } else {
    var _files$split$pop;
    isCubeMap = isArray2(files);
    extension = !isArray2(files) && ((_files$split$pop = files.split(".").pop()) == null ? void 0 : _files$split$pop.toLowerCase());
    loader2 = isCubeMap ? CubeTextureLoader : extension === "hdr" ? RGBELoader : extension === "exr" ? EXRLoader : null;
  }
  if (!loader2) throw new Error("useEnvironment: Unrecognized file extension: " + files);
  const loaderResult = useLoader(
    // @ts-expect-error
    loader2,
    isCubeMap ? [files] : files,
    (loader3) => {
      loader3.setPath == null ? void 0 : loader3.setPath(path);
      if (extensions2) extensions2(loader3);
    }
  );
  const texture = isCubeMap ? (
    // @ts-ignore
    loaderResult[0]
  ) : loaderResult;
  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;
  const sRGBEncoding = 3001;
  const LinearEncoding2 = 3e3;
  if ("colorSpace" in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? "srgb" : "srgb-linear";
  else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? sRGBEncoding : LinearEncoding2;
  return texture;
}

// node_modules/@react-three/drei/core/Environment.js
var isRef = (obj) => obj.current && obj.current.isScene;
var resolveScene = (scene) => isRef(scene) ? scene.current : scene;
function setEnvProps(background, scene, defaultScene, texture, blur = 0) {
  const target2 = resolveScene(scene || defaultScene);
  const oldbg = target2.background;
  const oldenv = target2.environment;
  const oldBlur = target2.backgroundBlurriness || 0;
  if (background !== "only") target2.environment = texture;
  if (background) target2.background = texture;
  if (background && target2.backgroundBlurriness !== void 0) target2.backgroundBlurriness = blur;
  return () => {
    if (background !== "only") target2.environment = oldenv;
    if (background) target2.background = oldbg;
    if (background && target2.backgroundBlurriness !== void 0) target2.backgroundBlurriness = oldBlur;
  };
}
function EnvironmentMap({
  scene,
  background = false,
  blur,
  map: map2
}) {
  const defaultScene = useThree((state) => state.scene);
  React84.useLayoutEffect(() => {
    if (map2) return setEnvProps(background, scene, defaultScene, map2, blur);
  }, [defaultScene, scene, map2, background, blur]);
  return null;
}
function EnvironmentCube({
  background = false,
  scene,
  blur,
  ...rest
}) {
  const texture = useEnvironment(rest);
  const defaultScene = useThree((state) => state.scene);
  React84.useLayoutEffect(() => {
    return setEnvProps(background, scene, defaultScene, texture, blur);
  }, [texture, background, scene, defaultScene, blur]);
  return null;
}
function EnvironmentPortal({
  children,
  near = 1,
  far = 1e3,
  resolution = 256,
  frames = 1,
  map: map2,
  background = false,
  blur,
  scene,
  files,
  path,
  preset = void 0,
  extensions: extensions2
}) {
  const gl = useThree((state) => state.gl);
  const defaultScene = useThree((state) => state.scene);
  const camera = React84.useRef(null);
  const [virtualScene] = React84.useState(() => new Scene());
  const fbo = React84.useMemo(() => {
    const fbo2 = new WebGLCubeRenderTarget(resolution);
    fbo2.texture.type = HalfFloatType;
    return fbo2;
  }, [resolution]);
  React84.useLayoutEffect(() => {
    if (frames === 1) camera.current.update(gl, virtualScene);
    return setEnvProps(background, scene, defaultScene, fbo.texture, blur);
  }, [children, virtualScene, fbo.texture, scene, defaultScene, background, frames, gl]);
  let count = 1;
  useFrame(() => {
    if (frames === Infinity || count < frames) {
      camera.current.update(gl, virtualScene);
      count++;
    }
  });
  return React84.createElement(React84.Fragment, null, createPortal(React84.createElement(React84.Fragment, null, children, React84.createElement("cubeCamera", {
    ref: camera,
    args: [near, far, fbo]
  }), files || preset ? React84.createElement(EnvironmentCube, {
    background: true,
    files,
    preset,
    path,
    extensions: extensions2
  }) : map2 ? React84.createElement(EnvironmentMap, {
    background: true,
    map: map2,
    extensions: extensions2
  }) : null), virtualScene));
}
function EnvironmentGround(props) {
  var _props$ground, _props$ground2, _scale, _props$ground3;
  const textureDefault = useEnvironment(props);
  const texture = props.map || textureDefault;
  React84.useMemo(() => extend({
    GroundProjectedEnvImpl: GroundProjectedEnv
  }), []);
  const args = React84.useMemo(() => [texture], [texture]);
  const height = (_props$ground = props.ground) == null ? void 0 : _props$ground.height;
  const radius = (_props$ground2 = props.ground) == null ? void 0 : _props$ground2.radius;
  const scale4 = (_scale = (_props$ground3 = props.ground) == null ? void 0 : _props$ground3.scale) !== null && _scale !== void 0 ? _scale : 1e3;
  return React84.createElement(React84.Fragment, null, React84.createElement(EnvironmentMap, _extends({}, props, {
    map: texture
  })), React84.createElement("groundProjectedEnvImpl", {
    args,
    scale: scale4,
    height,
    radius
  }));
}
function Environment(props) {
  return props.ground ? React84.createElement(EnvironmentGround, props) : props.map ? React84.createElement(EnvironmentMap, props) : props.children ? React84.createElement(EnvironmentPortal, props) : React84.createElement(EnvironmentCube, props);
}

// node_modules/@react-three/drei/core/ContactShadows.js
var React85 = __toESM(require_react());
var ContactShadows = React85.forwardRef(({
  scale: scale4 = 10,
  frames = Infinity,
  opacity = 1,
  width = 1,
  height = 1,
  blur = 1,
  far = 10,
  resolution = 512,
  smooth = true,
  color = "#000000",
  depthWrite = false,
  renderOrder,
  ...props
}, fref) => {
  const ref = React85.useRef(null);
  const scene = useThree((state) => state.scene);
  const gl = useThree((state) => state.gl);
  const shadowCamera = React85.useRef(null);
  width = width * (Array.isArray(scale4) ? scale4[0] : scale4 || 1);
  height = height * (Array.isArray(scale4) ? scale4[1] : scale4 || 1);
  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React85.useMemo(() => {
    const renderTarget2 = new WebGLRenderTarget(resolution, resolution);
    const renderTargetBlur2 = new WebGLRenderTarget(resolution, resolution);
    renderTargetBlur2.texture.generateMipmaps = renderTarget2.texture.generateMipmaps = false;
    const planeGeometry2 = new PlaneGeometry(width, height).rotateX(Math.PI / 2);
    const blurPlane2 = new Mesh(planeGeometry2);
    const depthMaterial2 = new MeshDepthMaterial();
    depthMaterial2.depthTest = depthMaterial2.depthWrite = false;
    depthMaterial2.onBeforeCompile = (shader) => {
      shader.uniforms = {
        ...shader.uniforms,
        ucolor: {
          value: new Color(color)
        }
      };
      shader.fragmentShader = shader.fragmentShader.replace(
        `void main() {`,
        //
        `uniform vec3 ucolor;
           void main() {
          `
      );
      shader.fragmentShader = shader.fragmentShader.replace(
        "vec4( vec3( 1.0 - fragCoordZ ), opacity );",
        // Colorize the shadow, multiply by the falloff so that the center can remain darker
        "vec4( ucolor * fragCoordZ * 2.0, ( 1.0 - fragCoordZ ) * 1.0 );"
      );
    };
    const horizontalBlurMaterial2 = new ShaderMaterial(HorizontalBlurShader);
    const verticalBlurMaterial2 = new ShaderMaterial(VerticalBlurShader);
    verticalBlurMaterial2.depthTest = horizontalBlurMaterial2.depthTest = false;
    return [renderTarget2, planeGeometry2, depthMaterial2, blurPlane2, horizontalBlurMaterial2, verticalBlurMaterial2, renderTargetBlur2];
  }, [resolution, width, height, scale4, color]);
  const blurShadows = (blur2) => {
    blurPlane.visible = true;
    blurPlane.material = horizontalBlurMaterial;
    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;
    horizontalBlurMaterial.uniforms.h.value = blur2 * 1 / 256;
    gl.setRenderTarget(renderTargetBlur);
    gl.render(blurPlane, shadowCamera.current);
    blurPlane.material = verticalBlurMaterial;
    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;
    verticalBlurMaterial.uniforms.v.value = blur2 * 1 / 256;
    gl.setRenderTarget(renderTarget);
    gl.render(blurPlane, shadowCamera.current);
    blurPlane.visible = false;
  };
  let count = 0;
  let initialBackground;
  let initialOverrideMaterial;
  useFrame(() => {
    if (shadowCamera.current && (frames === Infinity || count < frames)) {
      count++;
      initialBackground = scene.background;
      initialOverrideMaterial = scene.overrideMaterial;
      ref.current.visible = false;
      scene.background = null;
      scene.overrideMaterial = depthMaterial;
      gl.setRenderTarget(renderTarget);
      gl.render(scene, shadowCamera.current);
      blurShadows(blur);
      if (smooth) blurShadows(blur * 0.4);
      gl.setRenderTarget(null);
      ref.current.visible = true;
      scene.overrideMaterial = initialOverrideMaterial;
      scene.background = initialBackground;
    }
  });
  React85.useImperativeHandle(fref, () => ref.current, []);
  return React85.createElement("group", _extends({
    "rotation-x": Math.PI / 2
  }, props, {
    ref
  }), React85.createElement("mesh", {
    renderOrder,
    geometry: planeGeometry,
    scale: [1, -1, 1],
    rotation: [-Math.PI / 2, 0, 0]
  }, React85.createElement("meshBasicMaterial", {
    transparent: true,
    map: renderTarget.texture,
    opacity,
    depthWrite
  })), React85.createElement("orthographicCamera", {
    ref: shadowCamera,
    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]
  }));
});

// node_modules/@react-three/drei/core/AccumulativeShadows.js
var React86 = __toESM(require_react());
function isLight(object) {
  return object.isLight;
}
function isGeometry(object) {
  return !!object.geometry;
}
var accumulativeContext = React86.createContext(null);
var SoftShadowMaterial = shaderMaterial({
  color: new Color(),
  blend: 2,
  alphaTest: 0.75,
  opacity: 0,
  map: null
}, `varying vec2 vUv;
   void main() {
     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);
     vUv = uv;
   }`, `varying vec2 vUv;
   uniform sampler2D map;
   uniform vec3 color;
   uniform float opacity;
   uniform float alphaTest;
   uniform float blend;
   void main() {
     vec4 sampledDiffuseColor = texture2D(map, vUv);
     gl_FragColor = vec4(color * sampledDiffuseColor.r * blend, max(0.0, (1.0 - (sampledDiffuseColor.r + sampledDiffuseColor.g + sampledDiffuseColor.b) / alphaTest)) * opacity);
     #include <tonemapping_fragment>
     #include <encodings_fragment>
   }`);
var AccumulativeShadows = React86.forwardRef(({
  children,
  temporal,
  frames = 40,
  limit = Infinity,
  blend = 20,
  scale: scale4 = 10,
  opacity = 1,
  alphaTest = 0.75,
  color = "black",
  colorBlend = 2,
  resolution = 1024,
  toneMapped = true,
  ...props
}, forwardRef70) => {
  extend({
    SoftShadowMaterial
  });
  const gl = useThree((state) => state.gl);
  const scene = useThree((state) => state.scene);
  const camera = useThree((state) => state.camera);
  const invalidate = useThree((state) => state.invalidate);
  const gPlane = React86.useRef(null);
  const gLights = React86.useRef(null);
  const [plm] = React86.useState(() => new ProgressiveLightMap(gl, scene, resolution));
  React86.useLayoutEffect(() => {
    plm.configure(gPlane.current);
  }, []);
  const api = React86.useMemo(() => ({
    lights: /* @__PURE__ */ new Map(),
    temporal: !!temporal,
    frames: Math.max(2, frames),
    blend: Math.max(2, frames === Infinity ? blend : frames),
    count: 0,
    getMesh: () => gPlane.current,
    reset: () => {
      plm.clear();
      const material = gPlane.current.material;
      material.opacity = 0;
      material.alphaTest = 0;
      api.count = 0;
    },
    update: (frames2 = 1) => {
      const material = gPlane.current.material;
      if (!api.temporal) {
        material.opacity = opacity;
        material.alphaTest = alphaTest;
      } else {
        material.opacity = Math.min(opacity, material.opacity + opacity / api.blend);
        material.alphaTest = Math.min(alphaTest, material.alphaTest + alphaTest / api.blend);
      }
      gLights.current.visible = true;
      plm.prepare();
      for (let i4 = 0; i4 < frames2; i4++) {
        api.lights.forEach((light) => light.update());
        plm.update(camera, api.blend);
      }
      gLights.current.visible = false;
      plm.finish();
    }
  }), [plm, camera, scene, temporal, frames, blend, opacity, alphaTest]);
  React86.useLayoutEffect(() => {
    api.reset();
    if (!api.temporal && api.frames !== Infinity) api.update(api.blend);
  });
  React86.useImperativeHandle(forwardRef70, () => api, [api]);
  useFrame(() => {
    if ((api.temporal || api.frames === Infinity) && api.count < api.frames && api.count < limit) {
      invalidate();
      api.update();
      api.count++;
    }
  });
  return React86.createElement("group", props, React86.createElement("group", {
    traverse: () => null,
    ref: gLights
  }, React86.createElement(accumulativeContext.Provider, {
    value: api
  }, children)), React86.createElement("mesh", {
    receiveShadow: true,
    ref: gPlane,
    scale: scale4,
    rotation: [-Math.PI / 2, 0, 0]
  }, React86.createElement("planeGeometry", null), React86.createElement("softShadowMaterial", {
    transparent: true,
    depthWrite: false,
    toneMapped,
    color,
    blend: colorBlend,
    map: plm.progressiveLightMap2.texture
  })));
});
var RandomizedLight = React86.forwardRef(({
  castShadow = true,
  bias = 1e-3,
  mapSize = 512,
  size = 5,
  near = 0.5,
  far = 500,
  frames = 1,
  position: position2 = [0, 0, 0],
  radius = 1,
  amount = 8,
  intensity = 1,
  ambient = 0.5,
  ...props
}, forwardRef70) => {
  const gLights = React86.useRef(null);
  const length3 = new Vector3(...position2).length();
  const parent = React86.useContext(accumulativeContext);
  const update = React86.useCallback(() => {
    let light;
    if (gLights.current) {
      for (let l3 = 0; l3 < gLights.current.children.length; l3++) {
        light = gLights.current.children[l3];
        if (Math.random() > ambient) {
          light.position.set(position2[0] + MathUtils.randFloatSpread(radius), position2[1] + MathUtils.randFloatSpread(radius), position2[2] + MathUtils.randFloatSpread(radius));
        } else {
          let lambda = Math.acos(2 * Math.random() - 1) - Math.PI / 2;
          let phi = 2 * Math.PI * Math.random();
          light.position.set(Math.cos(lambda) * Math.cos(phi) * length3, Math.abs(Math.cos(lambda) * Math.sin(phi) * length3), Math.sin(lambda) * length3);
        }
      }
    }
  }, [radius, ambient, length3, ...position2]);
  const api = React86.useMemo(() => ({
    update
  }), [update]);
  React86.useImperativeHandle(forwardRef70, () => api, [api]);
  React86.useLayoutEffect(() => {
    const group = gLights.current;
    if (parent) parent.lights.set(group.uuid, api);
    return () => void parent.lights.delete(group.uuid);
  }, [parent, api]);
  return React86.createElement("group", _extends({
    ref: gLights
  }, props), Array.from({
    length: amount
  }, (_2, index2) => React86.createElement("directionalLight", {
    key: index2,
    castShadow,
    "shadow-bias": bias,
    "shadow-mapSize": [mapSize, mapSize],
    intensity: intensity / amount
  }, React86.createElement("orthographicCamera", {
    attach: "shadow-camera",
    args: [-size, size, size, -size, near, far]
  }))));
});
var ProgressiveLightMap = class {
  constructor(renderer, scene, res = 1024) {
    this.renderer = renderer;
    this.res = res;
    this.scene = scene;
    this.buffer1Active = false;
    this.lights = [];
    this.meshes = [];
    this.object = null;
    this.clearColor = new Color();
    this.clearAlpha = 0;
    const format = /(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent) ? HalfFloatType : FloatType;
    this.progressiveLightMap1 = new WebGLRenderTarget(this.res, this.res, {
      type: format
    });
    this.progressiveLightMap2 = new WebGLRenderTarget(this.res, this.res, {
      type: format
    });
    this.discardMat = new DiscardMaterial();
    this.targetMat = new MeshLambertMaterial({
      fog: false
    });
    this.previousShadowMap = {
      value: this.progressiveLightMap1.texture
    };
    this.averagingWindow = {
      value: 100
    };
    this.targetMat.onBeforeCompile = (shader) => {
      shader.vertexShader = "varying vec2 vUv;\n" + shader.vertexShader.slice(0, -1) + "vUv = uv; gl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }";
      const bodyStart = shader.fragmentShader.indexOf("void main() {");
      shader.fragmentShader = "varying vec2 vUv;\n" + shader.fragmentShader.slice(0, bodyStart) + "uniform sampler2D previousShadowMap;\n	uniform float averagingWindow;\n" + shader.fragmentShader.slice(bodyStart - 1, -1) + `
vec3 texelOld = texture2D(previousShadowMap, vUv).rgb;
        gl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/ averagingWindow);
      }`;
      shader.uniforms.previousShadowMap = this.previousShadowMap;
      shader.uniforms.averagingWindow = this.averagingWindow;
    };
  }
  clear() {
    this.renderer.getClearColor(this.clearColor);
    this.clearAlpha = this.renderer.getClearAlpha();
    this.renderer.setClearColor("black", 1);
    this.renderer.setRenderTarget(this.progressiveLightMap1);
    this.renderer.clear();
    this.renderer.setRenderTarget(this.progressiveLightMap2);
    this.renderer.clear();
    this.renderer.setRenderTarget(null);
    this.renderer.setClearColor(this.clearColor, this.clearAlpha);
    this.lights = [];
    this.meshes = [];
    this.scene.traverse((object) => {
      if (isGeometry(object)) {
        this.meshes.push({
          object,
          material: object.material
        });
      } else if (isLight(object)) {
        this.lights.push({
          object,
          intensity: object.intensity
        });
      }
    });
  }
  prepare() {
    this.lights.forEach((light) => light.object.intensity = 0);
    this.meshes.forEach((mesh) => mesh.object.material = this.discardMat);
  }
  finish() {
    this.lights.forEach((light) => light.object.intensity = light.intensity);
    this.meshes.forEach((mesh) => mesh.object.material = mesh.material);
  }
  configure(object) {
    this.object = object;
  }
  update(camera, blendWindow = 100) {
    if (!this.object) return;
    this.averagingWindow.value = blendWindow;
    this.object.material = this.targetMat;
    const activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;
    const inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1;
    const oldBg = this.scene.background;
    this.scene.background = null;
    this.renderer.setRenderTarget(activeMap);
    this.previousShadowMap.value = inactiveMap.texture;
    this.buffer1Active = !this.buffer1Active;
    this.renderer.render(this.scene, camera);
    this.renderer.setRenderTarget(null);
    this.scene.background = oldBg;
  }
};

// node_modules/@react-three/drei/core/Stage.js
var presets = {
  rembrandt: {
    main: [1, 2, 1],
    fill: [-2, -0.5, -2]
  },
  portrait: {
    main: [-1, 2, 0.5],
    fill: [-1, 0.5, -1.5]
  },
  upfront: {
    main: [0, 2, 1],
    fill: [-1, 0.5, -1.5]
  },
  soft: {
    main: [-2, 4, 4],
    fill: [-1, 0.5, -1.5]
  }
};
function Refit({
  radius,
  adjustCamera
}) {
  const api = useBounds();
  React87.useEffect(() => {
    if (adjustCamera) api.refresh().clip().fit();
  }, [radius, adjustCamera]);
  return null;
}
function Stage({
  children,
  center: center2,
  adjustCamera = true,
  intensity = 0.5,
  shadows = "contact",
  environment = "city",
  preset = "rembrandt",
  ...props
}) {
  var _bias, _normalBias, _size, _offset, _amount, _radius, _ambient, _intensity;
  const config = typeof preset === "string" ? presets[preset] : preset;
  const [{
    radius,
    height
  }, set] = React87.useState({
    radius: 0,
    width: 0,
    height: 0,
    depth: 0
  });
  const shadowBias = (_bias = shadows == null ? void 0 : shadows.bias) !== null && _bias !== void 0 ? _bias : -1e-4;
  const normalBias = (_normalBias = shadows == null ? void 0 : shadows.normalBias) !== null && _normalBias !== void 0 ? _normalBias : 0;
  const shadowSize = (_size = shadows == null ? void 0 : shadows.size) !== null && _size !== void 0 ? _size : 1024;
  const shadowOffset = (_offset = shadows == null ? void 0 : shadows.offset) !== null && _offset !== void 0 ? _offset : 0;
  const contactShadow = shadows === "contact" || (shadows == null ? void 0 : shadows.type) === "contact";
  const accumulativeShadow = shadows === "accumulative" || (shadows == null ? void 0 : shadows.type) === "accumulative";
  const shadowSpread = {
    ...typeof shadows === "object" ? shadows : {}
  };
  const environmentProps = !environment ? null : typeof environment === "string" ? {
    preset: environment
  } : environment;
  const onCentered = React87.useCallback((props2) => {
    const {
      width,
      height: height2,
      depth,
      boundingSphere
    } = props2;
    set({
      radius: boundingSphere.radius,
      width,
      height: height2,
      depth
    });
    if (center2 != null && center2.onCentered) center2.onCentered(props2);
  }, []);
  return React87.createElement(React87.Fragment, null, React87.createElement("ambientLight", {
    intensity: intensity / 3
  }), React87.createElement("spotLight", {
    penumbra: 1,
    position: [config.main[0] * radius, config.main[1] * radius, config.main[2] * radius],
    intensity: intensity * 2,
    castShadow: !!shadows,
    "shadow-bias": shadowBias,
    "shadow-normalBias": normalBias,
    "shadow-mapSize": shadowSize
  }), React87.createElement("pointLight", {
    position: [config.fill[0] * radius, config.fill[1] * radius, config.fill[2] * radius],
    intensity
  }), React87.createElement(Bounds, _extends({
    fit: !!adjustCamera,
    clip: !!adjustCamera,
    margin: Number(adjustCamera),
    observe: true
  }, props), React87.createElement(Refit, {
    radius,
    adjustCamera
  }), React87.createElement(Center, _extends({}, center2, {
    position: [0, shadowOffset / 2, 0],
    onCentered
  }), children)), React87.createElement("group", {
    position: [0, -height / 2 - shadowOffset / 2, 0]
  }, contactShadow && React87.createElement(ContactShadows, _extends({
    scale: radius * 4,
    far: radius,
    blur: 2
  }, shadowSpread)), accumulativeShadow && React87.createElement(AccumulativeShadows, _extends({
    temporal: true,
    frames: 100,
    alphaTest: 0.9,
    toneMapped: true,
    scale: radius * 4
  }, shadowSpread), React87.createElement(RandomizedLight, {
    amount: (_amount = shadowSpread.amount) !== null && _amount !== void 0 ? _amount : 8,
    radius: (_radius = shadowSpread.radius) !== null && _radius !== void 0 ? _radius : radius,
    ambient: (_ambient = shadowSpread.ambient) !== null && _ambient !== void 0 ? _ambient : 0.5,
    intensity: (_intensity = shadowSpread.intensity) !== null && _intensity !== void 0 ? _intensity : 1,
    position: [config.main[0] * radius, config.main[1] * radius, config.main[2] * radius],
    size: radius * 4,
    bias: -shadowBias,
    mapSize: shadowSize
  }))), environment && React87.createElement(Environment, environmentProps));
}

// node_modules/@react-three/drei/core/Backdrop.js
var React88 = __toESM(require_react());
var easeInExpo = (x2) => x2 === 0 ? 0 : Math.pow(2, 10 * x2 - 10);
function Backdrop({
  children,
  floor = 0.25,
  segments = 20,
  receiveShadow,
  ...props
}) {
  const ref = React88.useRef(null);
  React88.useLayoutEffect(() => {
    let i4 = 0;
    const offset = segments / segments / 2;
    const position2 = ref.current.attributes.position;
    for (let x2 = 0; x2 < segments + 1; x2++) {
      for (let y2 = 0; y2 < segments + 1; y2++) {
        position2.setXYZ(i4++, x2 / segments - offset + (x2 === 0 ? -floor : 0), y2 / segments - offset, easeInExpo(x2 / segments));
      }
    }
    position2.needsUpdate = true;
    ref.current.computeVertexNormals();
  }, [segments, floor]);
  return React88.createElement("group", props, React88.createElement("mesh", {
    receiveShadow,
    rotation: [-Math.PI / 2, 0, Math.PI / 2]
  }, React88.createElement("planeGeometry", {
    ref,
    args: [1, 1, segments, segments]
  }), children));
}

// node_modules/@react-three/drei/core/Shadow.js
var React89 = __toESM(require_react());
var Shadow = React89.forwardRef(({
  fog = false,
  renderOrder,
  depthWrite = false,
  colorStop = 0,
  color = "black",
  opacity = 0.5,
  ...props
}, ref) => {
  const canvas = React89.useMemo(() => {
    const canvas2 = document.createElement("canvas");
    canvas2.width = 128;
    canvas2.height = 128;
    const context10 = canvas2.getContext("2d");
    const gradient = context10.createRadialGradient(canvas2.width / 2, canvas2.height / 2, 0, canvas2.width / 2, canvas2.height / 2, canvas2.width / 2);
    gradient.addColorStop(colorStop, new Color(color).getStyle());
    gradient.addColorStop(1, "rgba(0,0,0,0)");
    context10.fillStyle = gradient;
    context10.fillRect(0, 0, canvas2.width, canvas2.height);
    return canvas2;
  }, [color, colorStop]);
  return React89.createElement("mesh", _extends({
    renderOrder,
    ref,
    "rotation-x": -Math.PI / 2
  }, props), React89.createElement("planeGeometry", null), React89.createElement("meshBasicMaterial", {
    transparent: true,
    opacity,
    fog,
    depthWrite,
    side: DoubleSide
  }, React89.createElement("canvasTexture", {
    attach: "map",
    args: [canvas]
  })));
});

// node_modules/@react-three/drei/core/Caustics.js
var React90 = __toESM(require_react());
function createNormalMaterial(side = FrontSide) {
  const viewMatrix = {
    value: new Matrix4()
  };
  return Object.assign(new MeshNormalMaterial({
    side
  }), {
    viewMatrix,
    onBeforeCompile: (shader) => {
      shader.uniforms.viewMatrix = viewMatrix;
      shader.fragmentShader = `vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
           return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
         }
` + shader.fragmentShader.replace("#include <normal_fragment_maps>", `#include <normal_fragment_maps>
           normal = inverseTransformDirection( normal, viewMatrix );
`);
    }
  });
}
var CausticsProjectionMaterial = shaderMaterial({
  causticsTexture: null,
  causticsTextureB: null,
  color: new Color(),
  lightProjMatrix: new Matrix4(),
  lightViewMatrix: new Matrix4()
}, `varying vec3 vWorldPosition;   
   void main() {
     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);
     vec4 worldPosition = modelMatrix * vec4(position, 1.);
     vWorldPosition = worldPosition.xyz;
   }`, `varying vec3 vWorldPosition;
  uniform vec3 color;
  uniform sampler2D causticsTexture; 
  uniform sampler2D causticsTextureB; 
  uniform mat4 lightProjMatrix;
  uniform mat4 lightViewMatrix;
   void main() {
    // Apply caustics  
    vec4 lightSpacePos = lightProjMatrix * lightViewMatrix * vec4(vWorldPosition, 1.0);
    lightSpacePos.xyz /= lightSpacePos.w;
    lightSpacePos.xyz = lightSpacePos.xyz * 0.5 + 0.5; 
    vec3 front = texture2D(causticsTexture, lightSpacePos.xy).rgb;
    vec3 back = texture2D(causticsTextureB, lightSpacePos.xy).rgb;
    gl_FragColor = vec4((front + back) * color, 1.0);
    #include <tonemapping_fragment>
    #include <encodings_fragment>
   }`);
var CausticsMaterial = shaderMaterial(
  {
    cameraMatrixWorld: new Matrix4(),
    cameraProjectionMatrixInv: new Matrix4(),
    normalTexture: null,
    depthTexture: null,
    lightDir: new Vector3(0, 1, 0),
    lightPlaneNormal: new Vector3(0, 1, 0),
    lightPlaneConstant: 0,
    near: 0.1,
    far: 100,
    modelMatrix: new Matrix4(),
    worldRadius: 1 / 40,
    ior: 1.1,
    bounces: 0,
    resolution: 1024,
    size: 10,
    intensity: 0.5
  },
  /* glsl */
  `
  varying vec2 vUv;
  void main() {
      vUv = uv;
      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
  }`,
  /* glsl */
  `  
  uniform mat4 cameraMatrixWorld;
  uniform mat4 cameraProjectionMatrixInv;
  uniform vec3 lightDir;
  uniform vec3 lightPlaneNormal;
  uniform float lightPlaneConstant;
  uniform float near;
  uniform float far;
  uniform float time;
  uniform float worldRadius;
  uniform float resolution;
  uniform float size;
  uniform float intensity;
  uniform float ior;
  precision highp isampler2D;
  precision highp usampler2D;
  uniform sampler2D normalTexture;
  uniform sampler2D depthTexture;
  uniform float bounces;
  varying vec2 vUv;
  vec3 WorldPosFromDepth(float depth, vec2 coord) {
    float z = depth * 2.0 - 1.0;
    vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);
    vec4 viewSpacePosition = cameraProjectionMatrixInv * clipSpacePosition;
    // Perspective division
    viewSpacePosition /= viewSpacePosition.w;
    vec4 worldSpacePosition = cameraMatrixWorld * viewSpacePosition;
    return worldSpacePosition.xyz;
  }                  
  float sdPlane( vec3 p, vec3 n, float h ) {
    // n must be normalized
    return dot(p,n) + h;
  }
  float planeIntersect( vec3 ro, vec3 rd, vec4 p ) {
    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);
  }
  vec3 totalInternalReflection(vec3 ro, vec3 rd, vec3 pos, vec3 normal, float ior, out vec3 rayOrigin, out vec3 rayDirection) {
    rayOrigin = ro;
    rayDirection = rd;
    rayDirection = refract(rayDirection, normal, 1.0 / ior);
    rayOrigin = pos + rayDirection * 0.1;
    return rayDirection;
  }
  void main() {
    // Each sample consists of random offset in the x and y direction
    float caustic = 0.0;
    float causticTexelSize = (1.0 / resolution) * size * 2.0;
    float texelsNeeded = worldRadius / causticTexelSize;
    float sampleRadius = texelsNeeded / resolution;
    float sum = 0.0;
    if (texture2D(depthTexture, vUv).x == 1.0) {
      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
      return;
    }
    vec2 offset1 = vec2(-0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);
    vec2 offset2 = vec2(-0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);
    vec2 offset3 = vec2(0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);
    vec2 offset4 = vec2(0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);
    vec2 uv1 = vUv + offset1 * sampleRadius;
    vec2 uv2 = vUv + offset2 * sampleRadius;
    vec2 uv3 = vUv + offset3 * sampleRadius;
    vec2 uv4 = vUv + offset4 * sampleRadius;
    vec3 normal1 = texture2D(normalTexture, uv1, -10.0).rgb * 2.0 - 1.0;
    vec3 normal2 = texture2D(normalTexture, uv2, -10.0).rgb * 2.0 - 1.0;
    vec3 normal3 = texture2D(normalTexture, uv3, -10.0).rgb * 2.0 - 1.0;
    vec3 normal4 = texture2D(normalTexture, uv4, -10.0).rgb * 2.0 - 1.0;
    float depth1 = texture2D(depthTexture, uv1, -10.0).x;
    float depth2 = texture2D(depthTexture, uv2, -10.0).x;
    float depth3 = texture2D(depthTexture, uv3, -10.0).x;
    float depth4 = texture2D(depthTexture, uv4, -10.0).x;
    // Sanity check the depths
    if (depth1 == 1.0 || depth2 == 1.0 || depth3 == 1.0 || depth4 == 1.0) {
      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
      return;
    }
    vec3 pos1 = WorldPosFromDepth(depth1, uv1);
    vec3 pos2 = WorldPosFromDepth(depth2, uv2);
    vec3 pos3 = WorldPosFromDepth(depth3, uv3);
    vec3 pos4 = WorldPosFromDepth(depth4, uv4);
    vec3 originPos1 = WorldPosFromDepth(0.0, uv1);
    vec3 originPos2 = WorldPosFromDepth(0.0, uv2);
    vec3 originPos3 = WorldPosFromDepth(0.0, uv3);
    vec3 originPos4 = WorldPosFromDepth(0.0, uv4);
    vec3 endPos1, endPos2, endPos3, endPos4;
    vec3 endDir1, endDir2, endDir3, endDir4;
    totalInternalReflection(originPos1, lightDir, pos1, normal1, ior, endPos1, endDir1);
    totalInternalReflection(originPos2, lightDir, pos2, normal2, ior, endPos2, endDir2);
    totalInternalReflection(originPos3, lightDir, pos3, normal3, ior, endPos3, endDir3);
    totalInternalReflection(originPos4, lightDir, pos4, normal4, ior, endPos4, endDir4);
    float lightPosArea = length(cross(originPos2 - originPos1, originPos3 - originPos1)) + length(cross(originPos3 - originPos1, originPos4 - originPos1));
    float t1 = planeIntersect(endPos1, endDir1, vec4(lightPlaneNormal, lightPlaneConstant));
    float t2 = planeIntersect(endPos2, endDir2, vec4(lightPlaneNormal, lightPlaneConstant));
    float t3 = planeIntersect(endPos3, endDir3, vec4(lightPlaneNormal, lightPlaneConstant));
    float t4 = planeIntersect(endPos4, endDir4, vec4(lightPlaneNormal, lightPlaneConstant));
    vec3 finalPos1 = endPos1 + endDir1 * t1;
    vec3 finalPos2 = endPos2 + endDir2 * t2;
    vec3 finalPos3 = endPos3 + endDir3 * t3;
    vec3 finalPos4 = endPos4 + endDir4 * t4;
    float finalArea = length(cross(finalPos2 - finalPos1, finalPos3 - finalPos1)) + length(cross(finalPos3 - finalPos1, finalPos4 - finalPos1));
    caustic += intensity * (lightPosArea / finalArea);
    // Calculate the area of the triangle in light spaces
    gl_FragColor = vec4(vec3(max(caustic, 0.0)), 1.0);
  }`
);
var NORMALPROPS = {
  depth: true,
  minFilter: LinearFilter,
  magFilter: LinearFilter,
  encoding: LinearEncoding,
  type: UnsignedByteType
};
var CAUSTICPROPS = {
  minFilter: LinearMipmapLinearFilter,
  magFilter: LinearFilter,
  encoding: LinearEncoding,
  format: RGBAFormat,
  type: FloatType,
  generateMipmaps: true
};
var Caustics = React90.forwardRef(({
  debug,
  children,
  frames = 1,
  ior = 1.1,
  color = "white",
  causticsOnly = false,
  backside = false,
  backsideIOR = 1.1,
  worldRadius = 0.3125,
  intensity = 0.05,
  resolution = 2024,
  lightSource = [5, 5, 5],
  ...props
}, fref) => {
  extend({
    CausticsProjectionMaterial
  });
  const ref = React90.useRef(null);
  const camera = React90.useRef(null);
  const scene = React90.useRef(null);
  const plane = React90.useRef(null);
  const gl = useThree((state) => state.gl);
  const helper = useHelper(debug && camera, CameraHelper);
  const normalTarget = useFBO(resolution, resolution, NORMALPROPS);
  const normalTargetB = useFBO(resolution, resolution, NORMALPROPS);
  const causticsTarget = useFBO(resolution, resolution, CAUSTICPROPS);
  const causticsTargetB = useFBO(resolution, resolution, CAUSTICPROPS);
  const [normalMat] = React90.useState(() => createNormalMaterial());
  const [normalMatB] = React90.useState(() => createNormalMaterial(BackSide));
  const [causticsMaterial] = React90.useState(() => new CausticsMaterial());
  const [causticsQuad] = React90.useState(() => new FullScreenQuad(causticsMaterial));
  React90.useLayoutEffect(() => {
    ref.current.updateWorldMatrix(false, true);
  });
  let count = 0;
  const v5 = new Vector3();
  const lpF = new Frustum();
  const lpM = new Matrix4();
  const lpP = new Plane();
  const lightDir = new Vector3();
  const lightDirInv = new Vector3();
  const bounds = new Box3();
  const focusPos = new Vector3();
  useFrame((state, delta) => {
    if (frames === Infinity || count++ < frames) {
      var _scene$current$parent, _helper$current;
      if (Array.isArray(lightSource)) lightDir.fromArray(lightSource).normalize();
      else lightDir.copy(ref.current.worldToLocal(lightSource.current.getWorldPosition(v5)).normalize());
      lightDirInv.copy(lightDir).multiplyScalar(-1);
      let boundsVertices = [];
      (_scene$current$parent = scene.current.parent) == null ? void 0 : _scene$current$parent.matrixWorld.identity();
      bounds.setFromObject(scene.current, true);
      boundsVertices.push(new Vector3(bounds.min.x, bounds.min.y, bounds.min.z));
      boundsVertices.push(new Vector3(bounds.min.x, bounds.min.y, bounds.max.z));
      boundsVertices.push(new Vector3(bounds.min.x, bounds.max.y, bounds.min.z));
      boundsVertices.push(new Vector3(bounds.min.x, bounds.max.y, bounds.max.z));
      boundsVertices.push(new Vector3(bounds.max.x, bounds.min.y, bounds.min.z));
      boundsVertices.push(new Vector3(bounds.max.x, bounds.min.y, bounds.max.z));
      boundsVertices.push(new Vector3(bounds.max.x, bounds.max.y, bounds.min.z));
      boundsVertices.push(new Vector3(bounds.max.x, bounds.max.y, bounds.max.z));
      const worldVerts = boundsVertices.map((v6) => v6.clone());
      bounds.getCenter(focusPos);
      boundsVertices = boundsVertices.map((v6) => v6.clone().sub(focusPos));
      const lightPlane = lpP.set(lightDirInv, 0);
      const projectedVerts = boundsVertices.map((v6) => lightPlane.projectPoint(v6, new Vector3()));
      const centralVert = projectedVerts.reduce((a6, b5) => a6.add(b5), v5.set(0, 0, 0)).divideScalar(projectedVerts.length);
      const radius = projectedVerts.map((v6) => v6.distanceTo(centralVert)).reduce((a6, b5) => Math.max(a6, b5));
      const dirLength = boundsVertices.map((x2) => x2.dot(lightDir)).reduce((a6, b5) => Math.max(a6, b5));
      camera.current.position.copy(lightDir.clone().multiplyScalar(dirLength).add(focusPos));
      camera.current.lookAt(scene.current.localToWorld(focusPos.clone()));
      const dirMatrix = lpM.lookAt(camera.current.position, focusPos, v5.set(0, 1, 0));
      camera.current.left = -radius;
      camera.current.right = radius;
      camera.current.top = radius;
      camera.current.bottom = -radius;
      const yOffset = v5.set(0, radius, 0).applyMatrix4(dirMatrix);
      const yTime = (camera.current.position.y + yOffset.y) / lightDir.y;
      camera.current.near = 0.1;
      camera.current.far = yTime;
      camera.current.updateProjectionMatrix();
      camera.current.updateMatrixWorld();
      const groundProjectedCoords = worldVerts.map((v6) => v6.add(lightDir.clone().multiplyScalar(-v6.y / lightDir.y)));
      const centerPos = groundProjectedCoords.reduce((a6, b5) => a6.add(b5), v5.set(0, 0, 0)).divideScalar(groundProjectedCoords.length);
      const maxSize = 2 * groundProjectedCoords.map((v6) => Math.hypot(v6.x - centerPos.x, v6.z - centerPos.z)).reduce((a6, b5) => Math.max(a6, b5));
      plane.current.scale.setScalar(maxSize);
      plane.current.position.copy(centerPos);
      if (debug) (_helper$current = helper.current) == null ? void 0 : _helper$current.update();
      normalMatB.viewMatrix.value = normalMat.viewMatrix.value = camera.current.matrixWorldInverse;
      const dirLightNearPlane = lpF.setFromProjectionMatrix(lpM.multiplyMatrices(camera.current.projectionMatrix, camera.current.matrixWorldInverse)).planes[4];
      causticsMaterial.cameraMatrixWorld = camera.current.matrixWorld;
      causticsMaterial.cameraProjectionMatrixInv = camera.current.projectionMatrixInverse;
      causticsMaterial.lightDir = lightDirInv;
      causticsMaterial.lightPlaneNormal = dirLightNearPlane.normal;
      causticsMaterial.lightPlaneConstant = dirLightNearPlane.constant;
      causticsMaterial.near = camera.current.near;
      causticsMaterial.far = camera.current.far;
      causticsMaterial.resolution = resolution;
      causticsMaterial.size = radius;
      causticsMaterial.intensity = intensity;
      causticsMaterial.worldRadius = worldRadius;
      scene.current.visible = true;
      gl.setRenderTarget(normalTarget);
      gl.clear();
      scene.current.overrideMaterial = normalMat;
      gl.render(scene.current, camera.current);
      gl.setRenderTarget(normalTargetB);
      gl.clear();
      if (backside) {
        scene.current.overrideMaterial = normalMatB;
        gl.render(scene.current, camera.current);
      }
      scene.current.overrideMaterial = null;
      causticsMaterial.ior = ior;
      plane.current.material.lightProjMatrix = camera.current.projectionMatrix;
      plane.current.material.lightViewMatrix = camera.current.matrixWorldInverse;
      causticsMaterial.normalTexture = normalTarget.texture;
      causticsMaterial.depthTexture = normalTarget.depthTexture;
      gl.setRenderTarget(causticsTarget);
      gl.clear();
      causticsQuad.render(gl);
      causticsMaterial.ior = backsideIOR;
      causticsMaterial.normalTexture = normalTargetB.texture;
      causticsMaterial.depthTexture = normalTargetB.depthTexture;
      gl.setRenderTarget(causticsTargetB);
      gl.clear();
      if (backside) causticsQuad.render(gl);
      gl.setRenderTarget(null);
      if (causticsOnly) scene.current.visible = false;
    }
  });
  React90.useImperativeHandle(fref, () => ref.current, []);
  return React90.createElement("group", _extends({
    ref
  }, props), React90.createElement("scene", {
    ref: scene
  }, React90.createElement("orthographicCamera", {
    ref: camera,
    up: [0, 1, 0]
  }), children), React90.createElement("mesh", {
    renderOrder: 2,
    ref: plane,
    "rotation-x": -Math.PI / 2
  }, React90.createElement("planeGeometry", null), React90.createElement("causticsProjectionMaterial", {
    transparent: true,
    color,
    causticsTexture: causticsTarget.texture,
    causticsTextureB: causticsTargetB.texture,
    blending: CustomBlending,
    blendSrc: OneFactor,
    blendDst: SrcAlphaFactor,
    depthWrite: false
  }), debug && React90.createElement(Edges, null, React90.createElement("lineBasicMaterial", {
    color: "#ffff00",
    toneMapped: false
  }))));
});

// node_modules/@react-three/drei/core/Reflector.js
var React91 = __toESM(require_react());
extend({
  MeshReflectorMaterial
});
var Reflector = React91.forwardRef(({
  mixBlur = 0,
  mixStrength = 0.5,
  resolution = 256,
  blur = [0, 0],
  args = [1, 1],
  minDepthThreshold = 0.9,
  maxDepthThreshold = 1,
  depthScale = 0,
  depthToBlurRatioBias = 0.25,
  mirror = 0,
  children,
  debug = 0,
  distortion = 1,
  mixContrast = 1,
  distortionMap,
  ...props
}, ref) => {
  React91.useEffect(() => {
    console.warn("Reflector has been deprecated and will be removed next major. Replace it with <MeshReflectorMaterial />!");
  }, []);
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const scene = useThree(({
    scene: scene2
  }) => scene2);
  blur = Array.isArray(blur) ? blur : [blur, blur];
  const hasBlur = blur[0] + blur[1] > 0;
  const meshRef = React91.useRef(null);
  const [reflectorPlane] = React91.useState(() => new Plane());
  const [normal2] = React91.useState(() => new Vector3());
  const [reflectorWorldPosition] = React91.useState(() => new Vector3());
  const [cameraWorldPosition] = React91.useState(() => new Vector3());
  const [rotationMatrix] = React91.useState(() => new Matrix4());
  const [lookAtPosition] = React91.useState(() => new Vector3(0, 0, -1));
  const [clipPlane] = React91.useState(() => new Vector4());
  const [view] = React91.useState(() => new Vector3());
  const [target2] = React91.useState(() => new Vector3());
  const [q3] = React91.useState(() => new Vector4());
  const [textureMatrix] = React91.useState(() => new Matrix4());
  const [virtualCamera] = React91.useState(() => new PerspectiveCamera());
  const beforeRender = React91.useCallback(() => {
    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);
    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);
    rotationMatrix.extractRotation(meshRef.current.matrixWorld);
    normal2.set(0, 0, 1);
    normal2.applyMatrix4(rotationMatrix);
    view.subVectors(reflectorWorldPosition, cameraWorldPosition);
    if (view.dot(normal2) > 0) return;
    view.reflect(normal2).negate();
    view.add(reflectorWorldPosition);
    rotationMatrix.extractRotation(camera.matrixWorld);
    lookAtPosition.set(0, 0, -1);
    lookAtPosition.applyMatrix4(rotationMatrix);
    lookAtPosition.add(cameraWorldPosition);
    target2.subVectors(reflectorWorldPosition, lookAtPosition);
    target2.reflect(normal2).negate();
    target2.add(reflectorWorldPosition);
    virtualCamera.position.copy(view);
    virtualCamera.up.set(0, 1, 0);
    virtualCamera.up.applyMatrix4(rotationMatrix);
    virtualCamera.up.reflect(normal2);
    virtualCamera.lookAt(target2);
    virtualCamera.far = camera.far;
    virtualCamera.updateMatrixWorld();
    virtualCamera.projectionMatrix.copy(camera.projectionMatrix);
    textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
    textureMatrix.multiply(virtualCamera.projectionMatrix);
    textureMatrix.multiply(virtualCamera.matrixWorldInverse);
    textureMatrix.multiply(meshRef.current.matrixWorld);
    reflectorPlane.setFromNormalAndCoplanarPoint(normal2, reflectorWorldPosition);
    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);
    const projectionMatrix = virtualCamera.projectionMatrix;
    q3.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
    q3.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
    q3.z = -1;
    q3.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
    clipPlane.multiplyScalar(2 / clipPlane.dot(q3));
    projectionMatrix.elements[2] = clipPlane.x;
    projectionMatrix.elements[6] = clipPlane.y;
    projectionMatrix.elements[10] = clipPlane.z + 1;
    projectionMatrix.elements[14] = clipPlane.w;
  }, []);
  const [fbo1, fbo2, blurpass, reflectorProps] = React91.useMemo(() => {
    const parameters = {
      type: HalfFloatType,
      minFilter: LinearFilter,
      magFilter: LinearFilter
    };
    const fbo12 = new WebGLRenderTarget(resolution, resolution, parameters);
    fbo12.depthBuffer = true;
    fbo12.depthTexture = new DepthTexture(resolution, resolution);
    fbo12.depthTexture.format = DepthFormat;
    fbo12.depthTexture.type = UnsignedShortType;
    const fbo22 = new WebGLRenderTarget(resolution, resolution, parameters);
    const blurpass2 = new BlurPass({
      gl,
      resolution,
      width: blur[0],
      height: blur[1],
      minDepthThreshold,
      maxDepthThreshold,
      depthScale,
      depthToBlurRatioBias
    });
    const reflectorProps2 = {
      mirror,
      textureMatrix,
      mixBlur,
      tDiffuse: fbo12.texture,
      tDepth: fbo12.depthTexture,
      tDiffuseBlur: fbo22.texture,
      hasBlur,
      mixStrength,
      minDepthThreshold,
      maxDepthThreshold,
      depthScale,
      depthToBlurRatioBias,
      transparent: true,
      debug,
      distortion,
      distortionMap,
      mixContrast,
      "defines-USE_BLUR": hasBlur ? "" : void 0,
      "defines-USE_DEPTH": depthScale > 0 ? "" : void 0,
      "defines-USE_DISTORTION": distortionMap ? "" : void 0
    };
    return [fbo12, fbo22, blurpass2, reflectorProps2];
  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, mixContrast]);
  useFrame(() => {
    if (!(meshRef != null && meshRef.current)) return;
    meshRef.current.visible = false;
    const currentXrEnabled = gl.xr.enabled;
    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;
    beforeRender();
    gl.xr.enabled = false;
    gl.shadowMap.autoUpdate = false;
    gl.setRenderTarget(fbo1);
    gl.state.buffers.depth.setMask(true);
    if (!gl.autoClear) gl.clear();
    gl.render(scene, virtualCamera);
    if (hasBlur) blurpass.render(gl, fbo1, fbo2);
    gl.xr.enabled = currentXrEnabled;
    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;
    meshRef.current.visible = true;
    gl.setRenderTarget(null);
  });
  return React91.createElement("mesh", _extends({
    ref: react_merge_refs_esm_default([meshRef, ref])
  }, props), React91.createElement("planeGeometry", {
    args
  }), children ? children("meshReflectorMaterial", reflectorProps) : React91.createElement("meshReflectorMaterial", reflectorProps));
});

// node_modules/@react-three/drei/core/SpotLight.js
var React92 = __toESM(require_react());

// node_modules/@react-three/drei/materials/SpotLightMaterial.js
var SpotLightMaterial = class extends ShaderMaterial {
  constructor() {
    super({
      uniforms: {
        depth: {
          value: null
        },
        opacity: {
          value: 1
        },
        attenuation: {
          value: 2.5
        },
        anglePower: {
          value: 12
        },
        spotPosition: {
          value: new Vector3(0, 0, 0)
        },
        lightColor: {
          value: new Color("white")
        },
        cameraNear: {
          value: 0
        },
        cameraFar: {
          value: 1
        },
        resolution: {
          value: new Vector2(0, 0)
        }
      },
      transparent: true,
      depthWrite: false,
      vertexShader: (
        /* glsl */
        `
      varying vec3 vNormal;
      varying vec3 vWorldPosition;
      varying float vViewZ;
      varying float vIntensity;
      uniform vec3 spotPosition;
      uniform float attenuation;      

      void main() {
        // compute intensity
        vNormal = normalize( normalMatrix * normal );
        vec4 worldPosition	= modelMatrix * vec4( position, 1.0 );
        vWorldPosition = worldPosition.xyz;
        vec4 viewPosition = viewMatrix * worldPosition;
        vViewZ = viewPosition.z;
        float intensity	= distance(worldPosition.xyz, spotPosition) / attenuation;
        intensity	= 1.0 - clamp(intensity, 0.0, 1.0);
        vIntensity = intensity;        
        // set gl_Position
        gl_Position	= projectionMatrix * viewPosition;

      }`
      ),
      fragmentShader: (
        /* glsl */
        `
      #include <packing>

      varying vec3 vNormal;
      varying vec3 vWorldPosition;
      uniform vec3 lightColor;
      uniform vec3 spotPosition;
      uniform float attenuation;
      uniform float anglePower;
      uniform sampler2D depth;
      uniform vec2 resolution;
      uniform float cameraNear;
      uniform float cameraFar;
      varying float vViewZ;
      varying float vIntensity;
      uniform float opacity;

      float readDepth( sampler2D depthSampler, vec2 coord ) {
        float fragCoordZ = texture2D( depthSampler, coord ).x;
        float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);
        return viewZ;
      }

      void main() {
        float d = 1.0;
        bool isSoft = resolution[0] > 0.0 && resolution[1] > 0.0;
        if (isSoft) {
          vec2 sUv = gl_FragCoord.xy / resolution;
          d = readDepth(depth, sUv);
        }
        float intensity = vIntensity;
        vec3 normal	= vec3(vNormal.x, vNormal.y, abs(vNormal.z));
        float angleIntensity	= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );
        intensity	*= angleIntensity;
        // fades when z is close to sampled depth, meaning the cone is intersecting existing geometry
        if (isSoft) {
          intensity	*= smoothstep(0., 1., vViewZ - d);
        }
        gl_FragColor = vec4(lightColor, intensity * opacity);

        #include <tonemapping_fragment>
	      #include <encodings_fragment>
      }`
      )
    });
  }
};

// node_modules/@react-three/drei/helpers/glsl/DefaultSpotlightShadowShadows.glsl.js
var SpotlightShadowShader = "#define GLSLIFY 1\nvarying vec2 vUv;uniform sampler2D uShadowMap;uniform float uTime;void main(){vec3 color=texture2D(uShadowMap,vUv).xyz;gl_FragColor=vec4(color,1.);}";

// node_modules/@react-three/drei/core/SpotLight.js
var isSpotLight = (child) => {
  return child == null ? void 0 : child.isSpotLight;
};
function VolumetricMesh({
  opacity = 1,
  radiusTop,
  radiusBottom,
  depthBuffer,
  color = "white",
  distance: distance3 = 5,
  angle = 0.15,
  attenuation = 5,
  anglePower = 5
}) {
  const mesh = React92.useRef(null);
  const size = useThree((state) => state.size);
  const camera = useThree((state) => state.camera);
  const dpr = useThree((state) => state.viewport.dpr);
  const [material] = React92.useState(() => new SpotLightMaterial());
  const [vec] = React92.useState(() => new Vector3());
  radiusTop = radiusTop === void 0 ? 0.1 : radiusTop;
  radiusBottom = radiusBottom === void 0 ? angle * 7 : radiusBottom;
  useFrame(() => {
    material.uniforms.spotPosition.value.copy(mesh.current.getWorldPosition(vec));
    mesh.current.lookAt(mesh.current.parent.target.getWorldPosition(vec));
  });
  const geom = React92.useMemo(() => {
    const geometry2 = new CylinderGeometry(radiusTop, radiusBottom, distance3, 128, 64, true);
    geometry2.applyMatrix4(new Matrix4().makeTranslation(0, -distance3 / 2, 0));
    geometry2.applyMatrix4(new Matrix4().makeRotationX(-Math.PI / 2));
    return geometry2;
  }, [distance3, radiusTop, radiusBottom]);
  return React92.createElement(React92.Fragment, null, React92.createElement("mesh", {
    ref: mesh,
    geometry: geom,
    raycast: () => null
  }, React92.createElement("primitive", {
    object: material,
    attach: "material",
    "uniforms-opacity-value": opacity,
    "uniforms-lightColor-value": color,
    "uniforms-attenuation-value": attenuation,
    "uniforms-anglePower-value": anglePower,
    "uniforms-depth-value": depthBuffer,
    "uniforms-cameraNear-value": camera.near,
    "uniforms-cameraFar-value": camera.far,
    "uniforms-resolution-value": depthBuffer ? [size.width * dpr, size.height * dpr] : [0, 0]
  })));
}
function useCommon(spotlight, mesh, width, height, distance3) {
  const [[pos, dir]] = React92.useState(() => [new Vector3(), new Vector3()]);
  React92.useLayoutEffect(() => {
    if (isSpotLight(spotlight.current)) {
      spotlight.current.shadow.mapSize.set(width, height);
      spotlight.current.shadow.needsUpdate = true;
    } else {
      throw new Error("SpotlightShadow must be a child of a SpotLight");
    }
  }, [spotlight, width, height]);
  useFrame(() => {
    if (!spotlight.current) return;
    const A2 = spotlight.current.position;
    const B2 = spotlight.current.target.position;
    dir.copy(B2).sub(A2);
    var len = dir.length();
    dir.normalize().multiplyScalar(len * distance3);
    pos.copy(A2).add(dir);
    mesh.current.position.copy(pos);
    mesh.current.lookAt(spotlight.current.target.position);
  });
}
function SpotlightShadowWithShader({
  distance: distance3 = 0.4,
  alphaTest = 0.5,
  map: map2,
  shader = SpotlightShadowShader,
  width = 512,
  height = 512,
  scale: scale4 = 1,
  children,
  ...rest
}) {
  const mesh = React92.useRef(null);
  const spotlight = rest.spotlightRef;
  const debug = rest.debug;
  useCommon(spotlight, mesh, width, height, distance3);
  const renderTarget = React92.useMemo(() => new WebGLRenderTarget(width, height, {
    format: RGBAFormat,
    encoding: LinearEncoding,
    stencilBuffer: false
    // depthTexture: null!
  }), [width, height]);
  const uniforms = React92.useRef({
    uShadowMap: {
      value: map2
    },
    uTime: {
      value: 0
    }
  });
  React92.useEffect(() => void (uniforms.current.uShadowMap.value = map2), [map2]);
  const fsQuad = React92.useMemo(() => new FullScreenQuad(new ShaderMaterial({
    uniforms: uniforms.current,
    vertexShader: (
      /* glsl */
      `
          varying vec2 vUv;

          void main() {
            vUv = uv;
            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
          }
          `
    ),
    fragmentShader: shader
  })), [shader]);
  React92.useEffect(() => () => {
    fsQuad.material.dispose();
    fsQuad.dispose();
  }, [fsQuad]);
  React92.useEffect(() => () => renderTarget.dispose(), [renderTarget]);
  useFrame(({
    gl
  }, dt2) => {
    uniforms.current.uTime.value += dt2;
    gl.setRenderTarget(renderTarget);
    fsQuad.render(gl);
    gl.setRenderTarget(null);
  });
  return React92.createElement(React92.Fragment, null, React92.createElement("mesh", {
    ref: mesh,
    scale: scale4,
    castShadow: true
  }, React92.createElement("planeGeometry", null), React92.createElement("meshBasicMaterial", {
    transparent: true,
    side: DoubleSide,
    alphaTest,
    alphaMap: renderTarget.texture,
    "alphaMap-wrapS": RepeatWrapping,
    "alphaMap-wrapT": RepeatWrapping,
    opacity: debug ? 1 : 0
  }, children)));
}
function SpotlightShadowWithoutShader({
  distance: distance3 = 0.4,
  alphaTest = 0.5,
  map: map2,
  width = 512,
  height = 512,
  scale: scale4,
  children,
  ...rest
}) {
  const mesh = React92.useRef(null);
  const spotlight = rest.spotlightRef;
  const debug = rest.debug;
  useCommon(spotlight, mesh, width, height, distance3);
  return React92.createElement(React92.Fragment, null, React92.createElement("mesh", {
    ref: mesh,
    scale: scale4,
    castShadow: true
  }, React92.createElement("planeGeometry", null), React92.createElement("meshBasicMaterial", {
    transparent: true,
    side: DoubleSide,
    alphaTest,
    alphaMap: map2,
    "alphaMap-wrapS": RepeatWrapping,
    "alphaMap-wrapT": RepeatWrapping,
    opacity: debug ? 1 : 0
  }, children)));
}
function SpotLightShadow(props) {
  if (props.shader) return React92.createElement(SpotlightShadowWithShader, props);
  return React92.createElement(SpotlightShadowWithoutShader, props);
}
var SpotLight = React92.forwardRef(({
  // Volumetric
  opacity = 1,
  radiusTop,
  radiusBottom,
  depthBuffer,
  color = "white",
  distance: distance3 = 5,
  angle = 0.15,
  attenuation = 5,
  anglePower = 5,
  volumetric = true,
  debug = false,
  children,
  ...props
}, ref) => {
  const spotlight = React92.useRef(null);
  return React92.createElement("group", null, debug && spotlight.current && React92.createElement("spotLightHelper", {
    args: [spotlight.current]
  }), React92.createElement("spotLight", _extends({
    ref: react_merge_refs_esm_default([ref, spotlight]),
    angle,
    color,
    distance: distance3,
    castShadow: true
  }, props), volumetric && React92.createElement(VolumetricMesh, {
    debug,
    opacity,
    radiusTop,
    radiusBottom,
    depthBuffer,
    color,
    distance: distance3,
    angle,
    attenuation,
    anglePower
  })), children && React92.cloneElement(children, {
    spotlightRef: spotlight,
    debug
  }));
});

// node_modules/@react-three/drei/core/Lightformer.js
var React93 = __toESM(require_react());
var Lightformer = React93.forwardRef(({
  args,
  map: map2,
  toneMapped = false,
  color = "white",
  form: Form = "rect",
  intensity = 1,
  scale: scale4 = 1,
  target: target2,
  children,
  ...props
}, forwardRef70) => {
  const ref = React93.useRef(null);
  React93.useLayoutEffect(() => {
    if (!children && !props.material) {
      applyProps(ref.current.material, {
        color
      });
      ref.current.material.color.multiplyScalar(intensity);
    }
  }, [color, intensity, children, props.material]);
  React93.useLayoutEffect(() => {
    if (target2) ref.current.lookAt(Array.isArray(target2) ? new Vector3(...target2) : target2);
  }, [target2]);
  scale4 = Array.isArray(scale4) && scale4.length === 2 ? [scale4[0], scale4[1], 1] : scale4;
  return React93.createElement("mesh", _extends({
    ref: react_merge_refs_esm_default([ref, forwardRef70]),
    scale: scale4
  }, props), Form === "circle" ? React93.createElement("ringGeometry", {
    args: [0, 1, 64]
  }) : Form === "ring" ? React93.createElement("ringGeometry", {
    args: [0.5, 1, 64]
  }) : Form === "rect" ? React93.createElement("planeGeometry", null) : React93.createElement(Form, {
    args
  }), children ? children : !props.material ? React93.createElement("meshBasicMaterial", {
    toneMapped,
    map: map2,
    side: DoubleSide
  }) : null);
});

// node_modules/@react-three/drei/core/Sky.js
var React94 = __toESM(require_react());
function calcPosFromAngles(inclination, azimuth, vector = new Vector3()) {
  const theta = Math.PI * (inclination - 0.5);
  const phi = 2 * Math.PI * (azimuth - 0.5);
  vector.x = Math.cos(phi);
  vector.y = Math.sin(theta);
  vector.z = Math.sin(phi);
  return vector;
}
var Sky2 = React94.forwardRef(({
  inclination = 0.6,
  azimuth = 0.1,
  distance: distance3 = 1e3,
  mieCoefficient = 5e-3,
  mieDirectionalG = 0.8,
  rayleigh = 0.5,
  turbidity = 10,
  sunPosition = calcPosFromAngles(inclination, azimuth),
  ...props
}, ref) => {
  const scale4 = React94.useMemo(() => new Vector3().setScalar(distance3), [distance3]);
  const [sky] = React94.useState(() => new Sky());
  return React94.createElement("primitive", _extends({
    object: sky,
    ref,
    "material-uniforms-mieCoefficient-value": mieCoefficient,
    "material-uniforms-mieDirectionalG-value": mieDirectionalG,
    "material-uniforms-rayleigh-value": rayleigh,
    "material-uniforms-sunPosition-value": sunPosition,
    "material-uniforms-turbidity-value": turbidity,
    scale: scale4
  }, props));
});

// node_modules/@react-three/drei/core/Stars.js
var React95 = __toESM(require_react());
var StarfieldMaterial = class extends ShaderMaterial {
  constructor() {
    super({
      uniforms: {
        time: {
          value: 0
        },
        fade: {
          value: 1
        }
      },
      vertexShader: (
        /* glsl */
        `
      uniform float time;
      attribute float size;
      varying vec3 vColor;
      void main() {
        vColor = color;
        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);
        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(time + 100.0));
        gl_Position = projectionMatrix * mvPosition;
      }`
      ),
      fragmentShader: (
        /* glsl */
        `
      uniform sampler2D pointTexture;
      uniform float fade;
      varying vec3 vColor;
      void main() {
        float opacity = 1.0;
        if (fade == 1.0) {
          float d = distance(gl_PointCoord, vec2(0.5, 0.5));
          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));
        }
        gl_FragColor = vec4(vColor, opacity);

        #include <tonemapping_fragment>
	      #include <encodings_fragment>
      }`
      )
    });
  }
};
var genStar = (r3) => {
  return new Vector3().setFromSpherical(new Spherical(r3, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));
};
var Stars = React95.forwardRef(({
  radius = 100,
  depth = 50,
  count = 5e3,
  saturation = 0,
  factor = 4,
  fade: fade2 = false,
  speed = 1
}, ref) => {
  const material = React95.useRef();
  const [position2, color, size] = React95.useMemo(() => {
    const positions = [];
    const colors2 = [];
    const sizes = Array.from({
      length: count
    }, () => (0.5 + 0.5 * Math.random()) * factor);
    const color2 = new Color();
    let r3 = radius + depth;
    const increment = depth / count;
    for (let i4 = 0; i4 < count; i4++) {
      r3 -= increment * Math.random();
      positions.push(...genStar(r3).toArray());
      color2.setHSL(i4 / count, saturation, 0.9);
      colors2.push(color2.r, color2.g, color2.b);
    }
    return [new Float32Array(positions), new Float32Array(colors2), new Float32Array(sizes)];
  }, [count, depth, factor, radius, saturation]);
  useFrame((state) => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));
  const [starfieldMaterial] = React95.useState(() => new StarfieldMaterial());
  return React95.createElement("points", {
    ref
  }, React95.createElement("bufferGeometry", null, React95.createElement("bufferAttribute", {
    attach: "attributes-position",
    args: [position2, 3]
  }), React95.createElement("bufferAttribute", {
    attach: "attributes-color",
    args: [color, 3]
  }), React95.createElement("bufferAttribute", {
    attach: "attributes-size",
    args: [size, 1]
  })), React95.createElement("primitive", {
    ref: material,
    object: starfieldMaterial,
    attach: "material",
    blending: AdditiveBlending,
    "uniforms-fade-value": fade2,
    depthWrite: false,
    transparent: true,
    vertexColors: true
  }));
});

// node_modules/@react-three/drei/core/Cloud.js
var React96 = __toESM(require_react());
var CLOUD_URL = "https://rawcdn.githack.com/pmndrs/drei-assets/9225a9f1fbd449d9411125c2f419b843d0308c9f/cloud.png";
function Cloud({
  opacity = 0.5,
  speed = 0.4,
  width = 10,
  depth = 1.5,
  segments = 20,
  texture = CLOUD_URL,
  color = "#ffffff",
  depthTest = true,
  ...props
}) {
  const group = React96.useRef();
  const cloudTexture = useTexture(texture);
  const clouds = React96.useMemo(() => [...new Array(segments)].map((_2, index2) => ({
    x: width / 2 - Math.random() * width,
    y: width / 2 - Math.random() * width,
    scale: 0.4 + Math.sin((index2 + 1) / segments * Math.PI) * ((0.2 + Math.random()) * 10),
    density: Math.max(0.2, Math.random()),
    rotation: Math.max(2e-3, 5e-3 * Math.random()) * speed
  })), [width, segments, speed]);
  useFrame((state) => {
    var _group$current;
    return (_group$current = group.current) == null ? void 0 : _group$current.children.forEach((cloud, index2) => {
      cloud.children[0].rotation.z += clouds[index2].rotation;
      cloud.children[0].scale.setScalar(clouds[index2].scale + (1 + Math.sin(state.clock.getElapsedTime() / 10)) / 2 * index2 / 10);
    });
  });
  return React96.createElement("group", props, React96.createElement("group", {
    position: [0, 0, segments / 2 * depth],
    ref: group
  }, clouds.map(({
    x: x2,
    y: y2,
    scale: scale4,
    density
  }, index2) => React96.createElement(Billboard, {
    key: index2,
    position: [x2, y2, -index2 * depth]
  }, React96.createElement(Plane2, {
    scale: scale4,
    rotation: [0, 0, 0]
  }, React96.createElement("meshStandardMaterial", {
    map: cloudTexture,
    transparent: true,
    opacity: scale4 / 6 * density * opacity,
    depthTest,
    color
  }))))));
}

// node_modules/@react-three/drei/core/Sparkles.js
var React97 = __toESM(require_react());
var SparklesImplMaterial = shaderMaterial({
  time: 0,
  pixelRatio: 1
}, ` uniform float pixelRatio;
    uniform float time;
    attribute float size;  
    attribute float speed;  
    attribute float opacity;
    attribute vec3 noise;
    attribute vec3 color;
    varying vec3 vColor;
    varying float vOpacity;
    void main() {
      vec4 modelPosition = modelMatrix * vec4(position, 1.0);
      modelPosition.y += sin(time * speed + modelPosition.x * noise.x * 100.0) * 0.2;
      modelPosition.z += cos(time * speed + modelPosition.x * noise.y * 100.0) * 0.2;
      modelPosition.x += cos(time * speed + modelPosition.x * noise.z * 100.0) * 0.2;
      vec4 viewPosition = viewMatrix * modelPosition;
      vec4 projectionPostion = projectionMatrix * viewPosition;
      gl_Position = projectionPostion;
      gl_PointSize = size * 25. * pixelRatio;
      gl_PointSize *= (1.0 / - viewPosition.z);
      vColor = color;
      vOpacity = opacity;
    }`, ` varying vec3 vColor;
    varying float vOpacity;
    void main() {
      float distanceToCenter = distance(gl_PointCoord, vec2(0.5));
      float strength = 0.05 / distanceToCenter - 0.1;
      gl_FragColor = vec4(vColor, strength * vOpacity);
      #include <tonemapping_fragment>
      #include <encodings_fragment>
    }`);
var isFloat32Array = (def) => def && def.constructor === Float32Array;
var expandColor = (v5) => [v5.r, v5.g, v5.b];
var isVector = (v5) => v5 instanceof Vector2 || v5 instanceof Vector3 || v5 instanceof Vector4;
var normalizeVector = (v5) => {
  if (Array.isArray(v5)) return v5;
  else if (isVector(v5)) return v5.toArray();
  return [v5, v5, v5];
};
function usePropAsIsOrAsAttribute(count, prop, setDefault) {
  return React97.useMemo(() => {
    if (prop !== void 0) {
      if (isFloat32Array(prop)) {
        return prop;
      } else {
        if (prop instanceof Color) {
          const a6 = Array.from({
            length: count * 3
          }, () => expandColor(prop)).flat();
          return Float32Array.from(a6);
        } else if (isVector(prop) || Array.isArray(prop)) {
          const a6 = Array.from({
            length: count * 3
          }, () => normalizeVector(prop)).flat();
          return Float32Array.from(a6);
        }
        return Float32Array.from({
          length: count
        }, () => prop);
      }
    }
    return Float32Array.from({
      length: count
    }, setDefault);
  }, [prop]);
}
var Sparkles = React97.forwardRef(({
  noise: noise2 = 1,
  count = 100,
  speed = 1,
  opacity = 1,
  scale: scale4 = 1,
  size,
  color,
  children,
  ...props
}, forwardRef70) => {
  React97.useMemo(() => extend({
    SparklesImplMaterial
  }), []);
  const ref = React97.useRef(null);
  const dpr = useThree((state) => state.viewport.dpr);
  const positions = React97.useMemo(() => Float32Array.from(Array.from({
    length: count
  }, () => normalizeVector(scale4).map(MathUtils.randFloatSpread)).flat()), [count, scale4]);
  const sizes = usePropAsIsOrAsAttribute(count, size, Math.random);
  const opacities = usePropAsIsOrAsAttribute(count, opacity);
  const speeds = usePropAsIsOrAsAttribute(count, speed);
  const noises = usePropAsIsOrAsAttribute(count * 3, noise2);
  const colors2 = usePropAsIsOrAsAttribute(color === void 0 ? count * 3 : count, !isFloat32Array(color) ? new Color(color) : color, () => 1);
  useFrame((state) => {
    if (ref.current && ref.current.material) ref.current.material.time = state.clock.elapsedTime;
  });
  React97.useImperativeHandle(forwardRef70, () => ref.current, []);
  return React97.createElement("points", _extends({
    key: `particle-${count}-${JSON.stringify(scale4)}`
  }, props, {
    ref
  }), React97.createElement("bufferGeometry", null, React97.createElement("bufferAttribute", {
    attach: "attributes-position",
    args: [positions, 3]
  }), React97.createElement("bufferAttribute", {
    attach: "attributes-size",
    args: [sizes, 1]
  }), React97.createElement("bufferAttribute", {
    attach: "attributes-opacity",
    args: [opacities, 1]
  }), React97.createElement("bufferAttribute", {
    attach: "attributes-speed",
    args: [speeds, 1]
  }), React97.createElement("bufferAttribute", {
    attach: "attributes-color",
    args: [colors2, 3]
  }), React97.createElement("bufferAttribute", {
    attach: "attributes-noise",
    args: [noises, 3]
  })), children ? children : React97.createElement("sparklesImplMaterial", {
    transparent: true,
    pixelRatio: dpr,
    depthWrite: false
  }));
});

// node_modules/@react-three/drei/core/useMatcapTexture.js
var React98 = __toESM(require_react());
function getFormatString(format) {
  switch (format) {
    case 64:
      return "-64px";
    case 128:
      return "-128px";
    case 256:
      return "-256px";
    case 512:
      return "-512px";
    default:
      return "";
  }
}
var LIST_URL = "https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master/matcaps.json";
var MATCAP_ROOT = "https://rawcdn.githack.com/emmelleppi/matcaps/9b36ccaaf0a24881a39062d05566c9e92be4aa0d";
function useMatcapTexture(id = 0, format = 1024, onLoad) {
  const matcapList = suspend(() => fetch(LIST_URL).then((res) => res.json()), ["matcapList"]);
  const DEFAULT_MATCAP = matcapList[0];
  const numTot = React98.useMemo(() => Object.keys(matcapList).length, []);
  const fileHash = React98.useMemo(() => {
    if (typeof id === "string") {
      return id;
    } else if (typeof id === "number") {
      return matcapList[id];
    }
    return null;
  }, [id]);
  const fileName = `${fileHash || DEFAULT_MATCAP}${getFormatString(format)}.png`;
  const url = `${MATCAP_ROOT}/${format}/${fileName}`;
  const matcapTexture = useTexture(url, onLoad);
  return [matcapTexture, url, numTot];
}

// node_modules/@react-three/drei/core/useNormalTexture.js
var React99 = __toESM(require_react());
var NORMAL_ROOT = "https://rawcdn.githack.com/pmndrs/drei-assets/7a3104997e1576f83472829815b00880d88b32fb";
var LIST_URL2 = "https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master/normals/normals.json";
function useNormalTexture(id = 0, settings = {}, onLoad) {
  const {
    repeat: repeat2 = [1, 1],
    anisotropy = 1,
    offset = [0, 0]
  } = settings;
  const normalsList = suspend(() => fetch(LIST_URL2).then((res) => res.json()), ["normalsList"]);
  const numTot = React99.useMemo(() => Object.keys(normalsList).length, []);
  const DEFAULT_NORMAL = normalsList[0];
  const imageName = normalsList[id] || DEFAULT_NORMAL;
  const url = `${NORMAL_ROOT}/normals/${imageName}`;
  const normalTexture = useTexture(url, onLoad);
  React99.useLayoutEffect(() => {
    if (!normalTexture) return;
    normalTexture.wrapS = normalTexture.wrapT = RepeatWrapping;
    normalTexture.repeat = new Vector2(repeat2[0], repeat2[1]);
    normalTexture.offset = new Vector2(offset[0], offset[1]);
    normalTexture.anisotropy = anisotropy;
  }, [normalTexture, anisotropy, repeat2, offset]);
  return [normalTexture, url, numTot];
}

// node_modules/@react-three/drei/core/Wireframe.js
var React101 = __toESM(require_react());

// node_modules/@react-three/drei/materials/WireframeMaterial.js
var React100 = __toESM(require_react());
var WireframeMaterialShaders = {
  uniforms: {
    strokeOpacity: 1,
    fillOpacity: 0.25,
    fillMix: 0,
    thickness: 0.05,
    colorBackfaces: false,
    dashInvert: true,
    dash: false,
    dashRepeats: 4,
    dashLength: 0.5,
    squeeze: false,
    squeezeMin: 0.2,
    squeezeMax: 1,
    stroke: new Color("#ff0000"),
    backfaceStroke: new Color("#0000ff"),
    fill: new Color("#00ff00")
  },
  vertex: (
    /* glsl */
    `
	  attribute vec3 barycentric;
	
		varying vec3 v_edges_Barycentric;
		varying vec3 v_edges_Position;

		void initWireframe() {
			v_edges_Barycentric = barycentric;
			v_edges_Position = position.xyz;
		}
	  `
  ),
  fragment: (
    /* glsl */
    `
		#ifndef PI
	  	#define PI 3.1415926535897932384626433832795
		#endif
  
	  varying vec3 v_edges_Barycentric;
	  varying vec3 v_edges_Position;
  
	  uniform float strokeOpacity;
	  uniform float fillOpacity;
	  uniform float fillMix;
	  uniform float thickness;
	  uniform bool colorBackfaces;
  
	  // Dash
	  uniform bool dashInvert;
	  uniform bool dash;
	  uniform bool dashOnly;
	  uniform float dashRepeats;
	  uniform float dashLength;
  
	  // Squeeze
	  uniform bool squeeze;
	  uniform float squeezeMin;
	  uniform float squeezeMax;
  
	  // Colors
	  uniform vec3 stroke;
	  uniform vec3 backfaceStroke;
	  uniform vec3 fill;
  
	  // This is like
	  float wireframe_aastep(float threshold, float dist) {
		  float afwidth = fwidth(dist) * 0.5;
		  return smoothstep(threshold - afwidth, threshold + afwidth, dist);
	  }
  
	  float wireframe_map(float value, float min1, float max1, float min2, float max2) {
		  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
	  }
  
	  float getWireframe() {
			vec3 barycentric = v_edges_Barycentric;
		
			// Distance from center of each triangle to its edges.
			float d = min(min(barycentric.x, barycentric.y), barycentric.z);

			// for dashed rendering, we can use this to get the 0 .. 1 value of the line length
			float positionAlong = max(barycentric.x, barycentric.y);
			if (barycentric.y < barycentric.x && barycentric.y < barycentric.z) {
				positionAlong = 1.0 - positionAlong;
			}

			// the thickness of the stroke
			float computedThickness = wireframe_map(thickness, 0.0, 1.0, 0.0, 0.34);

			// if we want to shrink the thickness toward the center of the line segment
			if (squeeze) {
				computedThickness *= mix(squeezeMin, squeezeMax, (1.0 - sin(positionAlong * PI)));
			}

			// Create dash pattern
			if (dash) {
				// here we offset the stroke position depending on whether it
				// should overlap or not
				float offset = 1.0 / dashRepeats * dashLength / 2.0;
				if (!dashInvert) {
					offset += 1.0 / dashRepeats / 2.0;
				}

				// if we should animate the dash or not
				// if (dashAnimate) {
				// 	offset += time * 0.22;
				// }

				// create the repeating dash pattern
				float pattern = fract((positionAlong + offset) * dashRepeats);
				computedThickness *= 1.0 - wireframe_aastep(dashLength, pattern);
			}

			// compute the anti-aliased stroke edge  
			float edge = 1.0 - wireframe_aastep(computedThickness, d);

			return edge;
	  }
	  `
  )
};
var WireframeMaterial = shaderMaterial(WireframeMaterialShaders.uniforms, WireframeMaterialShaders.vertex + /* glsl */
`
  	void main() {
		initWireframe();
		gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
	}
  `, WireframeMaterialShaders.fragment + /* glsl */
`
  void main () {
		// Compute color

		float edge = getWireframe();
		vec4 colorStroke = vec4(stroke, edge);

		#ifdef FLIP_SIDED
			colorStroke.rgb = backfaceStroke;
		#endif
    
		vec4 colorFill = vec4(fill, fillOpacity);
		vec4 outColor = mix(colorFill, colorStroke, edge * strokeOpacity);

		gl_FragColor = outColor;
	}
  `);
function setWireframeOverride(material, uniforms) {
  material.onBeforeCompile = (shader) => {
    shader.uniforms = {
      ...shader.uniforms,
      ...uniforms
    };
    shader.vertexShader = shader.vertexShader.replace("void main() {", `
		  ${WireframeMaterialShaders.vertex}
		  void main() {
			initWireframe();
		`);
    shader.fragmentShader = shader.fragmentShader.replace("void main() {", `
		  ${WireframeMaterialShaders.fragment}
		  void main() {
		`);
    shader.fragmentShader = shader.fragmentShader.replace(
      "#include <color_fragment>",
      /* glsl */
      `
		  #include <color_fragment>
			  float edge = getWireframe();
		  vec4 colorStroke = vec4(stroke, edge);
		  #ifdef FLIP_SIDED
			colorStroke.rgb = backfaceStroke;
		  #endif
		  vec4 colorFill = vec4(mix(diffuseColor.rgb, fill, fillMix), mix(diffuseColor.a, fillOpacity, fillMix));
		  vec4 outColor = mix(colorFill, colorStroke, edge * strokeOpacity);

		  diffuseColor.rgb = outColor.rgb;
		  diffuseColor.a *= outColor.a;
		`
    );
  };
  material.side = DoubleSide;
  material.transparent = true;
}
function useWireframeUniforms(uniforms, props) {
  React100.useEffect(() => {
    var _props$fillOpacity;
    return void (uniforms.fillOpacity.value = (_props$fillOpacity = props.fillOpacity) !== null && _props$fillOpacity !== void 0 ? _props$fillOpacity : uniforms.fillOpacity.value);
  }, [props.fillOpacity]);
  React100.useEffect(() => {
    var _props$fillMix;
    return void (uniforms.fillMix.value = (_props$fillMix = props.fillMix) !== null && _props$fillMix !== void 0 ? _props$fillMix : uniforms.fillMix.value);
  }, [props.fillMix]);
  React100.useEffect(() => {
    var _props$strokeOpacity;
    return void (uniforms.strokeOpacity.value = (_props$strokeOpacity = props.strokeOpacity) !== null && _props$strokeOpacity !== void 0 ? _props$strokeOpacity : uniforms.strokeOpacity.value);
  }, [props.strokeOpacity]);
  React100.useEffect(() => {
    var _props$thickness;
    return void (uniforms.thickness.value = (_props$thickness = props.thickness) !== null && _props$thickness !== void 0 ? _props$thickness : uniforms.thickness.value);
  }, [props.thickness]);
  React100.useEffect(() => void (uniforms.colorBackfaces.value = !!props.colorBackfaces), [props.colorBackfaces]);
  React100.useEffect(() => void (uniforms.dash.value = !!props.dash), [props.dash]);
  React100.useEffect(() => void (uniforms.dashInvert.value = !!props.dashInvert), [props.dashInvert]);
  React100.useEffect(() => {
    var _props$dashRepeats;
    return void (uniforms.dashRepeats.value = (_props$dashRepeats = props.dashRepeats) !== null && _props$dashRepeats !== void 0 ? _props$dashRepeats : uniforms.dashRepeats.value);
  }, [props.dashRepeats]);
  React100.useEffect(() => {
    var _props$dashLength;
    return void (uniforms.dashLength.value = (_props$dashLength = props.dashLength) !== null && _props$dashLength !== void 0 ? _props$dashLength : uniforms.dashLength.value);
  }, [props.dashLength]);
  React100.useEffect(() => void (uniforms.squeeze.value = !!props.squeeze), [props.squeeze]);
  React100.useEffect(() => {
    var _props$squeezeMin;
    return void (uniforms.squeezeMin.value = (_props$squeezeMin = props.squeezeMin) !== null && _props$squeezeMin !== void 0 ? _props$squeezeMin : uniforms.squeezeMin.value);
  }, [props.squeezeMin]);
  React100.useEffect(() => {
    var _props$squeezeMax;
    return void (uniforms.squeezeMax.value = (_props$squeezeMax = props.squeezeMax) !== null && _props$squeezeMax !== void 0 ? _props$squeezeMax : uniforms.squeezeMax.value);
  }, [props.squeezeMax]);
  React100.useEffect(() => void (uniforms.stroke.value = props.stroke ? new Color(props.stroke) : uniforms.stroke.value), [props.stroke]);
  React100.useEffect(() => void (uniforms.fill.value = props.fill ? new Color(props.fill) : uniforms.fill.value), [props.fill]);
  React100.useEffect(() => void (uniforms.backfaceStroke.value = props.backfaceStroke ? new Color(props.backfaceStroke) : uniforms.backfaceStroke.value), [props.backfaceStroke]);
}

// node_modules/@react-three/drei/core/Wireframe.js
extend({
  MeshWireframeMaterial: WireframeMaterial
});
function isWithGeometry(object) {
  return !!(object != null && object.geometry);
}
function isGeometry2(object) {
  return !!(object != null && object.isBufferGeometry);
}
function isRefObject2(object) {
  return !!(object != null && object.current);
}
function isRef2(object) {
  return (object == null ? void 0 : object.current) !== void 0;
}
function isWireframeGeometry(geometry2) {
  return geometry2.type === "WireframeGeometry";
}
function getUniforms() {
  const u2 = {};
  for (const key in WireframeMaterialShaders.uniforms) {
    u2[key] = {
      value: WireframeMaterialShaders.uniforms[key]
    };
  }
  return u2;
}
function getBarycentricCoordinates(geometry2, removeEdge) {
  const position2 = geometry2.getAttribute("position");
  const count = position2.count;
  const barycentric = [];
  for (let i4 = 0; i4 < count; i4++) {
    const even = i4 % 2 === 0;
    const Q2 = removeEdge ? 1 : 0;
    if (even) {
      barycentric.push(0, 0, 1, 0, 1, 0, 1, 0, Q2);
    } else {
      barycentric.push(0, 1, 0, 0, 0, 1, 1, 0, Q2);
    }
  }
  return new BufferAttribute(Float32Array.from(barycentric), 3);
}
function getInputGeometry(inputGeometry) {
  const geo = isRefObject2(inputGeometry) ? inputGeometry.current : inputGeometry;
  if (!isGeometry2(geo)) {
    if (isWireframeGeometry(geo)) {
      throw new Error("Wireframe: WireframeGeometry is not supported.");
    }
    const parent = geo.parent;
    if (isWithGeometry(parent)) {
      if (isWireframeGeometry(parent.geometry)) {
        throw new Error("Wireframe: WireframeGeometry is not supported.");
      }
      return parent.geometry;
    }
  } else {
    return geo;
  }
}
function setBarycentricCoordinates(geometry2, simplify) {
  if (geometry2.index) {
    console.warn("Wireframe: Requires non-indexed geometry, converting to non-indexed geometry.");
    const nonIndexedGeo = geometry2.toNonIndexed();
    geometry2.copy(nonIndexedGeo);
    geometry2.setIndex(null);
  }
  const newBarycentric = getBarycentricCoordinates(geometry2, simplify);
  geometry2.setAttribute("barycentric", newBarycentric);
}
function WireframeWithCustomGeo({
  geometry: customGeometry,
  simplify = false,
  ...props
}) {
  const [geometry2, setGeometry] = React101.useState(null);
  React101.useLayoutEffect(() => {
    const geom = getInputGeometry(customGeometry);
    if (!geom) {
      throw new Error("Wireframe: geometry prop must be a BufferGeometry or a ref to a BufferGeometry.");
    }
    setBarycentricCoordinates(geom, simplify);
    if (isRef2(customGeometry)) {
      setGeometry(geom);
    }
  }, [simplify, customGeometry]);
  const drawnGeo = isRef2(customGeometry) ? geometry2 : customGeometry;
  return React101.createElement(React101.Fragment, null, drawnGeo && React101.createElement("mesh", {
    geometry: drawnGeo
  }, React101.createElement("meshWireframeMaterial", _extends({
    attach: "material",
    transparent: true,
    side: DoubleSide,
    polygonOffset: true,
    polygonOffsetFactor: -4
  }, props, {
    extensions: {
      derivatives: true,
      fragDepth: false,
      drawBuffers: false,
      shaderTextureLOD: false
    }
  }))));
}
function WireframeWithoutCustomGeo({
  simplify = false,
  ...props
}) {
  const objectRef = React101.useRef(null);
  const uniforms = React101.useMemo(() => getUniforms(), [WireframeMaterialShaders.uniforms]);
  useWireframeUniforms(uniforms, props);
  React101.useLayoutEffect(() => {
    const geom = getInputGeometry(objectRef);
    if (!geom) {
      throw new Error("Wireframe: Must be a child of a Mesh, Line or Points object or specify a geometry prop.");
    }
    const og = geom.clone();
    setBarycentricCoordinates(geom, simplify);
    return () => {
      geom.copy(og);
      og.dispose();
    };
  }, [simplify]);
  React101.useLayoutEffect(() => {
    const parentMesh = objectRef.current.parent;
    const og = parentMesh.material.clone();
    setWireframeOverride(parentMesh.material, uniforms);
    return () => {
      parentMesh.material.dispose();
      parentMesh.material = og;
    };
  }, []);
  return React101.createElement("object3D", {
    ref: objectRef
  });
}
function Wireframe({
  geometry: customGeometry,
  ...props
}) {
  if (customGeometry) {
    return React101.createElement(WireframeWithCustomGeo, _extends({
      geometry: customGeometry
    }, props));
  }
  return React101.createElement(WireframeWithoutCustomGeo, props);
}

// node_modules/@react-three/drei/core/Points.js
var React102 = __toESM(require_react());
var _inverseMatrix = new Matrix4();
var _ray = new Ray();
var _sphere2 = new Sphere();
var _position = new Vector3();
var PositionPoint = class extends Group {
  constructor() {
    super();
    this.size = 0;
    this.color = new Color("white");
    this.instance = {
      current: void 0
    };
    this.instanceKey = {
      current: void 0
    };
  }
  // This will allow the virtual instance have bounds
  get geometry() {
    var _this$instance$curren;
    return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;
  }
  raycast(raycaster, intersects) {
    var _raycaster$params$Poi, _raycaster$params$Poi2;
    const parent = this.instance.current;
    if (!parent || !parent.geometry) return;
    const instanceId = parent.userData.instances.indexOf(this.instanceKey);
    if (instanceId === -1 || instanceId > parent.geometry.drawRange.count) return;
    const threshold = (_raycaster$params$Poi = (_raycaster$params$Poi2 = raycaster.params.Points) == null ? void 0 : _raycaster$params$Poi2.threshold) !== null && _raycaster$params$Poi !== void 0 ? _raycaster$params$Poi : 1;
    _sphere2.set(this.getWorldPosition(_position), threshold);
    if (raycaster.ray.intersectsSphere(_sphere2) === false) return;
    _inverseMatrix.copy(parent.matrixWorld).invert();
    _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const localThresholdSq = localThreshold * localThreshold;
    const rayPointDistanceSq = _ray.distanceSqToPoint(this.position);
    if (rayPointDistanceSq < localThresholdSq) {
      const intersectPoint = new Vector3();
      _ray.closestPointToPoint(this.position, intersectPoint);
      intersectPoint.applyMatrix4(this.matrixWorld);
      const distance3 = raycaster.ray.origin.distanceTo(intersectPoint);
      if (distance3 < raycaster.near || distance3 > raycaster.far) return;
      intersects.push({
        distance: distance3,
        distanceToRay: Math.sqrt(rayPointDistanceSq),
        point: intersectPoint,
        index: instanceId,
        face: null,
        object: this
      });
    }
  }
};
var i3;
var positionRef;
var context6 = React102.createContext(null);
var parentMatrix = new Matrix4();
var position = new Vector3();
var PointsInstances = React102.forwardRef(({
  children,
  range,
  limit = 1e3,
  ...props
}, ref) => {
  const parentRef = React102.useRef(null);
  const [refs, setRefs] = React102.useState([]);
  const [[positions, colors2, sizes]] = React102.useState(() => [new Float32Array(limit * 3), Float32Array.from({
    length: limit * 3
  }, () => 1), Float32Array.from({
    length: limit
  }, () => 1)]);
  React102.useEffect(() => {
    parentRef.current.geometry.attributes.position.needsUpdate = true;
  });
  useFrame(() => {
    parentRef.current.updateMatrix();
    parentRef.current.updateMatrixWorld();
    parentMatrix.copy(parentRef.current.matrixWorld).invert();
    parentRef.current.geometry.drawRange.count = Math.min(limit, range !== void 0 ? range : limit, refs.length);
    for (i3 = 0; i3 < refs.length; i3++) {
      positionRef = refs[i3].current;
      positionRef.getWorldPosition(position).applyMatrix4(parentMatrix);
      position.toArray(positions, i3 * 3);
      parentRef.current.geometry.attributes.position.needsUpdate = true;
      positionRef.matrixWorldNeedsUpdate = true;
      positionRef.color.toArray(colors2, i3 * 3);
      parentRef.current.geometry.attributes.color.needsUpdate = true;
      sizes.set([positionRef.size], i3);
      parentRef.current.geometry.attributes.size.needsUpdate = true;
    }
  });
  const api = React102.useMemo(() => ({
    getParent: () => parentRef,
    subscribe: (ref2) => {
      setRefs((refs2) => [...refs2, ref2]);
      return () => setRefs((refs2) => refs2.filter((item) => item.current !== ref2.current));
    }
  }), []);
  return React102.createElement("points", _extends({
    userData: {
      instances: refs
    },
    matrixAutoUpdate: false,
    ref: react_merge_refs_esm_default([ref, parentRef]),
    raycast: () => null
  }, props), React102.createElement("bufferGeometry", null, React102.createElement("bufferAttribute", {
    attach: "attributes-position",
    count: positions.length / 3,
    array: positions,
    itemSize: 3,
    usage: DynamicDrawUsage
  }), React102.createElement("bufferAttribute", {
    attach: "attributes-color",
    count: colors2.length / 3,
    array: colors2,
    itemSize: 3,
    usage: DynamicDrawUsage
  }), React102.createElement("bufferAttribute", {
    attach: "attributes-size",
    count: sizes.length,
    array: sizes,
    itemSize: 1,
    usage: DynamicDrawUsage
  })), React102.createElement(context6.Provider, {
    value: api
  }, children));
});
var Point = React102.forwardRef(({
  children,
  ...props
}, ref) => {
  React102.useMemo(() => extend({
    PositionPoint
  }), []);
  const group = React102.useRef();
  const {
    subscribe,
    getParent
  } = React102.useContext(context6);
  React102.useLayoutEffect(() => subscribe(group), []);
  return React102.createElement("positionPoint", _extends({
    instance: getParent(),
    instanceKey: group,
    ref: react_merge_refs_esm_default([ref, group])
  }, props), children);
});
var PointsBuffer = React102.forwardRef(({
  children,
  positions,
  colors: colors2,
  sizes,
  stride = 3,
  ...props
}, forwardedRef) => {
  const pointsRef = React102.useRef(null);
  useFrame(() => {
    const attr = pointsRef.current.geometry.attributes;
    attr.position.needsUpdate = true;
    if (colors2) attr.color.needsUpdate = true;
    if (sizes) attr.size.needsUpdate = true;
  });
  return React102.createElement("points", _extends({
    ref: react_merge_refs_esm_default([forwardedRef, pointsRef])
  }, props), React102.createElement("bufferGeometry", null, React102.createElement("bufferAttribute", {
    attach: "attributes-position",
    count: positions.length / stride,
    array: positions,
    itemSize: stride,
    usage: DynamicDrawUsage
  }), colors2 && React102.createElement("bufferAttribute", {
    attach: "attributes-color",
    count: colors2.length / stride,
    array: colors2,
    itemSize: 3,
    usage: DynamicDrawUsage
  }), sizes && React102.createElement("bufferAttribute", {
    attach: "attributes-size",
    count: sizes.length / stride,
    array: sizes,
    itemSize: 1,
    usage: DynamicDrawUsage
  })), children);
});
var Points = React102.forwardRef((props, forwardedRef) => {
  if (props.positions instanceof Float32Array) {
    return React102.createElement(PointsBuffer, _extends({}, props, {
      ref: forwardedRef
    }));
  } else return React102.createElement(PointsInstances, _extends({}, props, {
    ref: forwardedRef
  }));
});

// node_modules/@react-three/drei/core/Instances.js
var React103 = __toESM(require_react());

// node_modules/react-composer/es/index.js
var import_react14 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
function Composer(props) {
  return renderRecursive(props.children, props.components);
}
Composer.propTypes = {
  children: import_prop_types.default.func.isRequired,
  components: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.element, import_prop_types.default.func])).isRequired
};
function renderRecursive(render, remaining, results) {
  results = results || [];
  if (!remaining[0]) {
    return render(results);
  }
  function nextRender(value) {
    return renderRecursive(render, remaining.slice(1), results.concat([value]));
  }
  return typeof remaining[0] === "function" ? (
    // When it is a function, produce an element by invoking it with "render component values".
    remaining[0]({ results, render: nextRender })
  ) : (
    // When it is an element, enhance the element's props with the render prop.
    (0, import_react14.cloneElement)(remaining[0], { children: nextRender })
  );
}

// node_modules/@react-three/drei/core/Instances.js
var _instanceLocalMatrix = new Matrix4();
var _instanceWorldMatrix = new Matrix4();
var _instanceIntersects = [];
var _mesh = new Mesh();
var PositionMesh = class extends Group {
  constructor() {
    super();
    this.color = new Color("white");
    this.instance = {
      current: void 0
    };
    this.instanceKey = {
      current: void 0
    };
  }
  // This will allow the virtual instance have bounds
  get geometry() {
    var _this$instance$curren;
    return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;
  }
  // And this will allow the virtual instance to receive events
  raycast(raycaster, intersects) {
    const parent = this.instance.current;
    if (!parent) return;
    if (!parent.geometry || !parent.material) return;
    _mesh.geometry = parent.geometry;
    const matrixWorld = parent.matrixWorld;
    const instanceId = parent.userData.instances.indexOf(this.instanceKey);
    if (instanceId === -1 || instanceId > parent.count) return;
    parent.getMatrixAt(instanceId, _instanceLocalMatrix);
    _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
    _mesh.matrixWorld = _instanceWorldMatrix;
    if (parent.material instanceof Material) _mesh.material.side = parent.material.side;
    else _mesh.material.side = parent.material[0].side;
    _mesh.raycast(raycaster, _instanceIntersects);
    for (let i4 = 0, l3 = _instanceIntersects.length; i4 < l3; i4++) {
      const intersect = _instanceIntersects[i4];
      intersect.instanceId = instanceId;
      intersect.object = this;
      intersects.push(intersect);
    }
    _instanceIntersects.length = 0;
  }
};
var globalContext2 = React103.createContext(null);
var parentMatrix2 = new Matrix4();
var instanceMatrix = new Matrix4();
var tempMatrix2 = new Matrix4();
var translation = new Vector3();
var rotation = new Quaternion();
var scale3 = new Vector3();
var Instance = React103.forwardRef(({
  context: context10,
  children,
  ...props
}, ref) => {
  React103.useMemo(() => extend({
    PositionMesh
  }), []);
  const group = React103.useRef();
  const {
    subscribe,
    getParent
  } = React103.useContext(context10 || globalContext2);
  React103.useLayoutEffect(() => subscribe(group), []);
  return React103.createElement("positionMesh", _extends({
    instance: getParent(),
    instanceKey: group,
    ref: react_merge_refs_esm_default([ref, group])
  }, props), children);
});
var Instances = React103.forwardRef(({
  children,
  range,
  limit = 1e3,
  frames = Infinity,
  ...props
}, ref) => {
  const [{
    context: context10,
    instance
  }] = React103.useState(() => {
    const context11 = React103.createContext(null);
    return {
      context: context11,
      instance: React103.forwardRef((props2, ref2) => React103.createElement(Instance, _extends({
        context: context11
      }, props2, {
        ref: ref2
      })))
    };
  });
  const parentRef = React103.useRef(null);
  const [instances, setInstances] = React103.useState([]);
  const [[matrices, colors2]] = React103.useState(() => {
    const mArray = new Float32Array(limit * 16);
    for (let i4 = 0; i4 < limit; i4++) tempMatrix2.identity().toArray(mArray, i4 * 16);
    return [mArray, new Float32Array([...new Array(limit * 3)].map(() => 1))];
  });
  React103.useEffect(() => {
    parentRef.current.instanceMatrix.needsUpdate = true;
  });
  let count = 0;
  let updateRange = 0;
  useFrame(() => {
    if (frames === Infinity || count < frames) {
      parentRef.current.updateMatrix();
      parentRef.current.updateMatrixWorld();
      parentMatrix2.copy(parentRef.current.matrixWorld).invert();
      updateRange = Math.min(limit, range !== void 0 ? range : limit, instances.length);
      parentRef.current.count = updateRange;
      parentRef.current.instanceMatrix.updateRange.count = updateRange * 16;
      parentRef.current.instanceColor.updateRange.count = updateRange * 3;
      for (let i4 = 0; i4 < instances.length; i4++) {
        const instance2 = instances[i4].current;
        instance2.matrixWorld.decompose(translation, rotation, scale3);
        instanceMatrix.compose(translation, rotation, scale3).premultiply(parentMatrix2);
        instanceMatrix.toArray(matrices, i4 * 16);
        parentRef.current.instanceMatrix.needsUpdate = true;
        instance2.color.toArray(colors2, i4 * 3);
        parentRef.current.instanceColor.needsUpdate = true;
      }
      count++;
    }
  });
  const api = React103.useMemo(() => ({
    getParent: () => parentRef,
    subscribe: (ref2) => {
      setInstances((instances2) => [...instances2, ref2]);
      return () => setInstances((instances2) => instances2.filter((item) => item.current !== ref2.current));
    }
  }), []);
  return React103.createElement("instancedMesh", _extends({
    userData: {
      instances
    },
    matrixAutoUpdate: false,
    ref: react_merge_refs_esm_default([ref, parentRef]),
    args: [null, null, 0],
    raycast: () => null
  }, props), React103.createElement("instancedBufferAttribute", {
    attach: "instanceMatrix",
    count: matrices.length / 16,
    array: matrices,
    itemSize: 16,
    usage: DynamicDrawUsage
  }), React103.createElement("instancedBufferAttribute", {
    attach: "instanceColor",
    count: colors2.length / 3,
    array: colors2,
    itemSize: 3,
    usage: DynamicDrawUsage
  }), typeof children === "function" ? React103.createElement(context10.Provider, {
    value: api
  }, children(instance)) : React103.createElement(globalContext2.Provider, {
    value: api
  }, children));
});
var Merged = React103.forwardRef(function Merged2({
  meshes,
  children,
  ...props
}, ref) {
  const isArray3 = Array.isArray(meshes);
  if (!isArray3) {
    for (const key of Object.keys(meshes)) if (!meshes[key].isMesh) delete meshes[key];
  }
  return React103.createElement("group", {
    ref
  }, React103.createElement(Composer, {
    components: (isArray3 ? meshes : Object.values(meshes)).map(({
      geometry: geometry2,
      material
    }) => React103.createElement(Instances, _extends({
      key: geometry2.uuid,
      geometry: geometry2,
      material
    }, props)))
  }, (args) => isArray3 ? children(...args) : children(Object.keys(meshes).filter((key) => meshes[key].isMesh).reduce((acc, key, i4) => ({
    ...acc,
    [key]: args[i4]
  }), {}))));
});

// node_modules/@react-three/drei/core/Segments.js
var React104 = __toESM(require_react());
var context7 = React104.createContext(null);
var Segments = React104.forwardRef((props, forwardedRef) => {
  React104.useMemo(() => extend({
    SegmentObject
  }), []);
  const {
    limit = 1e3,
    lineWidth = 1,
    children,
    ...rest
  } = props;
  const [segments, setSegments] = React104.useState([]);
  const [line] = React104.useState(() => new Line2());
  const [material] = React104.useState(() => new LineMaterial());
  const [geometry2] = React104.useState(() => new LineSegmentsGeometry());
  const [resolution] = React104.useState(() => new Vector2(512, 512));
  const [positions] = React104.useState(() => Array(limit * 6).fill(0));
  const [colors2] = React104.useState(() => Array(limit * 6).fill(0));
  const api = React104.useMemo(() => ({
    subscribe: (ref) => {
      setSegments((segments2) => [...segments2, ref]);
      return () => setSegments((segments2) => segments2.filter((item) => item.current !== ref.current));
    }
  }), []);
  useFrame(() => {
    for (let i4 = 0; i4 < limit; i4++) {
      var _segments$i;
      const segment = (_segments$i = segments[i4]) == null ? void 0 : _segments$i.current;
      if (segment) {
        positions[i4 * 6 + 0] = segment.start.x;
        positions[i4 * 6 + 1] = segment.start.y;
        positions[i4 * 6 + 2] = segment.start.z;
        positions[i4 * 6 + 3] = segment.end.x;
        positions[i4 * 6 + 4] = segment.end.y;
        positions[i4 * 6 + 5] = segment.end.z;
        colors2[i4 * 6 + 0] = segment.color.r;
        colors2[i4 * 6 + 1] = segment.color.g;
        colors2[i4 * 6 + 2] = segment.color.b;
        colors2[i4 * 6 + 3] = segment.color.r;
        colors2[i4 * 6 + 4] = segment.color.g;
        colors2[i4 * 6 + 5] = segment.color.b;
      }
    }
    geometry2.setColors(colors2);
    geometry2.setPositions(positions);
    line.computeLineDistances();
  });
  return React104.createElement("primitive", {
    object: line,
    ref: forwardedRef
  }, React104.createElement("primitive", {
    object: geometry2,
    attach: "geometry"
  }), React104.createElement("primitive", _extends({
    object: material,
    attach: "material",
    vertexColors: true,
    resolution,
    linewidth: lineWidth
  }, rest)), React104.createElement(context7.Provider, {
    value: api
  }, children));
});
var SegmentObject = class {
  constructor() {
    this.color = new Color("white");
    this.start = new Vector3(0, 0, 0);
    this.end = new Vector3(0, 0, 0);
  }
};
var normPos = (pos) => pos instanceof Vector3 ? pos : new Vector3(...typeof pos === "number" ? [pos, pos, pos] : pos);
var Segment = React104.forwardRef(({
  color,
  start,
  end
}, forwardedRef) => {
  const api = React104.useContext(context7);
  if (!api) throw "Segment must used inside Segments component.";
  const ref = React104.useRef(null);
  React104.useLayoutEffect(() => api.subscribe(ref), []);
  return React104.createElement("segmentObject", {
    ref: react_merge_refs_esm_default([ref, forwardedRef]),
    color,
    start: normPos(start),
    end: normPos(end)
  });
});

// node_modules/@react-three/drei/core/Detailed.js
var React105 = __toESM(require_react());
var Detailed = React105.forwardRef(({
  children,
  hysteresis = 0,
  distances,
  ...props
}, ref) => {
  const lodRef = React105.useRef(null);
  React105.useLayoutEffect(() => {
    const {
      current: lod
    } = lodRef;
    lod.levels.length = 0;
    lod.children.forEach((object, index2) => lod.levels.push({
      object,
      hysteresis,
      distance: distances[index2]
    }));
  });
  useFrame((state) => {
    var _lodRef$current;
    return (_lodRef$current = lodRef.current) == null ? void 0 : _lodRef$current.update(state.camera);
  });
  return React105.createElement("lOD", _extends({
    ref: react_merge_refs_esm_default([lodRef, ref])
  }, props), children);
});

// node_modules/@react-three/drei/core/Preload.js
var React106 = __toESM(require_react());
function Preload({
  all,
  scene,
  camera
}) {
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const dCamera = useThree(({
    camera: camera2
  }) => camera2);
  const dScene = useThree(({
    scene: scene2
  }) => scene2);
  React106.useLayoutEffect(() => {
    const invisible = [];
    if (all) {
      (scene || dScene).traverse((object) => {
        if (object.visible === false) {
          invisible.push(object);
          object.visible = true;
        }
      });
    }
    gl.compile(scene || dScene, camera || dCamera);
    const cubeRenderTarget = new WebGLCubeRenderTarget(128);
    const cubeCamera = new CubeCamera(0.01, 1e5, cubeRenderTarget);
    cubeCamera.update(gl, scene || dScene);
    cubeRenderTarget.dispose();
    invisible.forEach((object) => object.visible = false);
  }, []);
  return null;
}

// node_modules/@react-three/drei/core/BakeShadows.js
var import_react15 = __toESM(require_react());
function BakeShadows() {
  const gl = useThree((state) => state.gl);
  (0, import_react15.useEffect)(() => {
    gl.shadowMap.autoUpdate = false;
    gl.shadowMap.needsUpdate = true;
    return () => {
      gl.shadowMap.autoUpdate = gl.shadowMap.needsUpdate = true;
    };
  }, [gl.shadowMap]);
  return null;
}

// node_modules/@react-three/drei/core/meshBounds.js
var _inverseMatrix2 = new Matrix4();
var _ray2 = new Ray();
var _sphere3 = new Sphere();
var _vA = new Vector3();
function meshBounds(raycaster, intersects) {
  const geometry2 = this.geometry;
  const material = this.material;
  const matrixWorld = this.matrixWorld;
  if (material === void 0) return;
  if (geometry2.boundingSphere === null) geometry2.computeBoundingSphere();
  _sphere3.copy(geometry2.boundingSphere);
  _sphere3.applyMatrix4(matrixWorld);
  if (raycaster.ray.intersectsSphere(_sphere3) === false) return;
  _inverseMatrix2.copy(matrixWorld).invert();
  _ray2.copy(raycaster.ray).applyMatrix4(_inverseMatrix2);
  if (geometry2.boundingBox !== null && _ray2.intersectBox(geometry2.boundingBox, _vA) === null) return;
  intersects.push({
    distance: _vA.distanceTo(raycaster.ray.origin),
    point: _vA.clone(),
    object: this
  });
}

// node_modules/@react-three/drei/core/AdaptiveDpr.js
var React107 = __toESM(require_react());
function AdaptiveDpr({
  pixelated
}) {
  const gl = useThree((state) => state.gl);
  const active = useThree((state) => state.internal.active);
  const current = useThree((state) => state.performance.current);
  const initialDpr = useThree((state) => state.viewport.initialDpr);
  const setDpr = useThree((state) => state.setDpr);
  React107.useEffect(() => {
    const domElement = gl.domElement;
    return () => {
      if (active) setDpr(initialDpr);
      if (pixelated && domElement) domElement.style.imageRendering = "auto";
    };
  }, []);
  React107.useEffect(() => {
    setDpr(current * initialDpr);
    if (pixelated && gl.domElement) gl.domElement.style.imageRendering = current === 1 ? "auto" : "pixelated";
  }, [current]);
  return null;
}

// node_modules/@react-three/drei/core/AdaptiveEvents.js
var React108 = __toESM(require_react());
function AdaptiveEvents() {
  const get = useThree((state) => state.get);
  const setEvents = useThree((state) => state.setEvents);
  const current = useThree((state) => state.performance.current);
  React108.useEffect(() => {
    const enabled = get().events.enabled;
    return () => setEvents({
      enabled
    });
  }, []);
  React108.useEffect(() => setEvents({
    enabled: current === 1
  }), [current]);
  return null;
}

// node_modules/@react-three/drei/core/PerformanceMonitor.js
var React109 = __toESM(require_react());
var import_react16 = __toESM(require_react());
var context8 = (0, import_react16.createContext)(null);
function PerformanceMonitor({
  iterations = 10,
  ms: ms2 = 250,
  threshold = 0.75,
  step = 0.1,
  factor: _factor = 0.5,
  flipflops = Infinity,
  bounds = (refreshrate) => refreshrate > 100 ? [60, 100] : [40, 60],
  onIncline,
  onDecline,
  onChange,
  onFallback,
  children
}) {
  const decimalPlacesRatio = Math.pow(10, 0);
  const [api, _2] = (0, import_react16.useState)(() => ({
    fps: 0,
    index: 0,
    factor: _factor,
    flipped: 0,
    refreshrate: 0,
    fallback: false,
    frames: [],
    averages: [],
    subscriptions: /* @__PURE__ */ new Map(),
    subscribe: (ref) => {
      const key = Symbol();
      api.subscriptions.set(key, ref.current);
      return () => void api.subscriptions.delete(key);
    }
  }));
  let lastFactor = 0;
  useFrame(() => {
    const {
      frames,
      averages
    } = api;
    if (api.fallback) return;
    if (averages.length < iterations) {
      frames.push(performance.now());
      const msPassed = frames[frames.length - 1] - frames[0];
      if (msPassed >= ms2) {
        api.fps = Math.round(frames.length / msPassed * 1e3 * decimalPlacesRatio) / decimalPlacesRatio;
        api.refreshrate = Math.max(api.refreshrate, api.fps);
        averages[api.index++ % iterations] = api.fps;
        if (averages.length === iterations) {
          const [lower, upper] = bounds(api.refreshrate);
          const upperBounds = averages.filter((value) => value >= upper);
          const lowerBounds = averages.filter((value) => value < lower);
          if (upperBounds.length > iterations * threshold) {
            api.factor = Math.min(1, api.factor + step);
            api.flipped++;
            if (onIncline) onIncline(api);
            api.subscriptions.forEach((value) => value.onIncline && value.onIncline(api));
          }
          if (lowerBounds.length > iterations * threshold) {
            api.factor = Math.max(0, api.factor - step);
            api.flipped++;
            if (onDecline) onDecline(api);
            api.subscriptions.forEach((value) => value.onDecline && value.onDecline(api));
          }
          if (lastFactor !== api.factor) {
            lastFactor = api.factor;
            if (onChange) onChange(api);
            api.subscriptions.forEach((value) => value.onChange && value.onChange(api));
          }
          if (api.flipped > flipflops && !api.fallback) {
            api.fallback = true;
            if (onFallback) onFallback(api);
            api.subscriptions.forEach((value) => value.onFallback && value.onFallback(api));
          }
          api.averages = [];
        }
        api.frames = [];
      }
    }
  });
  return React109.createElement(context8.Provider, {
    value: api
  }, children);
}
function usePerformanceMonitor({
  onIncline,
  onDecline,
  onChange,
  onFallback
}) {
  const api = (0, import_react16.useContext)(context8);
  const ref = (0, import_react16.useRef)({
    onIncline,
    onDecline,
    onChange,
    onFallback
  });
  (0, import_react16.useLayoutEffect)(() => {
    ref.current.onIncline = onIncline;
    ref.current.onDecline = onDecline;
    ref.current.onChange = onChange;
    ref.current.onFallback = onFallback;
  }, [onIncline, onDecline, onChange, onFallback]);
  (0, import_react16.useLayoutEffect)(() => api.subscribe(ref), [api]);
}

// node_modules/@react-three/drei/core/RenderTexture.js
var React110 = __toESM(require_react());
var RenderTexture = React110.forwardRef(({
  children,
  compute,
  width,
  height,
  samples = 8,
  renderPriority = 0,
  eventPriority = 0,
  frames = Infinity,
  stencilBuffer = false,
  depthBuffer = true,
  generateMipmaps = false,
  ...props
}, forwardRef70) => {
  const {
    size,
    viewport
  } = useThree();
  const fbo = useFBO((width || size.width) * viewport.dpr, (height || size.height) * viewport.dpr, {
    samples,
    stencilBuffer,
    depthBuffer,
    generateMipmaps
  });
  const [vScene] = React110.useState(() => new Scene());
  const uvCompute = React110.useCallback((event, state, previous) => {
    var _fbo$texture, _previous$previousRoo;
    let parent = (_fbo$texture = fbo.texture) == null ? void 0 : _fbo$texture.__r3f.parent;
    while (parent && !(parent instanceof Object3D)) {
      parent = parent.__r3f.parent;
    }
    if (!parent) return false;
    if (!previous.raycaster.camera) previous.events.compute(event, previous, (_previous$previousRoo = previous.previousRoot) == null ? void 0 : _previous$previousRoo.getState());
    const [intersection3] = previous.raycaster.intersectObject(parent);
    if (!intersection3) return false;
    const uv = intersection3.uv;
    if (!uv) return false;
    state.raycaster.setFromCamera(state.pointer.set(uv.x * 2 - 1, uv.y * 2 - 1), state.camera);
  }, []);
  React110.useImperativeHandle(forwardRef70, () => fbo.texture, [fbo]);
  return React110.createElement(React110.Fragment, null, createPortal(React110.createElement(Container, {
    renderPriority,
    frames,
    fbo
  }, children), vScene, {
    events: {
      compute: compute || uvCompute,
      priority: eventPriority
    }
  }), React110.createElement("primitive", _extends({
    object: fbo.texture
  }, props)));
});
function Container({
  frames,
  renderPriority,
  children,
  fbo
}) {
  let count = 0;
  useFrame((state) => {
    if (frames === Infinity || count < frames) {
      state.gl.setRenderTarget(fbo);
      state.gl.render(state.scene, state.camera);
      state.gl.setRenderTarget(null);
      count++;
    }
  }, renderPriority);
  return React110.createElement(React110.Fragment, null, children);
}

// node_modules/@react-three/drei/core/Mask.js
var React111 = __toESM(require_react());
var Mask = React111.forwardRef(({
  id = 1,
  colorWrite = false,
  depthWrite = false,
  ...props
}, fref) => {
  const ref = React111.useRef(null);
  const spread = React111.useMemo(() => ({
    colorWrite,
    depthWrite,
    stencilWrite: true,
    stencilRef: id,
    stencilFunc: AlwaysStencilFunc,
    stencilFail: ReplaceStencilOp,
    stencilZFail: ReplaceStencilOp,
    stencilZPass: ReplaceStencilOp
  }), [id, colorWrite, depthWrite]);
  React111.useLayoutEffect(() => {
    Object.assign(ref.current.material, spread);
  });
  React111.useImperativeHandle(fref, () => ref.current, []);
  return React111.createElement("mesh", _extends({
    ref,
    renderOrder: -id
  }, props));
});
function useMask(id, inverse = false) {
  return {
    stencilWrite: true,
    stencilRef: id,
    stencilFunc: inverse ? NotEqualStencilFunc : EqualStencilFunc,
    stencilFail: KeepStencilOp,
    stencilZFail: KeepStencilOp,
    stencilZPass: KeepStencilOp
  };
}

// node_modules/@react-three/drei/core/MeshPortalMaterial.js
var React112 = __toESM(require_react());
var PortalMaterial = shaderMaterial({
  map: null,
  resolution: new Vector2()
}, `void main() {
     gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
   }`, `uniform sampler2D map;
   uniform vec2 resolution;
   void main() {
     vec2 uv = gl_FragCoord.xy / resolution.xy;
     vec4 t = texture2D(map, uv);
     gl_FragColor = texture2D(map, uv);
     #include <tonemapping_fragment>
     #include <encodings_fragment>
   }`);
var MeshPortalMaterial = React112.forwardRef(({
  children,
  ...props
}, fref) => {
  extend({
    PortalMaterial
  });
  const ref = React112.useRef(null);
  const group = React112.useRef(null);
  const {
    size,
    events,
    viewport
  } = useThree();
  useFrame(() => {
    var _ref$current;
    let parent = (_ref$current = ref.current) == null ? void 0 : _ref$current.__r3f.parent;
    if (parent) {
      group.current.matrix.copy(parent.matrixWorld);
    }
  });
  React112.useImperativeHandle(fref, () => ref.current);
  return React112.createElement("portalMaterial", _extends({
    // @ts-ignore
    ref,
    resolution: [size.width * viewport.dpr, size.height * viewport.dpr],
    toneMapped: false
  }, props), React112.createElement(RenderTexture, {
    attach: "map",
    compute: events.compute
  }, React112.createElement("group", {
    onPointerOver: () => null,
    matrixAutoUpdate: false,
    ref: group
  }, children)));
});

// node_modules/@react-three/drei/web/View.js
var React113 = __toESM(require_react());
var isOrthographicCamera2 = (def) => def && def.isOrthographicCamera;
var col2 = new Color();
function isNonLegacyCanvasSize(size) {
  return "top" in size;
}
function computeContainerPosition(canvasSize, trackRect) {
  const {
    right,
    top,
    left: trackLeft,
    bottom: trackBottom,
    width,
    height
  } = trackRect;
  const isOffscreen = trackRect.bottom < 0 || top > canvasSize.height || right < 0 || trackRect.left > canvasSize.width;
  if (isNonLegacyCanvasSize(canvasSize)) {
    const canvasBottom = canvasSize.top + canvasSize.height;
    const bottom2 = canvasBottom - trackBottom;
    const left = trackLeft - canvasSize.left;
    return {
      position: {
        width,
        height,
        left,
        top,
        bottom: bottom2,
        right
      },
      isOffscreen
    };
  }
  const bottom = canvasSize.height - trackBottom;
  return {
    position: {
      width,
      height,
      top,
      left: trackLeft,
      bottom,
      right
    },
    isOffscreen
  };
}
function Container2({
  canvasSize,
  scene,
  index: index2,
  children,
  frames,
  rect,
  track
}) {
  const get = useThree((state) => state.get);
  const camera = useThree((state) => state.camera);
  const virtualScene = useThree((state) => state.scene);
  const setEvents = useThree((state) => state.setEvents);
  let frameCount = 0;
  useFrame((state) => {
    if (frames === Infinity || frameCount <= frames) {
      var _track$current;
      rect.current = (_track$current = track.current) == null ? void 0 : _track$current.getBoundingClientRect();
      frameCount++;
    }
    if (rect.current) {
      const {
        position: {
          left,
          bottom,
          width,
          height
        },
        isOffscreen
      } = computeContainerPosition(canvasSize, rect.current);
      const aspect = width / height;
      if (isOrthographicCamera2(camera)) {
        if (camera.left !== width / -2 || camera.right !== width / 2 || camera.top !== height / 2 || camera.bottom !== height / -2) {
          Object.assign(camera, {
            left: width / -2,
            right: width / 2,
            top: height / 2,
            bottom: height / -2
          });
          camera.updateProjectionMatrix();
        }
      } else if (camera.aspect !== aspect) {
        camera.aspect = aspect;
        camera.updateProjectionMatrix();
      }
      state.gl.setViewport(left, bottom, width, height);
      state.gl.setScissor(left, bottom, width, height);
      state.gl.setScissorTest(true);
      if (isOffscreen) {
        state.gl.getClearColor(col2);
        state.gl.setClearColor(col2, state.gl.getClearAlpha());
        state.gl.clear(true, true);
      } else {
        state.gl.render(children ? virtualScene : scene, camera);
      }
      state.gl.setScissorTest(true);
    }
  }, index2);
  React113.useEffect(() => {
    const old = get().events.connected;
    setEvents({
      connected: track.current
    });
    return () => setEvents({
      connected: old
    });
  }, []);
  React113.useEffect(() => {
    if (isNonLegacyCanvasSize(canvasSize)) {
      return;
    }
    console.warn("Detected @react-three/fiber canvas size does not include position information. <View /> may not work as expected. Upgrade to @react-three/fiber ^8.1.0 for support.\n See https://github.com/pmndrs/drei/issues/944");
  }, []);
  return React113.createElement(React113.Fragment, null, children);
}
var View = ({
  track,
  index: index2 = 1,
  frames = Infinity,
  children
}) => {
  var _rect$current, _rect$current2;
  const rect = React113.useRef(null);
  const {
    size,
    scene
  } = useThree();
  const [virtualScene] = React113.useState(() => new Scene());
  const compute = React113.useCallback((event, state) => {
    if (rect.current && track.current && event.target === track.current) {
      const {
        width,
        height,
        left,
        top
      } = rect.current;
      const x2 = event.clientX - left;
      const y2 = event.clientY - top;
      state.pointer.set(x2 / width * 2 - 1, -(y2 / height) * 2 + 1);
      state.raycaster.setFromCamera(state.pointer, state.camera);
    }
  }, [rect, track]);
  const [ready, toggle] = React113.useReducer(() => true, false);
  React113.useEffect(() => {
    var _track$current2;
    rect.current = (_track$current2 = track.current) == null ? void 0 : _track$current2.getBoundingClientRect();
    toggle();
  }, [track]);
  return React113.createElement(React113.Fragment, null, ready && createPortal(React113.createElement(Container2, {
    canvasSize: size,
    frames,
    scene,
    track,
    rect,
    index: index2
  }, children), virtualScene, {
    events: {
      compute,
      priority: index2
    },
    size: {
      width: (_rect$current = rect.current) == null ? void 0 : _rect$current.width,
      height: (_rect$current2 = rect.current) == null ? void 0 : _rect$current2.height
    }
  }));
};

// node_modules/@react-three/drei/web/pivotControls/index.js
var React118 = __toESM(require_react());

// node_modules/@react-three/drei/web/pivotControls/AxisArrow.js
var React115 = __toESM(require_react());

// node_modules/@react-three/drei/web/pivotControls/context.js
var React114 = __toESM(require_react());
var context9 = React114.createContext(null);

// node_modules/@react-three/drei/web/pivotControls/AxisArrow.js
var vec1 = new Vector3();
var vec2 = new Vector3();
var calculateOffset = (clickPoint, normal2, rayStart, rayDir) => {
  const e1 = normal2.dot(normal2);
  const e22 = normal2.dot(clickPoint) - normal2.dot(rayStart);
  const e3 = normal2.dot(rayDir);
  if (e3 === 0) {
    return -e22 / e1;
  }
  vec1.copy(rayDir).multiplyScalar(e1 / e3).sub(normal2);
  vec2.copy(rayDir).multiplyScalar(e22 / e3).add(rayStart).sub(clickPoint);
  const offset = -vec1.dot(vec2) / vec1.dot(vec1);
  return offset;
};
var upV = new Vector3(0, 1, 0);
var offsetMatrix = new Matrix4();
var AxisArrow = ({
  direction,
  axis
}) => {
  const {
    translation: translation2,
    translationLimits,
    annotations,
    annotationsClass,
    depthTest,
    scale: scale4,
    lineWidth,
    fixed,
    axisColors,
    hoveredColor,
    opacity,
    onDragStart,
    onDrag,
    onDragEnd,
    userData
  } = React115.useContext(context9);
  const camControls = useThree((state) => state.controls);
  const divRef = React115.useRef(null);
  const objRef = React115.useRef(null);
  const clickInfo = React115.useRef(null);
  const offset0 = React115.useRef(0);
  const [isHovered, setIsHovered] = React115.useState(false);
  const onPointerDown = React115.useCallback((e3) => {
    if (annotations) {
      divRef.current.innerText = `${translation2.current[axis].toFixed(2)}`;
      divRef.current.style.display = "block";
    }
    e3.stopPropagation();
    const rotation2 = new Matrix4().extractRotation(objRef.current.matrixWorld);
    const clickPoint = e3.point.clone();
    const origin2 = new Vector3().setFromMatrixPosition(objRef.current.matrixWorld);
    const dir = direction.clone().applyMatrix4(rotation2).normalize();
    clickInfo.current = {
      clickPoint,
      dir
    };
    offset0.current = translation2.current[axis];
    onDragStart({
      component: "Arrow",
      axis,
      origin: origin2,
      directions: [dir]
    });
    camControls && (camControls.enabled = false);
    e3.target.setPointerCapture(e3.pointerId);
  }, [annotations, direction, camControls, onDragStart, translation2, axis]);
  const onPointerMove = React115.useCallback((e3) => {
    e3.stopPropagation();
    if (!isHovered) setIsHovered(true);
    if (clickInfo.current) {
      const {
        clickPoint,
        dir
      } = clickInfo.current;
      const [min, max] = (translationLimits == null ? void 0 : translationLimits[axis]) || [void 0, void 0];
      let offset = calculateOffset(clickPoint, dir, e3.ray.origin, e3.ray.direction);
      if (min !== void 0) {
        offset = Math.max(offset, min - offset0.current);
      }
      if (max !== void 0) {
        offset = Math.min(offset, max - offset0.current);
      }
      translation2.current[axis] = offset0.current + offset;
      if (annotations) {
        divRef.current.innerText = `${translation2.current[axis].toFixed(2)}`;
      }
      offsetMatrix.makeTranslation(dir.x * offset, dir.y * offset, dir.z * offset);
      onDrag(offsetMatrix);
    }
  }, [annotations, onDrag, isHovered, translation2, translationLimits, axis]);
  const onPointerUp = React115.useCallback((e3) => {
    if (annotations) {
      divRef.current.style.display = "none";
    }
    e3.stopPropagation();
    clickInfo.current = null;
    onDragEnd();
    camControls && (camControls.enabled = true);
    e3.target.releasePointerCapture(e3.pointerId);
  }, [annotations, camControls, onDragEnd]);
  const onPointerOut = React115.useCallback((e3) => {
    e3.stopPropagation();
    setIsHovered(false);
  }, []);
  const {
    cylinderLength,
    coneWidth,
    coneLength,
    matrixL
  } = React115.useMemo(() => {
    const coneWidth2 = fixed ? lineWidth / scale4 * 1.6 : scale4 / 20;
    const coneLength2 = fixed ? 0.2 : scale4 / 5;
    const cylinderLength2 = fixed ? 1 - coneLength2 : scale4 - coneLength2;
    const quaternion = new Quaternion().setFromUnitVectors(upV, direction.clone().normalize());
    const matrixL2 = new Matrix4().makeRotationFromQuaternion(quaternion);
    return {
      cylinderLength: cylinderLength2,
      coneWidth: coneWidth2,
      coneLength: coneLength2,
      matrixL: matrixL2
    };
  }, [direction, scale4, lineWidth, fixed]);
  const color_ = isHovered ? hoveredColor : axisColors[axis];
  return React115.createElement("group", {
    ref: objRef
  }, React115.createElement("group", {
    matrix: matrixL,
    matrixAutoUpdate: false,
    onPointerDown,
    onPointerMove,
    onPointerUp,
    onPointerOut
  }, annotations && React115.createElement(Html, {
    position: [0, -coneLength, 0]
  }, React115.createElement("div", {
    style: {
      display: "none",
      background: "#151520",
      color: "white",
      padding: "6px 8px",
      borderRadius: 7,
      whiteSpace: "nowrap"
    },
    className: annotationsClass,
    ref: divRef
  })), React115.createElement("mesh", {
    visible: false,
    position: [0, (cylinderLength + coneLength) / 2, 0],
    userData
  }, React115.createElement("cylinderGeometry", {
    args: [coneWidth * 1.4, coneWidth * 1.4, cylinderLength + coneLength, 8, 1]
  })), React115.createElement(Line, {
    transparent: true,
    raycast: () => null,
    depthTest,
    points: [0, 0, 0, 0, cylinderLength, 0],
    lineWidth,
    color: color_,
    opacity,
    polygonOffset: true,
    renderOrder: 1,
    polygonOffsetFactor: -10,
    fog: false
  }), React115.createElement("mesh", {
    raycast: () => null,
    position: [0, cylinderLength + coneLength / 2, 0],
    renderOrder: 500
  }, React115.createElement("coneGeometry", {
    args: [coneWidth, coneLength, 24, 1]
  }), React115.createElement("meshBasicMaterial", {
    transparent: true,
    depthTest,
    color: color_,
    opacity,
    polygonOffset: true,
    polygonOffsetFactor: -10,
    fog: false
  }))));
};

// node_modules/@react-three/drei/web/pivotControls/PlaneSlider.js
var React116 = __toESM(require_react());
var decomposeIntoBasis = (e1, e22, offset) => {
  const i1 = Math.abs(e1.x) >= Math.abs(e1.y) && Math.abs(e1.x) >= Math.abs(e1.z) ? 0 : Math.abs(e1.y) >= Math.abs(e1.x) && Math.abs(e1.y) >= Math.abs(e1.z) ? 1 : 2;
  const e2DegrowthOrder = [0, 1, 2].sort((a6, b5) => Math.abs(e22.getComponent(b5)) - Math.abs(e22.getComponent(a6)));
  const i22 = i1 === e2DegrowthOrder[0] ? e2DegrowthOrder[1] : e2DegrowthOrder[0];
  const a1 = e1.getComponent(i1);
  const a22 = e1.getComponent(i22);
  const b1 = e22.getComponent(i1);
  const b22 = e22.getComponent(i22);
  const c1 = offset.getComponent(i1);
  const c22 = offset.getComponent(i22);
  const y2 = (c22 - c1 * (a22 / a1)) / (b22 - b1 * (a22 / a1));
  const x2 = (c1 - y2 * b1) / a1;
  return [x2, y2];
};
var ray2 = new Ray();
var intersection = new Vector3();
var offsetMatrix2 = new Matrix4();
var PlaneSlider = ({
  dir1,
  dir2,
  axis
}) => {
  const {
    translation: translation2,
    translationLimits,
    annotations,
    annotationsClass,
    depthTest,
    scale: scale4,
    lineWidth,
    fixed,
    axisColors,
    hoveredColor,
    opacity,
    onDragStart,
    onDrag,
    onDragEnd,
    userData
  } = React116.useContext(context9);
  const camControls = useThree((state) => state.controls);
  const divRef = React116.useRef(null);
  const objRef = React116.useRef(null);
  const clickInfo = React116.useRef(null);
  const offsetX0 = React116.useRef(0);
  const offsetY0 = React116.useRef(0);
  const [isHovered, setIsHovered] = React116.useState(false);
  const onPointerDown = React116.useCallback((e3) => {
    if (annotations) {
      divRef.current.innerText = `${translation2.current[(axis + 1) % 3].toFixed(2)}, ${translation2.current[(axis + 2) % 3].toFixed(2)}`;
      divRef.current.style.display = "block";
    }
    e3.stopPropagation();
    const clickPoint = e3.point.clone();
    const origin2 = new Vector3().setFromMatrixPosition(objRef.current.matrixWorld);
    const e1 = new Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 0).normalize();
    const e22 = new Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 1).normalize();
    const normal2 = new Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 2).normalize();
    const plane = new Plane().setFromNormalAndCoplanarPoint(normal2, origin2);
    clickInfo.current = {
      clickPoint,
      e1,
      e2: e22,
      plane
    };
    offsetX0.current = translation2.current[(axis + 1) % 3];
    offsetY0.current = translation2.current[(axis + 2) % 3];
    onDragStart({
      component: "Slider",
      axis,
      origin: origin2,
      directions: [e1, e22, normal2]
    });
    camControls && (camControls.enabled = false);
    e3.target.setPointerCapture(e3.pointerId);
  }, [annotations, camControls, onDragStart, axis]);
  const onPointerMove = React116.useCallback((e3) => {
    e3.stopPropagation();
    if (!isHovered) setIsHovered(true);
    if (clickInfo.current) {
      const {
        clickPoint,
        e1,
        e2: e22,
        plane
      } = clickInfo.current;
      const [minX, maxX] = (translationLimits == null ? void 0 : translationLimits[(axis + 1) % 3]) || [void 0, void 0];
      const [minY, maxY] = (translationLimits == null ? void 0 : translationLimits[(axis + 2) % 3]) || [void 0, void 0];
      ray2.copy(e3.ray);
      ray2.intersectPlane(plane, intersection);
      ray2.direction.negate();
      ray2.intersectPlane(plane, intersection);
      intersection.sub(clickPoint);
      let [offsetX, offsetY] = decomposeIntoBasis(e1, e22, intersection);
      if (minX !== void 0) {
        offsetX = Math.max(offsetX, minX - offsetX0.current);
      }
      if (maxX !== void 0) {
        offsetX = Math.min(offsetX, maxX - offsetX0.current);
      }
      if (minY !== void 0) {
        offsetY = Math.max(offsetY, minY - offsetY0.current);
      }
      if (maxY !== void 0) {
        offsetY = Math.min(offsetY, maxY - offsetY0.current);
      }
      translation2.current[(axis + 1) % 3] = offsetX0.current + offsetX;
      translation2.current[(axis + 2) % 3] = offsetY0.current + offsetY;
      if (annotations) {
        divRef.current.innerText = `${translation2.current[(axis + 1) % 3].toFixed(2)}, ${translation2.current[(axis + 2) % 3].toFixed(2)}`;
      }
      offsetMatrix2.makeTranslation(offsetX * e1.x + offsetY * e22.x, offsetX * e1.y + offsetY * e22.y, offsetX * e1.z + offsetY * e22.z);
      onDrag(offsetMatrix2);
    }
  }, [annotations, onDrag, isHovered, translation2, translationLimits, axis]);
  const onPointerUp = React116.useCallback((e3) => {
    if (annotations) {
      divRef.current.style.display = "none";
    }
    e3.stopPropagation();
    clickInfo.current = null;
    onDragEnd();
    camControls && (camControls.enabled = true);
    e3.target.releasePointerCapture(e3.pointerId);
  }, [annotations, camControls, onDragEnd]);
  const onPointerOut = React116.useCallback((e3) => {
    e3.stopPropagation();
    setIsHovered(false);
  }, []);
  const matrixL = React116.useMemo(() => {
    const dir1N = dir1.clone().normalize();
    const dir2N = dir2.clone().normalize();
    return new Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N));
  }, [dir1, dir2]);
  const pos1 = fixed ? 1 / 7 : scale4 / 7;
  const length3 = fixed ? 0.225 : scale4 * 0.225;
  const color = isHovered ? hoveredColor : axisColors[axis];
  const points = React116.useMemo(() => [new Vector3(0, 0, 0), new Vector3(0, length3, 0), new Vector3(length3, length3, 0), new Vector3(length3, 0, 0), new Vector3(0, 0, 0)], [length3]);
  return React116.createElement("group", {
    ref: objRef,
    matrix: matrixL,
    matrixAutoUpdate: false
  }, annotations && React116.createElement(Html, {
    position: [0, 0, 0]
  }, React116.createElement("div", {
    style: {
      display: "none",
      background: "#151520",
      color: "white",
      padding: "6px 8px",
      borderRadius: 7,
      whiteSpace: "nowrap"
    },
    className: annotationsClass,
    ref: divRef
  })), React116.createElement("group", {
    position: [pos1 * 1.7, pos1 * 1.7, 0]
  }, React116.createElement("mesh", {
    visible: true,
    onPointerDown,
    onPointerMove,
    onPointerUp,
    onPointerOut,
    scale: length3,
    userData
  }, React116.createElement("planeGeometry", null), React116.createElement("meshBasicMaterial", {
    transparent: true,
    depthTest,
    color,
    polygonOffset: true,
    polygonOffsetFactor: -10,
    side: DoubleSide,
    fog: false
  })), React116.createElement(Line, {
    position: [-length3 / 2, -length3 / 2, 0],
    transparent: true,
    depthTest,
    points,
    lineWidth,
    color,
    opacity,
    polygonOffset: true,
    polygonOffsetFactor: -10,
    userData,
    fog: false
  })));
};

// node_modules/@react-three/drei/web/pivotControls/AxisRotator.js
var React117 = __toESM(require_react());
var import_lodash4 = __toESM(require_lodash3());
var clickDir = new Vector3();
var intersectionDir = new Vector3();
var toDegrees = (radians) => radians * 180 / Math.PI;
var toRadians = (degrees) => degrees * Math.PI / 180;
var calculateAngle = (clickPoint, intersectionPoint2, origin2, e1, e22) => {
  clickDir.copy(clickPoint).sub(origin2);
  intersectionDir.copy(intersectionPoint2).sub(origin2);
  const dote1e1 = e1.dot(e1);
  const dote2e2 = e22.dot(e22);
  const uClick = clickDir.dot(e1) / dote1e1;
  const vClick = clickDir.dot(e22) / dote2e2;
  const uIntersection = intersectionDir.dot(e1) / dote1e1;
  const vIntersection = intersectionDir.dot(e22) / dote2e2;
  const angleClick = Math.atan2(vClick, uClick);
  const angleIntersection = Math.atan2(vIntersection, uIntersection);
  return angleIntersection - angleClick;
};
var fmod = (num, denom) => {
  let k2 = Math.floor(num / denom);
  k2 = k2 < 0 ? k2 + 1 : k2;
  return num - k2 * denom;
};
var minimizeAngle = (angle) => {
  let result = fmod(angle, 2 * Math.PI);
  if (Math.abs(result) < 1e-6) {
    return 0;
  }
  if (result < 0) {
    result += 2 * Math.PI;
  }
  return result;
};
var rotMatrix = new Matrix4();
var posNew = new Vector3();
var ray3 = new Ray();
var intersection2 = new Vector3();
var AxisRotator = ({
  dir1,
  dir2,
  axis
}) => {
  const {
    rotationLimits,
    annotations,
    annotationsClass,
    depthTest,
    scale: scale4,
    lineWidth,
    fixed,
    axisColors,
    hoveredColor,
    opacity,
    onDragStart,
    onDrag,
    onDragEnd,
    userData
  } = React117.useContext(context9);
  const camControls = useThree((state) => state.controls);
  const divRef = React117.useRef(null);
  const objRef = React117.useRef(null);
  const angle0 = React117.useRef(0);
  const angle = React117.useRef(0);
  const clickInfo = React117.useRef(null);
  const [isHovered, setIsHovered] = React117.useState(false);
  const onPointerDown = React117.useCallback((e3) => {
    if (annotations) {
      divRef.current.innerText = `${toDegrees(angle.current).toFixed(0)}º`;
      divRef.current.style.display = "block";
    }
    e3.stopPropagation();
    const clickPoint = e3.point.clone();
    const origin2 = new Vector3().setFromMatrixPosition(objRef.current.matrixWorld);
    const e1 = new Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 0).normalize();
    const e22 = new Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 1).normalize();
    const normal2 = new Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 2).normalize();
    const plane = new Plane().setFromNormalAndCoplanarPoint(normal2, origin2);
    clickInfo.current = {
      clickPoint,
      origin: origin2,
      e1,
      e2: e22,
      normal: normal2,
      plane
    };
    onDragStart({
      component: "Rotator",
      axis,
      origin: origin2,
      directions: [e1, e22, normal2]
    });
    camControls && (camControls.enabled = false);
    e3.target.setPointerCapture(e3.pointerId);
  }, [annotations, camControls, onDragStart, axis]);
  const onPointerMove = React117.useCallback((e3) => {
    e3.stopPropagation();
    if (!isHovered) setIsHovered(true);
    if (clickInfo.current) {
      const {
        clickPoint,
        origin: origin2,
        e1,
        e2: e22,
        normal: normal2,
        plane
      } = clickInfo.current;
      const [min, max] = (rotationLimits == null ? void 0 : rotationLimits[axis]) || [void 0, void 0];
      ray3.copy(e3.ray);
      ray3.intersectPlane(plane, intersection2);
      ray3.direction.negate();
      ray3.intersectPlane(plane, intersection2);
      let deltaAngle2 = calculateAngle(clickPoint, intersection2, origin2, e1, e22);
      let degrees = toDegrees(deltaAngle2);
      if (e3.shiftKey) {
        degrees = Math.round(degrees / 10) * 10;
        deltaAngle2 = toRadians(degrees);
      }
      if (min !== void 0 && max !== void 0 && max - min < 2 * Math.PI) {
        deltaAngle2 = minimizeAngle(deltaAngle2);
        deltaAngle2 = deltaAngle2 > Math.PI ? deltaAngle2 - 2 * Math.PI : deltaAngle2;
        deltaAngle2 = (0, import_lodash4.default)(deltaAngle2, min - angle0.current, max - angle0.current);
        angle.current = angle0.current + deltaAngle2;
      } else {
        angle.current = minimizeAngle(angle0.current + deltaAngle2);
        angle.current = angle.current > Math.PI ? angle.current - 2 * Math.PI : angle.current;
      }
      if (annotations) {
        degrees = toDegrees(angle.current);
        divRef.current.innerText = `${degrees.toFixed(0)}º`;
      }
      rotMatrix.makeRotationAxis(normal2, deltaAngle2);
      posNew.copy(origin2).applyMatrix4(rotMatrix).sub(origin2).negate();
      rotMatrix.setPosition(posNew);
      onDrag(rotMatrix);
    }
  }, [annotations, onDrag, isHovered, rotationLimits, axis]);
  const onPointerUp = React117.useCallback((e3) => {
    if (annotations) {
      divRef.current.style.display = "none";
    }
    e3.stopPropagation();
    angle0.current = angle.current;
    clickInfo.current = null;
    onDragEnd();
    camControls && (camControls.enabled = true);
    e3.target.releasePointerCapture(e3.pointerId);
  }, [annotations, camControls, onDragEnd]);
  const onPointerOut = React117.useCallback((e3) => {
    e3.stopPropagation();
    setIsHovered(false);
  }, []);
  const matrixL = React117.useMemo(() => {
    const dir1N = dir1.clone().normalize();
    const dir2N = dir2.clone().normalize();
    return new Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N));
  }, [dir1, dir2]);
  const r3 = fixed ? 0.65 : scale4 * 0.65;
  const arc = React117.useMemo(() => {
    const segments = 32;
    const points = [];
    for (let j2 = 0; j2 <= segments; j2++) {
      const angle2 = j2 * (Math.PI / 2) / segments;
      points.push(new Vector3(Math.cos(angle2) * r3, Math.sin(angle2) * r3, 0));
    }
    return points;
  }, [r3]);
  return React117.createElement("group", {
    ref: objRef,
    onPointerDown,
    onPointerMove,
    onPointerUp,
    onPointerOut,
    matrix: matrixL,
    matrixAutoUpdate: false
  }, annotations && React117.createElement(Html, {
    position: [r3, r3, 0]
  }, React117.createElement("div", {
    style: {
      display: "none",
      background: "#151520",
      color: "white",
      padding: "6px 8px",
      borderRadius: 7,
      whiteSpace: "nowrap"
    },
    className: annotationsClass,
    ref: divRef
  })), React117.createElement(Line, {
    points: arc,
    lineWidth: lineWidth * 4,
    visible: false,
    userData
  }), React117.createElement(Line, {
    transparent: true,
    raycast: () => null,
    depthTest,
    points: arc,
    lineWidth,
    color: isHovered ? hoveredColor : axisColors[axis],
    opacity,
    polygonOffset: true,
    polygonOffsetFactor: -10,
    fog: false
  }));
};

// node_modules/@react-three/drei/web/pivotControls/index.js
var tV0 = new Vector3();
var tV1 = new Vector3();
var tV2 = new Vector3();
var getPoint2 = (point3, camera, size) => {
  const widthHalf = size.width / 2;
  const heightHalf = size.height / 2;
  camera.updateMatrixWorld(false);
  const vector = point3.project(camera);
  vector.x = vector.x * widthHalf + widthHalf;
  vector.y = -(vector.y * heightHalf) + heightHalf;
  return vector;
};
var getPoint3 = (point2, camera, size, zValue = 1) => {
  const vector = tV0.set(point2.x / size.width * 2 - 1, -(point2.y / size.height) * 2 + 1, zValue);
  vector.unproject(camera);
  return vector;
};
var calculateScaleFactor = (point3, radiusPx, camera, size) => {
  const point2 = getPoint2(tV2.copy(point3), camera, size);
  let scale4 = 0;
  for (let i4 = 0; i4 < 2; ++i4) {
    const point2off = tV1.copy(point2).setComponent(i4, point2.getComponent(i4) + radiusPx);
    const point3off = getPoint3(point2off, camera, size, point2off.z);
    scale4 = Math.max(scale4, point3.distanceTo(point3off));
  }
  return scale4;
};
var mL0 = new Matrix4();
var mW0 = new Matrix4();
var mP = new Matrix4();
var mPInv = new Matrix4();
var mW = new Matrix4();
var mL = new Matrix4();
var mL0Inv = new Matrix4();
var mdL = new Matrix4();
var bb = new Box3();
var bbObj = new Box3();
var vCenter = new Vector3();
var vSize = new Vector3();
var vAnchorOffset = new Vector3();
var vPosition = new Vector3();
var xDir = new Vector3(1, 0, 0);
var yDir = new Vector3(0, 1, 0);
var zDir = new Vector3(0, 0, 1);
var PivotControls = React118.forwardRef(({
  matrix: matrix3,
  onDragStart,
  onDrag,
  onDragEnd,
  autoTransform = true,
  anchor,
  disableAxes = false,
  disableSliders = false,
  disableRotations = false,
  activeAxes = [true, true, true],
  offset = [0, 0, 0],
  rotation: rotation2 = [0, 0, 0],
  scale: scale4 = 1,
  lineWidth = 4,
  fixed = false,
  translationLimits,
  rotationLimits,
  depthTest = true,
  axisColors = ["#ff2060", "#20df80", "#2080ff"],
  hoveredColor = "#ffff40",
  annotations = false,
  annotationsClass,
  opacity = 1,
  visible = true,
  userData,
  children,
  ...props
}, fRef) => {
  const invalidate = useThree((state) => state.invalidate);
  const parentRef = React118.useRef(null);
  const ref = React118.useRef(null);
  const gizmoRef = React118.useRef(null);
  const childrenRef = React118.useRef(null);
  const translation2 = React118.useRef([0, 0, 0]);
  React118.useLayoutEffect(() => {
    if (!anchor) return;
    childrenRef.current.updateWorldMatrix(true, true);
    mPInv.copy(childrenRef.current.matrixWorld).invert();
    bb.makeEmpty();
    childrenRef.current.traverse((obj) => {
      if (!obj.geometry) return;
      if (!obj.geometry.boundingBox) obj.geometry.computeBoundingBox();
      mL.copy(obj.matrixWorld).premultiply(mPInv);
      bbObj.copy(obj.geometry.boundingBox);
      bbObj.applyMatrix4(mL);
      bb.union(bbObj);
    });
    vCenter.copy(bb.max).add(bb.min).multiplyScalar(0.5);
    vSize.copy(bb.max).sub(bb.min).multiplyScalar(0.5);
    vAnchorOffset.copy(vSize).multiply(new Vector3(...anchor)).add(vCenter);
    vPosition.set(...offset).add(vAnchorOffset);
    gizmoRef.current.position.copy(vPosition);
    invalidate();
  });
  const config = React118.useMemo(() => ({
    onDragStart: (props2) => {
      mL0.copy(ref.current.matrix);
      mW0.copy(ref.current.matrixWorld);
      onDragStart && onDragStart(props2);
      invalidate();
    },
    onDrag: (mdW) => {
      mP.copy(parentRef.current.matrixWorld);
      mPInv.copy(mP).invert();
      mW.copy(mW0).premultiply(mdW);
      mL.copy(mW).premultiply(mPInv);
      mL0Inv.copy(mL0).invert();
      mdL.copy(mL).multiply(mL0Inv);
      if (autoTransform) ref.current.matrix.copy(mL);
      onDrag && onDrag(mL, mdL, mW, mdW);
      invalidate();
    },
    onDragEnd: () => {
      if (onDragEnd) onDragEnd();
      invalidate();
    },
    translation: translation2,
    translationLimits,
    rotationLimits,
    axisColors,
    hoveredColor,
    opacity,
    scale: scale4,
    lineWidth,
    fixed,
    depthTest,
    userData,
    annotations,
    annotationsClass
  }), [onDragStart, onDrag, onDragEnd, translation2, translationLimits, rotationLimits, depthTest, scale4, lineWidth, fixed, ...axisColors, hoveredColor, opacity, userData, autoTransform, annotations, annotationsClass]);
  const vec = new Vector3();
  useFrame((state) => {
    if (fixed) {
      const sf = calculateScaleFactor(gizmoRef.current.getWorldPosition(vec), scale4, state.camera, state.size);
      if (gizmoRef.current) {
        var _gizmoRef$current, _gizmoRef$current2, _gizmoRef$current3;
        if (((_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.scale.x) !== sf || ((_gizmoRef$current2 = gizmoRef.current) == null ? void 0 : _gizmoRef$current2.scale.y) !== sf || ((_gizmoRef$current3 = gizmoRef.current) == null ? void 0 : _gizmoRef$current3.scale.z) !== sf) {
          gizmoRef.current.scale.setScalar(sf);
          state.invalidate();
        }
      }
    }
  });
  React118.useImperativeHandle(fRef, () => ref.current, []);
  React118.useLayoutEffect(() => {
    if (matrix3 && matrix3 instanceof Matrix4) ref.current.matrix = matrix3;
  }, [matrix3]);
  return React118.createElement(context9.Provider, {
    value: config
  }, React118.createElement("group", {
    ref: parentRef
  }, React118.createElement("group", _extends({
    ref,
    matrix: matrix3,
    matrixAutoUpdate: false
  }, props), React118.createElement("group", {
    visible,
    ref: gizmoRef,
    position: offset,
    rotation: rotation2
  }, !disableAxes && activeAxes[0] && React118.createElement(AxisArrow, {
    axis: 0,
    direction: xDir
  }), !disableAxes && activeAxes[1] && React118.createElement(AxisArrow, {
    axis: 1,
    direction: yDir
  }), !disableAxes && activeAxes[2] && React118.createElement(AxisArrow, {
    axis: 2,
    direction: zDir
  }), !disableSliders && activeAxes[0] && activeAxes[1] && React118.createElement(PlaneSlider, {
    axis: 2,
    dir1: xDir,
    dir2: yDir
  }), !disableSliders && activeAxes[0] && activeAxes[2] && React118.createElement(PlaneSlider, {
    axis: 1,
    dir1: zDir,
    dir2: xDir
  }), !disableSliders && activeAxes[2] && activeAxes[1] && React118.createElement(PlaneSlider, {
    axis: 0,
    dir1: yDir,
    dir2: zDir
  }), !disableRotations && activeAxes[0] && activeAxes[1] && React118.createElement(AxisRotator, {
    axis: 2,
    dir1: xDir,
    dir2: yDir
  }), !disableRotations && activeAxes[0] && activeAxes[2] && React118.createElement(AxisRotator, {
    axis: 1,
    dir1: zDir,
    dir2: xDir
  }), !disableRotations && activeAxes[2] && activeAxes[1] && React118.createElement(AxisRotator, {
    axis: 0,
    dir1: yDir,
    dir2: zDir
  })), React118.createElement("group", {
    ref: childrenRef
  }, children))));
});

export {
  Html,
  CycleRaycast,
  useCursor,
  useProgress,
  Loader,
  useScroll,
  ScrollControls,
  Scroll,
  PresentationControls,
  KeyboardControls,
  useKeyboardControls,
  Select,
  useSelect,
  Billboard,
  ScreenSpace,
  Line,
  QuadraticBezierLine,
  CubicBezierLine,
  CatmullRomLine,
  PositionalAudio,
  Text2 as Text,
  useFont,
  Text3D,
  isWebGL2Available,
  Effects,
  GradientTexture,
  shaderMaterial,
  IsObject,
  useTexture,
  Image,
  Edges,
  useTrail,
  Trail,
  useSurfaceSampler,
  Sampler,
  ComputedAttribute,
  Clone,
  MarchingCubes2 as MarchingCubes,
  MarchingCube,
  MarchingPlane,
  Decal,
  Svg,
  useGLTF,
  Gltf,
  AsciiRenderer,
  useFBO,
  OrthographicCamera2 as OrthographicCamera,
  PerspectiveCamera2 as PerspectiveCamera,
  useCubeCamera,
  CubeCamera2 as CubeCamera,
  DeviceOrientationControls2 as DeviceOrientationControls,
  FlyControls2 as FlyControls,
  MapControls2 as MapControls,
  OrbitControls2 as OrbitControls,
  TrackballControls2 as TrackballControls,
  ArcballControls2 as ArcballControls,
  TransformControls2 as TransformControls,
  PointerLockControls2 as PointerLockControls,
  FirstPersonControls2 as FirstPersonControls,
  CameraControls2 as CameraControls,
  useVideoTexture,
  Facemesh,
  FacemeshEyeDefaults,
  FacemeshEye,
  FacemeshDatas,
  FaceLandmarkerDefaults,
  FaceLandmarker,
  useFaceLandmarker,
  FaceControls,
  useFaceControls,
  Hud,
  useGizmoContext,
  GizmoHelper,
  GizmoViewcube,
  GizmoViewport,
  Grid,
  useCubeTexture,
  useFBX,
  useKTX2,
  Stats,
  useDepthBuffer,
  useAspect,
  useCamera,
  useDetectGPU,
  useHelper,
  useBVH,
  Bvh,
  useContextBridge,
  useAnimations,
  useIntersect,
  useBoxProjectedEnv,
  BBAnchor,
  useTrailTexture,
  Center,
  Example,
  SpriteAnimator,
  CurveModifier,
  MeshDistortMaterial,
  MeshWobbleMaterial,
  MeshReflectorMaterial2 as MeshReflectorMaterial,
  MeshRefractionMaterial2 as MeshRefractionMaterial,
  MeshTransmissionMaterial,
  MeshDiscardMaterial,
  PointMaterialImpl,
  PointMaterial,
  SoftShadows,
  Box,
  Circle,
  Cone,
  Cylinder,
  Sphere2 as Sphere,
  Plane2 as Plane,
  Tube,
  Torus,
  TorusKnot,
  Tetrahedron,
  Ring,
  Polyhedron,
  Icosahedron,
  Octahedron,
  Dodecahedron,
  Extrude,
  Lathe,
  Capsule,
  Shape2 as Shape,
  RoundedBox,
  ScreenQuad,
  Resize,
  Bounds,
  useBounds,
  CameraShake,
  Float,
  useEnvironment,
  EnvironmentMap,
  EnvironmentCube,
  EnvironmentPortal,
  Environment,
  ContactShadows,
  accumulativeContext,
  AccumulativeShadows,
  RandomizedLight,
  Stage,
  Backdrop,
  Shadow,
  Caustics,
  Reflector,
  SpotLightShadow,
  SpotLight,
  Lightformer,
  calcPosFromAngles,
  Sky2 as Sky,
  Stars,
  Cloud,
  Sparkles,
  useMatcapTexture,
  useNormalTexture,
  Wireframe,
  PositionPoint,
  Point,
  PointsBuffer,
  Points,
  Instance,
  Instances,
  Merged,
  Segments,
  SegmentObject,
  Segment,
  Detailed,
  Preload,
  BakeShadows,
  meshBounds,
  AdaptiveDpr,
  AdaptiveEvents,
  PerformanceMonitor,
  usePerformanceMonitor,
  RenderTexture,
  Mask,
  useMask,
  MeshPortalMaterial,
  View,
  calculateScaleFactor,
  PivotControls
};
/*! Bundled license information:

troika-three-text/dist/troika-three-text.esm.js:
  (*!
  Custom build of Typr.ts (https://github.com/fredli74/Typr.ts) for use in Troika text rendering.
  Original MIT license applies: https://github.com/fredli74/Typr.ts/blob/master/LICENSE
  *)
  (*!
  Custom bundle of woff2otf (https://github.com/arty-name/woff2otf) with fflate
  (https://github.com/101arrowz/fflate) for use in Troika text rendering. 
  Original licenses apply: 
  - fflate: https://github.com/101arrowz/fflate/blob/master/LICENSE (MIT)
  - woff2otf.js: https://github.com/arty-name/woff2otf/blob/master/woff2otf.js (Apache2)
  *)

camera-controls/dist/camera-controls.module.js:
  (*!
   * camera-controls
   * https://github.com/yomotsu/camera-controls
   * (c) 2017 @yomotsu
   * Released under the MIT License.
   *)
*/
//# sourceMappingURL=chunk-F4KIXIPW.js.map
